[
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/math/index.html",
            "title": "Math tutorial index"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/math/vector_math.html",
            "title": "Vector math"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/math/vectors_advanced.html",
            "title": "Advanced vector math"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "Ending corner. This is calculated as [code]position + size[/code]. Setting this value will change the size.",
            "setter": "",
            "name": "end",
            "getter": "",
            "type": "Vector3"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "Beginning corner. Typically has values lower than [member end].",
            "setter": "",
            "name": "position",
            "getter": "",
            "type": "Vector3"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "Size from [member position] to [member end]. Typically, all components are positive.\n\t\t\tIf the size is negative, you can use [method abs] to fix it.",
            "setter": "",
            "name": "size",
            "getter": "",
            "type": "Vector3"
          }
        ]
      },
      "methods": {
        "method": [
          {
            "return": {
              "type": "AABB"
            },
            "argument": [
              {
                "name": "position",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "size",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "AABB",
            "description": "Constructs an [AABB] from a position and size."
          },
          {
            "return": {
              "type": "AABB"
            },
            "name": "abs",
            "description": "Returns an AABB with equivalent position and size, modified so that the most-negative corner is the origin and the size is positive."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "with",
              "type": "AABB",
              "index": "0"
            },
            "name": "encloses",
            "description": "Returns [code]true[/code] if this [AABB] completely encloses another one."
          },
          {
            "return": {
              "type": "AABB"
            },
            "argument": {
              "name": "to_point",
              "type": "Vector3",
              "index": "0"
            },
            "name": "expand",
            "description": "Returns this [AABB] expanded to include a given point."
          },
          {
            "return": {
              "type": "float"
            },
            "name": "get_area",
            "description": "Returns the volume of the [AABB]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "get_endpoint",
            "description": "Gets the position of the 8 endpoints of the [AABB] in space."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "name": "get_longest_axis",
            "description": "Returns the normalized longest axis of the [AABB]."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_longest_axis_index",
            "description": "Returns the index of the longest axis of the [AABB] (according to [Vector3]'s [code]AXIS_*[/code] constants)."
          },
          {
            "return": {
              "type": "float"
            },
            "name": "get_longest_axis_size",
            "description": "Returns the scalar length of the longest axis of the [AABB]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "name": "get_shortest_axis",
            "description": "Returns the normalized shortest axis of the [AABB]."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_shortest_axis_index",
            "description": "Returns the index of the shortest axis of the [AABB] (according to [Vector3]::AXIS* enum)."
          },
          {
            "return": {
              "type": "float"
            },
            "name": "get_shortest_axis_size",
            "description": "Returns the scalar length of the shortest axis of the [AABB]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "dir",
              "type": "Vector3",
              "index": "0"
            },
            "name": "get_support",
            "description": "Returns the support point in a given direction. This is useful for collision detection algorithms."
          },
          {
            "return": {
              "type": "AABB"
            },
            "argument": {
              "name": "by",
              "type": "float",
              "index": "0"
            },
            "name": "grow",
            "description": "Returns a copy of the [AABB] grown a given amount of units towards all the sides."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "has_no_area",
            "description": "Returns [code]true[/code] if the [AABB] is flat or empty."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "has_no_surface",
            "description": "Returns [code]true[/code] if the [AABB] is empty."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "point",
              "type": "Vector3",
              "index": "0"
            },
            "name": "has_point",
            "description": "Returns [code]true[/code] if the [AABB] contains a point."
          },
          {
            "return": {
              "type": "AABB"
            },
            "argument": {
              "name": "with",
              "type": "AABB",
              "index": "0"
            },
            "name": "intersection",
            "description": "Returns the intersection between two [AABB]. An empty AABB (size 0,0,0) is returned on failure."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "with",
              "type": "AABB",
              "index": "0"
            },
            "name": "intersects",
            "description": "Returns [code]true[/code] if the [AABB] overlaps with another."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "plane",
              "type": "Plane",
              "index": "0"
            },
            "name": "intersects_plane",
            "description": "Returns [code]true[/code] if the [AABB] is on both sides of a plane."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "from",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "to",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "intersects_segment",
            "description": "Returns [code]true[/code] if the [AABB] intersects the line segment between [code]from[/code] and [code]to[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "aabb",
              "type": "AABB",
              "index": "0"
            },
            "name": "is_equal_approx",
            "description": "Returns [code]true[/code] if this [AABB] and [code]aabb[/code] are approximately equal, by calling [method @GDScript.is_equal_approx] on each component."
          },
          {
            "return": {
              "type": "AABB"
            },
            "argument": {
              "name": "with",
              "type": "AABB",
              "index": "0"
            },
            "name": "merge",
            "description": "Returns a larger [AABB] that contains both this [AABB] and [code]with[/code]."
          }
        ]
      },
      "name": "AABB",
      "version": "3.3",
      "constants": {},
      "brief_description": "Axis-Aligned Bounding Box.",
      "description": "[AABB] consists of a position, a size, and several utility functions. It is typically used for fast overlap tests.\n\t\tIt uses floating-point coordinates. The 2D counterpart to [AABB] is [Rect2].\n\t\t[b]Note:[/b] Unlike [Rect2], [AABB] does not have a variant that uses integer coordinates."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "false",
            "value": "Sets autowrapping for the text in the dialog.",
            "setter": "set_autowrap",
            "name": "dialog_autowrap",
            "getter": "has_autowrap",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the dialog is hidden when the OK button is pressed. You can set it to [code]false[/code] if you want to do e.g. input validation when receiving the [signal confirmed] signal, and handle hiding the dialog in your own logic.\n\t\t\t[b]Note:[/b] Some nodes derived from this class can have a different default value, and potentially their own built-in logic overriding this setting. For example [FileDialog] defaults to [code]false[/code], and has its own input validation code that is called when you press OK, which eventually hides the dialog if the input is valid. As such, this property can't be used in [FileDialog] to disable hiding the dialog when pressing OK.",
            "setter": "set_hide_on_ok",
            "name": "dialog_hide_on_ok",
            "getter": "get_hide_on_ok",
            "type": "bool"
          },
          {
            "default": "\"\"",
            "value": "The text displayed by the dialog.",
            "setter": "set_text",
            "name": "dialog_text",
            "getter": "get_text",
            "type": "String"
          },
          {
            "default": "\"Alert!\"",
            "setter": "set_title",
            "override": "true",
            "name": "window_title",
            "getter": "get_title",
            "type": "String"
          }
        ]
      },
      "inherits": "WindowDialog",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Button"
            },
            "argument": [
              {
                "name": "text",
                "type": "String",
                "index": "0"
              },
              {
                "default": "false",
                "name": "right",
                "type": "bool",
                "index": "1"
              },
              {
                "default": "\"\"",
                "name": "action",
                "type": "String",
                "index": "2"
              }
            ],
            "name": "add_button",
            "description": "Adds a button with label [code]text[/code] and a custom [code]action[/code] to the dialog and returns the created button. [code]action[/code] will be passed to the [signal custom_action] signal when pressed.\n\t\t\t\tIf [code]true[/code], [code]right[/code] will place the button to the right of any sibling buttons."
          },
          {
            "return": {
              "type": "Button"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "add_cancel",
            "description": "Adds a button with label [code]name[/code] and a cancel action to the dialog and returns the created button."
          },
          {
            "return": {
              "type": "Label"
            },
            "name": "get_label",
            "description": "Returns the label used for built-in text."
          },
          {
            "return": {
              "type": "Button"
            },
            "name": "get_ok",
            "description": "Returns the OK [Button] instance."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "line_edit",
              "type": "Node",
              "index": "0"
            },
            "name": "register_text_enter",
            "description": "Registers a [LineEdit] in the dialog. When the enter key is pressed, the dialog will be accepted."
          }
        ]
      },
      "name": "AcceptDialog",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "confirmed",
            "description": "Emitted when the dialog is accepted, i.e. the OK button is pressed."
          },
          {
            "argument": {
              "name": "action",
              "type": "String",
              "index": "0"
            },
            "name": "custom_action",
            "description": "Emitted when a custom button is pressed. See [method add_button]."
          }
        ]
      },
      "constants": {},
      "brief_description": "Base dialog for user notification.",
      "description": "This dialog is useful for small notifications to the user about an event. It can only be accepted or closed, with the same result."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://docs.godotengine.org/en/3.3/tutorials/2d/2d_sprite_animation.html",
          "title": "2D Sprite animation (also applies to 3D)"
        }
      },
      "members": {
        "member": [
          {
            "default": "\"default\"",
            "value": "The current animation from the [code]frames[/code] resource. If this value changes, the [code]frame[/code] counter is reset.",
            "setter": "set_animation",
            "name": "animation",
            "getter": "get_animation",
            "type": "String"
          },
          {
            "default": "0",
            "value": "The displayed animation frame's index.",
            "setter": "set_frame",
            "name": "frame",
            "getter": "get_frame",
            "type": "int"
          },
          {
            "value": "The [SpriteFrames] resource containing the animation(s).",
            "setter": "set_sprite_frames",
            "name": "frames",
            "getter": "get_sprite_frames",
            "type": "SpriteFrames"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the [member animation] is currently playing.",
            "setter": "_set_playing",
            "name": "playing",
            "getter": "_is_playing",
            "type": "bool"
          }
        ]
      },
      "inherits": "SpriteBase3D",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_playing",
            "description": "Returns [code]true[/code] if an animation is currently being played."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "\"\"",
              "name": "anim",
              "type": "String",
              "index": "0"
            },
            "name": "play",
            "description": "Plays the animation named [code]anim[/code]. If no [code]anim[/code] is provided, the current animation is played."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "stop",
            "description": "Stops the current animation (does not reset the frame counter)."
          }
        ]
      },
      "name": "AnimatedSprite3D",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "animation_finished",
            "description": "Emitted when the animation is finished (when it plays the last frame). If the animation is looping, this signal is emitted every time the last frame is drawn."
          },
          {
            "name": "frame_changed",
            "description": "Emitted when [member frame] changed."
          }
        ]
      },
      "constants": {},
      "brief_description": "2D sprite node in 3D world, that can use multiple 2D textures for animation.",
      "description": "Animations are created using a [SpriteFrames] resource, which can be configured in the editor via the SpriteFrames panel."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/2d/2d_sprite_animation.html",
            "title": "2D Sprite animation"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/515",
            "title": "2D Dodge The Creeps Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "\"default\"",
            "value": "The current animation from the [code]frames[/code] resource. If this value changes, the [code]frame[/code] counter is reset.",
            "setter": "set_animation",
            "name": "animation",
            "getter": "get_animation",
            "type": "String"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], texture will be centered.",
            "setter": "set_centered",
            "name": "centered",
            "getter": "is_centered",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], texture is flipped horizontally.",
            "setter": "set_flip_h",
            "name": "flip_h",
            "getter": "is_flipped_h",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], texture is flipped vertically.",
            "setter": "set_flip_v",
            "name": "flip_v",
            "getter": "is_flipped_v",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "The displayed animation frame's index.",
            "setter": "set_frame",
            "name": "frame",
            "getter": "get_frame",
            "type": "int"
          },
          {
            "value": "The [SpriteFrames] resource containing the animation(s).",
            "setter": "set_sprite_frames",
            "name": "frames",
            "getter": "get_sprite_frames",
            "type": "SpriteFrames"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The texture's drawing offset.",
            "setter": "set_offset",
            "name": "offset",
            "getter": "get_offset",
            "type": "Vector2"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the [member animation] is currently playing.",
            "setter": "_set_playing",
            "name": "playing",
            "getter": "_is_playing",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "The animation speed is multiplied by this value.",
            "setter": "set_speed_scale",
            "name": "speed_scale",
            "getter": "get_speed_scale",
            "type": "float"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_playing",
            "description": "Returns [code]true[/code] if an animation is currently being played."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "default": "\"\"",
                "name": "anim",
                "type": "String",
                "index": "0"
              },
              {
                "default": "false",
                "name": "backwards",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "play",
            "description": "Plays the animation named [code]anim[/code]. If no [code]anim[/code] is provided, the current animation is played. If [code]backwards[/code] is [code]true[/code], the animation will be played in reverse."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "stop",
            "description": "Stops the current animation (does not reset the frame counter)."
          }
        ]
      },
      "name": "AnimatedSprite",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "animation_finished",
            "description": "Emitted when the animation is finished (when it plays the last frame). If the animation is looping, this signal is emitted every time the last frame is drawn."
          },
          {
            "name": "frame_changed",
            "description": "Emitted when [member frame] changed."
          }
        ]
      },
      "constants": {},
      "brief_description": "Sprite node that can use multiple textures for animation.",
      "description": "Animations are created using a [SpriteFrames] resource, which can be configured in the editor via the SpriteFrames panel.\n\t\t[b]Note:[/b] You can associate a set of normal maps by creating additional [SpriteFrames] resources with a [code]_normal[/code] suffix. For example, having 2 [SpriteFrames] resources [code]run[/code] and [code]run_normal[/code] will make it so the [code]run[/code] animation uses the normal map."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "value": "Sets the currently visible frame of the texture.",
            "setter": "set_current_frame",
            "name": "current_frame",
            "getter": "get_current_frame",
            "type": "int"
          },
          {
            "default": "0",
            "setter": "set_flags",
            "override": "true",
            "name": "flags",
            "getter": "get_flags",
            "type": "int"
          },
          {
            "default": "4.0",
            "value": "Animation speed in frames per second. This value defines the default time interval between two frames of the animation, and thus the overall duration of the animation loop based on the [member frames] property. A value of 0 means no predefined number of frames per second, the animation will play according to each frame's frame delay (see [method set_frame_delay]).\n\t\t\tFor example, an animation with 8 frames, no frame delay and a [code]fps[/code] value of 2 will run for 4 seconds, with each frame lasting 0.5 seconds.",
            "setter": "set_fps",
            "name": "fps",
            "getter": "get_fps",
            "type": "float"
          },
          {
            "default": "1",
            "value": "Number of frames to use in the animation. While you can create the frames independently with [method set_frame_texture], you need to set this value for the animation to take new frames into account. The maximum number of frames is [constant MAX_FRAMES].",
            "setter": "set_frames",
            "name": "frames",
            "getter": "get_frames",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the animation will only play once and will not loop back to the first frame after reaching the end. Note that reaching the end will not set [member pause] to [code]true[/code].",
            "setter": "set_oneshot",
            "name": "oneshot",
            "getter": "get_oneshot",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the animation will pause where it currently is (i.e. at [member current_frame]). The animation will continue from where it was paused when changing this property to [code]false[/code].",
            "setter": "set_pause",
            "name": "pause",
            "getter": "get_pause",
            "type": "bool"
          }
        ]
      },
      "inherits": "Texture",
      "methods": {
        "method": [
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "frame",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_frame_delay",
            "description": "Returns the given frame's delay value."
          },
          {
            "return": {
              "type": "Texture"
            },
            "argument": {
              "name": "frame",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_frame_texture",
            "description": "Returns the given frame's [Texture]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "frame",
                "type": "int",
                "index": "0"
              },
              {
                "name": "delay",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_frame_delay",
            "description": "Sets an additional delay (in seconds) between this frame and the next one, that will be added to the time interval defined by [member fps]. By default, frames have no delay defined. If a delay value is defined, the final time interval between this frame and the next will be [code]1.0 / fps + delay[/code].\n\t\t\t\tFor example, for an animation with 3 frames, 2 FPS and a frame delay on the second frame of 1.2, the resulting playback will be:\n\t\t\t\t[codeblock]\n\t\t\t\tFrame 0: 0.5 s (1 / fps)\n\t\t\t\tFrame 1: 1.7 s (1 / fps + 1.2)\n\t\t\t\tFrame 2: 0.5 s (1 / fps)\n\t\t\t\tTotal duration: 2.7 s\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "frame",
                "type": "int",
                "index": "0"
              },
              {
                "name": "texture",
                "type": "Texture",
                "index": "1"
              }
            ],
            "name": "set_frame_texture",
            "description": "Assigns a [Texture] to the given frame. Frame IDs start at 0, so the first frame has ID 0, and the last frame of the animation has ID [member frames] - 1.\n\t\t\t\tYou can define any number of textures up to [constant MAX_FRAMES], but keep in mind that only frames from 0 to [member frames] - 1 will be part of the animation."
          }
        ]
      },
      "name": "AnimatedTexture",
      "version": "3.3",
      "constants": {
        "constant": {
          "value": "256",
          "name": "MAX_FRAMES"
        }
      },
      "brief_description": "Proxy texture for simple frame-based animations.",
      "description": "[AnimatedTexture] is a resource format for frame-based animations, where multiple textures can be chained automatically with a predefined delay for each frame. Unlike [AnimationPlayer] or [AnimatedSprite], it isn't a [Node], but has the advantage of being usable anywhere a [Texture] resource can be used, e.g. in a [TileSet].\n\t\tThe playback of the animation is controlled by the [member fps] property as well as each frame's optional delay (see [method set_frame_delay]). The animation loops, i.e. it will restart at frame 0 automatically after playing the last frame.\n\t\t[AnimatedTexture] currently requires all frame textures to have the same size, otherwise the bigger ones will be cropped to match the smallest one.\n\t\t[b]Note:[/b] AnimatedTexture doesn't support using [AtlasTexture]s. Each frame needs to be a separate [Texture]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/animation/animation_tree.html"
      },
      "members": {
        "member": {
          "default": "false",
          "value": "If [code]true[/code], sets the [code]optimization[/code] to [code]false[/code] when calling [method AnimationNode.blend_input], forcing the blended animations to update every frame.",
          "setter": "set_use_sync",
          "name": "sync",
          "getter": "is_using_sync",
          "type": "bool"
        }
      },
      "inherits": "AnimationNode",
      "methods": {},
      "name": "AnimationNodeAdd2",
      "version": "3.3",
      "constants": {},
      "brief_description": "Blends two animations additively inside of an [AnimationNodeBlendTree].",
      "description": "A resource to add to an [AnimationNodeBlendTree]. Blends two animations additively based on an amount value in the [code][0.0, 1.0][/code] range."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/animation/animation_tree.html",
            "title": "AnimationTree"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "members": {
        "member": {
          "default": "false",
          "value": "If [code]true[/code], sets the [code]optimization[/code] to [code]false[/code] when calling [method AnimationNode.blend_input], forcing the blended animations to update every frame.",
          "setter": "set_use_sync",
          "name": "sync",
          "getter": "is_using_sync",
          "type": "bool"
        }
      },
      "inherits": "AnimationNode",
      "methods": {},
      "name": "AnimationNodeAdd3",
      "version": "3.3",
      "constants": {},
      "brief_description": "Blends two of three animations additively inside of an [AnimationNodeBlendTree].",
      "description": "A resource to add to an [AnimationNodeBlendTree]. Blends two animations together additively out of three based on a value in the [code][-1.0, 1.0][/code] range.\n\t\tThis node has three inputs:\n\t\t- The base animation to add to\n\t\t- A -add animation to blend with when the blend amount is in the [code][-1.0, 0.0][/code] range.\n\t\t- A +add animation to blend with when the blend amount is in the [code][0.0, 1.0][/code] range"
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/animation/animation_tree.html",
            "title": "AnimationTree"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/125",
            "title": "3D Platformer Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "members": {
        "member": {
          "default": "\"\"",
          "value": "Animation to use as an output. It is one of the animations provided by [member AnimationTree.anim_player].",
          "setter": "set_animation",
          "name": "animation",
          "getter": "get_animation",
          "type": "String"
        }
      },
      "inherits": "AnimationRootNode",
      "methods": {},
      "name": "AnimationNodeAnimation",
      "version": "3.3",
      "constants": {},
      "brief_description": "Input animation to use in an [AnimationNodeBlendTree].",
      "description": "A resource to add to an [AnimationNodeBlendTree]. Only features one output set using the [member animation] property. Use it as an input for [AnimationNode] that blend animations together."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/animation/animation_tree.html",
            "title": "AnimationTree"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/125",
            "title": "3D Platformer Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "members": {
        "member": {
          "default": "false",
          "value": "If [code]true[/code], sets the [code]optimization[/code] to [code]false[/code] when calling [method AnimationNode.blend_input], forcing the blended animations to update every frame.",
          "setter": "set_use_sync",
          "name": "sync",
          "getter": "is_using_sync",
          "type": "bool"
        }
      },
      "inherits": "AnimationNode",
      "methods": {},
      "name": "AnimationNodeBlend2",
      "version": "3.3",
      "constants": {},
      "brief_description": "Blends two animations linearly inside of an [AnimationNodeBlendTree].",
      "description": "A resource to add to an [AnimationNodeBlendTree]. Blends two animations linearly based on an amount value in the [code][0.0, 1.0][/code] range."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/animation/animation_tree.html"
      },
      "members": {
        "member": {
          "default": "false",
          "value": "If [code]true[/code], sets the [code]optimization[/code] to [code]false[/code] when calling [method AnimationNode.blend_input], forcing the blended animations to update every frame.",
          "setter": "set_use_sync",
          "name": "sync",
          "getter": "is_using_sync",
          "type": "bool"
        }
      },
      "inherits": "AnimationNode",
      "methods": {},
      "name": "AnimationNodeBlend3",
      "version": "3.3",
      "constants": {},
      "brief_description": "Blends two of three animations linearly inside of an [AnimationNodeBlendTree].",
      "description": "A resource to add to an [AnimationNodeBlendTree]. Blends two animations together linearly out of three based on a value in the [code][-1.0, 1.0][/code] range.\n\t\tThis node has three inputs:\n\t\t- The base animation\n\t\t- A -blend animation to blend with when the blend amount is in the [code][-1.0, 0.0][/code] range.\n\t\t- A +blend animation to blend with when the blend amount is in the [code][0.0, 1.0][/code] range"
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/animation/animation_tree.html"
      },
      "members": {
        "member": [
          {
            "default": "1.0",
            "value": "The blend space's axis's upper limit for the points' position. See [method add_blend_point].",
            "setter": "set_max_space",
            "name": "max_space",
            "getter": "get_max_space",
            "type": "float"
          },
          {
            "default": "-1.0",
            "value": "The blend space's axis's lower limit for the points' position. See [method add_blend_point].",
            "setter": "set_min_space",
            "name": "min_space",
            "getter": "get_min_space",
            "type": "float"
          },
          {
            "default": "0.1",
            "value": "Position increment to snap to when moving a point on the axis.",
            "setter": "set_snap",
            "name": "snap",
            "getter": "get_snap",
            "type": "float"
          },
          {
            "default": "\"value\"",
            "value": "Label of the virtual axis of the blend space.",
            "setter": "set_value_label",
            "name": "value_label",
            "getter": "get_value_label",
            "type": "String"
          }
        ]
      },
      "inherits": "AnimationRootNode",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "node",
                "type": "AnimationRootNode",
                "index": "0"
              },
              {
                "name": "pos",
                "type": "float",
                "index": "1"
              },
              {
                "default": "-1",
                "name": "at_index",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "add_blend_point",
            "description": "Adds a new point that represents a [code]node[/code] on the virtual axis at a given position set by [code]pos[/code]. You can insert it at a specific index using the [code]at_index[/code] argument. If you use the default value for [code]at_index[/code], the point is inserted at the end of the blend points array."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_blend_point_count",
            "description": "Returns the number of points on the blend axis."
          },
          {
            "return": {
              "type": "AnimationRootNode"
            },
            "argument": {
              "name": "point",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_blend_point_node",
            "description": "Returns the [AnimationNode] referenced by the point at index [code]point[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "point",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_blend_point_position",
            "description": "Returns the position of the point at index [code]point[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "point",
              "type": "int",
              "index": "0"
            },
            "name": "remove_blend_point",
            "description": "Removes the point at index [code]point[/code] from the blend axis."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "point",
                "type": "int",
                "index": "0"
              },
              {
                "name": "node",
                "type": "AnimationRootNode",
                "index": "1"
              }
            ],
            "name": "set_blend_point_node",
            "description": "Changes the [AnimationNode] referenced by the point at index [code]point[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "point",
                "type": "int",
                "index": "0"
              },
              {
                "name": "pos",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_blend_point_position",
            "description": "Updates the position of the point at index [code]point[/code] on the blend axis."
          }
        ]
      },
      "name": "AnimationNodeBlendSpace1D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Blends linearly between two of any number of [AnimationNode] of any type placed on a virtual axis.",
      "description": "A resource to add to an [AnimationNodeBlendTree].\n\t\tThis is a virtual axis on which you can add any type of [AnimationNode] using [method add_blend_point].\n\t\tOutputs the linear blend of the two [AnimationNode]s closest to the node's current value.\n\t\tYou can set the extents of the axis using the [member min_space] and [member max_space]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/animation/animation_tree.html",
            "title": "AnimationTree"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "true",
            "value": "If [code]true[/code], the blend space is triangulated automatically. The mesh updates every time you add or remove points with [method add_blend_point] and [method remove_blend_point].",
            "setter": "set_auto_triangles",
            "name": "auto_triangles",
            "getter": "get_auto_triangles",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "Controls the interpolation between animations. See [enum BlendMode] constants.",
            "setter": "set_blend_mode",
            "name": "blend_mode",
            "getter": "get_blend_mode",
            "type": "int",
            "enum": "AnimationNodeBlendSpace2D.BlendMode"
          },
          {
            "default": "Vector2( 1, 1 )",
            "value": "The blend space's X and Y axes' upper limit for the points' position. See [method add_blend_point].",
            "setter": "set_max_space",
            "name": "max_space",
            "getter": "get_max_space",
            "type": "Vector2"
          },
          {
            "default": "Vector2( -1, -1 )",
            "value": "The blend space's X and Y axes' lower limit for the points' position. See [method add_blend_point].",
            "setter": "set_min_space",
            "name": "min_space",
            "getter": "get_min_space",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0.1, 0.1 )",
            "value": "Position increment to snap to when moving a point.",
            "setter": "set_snap",
            "name": "snap",
            "getter": "get_snap",
            "type": "Vector2"
          },
          {
            "default": "\"x\"",
            "value": "Name of the blend space's X axis.",
            "setter": "set_x_label",
            "name": "x_label",
            "getter": "get_x_label",
            "type": "String"
          },
          {
            "default": "\"y\"",
            "value": "Name of the blend space's Y axis.",
            "setter": "set_y_label",
            "name": "y_label",
            "getter": "get_y_label",
            "type": "String"
          }
        ]
      },
      "inherits": "AnimationRootNode",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "node",
                "type": "AnimationRootNode",
                "index": "0"
              },
              {
                "name": "pos",
                "type": "Vector2",
                "index": "1"
              },
              {
                "default": "-1",
                "name": "at_index",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "add_blend_point",
            "description": "Adds a new point that represents a [code]node[/code] at the position set by [code]pos[/code]. You can insert it at a specific index using the [code]at_index[/code] argument. If you use the default value for [code]at_index[/code], the point is inserted at the end of the blend points array."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "x",
                "type": "int",
                "index": "0"
              },
              {
                "name": "y",
                "type": "int",
                "index": "1"
              },
              {
                "name": "z",
                "type": "int",
                "index": "2"
              },
              {
                "default": "-1",
                "name": "at_index",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "add_triangle",
            "description": "Creates a new triangle using three points [code]x[/code], [code]y[/code], and [code]z[/code]. Triangles can overlap. You can insert the triangle at a specific index using the [code]at_index[/code] argument. If you use the default value for [code]at_index[/code], the point is inserted at the end of the blend points array."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_blend_point_count",
            "description": "Returns the number of points in the blend space."
          },
          {
            "return": {
              "type": "AnimationRootNode"
            },
            "argument": {
              "name": "point",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_blend_point_node",
            "description": "Returns the [AnimationRootNode] referenced by the point at index [code]point[/code]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "point",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_blend_point_position",
            "description": "Returns the position of the point at index [code]point[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_triangle_count",
            "description": "Returns the number of triangles in the blend space."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "triangle",
                "type": "int",
                "index": "0"
              },
              {
                "name": "point",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "get_triangle_point",
            "description": "Returns the position of the point at index [code]point[/code] in the triangle of index [code]triangle[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "point",
              "type": "int",
              "index": "0"
            },
            "name": "remove_blend_point",
            "description": "Removes the point at index [code]point[/code] from the blend space."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "triangle",
              "type": "int",
              "index": "0"
            },
            "name": "remove_triangle",
            "description": "Removes the triangle at index [code]triangle[/code] from the blend space."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "point",
                "type": "int",
                "index": "0"
              },
              {
                "name": "node",
                "type": "AnimationRootNode",
                "index": "1"
              }
            ],
            "name": "set_blend_point_node",
            "description": "Changes the [AnimationNode] referenced by the point at index [code]point[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "point",
                "type": "int",
                "index": "0"
              },
              {
                "name": "pos",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "set_blend_point_position",
            "description": "Updates the position of the point at index [code]point[/code] on the blend axis."
          }
        ]
      },
      "name": "AnimationNodeBlendSpace2D",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "triangles_updated",
          "description": "Emitted every time the blend space's triangles are created, removed, or when one of their vertices changes position."
        }
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "BLEND_MODE_INTERPOLATED",
            "enum": "BlendMode"
          },
          {
            "value": "1",
            "name": "BLEND_MODE_DISCRETE",
            "enum": "BlendMode"
          },
          {
            "value": "2",
            "name": "BLEND_MODE_DISCRETE_CARRY",
            "enum": "BlendMode"
          }
        ]
      },
      "brief_description": "Blends linearly between three [AnimationNode] of any type placed in a 2D space.",
      "description": "A resource to add to an [AnimationNodeBlendTree].\n\t\tThis node allows you to blend linearly between three animations using a [Vector2] weight.\n\t\tYou can add vertices to the blend space with [method add_blend_point] and automatically triangulate it by setting [member auto_triangles] to [code]true[/code]. Otherwise, use [method add_triangle] and [method remove_triangle] to create up the blend space by hand."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/animation/animation_tree.html"
      },
      "members": {
        "member": {
          "default": "Vector2( 0, 0 )",
          "value": "The global offset of all sub-nodes.",
          "setter": "set_graph_offset",
          "name": "graph_offset",
          "getter": "get_graph_offset",
          "type": "Vector2"
        }
      },
      "inherits": "AnimationRootNode",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node",
                "type": "AnimationNode",
                "index": "1"
              },
              {
                "default": "Vector2( 0, 0 )",
                "name": "position",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "add_node",
            "description": "Adds an [AnimationNode] at the given [code]position[/code]. The [code]name[/code] is used to identify the created sub-node later."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "input_node",
                "type": "String",
                "index": "0"
              },
              {
                "name": "input_index",
                "type": "int",
                "index": "1"
              },
              {
                "name": "output_node",
                "type": "String",
                "index": "2"
              }
            ],
            "name": "connect_node",
            "description": "Connects the output of an [AnimationNode] as input for another [AnimationNode], at the input port specified by [code]input_index[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "input_node",
                "type": "String",
                "index": "0"
              },
              {
                "name": "input_index",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "disconnect_node",
            "description": "Disconnects the node connected to the specified input."
          },
          {
            "return": {
              "type": "AnimationNode"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_node",
            "description": "Returns the sub-node with the specified [code]name[/code]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_node_position",
            "description": "Returns the position of the sub-node with the specified [code]name[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_node",
            "description": "Returns [code]true[/code] if a sub-node with specified [code]name[/code] exists."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "remove_node",
            "description": "Removes a sub-node."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "new_name",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "rename_node",
            "description": "Changes the name of a sub-node."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "set_node_position",
            "description": "Modifies the position of a sub-node."
          }
        ]
      },
      "name": "AnimationNodeBlendTree",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "CONNECTION_OK"
          },
          {
            "value": "1",
            "name": "CONNECTION_ERROR_NO_INPUT"
          },
          {
            "value": "2",
            "name": "CONNECTION_ERROR_NO_INPUT_INDEX"
          },
          {
            "value": "3",
            "name": "CONNECTION_ERROR_NO_OUTPUT"
          },
          {
            "value": "4",
            "name": "CONNECTION_ERROR_SAME_NODE"
          },
          {
            "value": "5",
            "name": "CONNECTION_ERROR_CONNECTION_EXISTS"
          }
        ]
      },
      "brief_description": "[AnimationTree] node resource that contains many blend type nodes.",
      "description": "This node may contain a sub-tree of any other blend type nodes, such as mix, blend2, blend3, one shot, etc. This is one of the most commonly used roots."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/animation/animation_tree.html",
            "title": "AnimationTree"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the sub-animation will restart automatically after finishing.",
            "setter": "set_autorestart",
            "name": "autorestart",
            "getter": "has_autorestart",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "The delay after which the automatic restart is triggered, in seconds.",
            "setter": "set_autorestart_delay",
            "name": "autorestart_delay",
            "getter": "get_autorestart_delay",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "If [member autorestart] is [code]true[/code], a random additional delay (in seconds) between 0 and this value will be added to [member autorestart_delay].",
            "setter": "set_autorestart_random_delay",
            "name": "autorestart_random_delay",
            "getter": "get_autorestart_random_delay",
            "type": "float"
          },
          {
            "default": "0.1",
            "setter": "set_fadein_time",
            "name": "fadein_time",
            "getter": "get_fadein_time",
            "type": "float"
          },
          {
            "default": "0.1",
            "setter": "set_fadeout_time",
            "name": "fadeout_time",
            "getter": "get_fadeout_time",
            "type": "float"
          },
          {
            "default": "false",
            "setter": "set_use_sync",
            "name": "sync",
            "getter": "is_using_sync",
            "type": "bool"
          }
        ]
      },
      "inherits": "AnimationNode",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int",
              "enum": "AnimationNodeOneShot.MixMode"
            },
            "qualifiers": "const",
            "name": "get_mix_mode",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "mode",
              "type": "int",
              "enum": "AnimationNodeOneShot.MixMode",
              "index": "0"
            },
            "name": "set_mix_mode",
            "description": {}
          }
        ]
      },
      "name": "AnimationNodeOneShot",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "MIX_MODE_BLEND",
            "enum": "MixMode"
          },
          {
            "value": "1",
            "name": "MIX_MODE_ADD",
            "enum": "MixMode"
          }
        ]
      },
      "brief_description": "Plays an animation once in [AnimationNodeBlendTree].",
      "description": "A resource to add to an [AnimationNodeBlendTree]. This node will execute a sub-animation and return once it finishes. Blend times for fading in and out can be customized, as well as filters."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/animation/animation_tree.html",
            "title": "AnimationTree"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/125",
            "title": "3D Platformer Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "inherits": "AnimationNode",
      "methods": {},
      "name": "AnimationNodeOutput",
      "version": "3.3",
      "constants": {},
      "brief_description": "Generic output node to be added to [AnimationNodeBlendTree].",
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/animation/animation_tree.html"
      },
      "members": {
        "member": {
          "default": "true",
          "setter": "set_local_to_scene",
          "override": "true",
          "name": "resource_local_to_scene",
          "getter": "is_local_to_scene",
          "type": "bool"
        }
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_current_length",
            "description": {}
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_current_node",
            "description": "Returns the currently playing animation state."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_current_play_position",
            "description": "Returns the playback position within the current animation state."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "qualifiers": "const",
            "name": "get_travel_path",
            "description": "Returns the current travel path as computed internally by the A* algorithm."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_playing",
            "description": "Returns [code]true[/code] if an animation is playing."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "node",
              "type": "String",
              "index": "0"
            },
            "name": "start",
            "description": "Starts playing the given animation."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "stop",
            "description": "Stops the currently playing animation."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "to_node",
              "type": "String",
              "index": "0"
            },
            "name": "travel",
            "description": "Transitions from the current state to another one, following the shortest path."
          }
        ]
      },
      "name": "AnimationNodeStateMachinePlayback",
      "version": "3.3",
      "constants": {},
      "brief_description": "Playback control for [AnimationNodeStateMachine].",
      "description": "Allows control of [AnimationTree] state machines created with [AnimationNodeStateMachine]. Retrieve with [code]$AnimationTree.get(\"parameters/playback\")[/code].\n\t\t[b]Example:[/b]\n\t\t[codeblock]\n\t\tvar state_machine = $AnimationTree.get(\"parameters/playback\")\n\t\tstate_machine.travel(\"some_state\")\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/animation/animation_tree.html"
      },
      "members": {
        "member": [
          {
            "default": "\"\"",
            "value": "Turn on auto advance when this condition is set. The provided name will become a boolean parameter on the [AnimationTree] that can be controlled from code (see [url=https://docs.godotengine.org/en/3.3/tutorials/animation/animation_tree.html#controlling-from-code][/url]). For example, if [member AnimationTree.tree_root] is an [AnimationNodeStateMachine] and [member advance_condition] is set to [code]\"idle\"[/code]:\n\t\t\t[codeblock]\n\t\t\t$animation_tree[\"parameters/conditions/idle\"] = is_on_floor and (linear_velocity.x == 0)\n\t\t\t[/codeblock]",
            "setter": "set_advance_condition",
            "name": "advance_condition",
            "getter": "get_advance_condition",
            "type": "String"
          },
          {
            "default": "false",
            "value": "Turn on the transition automatically when this state is reached. This works best with [constant SWITCH_MODE_AT_END].",
            "setter": "set_auto_advance",
            "name": "auto_advance",
            "getter": "has_auto_advance",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Don't use this transition during [method AnimationNodeStateMachinePlayback.travel] or [member auto_advance].",
            "setter": "set_disabled",
            "name": "disabled",
            "getter": "is_disabled",
            "type": "bool"
          },
          {
            "default": "1",
            "value": "Lower priority transitions are preferred when travelling through the tree via [method AnimationNodeStateMachinePlayback.travel] or [member auto_advance].",
            "setter": "set_priority",
            "name": "priority",
            "getter": "get_priority",
            "type": "int"
          },
          {
            "default": "0",
            "value": "The transition type.",
            "setter": "set_switch_mode",
            "name": "switch_mode",
            "getter": "get_switch_mode",
            "type": "int",
            "enum": "AnimationNodeStateMachineTransition.SwitchMode"
          },
          {
            "default": "0.0",
            "value": "The time to cross-fade between this state and the next.",
            "setter": "set_xfade_time",
            "name": "xfade_time",
            "getter": "get_xfade_time",
            "type": "float"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {},
      "name": "AnimationNodeStateMachineTransition",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "advance_condition_changed",
          "description": "Emitted when [member advance_condition] is changed."
        }
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "SWITCH_MODE_IMMEDIATE",
            "enum": "SwitchMode"
          },
          {
            "value": "1",
            "name": "SWITCH_MODE_SYNC",
            "enum": "SwitchMode"
          },
          {
            "value": "2",
            "name": "SWITCH_MODE_AT_END",
            "enum": "SwitchMode"
          }
        ]
      },
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/animation/animation_tree.html"
      },
      "inherits": "AnimationRootNode",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node",
                "type": "AnimationNode",
                "index": "1"
              },
              {
                "default": "Vector2( 0, 0 )",
                "name": "position",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "add_node",
            "description": "Adds a new node to the graph. The [code]position[/code] is used for display in the editor."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "from",
                "type": "String",
                "index": "0"
              },
              {
                "name": "to",
                "type": "String",
                "index": "1"
              },
              {
                "name": "transition",
                "type": "AnimationNodeStateMachineTransition",
                "index": "2"
              }
            ],
            "name": "add_transition",
            "description": "Adds a transition between the given nodes."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_end_node",
            "description": "Returns the graph's end node."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_graph_offset",
            "description": "Returns the draw offset of the graph. Used for display in the editor."
          },
          {
            "return": {
              "type": "AnimationNode"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_node",
            "description": "Returns the animation node with the given name."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "node",
              "type": "AnimationNode",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_node_name",
            "description": "Returns the given animation node's name."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_node_position",
            "description": "Returns the given node's coordinates. Used for display in the editor."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_start_node",
            "description": "Returns the graph's end node."
          },
          {
            "return": {
              "type": "AnimationNodeStateMachineTransition"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_transition",
            "description": "Returns the given transition."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_transition_count",
            "description": "Returns the number of connections in the graph."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_transition_from",
            "description": "Returns the given transition's start node."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_transition_to",
            "description": "Returns the given transition's end node."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_node",
            "description": "Returns [code]true[/code] if the graph contains the given node."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "from",
                "type": "String",
                "index": "0"
              },
              {
                "name": "to",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "has_transition",
            "description": "Returns [code]true[/code] if there is a transition between the given nodes."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "remove_node",
            "description": "Deletes the given node from the graph."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "from",
                "type": "String",
                "index": "0"
              },
              {
                "name": "to",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "remove_transition",
            "description": "Deletes the transition between the two specified nodes."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "remove_transition_by_index",
            "description": "Deletes the given transition by index."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "new_name",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "rename_node",
            "description": "Renames the given node."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node",
                "type": "AnimationNode",
                "index": "1"
              }
            ],
            "name": "replace_node",
            "description": "Replaces the node and keeps its transitions unchanged."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "set_end_node",
            "description": "Sets the given node as the graph end point."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "offset",
              "type": "Vector2",
              "index": "0"
            },
            "name": "set_graph_offset",
            "description": "Sets the draw offset of the graph. Used for display in the editor."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "set_node_position",
            "description": "Sets the node's coordinates. Used for display in the editor."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "set_start_node",
            "description": "Sets the given node as the graph start point."
          }
        ]
      },
      "name": "AnimationNodeStateMachine",
      "version": "3.3",
      "constants": {},
      "brief_description": "State machine for control of animations.",
      "description": "Contains multiple nodes representing animation states, connected in a graph. Node transitions can be configured to happen automatically or via code, using a shortest-path algorithm. Retrieve the [AnimationNodeStateMachinePlayback] object from the [AnimationTree] node to control it programmatically.\n\t\t[b]Example:[/b]\n\t\t[codeblock]\n\t\tvar state_machine = $AnimationTree.get(\"parameters/playback\")\n\t\tstate_machine.travel(\"some_state\")\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/animation/animation_tree.html",
            "title": "AnimationTree"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/125",
            "title": "3D Platformer Demo"
          }
        ]
      },
      "inherits": "AnimationNode",
      "methods": {},
      "name": "AnimationNodeTimeScale",
      "version": "3.3",
      "constants": {},
      "brief_description": "A time-scaling animation node to be used with [AnimationTree].",
      "description": "Allows scaling the speed of the animation (or reversing it) in any children nodes. Setting it to 0 will pause the animation."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/animation/animation_tree.html"
      },
      "inherits": "AnimationNode",
      "methods": {},
      "name": "AnimationNodeTimeSeek",
      "version": "3.3",
      "constants": {},
      "brief_description": "A time-seeking animation node to be used with [AnimationTree].",
      "description": "This node can be used to cause a seek command to happen to any sub-children of the animation graph. Use this node type to play an [Animation] from the start or a certain playback position inside the [AnimationNodeBlendTree]. After setting the time and changing the animation playback, the seek node automatically goes into sleep mode on the next process frame by setting its [code]seek_position[/code] value to [code]-1.0[/code].\n\t\t[codeblock]\n\t\t# Play child animation from the start.\n\t\tanimation_tree.set(\"parameters/Seek/seek_position\", 0.0)\n\t\t# Alternative syntax (same result as above).\n\t\tanimation_tree[\"parameters/Seek/seek_position\"] = 0.0\n\n\t\t# Play child animation from 12 second timestamp.\n\t\tanimation_tree.set(\"parameters/Seek/seek_position\", 12.0)\n\t\t# Alternative syntax (same result as above).\n\t\tanimation_tree[\"parameters/Seek/seek_position\"] = 12.0\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/animation/animation_tree.html",
            "title": "AnimationTree"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/125",
            "title": "3D Platformer Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "0",
            "value": "The number of available input ports for this node.",
            "setter": "set_enabled_inputs",
            "name": "input_count",
            "getter": "get_enabled_inputs",
            "type": "int"
          },
          {
            "default": "0.0",
            "value": "Cross-fading time (in seconds) between each animation connected to the inputs.",
            "setter": "set_cross_fade_time",
            "name": "xfade_time",
            "getter": "get_cross_fade_time",
            "type": "float"
          }
        ]
      },
      "inherits": "AnimationNode",
      "methods": {
        "method": [
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "input",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_input_caption",
            "description": {}
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "input",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_input_set_as_auto_advance",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "input",
                "type": "int",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_input_as_auto_advance",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "input",
                "type": "int",
                "index": "0"
              },
              {
                "name": "caption",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set_input_caption",
            "description": {}
          }
        ]
      },
      "name": "AnimationNodeTransition",
      "version": "3.3",
      "constants": {},
      "brief_description": "A generic animation transition node for [AnimationTree].",
      "description": "Simple state machine for cases which don't require a more advanced [AnimationNodeStateMachine]. Animations can be connected to the inputs and transition times can be specified."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/animation/animation_tree.html"
      },
      "members": {
        "member": {
          "value": "If [code]true[/code], filtering is enabled.",
          "setter": "set_filter_enabled",
          "name": "filter_enabled",
          "getter": "is_filter_enabled",
          "type": "bool"
        }
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "add_input",
            "description": "Adds an input to the node. This is only useful for nodes created for use in an [AnimationNodeBlendTree]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "animation",
                "type": "String",
                "index": "0"
              },
              {
                "name": "time",
                "type": "float",
                "index": "1"
              },
              {
                "name": "delta",
                "type": "float",
                "index": "2"
              },
              {
                "name": "seeked",
                "type": "bool",
                "index": "3"
              },
              {
                "name": "blend",
                "type": "float",
                "index": "4"
              }
            ],
            "name": "blend_animation",
            "description": "Blend an animation by [code]blend[/code] amount (name must be valid in the linked [AnimationPlayer]). A [code]time[/code] and [code]delta[/code] may be passed, as well as whether [code]seek[/code] happened."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "input_index",
                "type": "int",
                "index": "0"
              },
              {
                "name": "time",
                "type": "float",
                "index": "1"
              },
              {
                "name": "seek",
                "type": "bool",
                "index": "2"
              },
              {
                "name": "blend",
                "type": "float",
                "index": "3"
              },
              {
                "default": "0",
                "name": "filter",
                "type": "int",
                "enum": "AnimationNode.FilterAction",
                "index": "4"
              },
              {
                "default": "true",
                "name": "optimize",
                "type": "bool",
                "index": "5"
              }
            ],
            "name": "blend_input",
            "description": "Blend an input. This is only useful for nodes created for an [AnimationNodeBlendTree]. The [code]time[/code] parameter is a relative delta, unless [code]seek[/code] is [code]true[/code], in which case it is absolute. A filter mode may be optionally passed (see [enum FilterAction] for options)."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node",
                "type": "AnimationNode",
                "index": "1"
              },
              {
                "name": "time",
                "type": "float",
                "index": "2"
              },
              {
                "name": "seek",
                "type": "bool",
                "index": "3"
              },
              {
                "name": "blend",
                "type": "float",
                "index": "4"
              },
              {
                "default": "0",
                "name": "filter",
                "type": "int",
                "enum": "AnimationNode.FilterAction",
                "index": "5"
              },
              {
                "default": "true",
                "name": "optimize",
                "type": "bool",
                "index": "6"
              }
            ],
            "name": "blend_node",
            "description": "Blend another animation node (in case this node contains children animation nodes). This function is only useful if you inherit from [AnimationRootNode] instead, else editors will not display your node for addition."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "virtual",
            "name": "get_caption",
            "description": "Gets the text caption for this node (used by some editors)."
          },
          {
            "return": {
              "type": "Object"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "get_child_by_name",
            "description": "Gets a child node by index (used by editors inheriting from [AnimationRootNode])."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "qualifiers": "virtual",
            "name": "get_child_nodes",
            "description": "Gets all children nodes in order as a [code]name: node[/code] dictionary. Only useful when inheriting [AnimationRootNode]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_input_count",
            "description": "Amount of inputs in this node, only useful for nodes that go into [AnimationNodeBlendTree]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "input",
              "type": "int",
              "index": "0"
            },
            "name": "get_input_name",
            "description": "Gets the name of an input by index."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_parameter",
            "description": "Gets the value of a parameter. Parameters are custom local memory used for your nodes, given a resource can be reused in multiple trees."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "get_parameter_default_value",
            "description": "Gets the default value of a parameter. Parameters are custom local memory used for your nodes, given a resource can be reused in multiple trees."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "virtual",
            "name": "get_parameter_list",
            "description": "Gets the property information for parameter. Parameters are custom local memory used for your nodes, given a resource can be reused in multiple trees. Format is similar to [method Object.get_property_list]."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "virtual",
            "name": "has_filter",
            "description": "Returns [code]true[/code] whether you want the blend tree editor to display filter editing on this node."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "path",
              "type": "NodePath",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_path_filtered",
            "description": "Returns [code]true[/code] whether a given path is filtered."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "time",
                "type": "float",
                "index": "0"
              },
              {
                "name": "seek",
                "type": "bool",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "process",
            "description": "User-defined callback called when a custom node is processed. The [code]time[/code] parameter is a relative delta, unless [code]seek[/code] is [code]true[/code], in which case it is absolute.\n\t\t\t\tHere, call the [method blend_input], [method blend_node] or [method blend_animation] functions. You can also use [method get_parameter] and [method set_parameter] to modify local memory.\n\t\t\t\tThis function should return the time left for the current animation to finish (if unsure, pass the value from the main blend being called)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "name": "remove_input",
            "description": "Removes an input, call this only when inactive."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "path",
                "type": "NodePath",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_filter_path",
            "description": "Adds or removes a path for the filter."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "set_parameter",
            "description": "Sets a custom parameter. These are used as local storage, because resources can be reused across the tree or scenes."
          }
        ]
      },
      "name": "AnimationNode",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "removed_from_graph",
            "description": "Called when the node was removed from the graph."
          },
          {
            "name": "tree_changed",
            "description": "Emitted by nodes that inherit from this class and that have an internal tree when one of their nodes changes. The nodes that emit this signal are [AnimationNodeBlendSpace1D], [AnimationNodeBlendSpace2D], [AnimationNodeStateMachine], and [AnimationNodeBlendTree]."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "FILTER_IGNORE",
            "enum": "FilterAction"
          },
          {
            "value": "1",
            "name": "FILTER_PASS",
            "enum": "FilterAction"
          },
          {
            "value": "2",
            "name": "FILTER_STOP",
            "enum": "FilterAction"
          },
          {
            "value": "3",
            "name": "FILTER_BLEND",
            "enum": "FilterAction"
          }
        ]
      },
      "brief_description": "Base resource for [AnimationTree] nodes.",
      "description": "Base resource for [AnimationTree] nodes. In general, it's not used directly, but you can create custom ones with custom blending formulas.\n\tInherit this when creating nodes mainly for use in [AnimationNodeBlendTree], otherwise [AnimationRootNode] should be used instead."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/animation/index.html",
            "title": "Animation tutorial index"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/2d/2d_sprite_animation.html",
            "title": "2D Sprite animation"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "value": "If playing, the current animation; otherwise, the animation last played. When set, would change the animation, but would not play it unless currently playing. See also [member current_animation].",
            "setter": "set_assigned_animation",
            "name": "assigned_animation",
            "getter": "get_assigned_animation",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "The name of the animation to play when the scene loads.",
            "setter": "set_autoplay",
            "name": "autoplay",
            "getter": "get_autoplay",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "The name of the currently playing animation. If no animation is playing, the property's value is an empty string. Changing this value does not restart the animation. See [method play] for more information on playing animations.\n\t\t\t[b]Note[/b]: while this property appears in the inspector, it's not meant to be edited, and it's not saved in the scene. This property is mainly used to get the currently playing animation, and internally for animation playback tracks. For more information, see [Animation].",
            "setter": "set_current_animation",
            "name": "current_animation",
            "getter": "get_current_animation",
            "type": "String"
          },
          {
            "value": "The length (in seconds) of the currently being played animation.",
            "setter": "",
            "name": "current_animation_length",
            "getter": "get_current_animation_length",
            "type": "float"
          },
          {
            "value": "The position (in seconds) of the currently playing animation.",
            "setter": "",
            "name": "current_animation_position",
            "getter": "get_current_animation_position",
            "type": "float"
          },
          {
            "default": "0",
            "value": "The call mode to use for Call Method tracks.",
            "setter": "set_method_call_mode",
            "name": "method_call_mode",
            "getter": "get_method_call_mode",
            "type": "int",
            "enum": "AnimationPlayer.AnimationMethodCallMode"
          },
          {
            "value": "If [code]true[/code], updates animations in response to process-related notifications.",
            "setter": "set_active",
            "name": "playback_active",
            "getter": "is_active",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "The default time in which to blend animations. Ranges from 0 to 4096 with 0.01 precision.",
            "setter": "set_default_blend_time",
            "name": "playback_default_blend_time",
            "getter": "get_default_blend_time",
            "type": "float"
          },
          {
            "default": "1",
            "value": "The process notification in which to update animations.",
            "setter": "set_animation_process_mode",
            "name": "playback_process_mode",
            "getter": "get_animation_process_mode",
            "type": "int",
            "enum": "AnimationPlayer.AnimationProcessMode"
          },
          {
            "default": "1.0",
            "value": "The speed scaling ratio. For instance, if this value is 1, then the animation plays at normal speed. If it's 0.5, then it plays at half speed. If it's 2, then it plays at double speed.",
            "setter": "set_speed_scale",
            "name": "playback_speed",
            "getter": "get_speed_scale",
            "type": "float"
          },
          {
            "default": "NodePath(\"..\")",
            "value": "The node from which node path references will travel.",
            "setter": "set_root",
            "name": "root_node",
            "getter": "get_root",
            "type": "NodePath"
          }
        ]
      },
      "inherits": "Node",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "animation",
                "type": "Animation",
                "index": "1"
              }
            ],
            "name": "add_animation",
            "description": "Adds [code]animation[/code] to the player accessible with the key [code]name[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "delta",
              "type": "float",
              "index": "0"
            },
            "name": "advance",
            "description": "Shifts position in the animation timeline and immediately updates the animation. [code]delta[/code] is the time in seconds to shift. Events between the current frame and [code]delta[/code] are handled."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "anim_from",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "animation_get_next",
            "description": "Returns the name of the next animation in the queue."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "anim_from",
                "type": "String",
                "index": "0"
              },
              {
                "name": "anim_to",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "animation_set_next",
            "description": "Triggers the [code]anim_to[/code] animation when the [code]anim_from[/code] animation completes."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_caches",
            "description": "[AnimationPlayer] caches animated nodes. It may not notice if a node disappears; [method clear_caches] forces it to update the cache again."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_queue",
            "description": "Clears all queued, unplayed animations."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "animation",
              "type": "Animation",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "find_animation",
            "description": "Returns the name of [code]animation[/code] or an empty string if not found."
          },
          {
            "return": {
              "type": "Animation"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_animation",
            "description": "Returns the [Animation] with key [code]name[/code] or [code]null[/code] if not found."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "qualifiers": "const",
            "name": "get_animation_list",
            "description": "Returns the list of stored animation names."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "anim_from",
                "type": "String",
                "index": "0"
              },
              {
                "name": "anim_to",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_blend_time",
            "description": "Gets the blend time (in seconds) between two animations, referenced by their names."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_playing_speed",
            "description": "Gets the actual playing speed of current animation or 0 if not playing. This speed is the [member playback_speed] property multiplied by [code]custom_speed[/code] argument specified when calling the [method play] method."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "name": "get_queue",
            "description": "Returns a list of the animation names that are currently queued to play."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_animation",
            "description": "Returns [code]true[/code] if the [AnimationPlayer] stores an [Animation] with key [code]name[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_playing",
            "description": "Returns [code]true[/code] if playing an animation."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "default": "\"\"",
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "default": "-1",
                "name": "custom_blend",
                "type": "float",
                "index": "1"
              },
              {
                "default": "1.0",
                "name": "custom_speed",
                "type": "float",
                "index": "2"
              },
              {
                "default": "false",
                "name": "from_end",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "play",
            "description": "Plays the animation with key [code]name[/code]. Custom blend times and speed can be set. If [code]custom_speed[/code] is negative and [code]from_end[/code] is [code]true[/code], the animation will play backwards (which is equivalent to calling [method play_backwards]).\n\t\t\t\tThe [AnimationPlayer] keeps track of its current or last played animation with [member assigned_animation]. If this method is called with that same animation [code]name[/code], or with no [code]name[/code] parameter, the assigned animation will resume playing if it was paused, or restart if it was stopped (see [method stop] for both pause and stop). If the animation was already playing, it will keep playing.\n\t\t\t\t[b]Note:[/b] The animation will be updated the next time the [AnimationPlayer] is processed. If other variables are updated at the same time this is called, they may be updated too early. To perform the update immediately, call [code]advance(0)[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "default": "\"\"",
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "default": "-1",
                "name": "custom_blend",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "play_backwards",
            "description": "Plays the animation with key [code]name[/code] in reverse.\n\t\t\t\tThis method is a shorthand for [method play] with [code]custom_speed = -1.0[/code] and [code]from_end = true[/code], so see its description for more information."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "queue",
            "description": "Queues an animation for playback once the current one is done.\n\t\t\t\t[b]Note:[/b] If a looped animation is currently playing, the queued animation will never play unless the looped animation is stopped somehow."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "remove_animation",
            "description": "Removes the animation with key [code]name[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "newname",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "rename_animation",
            "description": "Renames an existing animation with key [code]name[/code] to [code]newname[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "seconds",
                "type": "float",
                "index": "0"
              },
              {
                "default": "false",
                "name": "update",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "seek",
            "description": "Seeks the animation to the [code]seconds[/code] point in time (in seconds). If [code]update[/code] is [code]true[/code], the animation updates too, otherwise it updates at process time. Events between the current frame and [code]seconds[/code] are skipped."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "anim_from",
                "type": "String",
                "index": "0"
              },
              {
                "name": "anim_to",
                "type": "String",
                "index": "1"
              },
              {
                "name": "sec",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "set_blend_time",
            "description": "Specifies a blend time (in seconds) between two animations, referenced by their names."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "true",
              "name": "reset",
              "type": "bool",
              "index": "0"
            },
            "name": "stop",
            "description": "Stops or pauses the currently playing animation. If [code]reset[/code] is [code]true[/code], the animation position is reset to [code]0[/code] and the playback speed is reset to [code]1.0[/code].\n\t\t\t\tIf [code]reset[/code] is [code]false[/code], the [member current_animation_position] will be kept and calling [method play] or [method play_backwards] without arguments or with the same animation name as [member assigned_animation] will resume the animation."
          }
        ]
      },
      "name": "AnimationPlayer",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": [
              {
                "name": "old_name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "new_name",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "animation_changed",
            "description": "If the currently being played animation changes, this signal will notify of such change."
          },
          {
            "argument": {
              "name": "anim_name",
              "type": "String",
              "index": "0"
            },
            "name": "animation_finished",
            "description": "Notifies when an animation finished playing."
          },
          {
            "argument": {
              "name": "anim_name",
              "type": "String",
              "index": "0"
            },
            "name": "animation_started",
            "description": "Notifies when an animation starts playing."
          },
          {
            "name": "caches_cleared",
            "description": "Notifies when the caches have been cleared, either automatically, or manually via [method clear_caches]."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "ANIMATION_PROCESS_PHYSICS",
            "enum": "AnimationProcessMode"
          },
          {
            "value": "1",
            "name": "ANIMATION_PROCESS_IDLE",
            "enum": "AnimationProcessMode"
          },
          {
            "value": "2",
            "name": "ANIMATION_PROCESS_MANUAL",
            "enum": "AnimationProcessMode"
          },
          {
            "value": "0",
            "name": "ANIMATION_METHOD_CALL_DEFERRED",
            "enum": "AnimationMethodCallMode"
          },
          {
            "value": "1",
            "name": "ANIMATION_METHOD_CALL_IMMEDIATE",
            "enum": "AnimationMethodCallMode"
          }
        ]
      },
      "brief_description": "Container and player of [Animation] resources.",
      "description": "An animation player is used for general-purpose playback of [Animation] resources. It contains a dictionary of animations (referenced by name) and custom blend times between their transitions. Additionally, animations can be played and blended in different channels.\n\t\t[AnimationPlayer] is more suited than [Tween] for animations where you know the final values in advance. For example, fading a screen in and out is more easily done with an [AnimationPlayer] node thanks to the animation tools provided by the editor. That particular example can also be implemented with a [Tween] node, but it requires doing everything by code.\n\t\tUpdating the target properties of animations occurs at process time."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "AnimationNode",
      "methods": {},
      "name": "AnimationRootNode",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {},
      "name": "AnimationTrackEditPlugin",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/animation/animation_tree.html"
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the [AnimationTreePlayer] is able to play animations.",
            "setter": "set_active",
            "name": "active",
            "getter": "is_active",
            "type": "bool"
          },
          {
            "default": "NodePath(\"..\")",
            "value": "The node from which to relatively access other nodes.\n\t\t\tIt accesses the bones, so it should point to the same node the [AnimationPlayer] would point its Root Node at.",
            "setter": "set_base_path",
            "name": "base_path",
            "getter": "get_base_path",
            "type": "NodePath"
          },
          {
            "default": "NodePath(\"\")",
            "value": "The path to the [AnimationPlayer] from which this [AnimationTreePlayer] binds animations to animation nodes.\n\t\t\tOnce set, [Animation] nodes can be added to the [AnimationTreePlayer].",
            "setter": "set_master_player",
            "name": "master_player",
            "getter": "get_master_player",
            "type": "NodePath"
          },
          {
            "default": "1",
            "value": "The thread in which to update animations.",
            "setter": "set_animation_process_mode",
            "name": "playback_process_mode",
            "getter": "get_animation_process_mode",
            "type": "int",
            "enum": "AnimationTreePlayer.AnimationProcessMode"
          }
        ]
      },
      "inherits": "Node",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "type",
                "type": "int",
                "enum": "AnimationTreePlayer.NodeType",
                "index": "0"
              },
              {
                "name": "id",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "add_node",
            "description": "Adds a [code]type[/code] node to the graph with name [code]id[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "delta",
              "type": "float",
              "index": "0"
            },
            "name": "advance",
            "description": "Shifts position in the animation timeline. [code]delta[/code] is the time in seconds to shift. Events between the current frame and [code]delta[/code] are handled."
          },
          {
            "return": {
              "type": "Animation"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "animation_node_get_animation",
            "description": "Returns the [AnimationPlayer]'s [Animation] bound to the [AnimationTreePlayer]'s animation node with name [code]id[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "animation_node_get_master_animation",
            "description": "Returns the name of the [member master_player]'s [Animation] bound to this animation node."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "animation_node_get_position",
            "description": "Returns the absolute playback timestamp of the animation node with name [code]id[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "animation",
                "type": "Animation",
                "index": "1"
              }
            ],
            "name": "animation_node_set_animation",
            "description": "Binds a new [Animation] from the [member master_player] to the [AnimationTreePlayer]'s animation node with name [code]id[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "path",
                "type": "NodePath",
                "index": "1"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "animation_node_set_filter_path",
            "description": "If [code]enable[/code] is [code]true[/code], the animation node with ID [code]id[/code] turns off the track modifying the property at [code]path[/code]. The modified node's children continue to animate."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "source",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "animation_node_set_master_animation",
            "description": "Binds the [Animation] named [code]source[/code] from [member master_player] to the animation node [code]id[/code]. Recalculates caches."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "dst_id",
                "type": "String",
                "index": "1"
              },
              {
                "name": "dst_input_idx",
                "type": "int",
                "index": "2"
              }
            ],
            "qualifiers": "const",
            "name": "are_nodes_connected",
            "description": "Returns whether node [code]id[/code] and [code]dst_id[/code] are connected at the specified slot."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "blend2_node_get_amount",
            "description": "Returns the blend amount of a Blend2 node given its name."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "blend",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "blend2_node_set_amount",
            "description": "Sets the blend amount of a Blend2 node given its name and value.\n\t\t\t\tA Blend2 node blends two animations (A and B) with the amount between 0 and 1.\n\t\t\t\tAt 0, output is input A. Towards 1, the influence of A gets lessened, the influence of B gets raised. At 1, output is input B."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "path",
                "type": "NodePath",
                "index": "1"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "blend2_node_set_filter_path",
            "description": "If [code]enable[/code] is [code]true[/code], the Blend2 node with name [code]id[/code] turns off the track modifying the property at [code]path[/code]. The modified node's children continue to animate."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "blend3_node_get_amount",
            "description": "Returns the blend amount of a Blend3 node given its name."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "blend",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "blend3_node_set_amount",
            "description": "Sets the blend amount of a Blend3 node given its name and value.\n\t\t\t\tA Blend3 Node blends three animations (A, B-, B+) with the amount between -1 and 1.\n\t\t\t\tAt -1, output is input B-. From -1 to 0, the influence of B- gets lessened, the influence of A gets raised and the influence of B+ is 0. At 0, output is input A. From 0 to 1, the influence of A gets lessened, the influence of B+ gets raised and the influence of B+ is 0. At 1, output is input B+."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "blend4_node_get_amount",
            "description": "Returns the blend amount of a Blend4 node given its name."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "blend",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "blend4_node_set_amount",
            "description": "Sets the blend amount of a Blend4 node given its name and value.\n\t\t\t\tA Blend4 Node blends two pairs of animations.\n\t\t\t\tThe two pairs are blended like Blend2 and then added together."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "dst_id",
                "type": "String",
                "index": "1"
              },
              {
                "name": "dst_input_idx",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "connect_nodes",
            "description": "Connects node [code]id[/code] to [code]dst_id[/code] at the specified input slot."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "dst_input_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "disconnect_nodes",
            "description": "Disconnects nodes connected to [code]id[/code] at the specified input slot."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "name": "get_node_list",
            "description": "Returns a [PoolStringArray] containing the name of all nodes."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "mix_node_get_amount",
            "description": "Returns the mix amount of a Mix node given its name."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "ratio",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "mix_node_set_amount",
            "description": "Sets the mix amount of a Mix node given its name and value.\n\t\t\t\tA Mix node adds input b to input a by the amount given by ratio."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "node",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "node_exists",
            "description": "Check if a node exists (by name)."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "node_get_input_count",
            "description": "Returns the input count for a given node. Different types of nodes have different amount of inputs."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "node_get_input_source",
            "description": "Returns the input source for a given node input."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "node_get_position",
            "description": "Returns position of a node in the graph given its name."
          },
          {
            "return": {
              "type": "int",
              "enum": "AnimationTreePlayer.NodeType"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "node_get_type",
            "description": "Gets the node type, will return from [enum NodeType] enum."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "node",
                "type": "String",
                "index": "0"
              },
              {
                "name": "new_name",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "node_rename",
            "description": "Renames a node in the graph."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "screen_position",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "node_set_position",
            "description": "Sets the position of a node in the graph given its name and position."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "oneshot_node_get_autorestart_delay",
            "description": "Returns the autostart delay of a OneShot node given its name."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "oneshot_node_get_autorestart_random_delay",
            "description": "Returns the autostart random delay of a OneShot node given its name."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "oneshot_node_get_fadein_time",
            "description": "Returns the fade in time of a OneShot node given its name."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "oneshot_node_get_fadeout_time",
            "description": "Returns the fade out time of a OneShot node given its name."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "oneshot_node_has_autorestart",
            "description": "Returns whether a OneShot node will auto restart given its name."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "oneshot_node_is_active",
            "description": "Returns whether a OneShot node is active given its name."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "oneshot_node_set_autorestart",
            "description": "Sets the autorestart property of a OneShot node given its name and value."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "delay_sec",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "oneshot_node_set_autorestart_delay",
            "description": "Sets the autorestart delay of a OneShot node given its name and value in seconds."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "rand_sec",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "oneshot_node_set_autorestart_random_delay",
            "description": "Sets the autorestart random delay of a OneShot node given its name and value in seconds."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "time_sec",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "oneshot_node_set_fadein_time",
            "description": "Sets the fade in time of a OneShot node given its name and value in seconds."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "time_sec",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "oneshot_node_set_fadeout_time",
            "description": "Sets the fade out time of a OneShot node given its name and value in seconds."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "path",
                "type": "NodePath",
                "index": "1"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "oneshot_node_set_filter_path",
            "description": "If [code]enable[/code] is [code]true[/code], the OneShot node with ID [code]id[/code] turns off the track modifying the property at [code]path[/code]. The modified node's children continue to animate."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "name": "oneshot_node_start",
            "description": "Starts a OneShot node given its name."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "name": "oneshot_node_stop",
            "description": "Stops the OneShot node with name [code]id[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "recompute_caches",
            "description": "Manually recalculates the cache of track information generated from animation nodes. Needed when external sources modify the animation nodes' state."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "name": "remove_node",
            "description": "Removes the animation node with name [code]id[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "reset",
            "description": "Resets this [AnimationTreePlayer]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "timescale_node_get_scale",
            "description": "Returns the time scale value of the TimeScale node with name [code]id[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "scale",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "timescale_node_set_scale",
            "description": "Sets the time scale of the TimeScale node with name [code]id[/code] to [code]scale[/code].\n\t\t\t\tThe TimeScale node is used to speed [Animation]s up if the scale is above 1 or slow them down if it is below 1.\n\t\t\t\tIf applied after a blend or mix, affects all input animations to that blend or mix."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "seconds",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "timeseek_node_seek",
            "description": "Sets the time seek value of the TimeSeek node with name [code]id[/code] to [code]seconds[/code].\n\t\t\t\tThis functions as a seek in the [Animation] or the blend or mix of [Animation]s input in it."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "input_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "transition_node_delete_input",
            "description": "Deletes the input at [code]input_idx[/code] for the transition node with name [code]id[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "transition_node_get_current",
            "description": "Returns the index of the currently evaluated input for the transition node with name [code]id[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "transition_node_get_input_count",
            "description": "Returns the number of inputs for the transition node with name [code]id[/code]. You can add inputs by right-clicking on the transition node."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "id",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "transition_node_get_xfade_time",
            "description": "Returns the cross fade time for the transition node with name [code]id[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "input_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "transition_node_has_input_auto_advance",
            "description": "Returns [code]true[/code] if the input at [code]input_idx[/code] on the transition node with name [code]id[/code] is set to automatically advance to the next input upon completion."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "input_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "transition_node_set_current",
            "description": "The transition node with name [code]id[/code] sets its current input at [code]input_idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "input_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "transition_node_set_input_auto_advance",
            "description": "The transition node with name [code]id[/code] advances to its next input automatically when the input at [code]input_idx[/code] completes."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "count",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "transition_node_set_input_count",
            "description": "Resizes the number of inputs available for the transition node with name [code]id[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "String",
                "index": "0"
              },
              {
                "name": "time_sec",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "transition_node_set_xfade_time",
            "description": "The transition node with name [code]id[/code] sets its cross fade time to [code]time_sec[/code]."
          }
        ]
      },
      "name": "AnimationTreePlayer",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "NODE_OUTPUT",
            "enum": "NodeType"
          },
          {
            "value": "1",
            "name": "NODE_ANIMATION",
            "enum": "NodeType"
          },
          {
            "value": "2",
            "name": "NODE_ONESHOT",
            "enum": "NodeType"
          },
          {
            "value": "3",
            "name": "NODE_MIX",
            "enum": "NodeType"
          },
          {
            "value": "4",
            "name": "NODE_BLEND2",
            "enum": "NodeType"
          },
          {
            "value": "5",
            "name": "NODE_BLEND3",
            "enum": "NodeType"
          },
          {
            "value": "6",
            "name": "NODE_BLEND4",
            "enum": "NodeType"
          },
          {
            "value": "7",
            "name": "NODE_TIMESCALE",
            "enum": "NodeType"
          },
          {
            "value": "8",
            "name": "NODE_TIMESEEK",
            "enum": "NodeType"
          },
          {
            "value": "9",
            "name": "NODE_TRANSITION",
            "enum": "NodeType"
          },
          {
            "value": "0",
            "name": "ANIMATION_PROCESS_PHYSICS",
            "enum": "AnimationProcessMode"
          },
          {
            "value": "1",
            "name": "ANIMATION_PROCESS_IDLE",
            "enum": "AnimationProcessMode"
          }
        ]
      },
      "brief_description": "[i]Deprecated.[/i] Animation player that uses a node graph for blending animations. Superseded by [AnimationTree].",
      "description": "[i]Deprecated.[/i] A node graph tool for blending multiple animations bound to an [AnimationPlayer]. Especially useful for animating characters or other skeleton-based rigs. It can combine several animations to form a desired pose.\n\t\tIt takes [Animation]s from an [AnimationPlayer] node and mixes them depending on the graph.\n\t\tSee [AnimationTree] for a more full-featured replacement of this node."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/animation/animation_tree.html",
            "title": "Using AnimationTree"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the [AnimationTree] will be processing.",
            "setter": "set_active",
            "name": "active",
            "getter": "is_active",
            "type": "bool"
          },
          {
            "default": "NodePath(\"\")",
            "value": "The path to the [AnimationPlayer] used for animating.",
            "setter": "set_animation_player",
            "name": "anim_player",
            "getter": "get_animation_player",
            "type": "NodePath"
          },
          {
            "default": "1",
            "value": "The process mode of this [AnimationTree]. See [enum AnimationProcessMode] for available modes.",
            "setter": "set_process_mode",
            "name": "process_mode",
            "getter": "get_process_mode",
            "type": "int",
            "enum": "AnimationTree.AnimationProcessMode"
          },
          {
            "default": "NodePath(\"\")",
            "value": "The path to the Animation track used for root motion. Paths must be valid scene-tree paths to a node, and must be specified starting from the parent node of the node that will reproduce the animation. To specify a track that controls properties or bones, append its name after the path, separated by [code]\":\"[/code]. For example, [code]\"character/skeleton:ankle\"[/code] or [code]\"character/mesh:transform/local\"[/code].\n\t\t\tIf the track has type [constant Animation.TYPE_TRANSFORM], the transformation will be cancelled visually, and the animation will appear to stay in place. See also [method get_root_motion_transform] and [RootMotionView].",
            "setter": "set_root_motion_track",
            "name": "root_motion_track",
            "getter": "get_root_motion_track",
            "type": "NodePath"
          },
          {
            "value": "The root animation node of this [AnimationTree]. See [AnimationNode].",
            "setter": "set_tree_root",
            "name": "tree_root",
            "getter": "get_tree_root",
            "type": "AnimationNode"
          }
        ]
      },
      "inherits": "Node",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "delta",
              "type": "float",
              "index": "0"
            },
            "name": "advance",
            "description": "Manually advance the animations by the specified time (in seconds)."
          },
          {
            "return": {
              "type": "Transform"
            },
            "qualifiers": "const",
            "name": "get_root_motion_transform",
            "description": "Retrieve the motion of the [member root_motion_track] as a [Transform] that can be used elsewhere. If [member root_motion_track] is not a path to a track of type [constant Animation.TYPE_TRANSFORM], returns an identity transformation. See also [member root_motion_track] and [RootMotionView]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "old_name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "new_name",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "rename_parameter",
            "description": {}
          }
        ]
      },
      "name": "AnimationTree",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "ANIMATION_PROCESS_PHYSICS",
            "enum": "AnimationProcessMode"
          },
          {
            "value": "1",
            "name": "ANIMATION_PROCESS_IDLE",
            "enum": "AnimationProcessMode"
          },
          {
            "value": "2",
            "name": "ANIMATION_PROCESS_MANUAL",
            "enum": "AnimationProcessMode"
          }
        ]
      },
      "brief_description": "A node to be used for advanced animation transitions in an [AnimationPlayer].",
      "description": "Note: When linked with an [AnimationPlayer], several properties and methods of the corresponding [AnimationPlayer] will not function as expected. Playback and transitions should be handled using only the [AnimationTree] and its constituent [AnimationNode](s). The [AnimationPlayer] node should be used solely for adding, deleting, and editing animations."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/animation/index.html"
      },
      "members": {
        "member": [
          {
            "default": "1.0",
            "value": "The total length of the animation (in seconds).\n\t\t\t[b]Note:[/b] Length is not delimited by the last key, as this one may be before or after the end to ensure correct interpolation and looping.",
            "setter": "set_length",
            "name": "length",
            "getter": "get_length",
            "type": "float"
          },
          {
            "default": "false",
            "value": "A flag indicating that the animation must loop. This is used for correct interpolation of animation cycles, and for hinting the player that it must restart the animation.",
            "setter": "set_loop",
            "name": "loop",
            "getter": "has_loop",
            "type": "bool"
          },
          {
            "default": "0.1",
            "value": "The animation step value.",
            "setter": "set_step",
            "name": "step",
            "getter": "get_step",
            "type": "float"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "type",
                "type": "int",
                "enum": "Animation.TrackType",
                "index": "0"
              },
              {
                "default": "-1",
                "name": "at_position",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "add_track",
            "description": "Adds a track to the Animation."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "animation_track_get_key_animation",
            "description": "Returns the animation name at the key identified by [code]key_idx[/code]. The [code]track_idx[/code] must be the index of an Animation Track."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "time",
                "type": "float",
                "index": "1"
              },
              {
                "name": "animation",
                "type": "String",
                "index": "2"
              }
            ],
            "name": "animation_track_insert_key",
            "description": "Inserts a key with value [code]animation[/code] at the given [code]time[/code] (in seconds). The [code]track_idx[/code] must be the index of an Animation Track."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "animation",
                "type": "String",
                "index": "2"
              }
            ],
            "name": "animation_track_set_key_animation",
            "description": "Sets the key identified by [code]key_idx[/code] to value [code]animation[/code]. The [code]track_idx[/code] must be the index of an Animation Track."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "audio_track_get_key_end_offset",
            "description": "Returns the end offset of the key identified by [code]key_idx[/code]. The [code]track_idx[/code] must be the index of an Audio Track.\n\t\t\t\tEnd offset is the number of seconds cut off at the ending of the audio stream."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "audio_track_get_key_start_offset",
            "description": "Returns the start offset of the key identified by [code]key_idx[/code]. The [code]track_idx[/code] must be the index of an Audio Track.\n\t\t\t\tStart offset is the number of seconds cut off at the beginning of the audio stream."
          },
          {
            "return": {
              "type": "Resource"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "audio_track_get_key_stream",
            "description": "Returns the audio stream of the key identified by [code]key_idx[/code]. The [code]track_idx[/code] must be the index of an Audio Track."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "time",
                "type": "float",
                "index": "1"
              },
              {
                "name": "stream",
                "type": "Resource",
                "index": "2"
              },
              {
                "default": "0",
                "name": "start_offset",
                "type": "float",
                "index": "3"
              },
              {
                "default": "0",
                "name": "end_offset",
                "type": "float",
                "index": "4"
              }
            ],
            "name": "audio_track_insert_key",
            "description": "Inserts an Audio Track key at the given [code]time[/code] in seconds. The [code]track_idx[/code] must be the index of an Audio Track.\n\t\t\t\t[code]stream[/code] is the [AudioStream] resource to play. [code]start_offset[/code] is the number of seconds cut off at the beginning of the audio stream, while [code]end_offset[/code] is at the ending."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "offset",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "audio_track_set_key_end_offset",
            "description": "Sets the end offset of the key identified by [code]key_idx[/code] to value [code]offset[/code]. The [code]track_idx[/code] must be the index of an Audio Track."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "offset",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "audio_track_set_key_start_offset",
            "description": "Sets the start offset of the key identified by [code]key_idx[/code] to value [code]offset[/code]. The [code]track_idx[/code] must be the index of an Audio Track."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "stream",
                "type": "Resource",
                "index": "2"
              }
            ],
            "name": "audio_track_set_key_stream",
            "description": "Sets the stream of the key identified by [code]key_idx[/code] to value [code]stream[/code]. The [code]track_idx[/code] must be the index of an Audio Track."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "bezier_track_get_key_in_handle",
            "description": "Returns the in handle of the key identified by [code]key_idx[/code]. The [code]track_idx[/code] must be the index of a Bezier Track."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "bezier_track_get_key_out_handle",
            "description": "Returns the out handle of the key identified by [code]key_idx[/code]. The [code]track_idx[/code] must be the index of a Bezier Track."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "bezier_track_get_key_value",
            "description": "Returns the value of the key identified by [code]key_idx[/code]. The [code]track_idx[/code] must be the index of a Bezier Track."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "time",
                "type": "float",
                "index": "1"
              },
              {
                "name": "value",
                "type": "float",
                "index": "2"
              },
              {
                "default": "Vector2( 0, 0 )",
                "name": "in_handle",
                "type": "Vector2",
                "index": "3"
              },
              {
                "default": "Vector2( 0, 0 )",
                "name": "out_handle",
                "type": "Vector2",
                "index": "4"
              }
            ],
            "name": "bezier_track_insert_key",
            "description": "Inserts a Bezier Track key at the given [code]time[/code] in seconds. The [code]track_idx[/code] must be the index of a Bezier Track.\n\t\t\t\t[code]in_handle[/code] is the left-side weight of the added Bezier curve point, [code]out_handle[/code] is the right-side one, while [code]value[/code] is the actual value at this point."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "time",
                "type": "float",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "bezier_track_interpolate",
            "description": "Returns the interpolated value at the given [code]time[/code] (in seconds). The [code]track_idx[/code] must be the index of a Bezier Track."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "in_handle",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "bezier_track_set_key_in_handle",
            "description": "Sets the in handle of the key identified by [code]key_idx[/code] to value [code]in_handle[/code]. The [code]track_idx[/code] must be the index of a Bezier Track."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "out_handle",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "bezier_track_set_key_out_handle",
            "description": "Sets the out handle of the key identified by [code]key_idx[/code] to value [code]out_handle[/code]. The [code]track_idx[/code] must be the index of a Bezier Track."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "value",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "bezier_track_set_key_value",
            "description": "Sets the value of the key identified by [code]key_idx[/code] to the given value. The [code]track_idx[/code] must be the index of a Bezier Track."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Clear the animation (clear all tracks and reset all)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_animation",
                "type": "Animation",
                "index": "1"
              }
            ],
            "name": "copy_track",
            "description": "Adds a new track that is a copy of the given track from [code]to_animation[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "path",
              "type": "NodePath",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "find_track",
            "description": "Returns the index of the specified track. If the track is not found, return -1."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_track_count",
            "description": "Returns the amount of tracks in the animation."
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "time_sec",
                "type": "float",
                "index": "1"
              },
              {
                "name": "delta",
                "type": "float",
                "index": "2"
              }
            ],
            "qualifiers": "const",
            "name": "method_track_get_key_indices",
            "description": "Returns all the key indices of a method track, given a position and delta time."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "method_track_get_name",
            "description": "Returns the method name of a method track."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "method_track_get_params",
            "description": "Returns the arguments values to be called on a method track for a given key in a given track."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "track_idx",
              "type": "int",
              "index": "0"
            },
            "name": "remove_track",
            "description": "Removes a track by specifying the track index."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "time",
                "type": "float",
                "index": "1"
              },
              {
                "default": "false",
                "name": "exact",
                "type": "bool",
                "index": "2"
              }
            ],
            "qualifiers": "const",
            "name": "track_find_key",
            "description": "Finds the key index by time in a given track. Optionally, only find it if the exact time is given."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "track_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "track_get_interpolation_loop_wrap",
            "description": "Returns [code]true[/code] if the track at [code]idx[/code] wraps the interpolation loop. New tracks wrap the interpolation loop by default."
          },
          {
            "return": {
              "type": "int",
              "enum": "Animation.InterpolationType"
            },
            "argument": {
              "name": "track_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "track_get_interpolation_type",
            "description": "Returns the interpolation type of a given track."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "track_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "track_get_key_count",
            "description": "Returns the amount of keys in a given track."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "track_get_key_time",
            "description": "Returns the time at which the key is located."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "track_get_key_transition",
            "description": "Returns the transition curve (easing) for a specific key (see the built-in math function [method @GDScript.ease])."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "track_get_key_value",
            "description": "Returns the value of a given key in a given track."
          },
          {
            "return": {
              "type": "NodePath"
            },
            "argument": {
              "name": "track_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "track_get_path",
            "description": "Gets the path of a track. For more information on the path format, see [method track_set_path]."
          },
          {
            "return": {
              "type": "int",
              "enum": "Animation.TrackType"
            },
            "argument": {
              "name": "track_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "track_get_type",
            "description": "Gets the type of a track."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "time",
                "type": "float",
                "index": "1"
              },
              {
                "name": "key",
                "type": "Variant",
                "index": "2"
              },
              {
                "default": "1",
                "name": "transition",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "track_insert_key",
            "description": "Insert a generic key in a given track."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "track_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "track_is_enabled",
            "description": "Returns [code]true[/code] if the track at index [code]idx[/code] is enabled."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "track_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "track_is_imported",
            "description": "Returns [code]true[/code] if the given track is imported. Else, return [code]false[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "track_idx",
              "type": "int",
              "index": "0"
            },
            "name": "track_move_down",
            "description": "Moves a track down."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "track_move_to",
            "description": "Changes the index position of track [code]idx[/code] to the one defined in [code]to_idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "track_idx",
              "type": "int",
              "index": "0"
            },
            "name": "track_move_up",
            "description": "Moves a track up."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "track_remove_key",
            "description": "Removes a key by index in a given track."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "position",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "track_remove_key_at_position",
            "description": "Removes a key by position (seconds) in a given track."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "track_set_enabled",
            "description": "Enables/disables the given track. Tracks are enabled by default."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "imported",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "track_set_imported",
            "description": "Sets the given track as imported or not."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "interpolation",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "track_set_interpolation_loop_wrap",
            "description": "If [code]true[/code], the track at [code]idx[/code] wraps the interpolation loop."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "interpolation",
                "type": "int",
                "enum": "Animation.InterpolationType",
                "index": "1"
              }
            ],
            "name": "track_set_interpolation_type",
            "description": "Sets the interpolation type of a given track."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "time",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "track_set_key_time",
            "description": "Sets the time of an existing key."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "transition",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "track_set_key_transition",
            "description": "Sets the transition curve (easing) for a specific key (see the built-in math function [method @GDScript.ease])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "key",
                "type": "int",
                "index": "1"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "2"
              }
            ],
            "name": "track_set_key_value",
            "description": "Sets the value of an existing key."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "path",
                "type": "NodePath",
                "index": "1"
              }
            ],
            "name": "track_set_path",
            "description": "Sets the path of a track. Paths must be valid scene-tree paths to a node and must be specified starting from the parent node of the node that will reproduce the animation. Tracks that control properties or bones must append their name after the path, separated by [code]\":\"[/code].\n\t\t\t\tFor example, [code]\"character/skeleton:ankle\"[/code] or [code]\"character/mesh:transform/local\"[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "with_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "track_swap",
            "description": "Swaps the track [code]idx[/code]'s index position with the track [code]with_idx[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "time",
                "type": "float",
                "index": "1"
              },
              {
                "name": "location",
                "type": "Vector3",
                "index": "2"
              },
              {
                "name": "rotation",
                "type": "Quat",
                "index": "3"
              },
              {
                "name": "scale",
                "type": "Vector3",
                "index": "4"
              }
            ],
            "name": "transform_track_insert_key",
            "description": "Insert a transform key for a transform track."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "time_sec",
                "type": "float",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "transform_track_interpolate",
            "description": "Returns the interpolated value of a transform track at a given time (in seconds). An array consisting of 3 elements: position ([Vector3]), rotation ([Quat]) and scale ([Vector3])."
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "time_sec",
                "type": "float",
                "index": "1"
              },
              {
                "name": "delta",
                "type": "float",
                "index": "2"
              }
            ],
            "qualifiers": "const",
            "name": "value_track_get_key_indices",
            "description": "Returns all the key indices of a value track, given a position and delta time."
          },
          {
            "return": {
              "type": "int",
              "enum": "Animation.UpdateMode"
            },
            "argument": {
              "name": "track_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "value_track_get_update_mode",
            "description": "Returns the update mode of a value track."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "time_sec",
                "type": "float",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "value_track_interpolate",
            "description": "Returns the interpolated value at the given time (in seconds). The [code]track_idx[/code] must be the index of a value track."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "track_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "mode",
                "type": "int",
                "enum": "Animation.UpdateMode",
                "index": "1"
              }
            ],
            "name": "value_track_set_update_mode",
            "description": "Sets the update mode (see [enum UpdateMode]) of a value track."
          }
        ]
      },
      "name": "Animation",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "tracks_changed",
          "description": "Emitted when there's a change in the list of tracks, e.g. tracks are added, moved or have changed paths."
        }
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "TYPE_VALUE",
            "enum": "TrackType"
          },
          {
            "value": "1",
            "name": "TYPE_TRANSFORM",
            "enum": "TrackType"
          },
          {
            "value": "2",
            "name": "TYPE_METHOD",
            "enum": "TrackType"
          },
          {
            "value": "3",
            "name": "TYPE_BEZIER",
            "enum": "TrackType"
          },
          {
            "value": "4",
            "name": "TYPE_AUDIO",
            "enum": "TrackType"
          },
          {
            "value": "5",
            "name": "TYPE_ANIMATION",
            "enum": "TrackType"
          },
          {
            "value": "0",
            "name": "INTERPOLATION_NEAREST",
            "enum": "InterpolationType"
          },
          {
            "value": "1",
            "name": "INTERPOLATION_LINEAR",
            "enum": "InterpolationType"
          },
          {
            "value": "2",
            "name": "INTERPOLATION_CUBIC",
            "enum": "InterpolationType"
          },
          {
            "value": "0",
            "name": "UPDATE_CONTINUOUS",
            "enum": "UpdateMode"
          },
          {
            "value": "1",
            "name": "UPDATE_DISCRETE",
            "enum": "UpdateMode"
          },
          {
            "value": "2",
            "name": "UPDATE_TRIGGER",
            "enum": "UpdateMode"
          },
          {
            "value": "3",
            "name": "UPDATE_CAPTURE",
            "enum": "UpdateMode"
          }
        ]
      },
      "brief_description": "Contains data used to animate everything in the engine.",
      "description": "An Animation resource contains data used to animate everything in the engine. Animations are divided into tracks, and each track must be linked to a node. The state of that node can be changed through time, by adding timed keys (events) to the track.\n\t\t[codeblock]\n\t\t# This creates an animation that makes the node \"Enemy\" move to the right by\n\t\t# 100 pixels in 0.5 seconds.\n\t\tvar animation = Animation.new()\n\t\tvar track_index = animation.add_track(Animation.TYPE_VALUE)\n\t\tanimation.track_set_path(track_index, \"Enemy:position:x\")\n\t\tanimation.track_insert_key(track_index, 0.0, 0)\n\t\tanimation.track_insert_key(track_index, 0.5, 100)\n\t\t[/codeblock]\n\t\tAnimations are just data containers, and must be added to nodes such as an [AnimationPlayer] or [AnimationTreePlayer] to be played back. Animation tracks have different types, each with its own set of dedicated methods. Check [enum TrackType] to see available types."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/physics/using_area_2d.html",
            "title": "Using Area2D"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/515",
            "title": "2D Dodge The Creeps Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/121",
            "title": "2D Pong Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/120",
            "title": "2D Platformer Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "1.0",
            "value": "The rate at which objects stop spinning in this area. Represents the angular velocity lost per second.\n\t\t\tSee [member ProjectSettings.physics/2d/default_angular_damp] for more details about damping.",
            "setter": "set_angular_damp",
            "name": "angular_damp",
            "getter": "get_angular_damp",
            "type": "float"
          },
          {
            "default": "\"Master\"",
            "value": "The name of the area's audio bus.",
            "setter": "set_audio_bus_name",
            "name": "audio_bus_name",
            "getter": "get_audio_bus_name",
            "type": "String"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the area's audio bus overrides the default audio bus.",
            "setter": "set_audio_bus_override",
            "name": "audio_bus_override",
            "getter": "is_overriding_audio_bus",
            "type": "bool"
          },
          {
            "default": "1",
            "value": "The area's physics layer(s). Collidable objects can exist in any of 32 different layers. A contact is detected if object A is in any of the layers that object B scans, or object B is in any layers that object A scans. See also [member collision_mask]. See [url=https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.",
            "setter": "set_collision_layer",
            "name": "collision_layer",
            "getter": "get_collision_layer",
            "type": "int"
          },
          {
            "default": "1",
            "value": "The physics layers this area scans to determine collision detection. See [url=https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.",
            "setter": "set_collision_mask",
            "name": "collision_mask",
            "getter": "get_collision_mask",
            "type": "int"
          },
          {
            "default": "98.0",
            "value": "The area's gravity intensity (in pixels per second squared). This value multiplies the gravity vector. This is useful to alter the force of gravity without altering its direction.",
            "setter": "set_gravity",
            "name": "gravity",
            "getter": "get_gravity",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The falloff factor for point gravity. The greater the value, the faster gravity decreases with distance.",
            "setter": "set_gravity_distance_scale",
            "name": "gravity_distance_scale",
            "getter": "get_gravity_distance_scale",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], gravity is calculated from a point (set via [member gravity_vec]). See also [member space_override].",
            "setter": "set_gravity_is_point",
            "name": "gravity_point",
            "getter": "is_gravity_a_point",
            "type": "bool"
          },
          {
            "default": "Vector2( 0, 1 )",
            "value": "The area's gravity vector (not normalized). If gravity is a point (see [member gravity_point]), this will be the point of attraction.",
            "setter": "set_gravity_vector",
            "name": "gravity_vec",
            "getter": "get_gravity_vector",
            "type": "Vector2"
          },
          {
            "default": "0.1",
            "value": "The rate at which objects stop moving in this area. Represents the linear velocity lost per second.\n\t\t\tSee [member ProjectSettings.physics/2d/default_linear_damp] for more details about damping.",
            "setter": "set_linear_damp",
            "name": "linear_damp",
            "getter": "get_linear_damp",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], other monitoring areas can detect this area.",
            "setter": "set_monitorable",
            "name": "monitorable",
            "getter": "is_monitorable",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the area detects bodies or areas entering and exiting it.",
            "setter": "set_monitoring",
            "name": "monitoring",
            "getter": "is_monitoring",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "The area's priority. Higher priority areas are processed first.",
            "setter": "set_priority",
            "name": "priority",
            "getter": "get_priority",
            "type": "float"
          },
          {
            "default": "0",
            "value": "Override mode for gravity and damping calculations within this area. See [enum SpaceOverride] for possible values.",
            "setter": "set_space_override_mode",
            "name": "space_override",
            "getter": "get_space_override_mode",
            "type": "int",
            "enum": "Area2D.SpaceOverride"
          }
        ]
      },
      "inherits": "CollisionObject2D",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "bit",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_collision_layer_bit",
            "description": "Returns an individual bit on the layer mask. Describes whether other areas will collide with this one on the given layer."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "bit",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_collision_mask_bit",
            "description": "Returns an individual bit on the collision mask. Describes whether this area will collide with others on the given layer."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_overlapping_areas",
            "description": "Returns a list of intersecting [Area2D]s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_overlapping_bodies",
            "description": "Returns a list of intersecting [PhysicsBody2D]s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "area",
              "type": "Node",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "overlaps_area",
            "description": "If [code]true[/code], the given area overlaps the Area2D.\n\t\t\t\t[b]Note:[/b] The result of this test is not immediate after moving objects. For performance, the list of overlaps is updated once per frame and before the physics step. Consider using signals instead."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "body",
              "type": "Node",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "overlaps_body",
            "description": "If [code]true[/code], the given physics body overlaps the Area2D.\n\t\t\t\t[b]Note:[/b] The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.\n\t\t\t\tThe [code]body[/code] argument can either be a [PhysicsBody2D] or a [TileMap] instance (while TileMaps are not physics bodies themselves, they register their tiles with collision shapes as a virtual physics body)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bit",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_collision_layer_bit",
            "description": "Set/clear individual bits on the layer mask. This makes getting an area in/out of only one layer easier."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bit",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_collision_mask_bit",
            "description": "Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier."
          }
        ]
      },
      "name": "Area2D",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "area",
              "type": "Area2D",
              "index": "0"
            },
            "name": "area_entered",
            "description": "Emitted when another Area2D enters this Area2D. Requires [member monitoring] to be set to [code]true[/code].\n\t\t\t\t[code]area[/code] the other Area2D."
          },
          {
            "argument": {
              "name": "area",
              "type": "Area2D",
              "index": "0"
            },
            "name": "area_exited",
            "description": "Emitted when another Area2D exits this Area2D. Requires [member monitoring] to be set to [code]true[/code].\n\t\t\t\t[code]area[/code] the other Area2D."
          },
          {
            "argument": [
              {
                "name": "area_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "area",
                "type": "Area2D",
                "index": "1"
              },
              {
                "name": "area_shape",
                "type": "int",
                "index": "2"
              },
              {
                "name": "local_shape",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "area_shape_entered",
            "description": "Emitted when one of another Area2D's [Shape2D]s enters one of this Area2D's [Shape2D]s. Requires [member monitoring] to be set to [code]true[/code].\n\t\t\t\t[code]area_id[/code] the [RID] of the other Area2D's [CollisionObject2D] used by the [Physics2DServer].\n\t\t\t\t[code]area[/code] the other Area2D.\n\t\t\t\t[code]area_shape[/code] the index of the [Shape2D] of the other Area2D used by the [Physics2DServer].\n\t\t\t\t[code]local_shape[/code] the index of the [Shape2D] of this Area2D used by the [Physics2DServer]."
          },
          {
            "argument": [
              {
                "name": "area_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "area",
                "type": "Area2D",
                "index": "1"
              },
              {
                "name": "area_shape",
                "type": "int",
                "index": "2"
              },
              {
                "name": "local_shape",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "area_shape_exited",
            "description": "Emitted when one of another Area2D's [Shape2D]s exits one of this Area2D's [Shape2D]s. Requires [member monitoring] to be set to [code]true[/code].\n\t\t\t\t[code]area_id[/code] the [RID] of the other Area2D's [CollisionObject2D] used by the [Physics2DServer].\n\t\t\t\t[code]area[/code] the other Area2D.\n\t\t\t\t[code]area_shape[/code] the index of the [Shape2D] of the other Area2D used by the [Physics2DServer].\n\t\t\t\t[code]local_shape[/code] the index of the [Shape2D] of this Area2D used by the [Physics2DServer]."
          },
          {
            "argument": {
              "name": "body",
              "type": "Node",
              "index": "0"
            },
            "name": "body_entered",
            "description": "Emitted when a [PhysicsBody2D] or [TileMap] enters this Area2D. Requires [member monitoring] to be set to [code]true[/code]. [TileMap]s are detected if the [TileSet] has Collision [Shape2D]s.\n\t\t\t\t[code]body[/code] the [Node], if it exists in the tree, of the other [PhysicsBody2D] or [TileMap]."
          },
          {
            "argument": {
              "name": "body",
              "type": "Node",
              "index": "0"
            },
            "name": "body_exited",
            "description": "Emitted when a [PhysicsBody2D] or [TileMap] exits this Area2D. Requires [member monitoring] to be set to [code]true[/code]. [TileMap]s are detected if the [TileSet] has Collision [Shape2D]s.\n\t\t\t\t[code]body[/code] the [Node], if it exists in the tree, of the other [PhysicsBody2D] or [TileMap]."
          },
          {
            "argument": [
              {
                "name": "body_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "body",
                "type": "Node",
                "index": "1"
              },
              {
                "name": "body_shape",
                "type": "int",
                "index": "2"
              },
              {
                "name": "local_shape",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "body_shape_entered",
            "description": "Emitted when one of a [PhysicsBody2D] or [TileMap]'s [Shape2D]s enters one of this Area2D's [Shape2D]s. Requires [member monitoring] to be set to [code]true[/code]. [TileMap]s are detected if the [TileSet] has Collision [Shape2D]s.\n\t\t\t\t[code]body_id[/code] the [RID] of the [PhysicsBody2D] or [TileSet]'s [CollisionObject2D] used by the [Physics2DServer].\n\t\t\t\t[code]body[/code] the [Node], if it exists in the tree, of the [PhysicsBody2D] or [TileMap].\n\t\t\t\t[code]body_shape[/code] the index of the [Shape2D] of the [PhysicsBody2D] or [TileMap] used by the [Physics2DServer].\n\t\t\t\t[code]local_shape[/code] the index of the [Shape2D] of this Area2D used by the [Physics2DServer]."
          },
          {
            "argument": [
              {
                "name": "body_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "body",
                "type": "Node",
                "index": "1"
              },
              {
                "name": "body_shape",
                "type": "int",
                "index": "2"
              },
              {
                "name": "local_shape",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "body_shape_exited",
            "description": "Emitted when one of a [PhysicsBody2D] or [TileMap]'s [Shape2D]s exits one of this Area2D's [Shape2D]s. Requires [member monitoring] to be set to [code]true[/code]. [TileMap]s are detected if the [TileSet] has Collision [Shape2D]s.\n\t\t\t\t[code]body_id[/code] the [RID] of the [PhysicsBody2D] or [TileSet]'s [CollisionObject2D] used by the [Physics2DServer].\n\t\t\t\t[code]body[/code] the [Node], if it exists in the tree, of the [PhysicsBody2D] or [TileMap].\n\t\t\t\t[code]body_shape[/code] the index of the [Shape2D] of the [PhysicsBody2D] or [TileMap] used by the [Physics2DServer].\n\t\t\t\t[code]local_shape[/code] the index of the [Shape2D] of this Area2D used by the [Physics2DServer]."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "SPACE_OVERRIDE_DISABLED",
            "enum": "SpaceOverride"
          },
          {
            "value": "1",
            "name": "SPACE_OVERRIDE_COMBINE",
            "enum": "SpaceOverride"
          },
          {
            "value": "2",
            "name": "SPACE_OVERRIDE_COMBINE_REPLACE",
            "enum": "SpaceOverride"
          },
          {
            "value": "3",
            "name": "SPACE_OVERRIDE_REPLACE",
            "enum": "SpaceOverride"
          },
          {
            "value": "4",
            "name": "SPACE_OVERRIDE_REPLACE_COMBINE",
            "enum": "SpaceOverride"
          }
        ]
      },
      "brief_description": "2D area for detection and 2D physics influence.",
      "description": "2D area that detects [CollisionObject2D] nodes overlapping, entering, or exiting. Can also alter or override local physics parameters (gravity, damping)."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://godotengine.org/asset-library/asset/125",
            "title": "3D Platformer Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/127",
            "title": "GUI in 3D Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "0.1",
            "value": "The rate at which objects stop spinning in this area. Represents the angular velocity lost per second.\n\t\t\tSee [member ProjectSettings.physics/3d/default_angular_damp] for more details about damping.",
            "setter": "set_angular_damp",
            "name": "angular_damp",
            "getter": "get_angular_damp",
            "type": "float"
          },
          {
            "default": "\"Master\"",
            "value": "The name of the area's audio bus.",
            "setter": "set_audio_bus",
            "name": "audio_bus_name",
            "getter": "get_audio_bus",
            "type": "String"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the area's audio bus overrides the default audio bus.",
            "setter": "set_audio_bus_override",
            "name": "audio_bus_override",
            "getter": "is_overriding_audio_bus",
            "type": "bool"
          },
          {
            "default": "1",
            "value": "The area's physics layer(s). Collidable objects can exist in any of 32 different layers. A contact is detected if object A is in any of the layers that object B scans, or object B is in any layers that object A scans. See also [member collision_mask]. See [url=https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.",
            "setter": "set_collision_layer",
            "name": "collision_layer",
            "getter": "get_collision_layer",
            "type": "int"
          },
          {
            "default": "1",
            "value": "The physics layers this area scans to determine collision detection. See [url=https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.",
            "setter": "set_collision_mask",
            "name": "collision_mask",
            "getter": "get_collision_mask",
            "type": "int"
          },
          {
            "default": "9.8",
            "value": "The area's gravity intensity (in meters per second squared). This value multiplies the gravity vector. This is useful to alter the force of gravity without altering its direction.",
            "setter": "set_gravity",
            "name": "gravity",
            "getter": "get_gravity",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The falloff factor for point gravity. The greater the value, the faster gravity decreases with distance.",
            "setter": "set_gravity_distance_scale",
            "name": "gravity_distance_scale",
            "getter": "get_gravity_distance_scale",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], gravity is calculated from a point (set via [member gravity_vec]). See also [member space_override].",
            "setter": "set_gravity_is_point",
            "name": "gravity_point",
            "getter": "is_gravity_a_point",
            "type": "bool"
          },
          {
            "default": "Vector3( 0, -1, 0 )",
            "value": "The area's gravity vector (not normalized). If gravity is a point (see [member gravity_point]), this will be the point of attraction.",
            "setter": "set_gravity_vector",
            "name": "gravity_vec",
            "getter": "get_gravity_vector",
            "type": "Vector3"
          },
          {
            "default": "0.1",
            "value": "The rate at which objects stop moving in this area. Represents the linear velocity lost per second.\n\t\t\tSee [member ProjectSettings.physics/3d/default_linear_damp] for more details about damping.",
            "setter": "set_linear_damp",
            "name": "linear_damp",
            "getter": "get_linear_damp",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], other monitoring areas can detect this area.",
            "setter": "set_monitorable",
            "name": "monitorable",
            "getter": "is_monitorable",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the area detects bodies or areas entering and exiting it.",
            "setter": "set_monitoring",
            "name": "monitoring",
            "getter": "is_monitoring",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "The area's priority. Higher priority areas are processed first.",
            "setter": "set_priority",
            "name": "priority",
            "getter": "get_priority",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The degree to which this area applies reverb to its associated audio. Ranges from [code]0[/code] to [code]1[/code] with [code]0.1[/code] precision.",
            "setter": "set_reverb_amount",
            "name": "reverb_bus_amount",
            "getter": "get_reverb_amount",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the area applies reverb to its associated audio.",
            "setter": "set_use_reverb_bus",
            "name": "reverb_bus_enable",
            "getter": "is_using_reverb_bus",
            "type": "bool"
          },
          {
            "default": "\"Master\"",
            "value": "The reverb bus name to use for this area's associated audio.",
            "setter": "set_reverb_bus",
            "name": "reverb_bus_name",
            "getter": "get_reverb_bus",
            "type": "String"
          },
          {
            "default": "0.0",
            "value": "The degree to which this area's reverb is a uniform effect. Ranges from [code]0[/code] to [code]1[/code] with [code]0.1[/code] precision.",
            "setter": "set_reverb_uniformity",
            "name": "reverb_bus_uniformity",
            "getter": "get_reverb_uniformity",
            "type": "float"
          },
          {
            "default": "0",
            "value": "Override mode for gravity and damping calculations within this area. See [enum SpaceOverride] for possible values.",
            "setter": "set_space_override_mode",
            "name": "space_override",
            "getter": "get_space_override_mode",
            "type": "int",
            "enum": "Area.SpaceOverride"
          }
        ]
      },
      "inherits": "CollisionObject",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "bit",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_collision_layer_bit",
            "description": "Returns an individual bit on the layer mask."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "bit",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_collision_mask_bit",
            "description": "Returns an individual bit on the collision mask."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_overlapping_areas",
            "description": "Returns a list of intersecting [Area]s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_overlapping_bodies",
            "description": "Returns a list of intersecting [PhysicsBody]s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "area",
              "type": "Node",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "overlaps_area",
            "description": "If [code]true[/code], the given area overlaps the Area.\n\t\t\t\t[b]Note:[/b] The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "body",
              "type": "Node",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "overlaps_body",
            "description": "If [code]true[/code], the given physics body overlaps the Area.\n\t\t\t\t[b]Note:[/b] The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.\n\t\t\t\tThe [code]body[/code] argument can either be a [PhysicsBody] or a [GridMap] instance (while GridMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bit",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_collision_layer_bit",
            "description": "Set/clear individual bits on the layer mask. This simplifies editing this [Area]'s layers."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bit",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_collision_mask_bit",
            "description": "Set/clear individual bits on the collision mask. This simplifies editing which [Area] layers this [Area] scans."
          }
        ]
      },
      "name": "Area",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "area",
              "type": "Area",
              "index": "0"
            },
            "name": "area_entered",
            "description": "Emitted when another Area enters this Area. Requires [member monitoring] to be set to [code]true[/code].\n\t\t\t\t[code]area[/code] the other Area."
          },
          {
            "argument": {
              "name": "area",
              "type": "Area",
              "index": "0"
            },
            "name": "area_exited",
            "description": "Emitted when another Area exits this Area. Requires [member monitoring] to be set to [code]true[/code].\n\t\t\t\t[code]area[/code] the other Area."
          },
          {
            "argument": [
              {
                "name": "area_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "area",
                "type": "Area",
                "index": "1"
              },
              {
                "name": "area_shape",
                "type": "int",
                "index": "2"
              },
              {
                "name": "local_shape",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "area_shape_entered",
            "description": "Emitted when one of another Area's [Shape]s enters one of this Area's [Shape]s. Requires [member monitoring] to be set to [code]true[/code].\n\t\t\t\t[code]area_id[/code] the [RID] of the other Area's [CollisionObject] used by the [PhysicsServer].\n\t\t\t\t[code]area[/code] the other Area.\n\t\t\t\t[code]area_shape[/code] the index of the [Shape] of the other Area used by the [PhysicsServer].\n\t\t\t\t[code]local_shape[/code] the index of the [Shape] of this Area used by the [PhysicsServer]."
          },
          {
            "argument": [
              {
                "name": "area_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "area",
                "type": "Area",
                "index": "1"
              },
              {
                "name": "area_shape",
                "type": "int",
                "index": "2"
              },
              {
                "name": "local_shape",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "area_shape_exited",
            "description": "Emitted when one of another Area's [Shape]s enters one of this Area's [Shape]s. Requires [member monitoring] to be set to [code]true[/code].\n\t\t\t\t[code]area_id[/code] the [RID] of the other Area's [CollisionObject] used by the [PhysicsServer].\n\t\t\t\t[code]area[/code] the other Area.\n\t\t\t\t[code]area_shape[/code] the index of the [Shape] of the other Area used by the [PhysicsServer].\n\t\t\t\t[code]local_shape[/code] the index of the [Shape] of this Area used by the [PhysicsServer]."
          },
          {
            "argument": {
              "name": "body",
              "type": "Node",
              "index": "0"
            },
            "name": "body_entered",
            "description": "Emitted when a [PhysicsBody] or [GridMap] enters this Area. Requires [member monitoring] to be set to [code]true[/code]. [GridMap]s are detected if the [MeshLibrary] has Collision [Shape]s.\n\t\t\t\t[code]body[/code] the [Node], if it exists in the tree, of the other [PhysicsBody] or [GridMap]."
          },
          {
            "argument": {
              "name": "body",
              "type": "Node",
              "index": "0"
            },
            "name": "body_exited",
            "description": "Emitted when a [PhysicsBody] or [GridMap] exits this Area. Requires [member monitoring] to be set to [code]true[/code]. [GridMap]s are detected if the [MeshLibrary] has Collision [Shape]s.\n\t\t\t\t[code]body[/code] the [Node], if it exists in the tree, of the other [PhysicsBody] or [GridMap]."
          },
          {
            "argument": [
              {
                "name": "body_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "body",
                "type": "Node",
                "index": "1"
              },
              {
                "name": "body_shape",
                "type": "int",
                "index": "2"
              },
              {
                "name": "local_shape",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "body_shape_entered",
            "description": "Emitted when one of a [PhysicsBody] or [GridMap]'s [Shape]s enters one of this Area's [Shape]s. Requires [member monitoring] to be set to [code]true[/code]. [GridMap]s are detected if the [MeshLibrary] has Collision [Shape]s.\n\t\t\t\t[code]body_id[/code] the [RID] of the [PhysicsBody] or [MeshLibrary]'s [CollisionObject] used by the [PhysicsServer].\n\t\t\t\t[code]body[/code] the [Node], if it exists in the tree, of the [PhysicsBody] or [GridMap].\n\t\t\t\t[code]body_shape[/code] the index of the [Shape] of the [PhysicsBody] or [GridMap] used by the [PhysicsServer].\n\t\t\t\t[code]local_shape[/code] the index of the [Shape] of this Area used by the [PhysicsServer]."
          },
          {
            "argument": [
              {
                "name": "body_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "body",
                "type": "Node",
                "index": "1"
              },
              {
                "name": "body_shape",
                "type": "int",
                "index": "2"
              },
              {
                "name": "local_shape",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "body_shape_exited",
            "description": "Emitted when one of a [PhysicsBody] or [GridMap]'s [Shape]s enters one of this Area's [Shape]s. Requires [member monitoring] to be set to [code]true[/code]. [GridMap]s are detected if the [MeshLibrary] has Collision [Shape]s.\n\t\t\t\t[code]body_id[/code] the [RID] of the [PhysicsBody] or [MeshLibrary]'s [CollisionObject] used by the [PhysicsServer].\n\t\t\t\t[code]body[/code] the [Node], if it exists in the tree, of the [PhysicsBody] or [GridMap].\n\t\t\t\t[code]body_shape[/code] the index of the [Shape] of the [PhysicsBody] or [GridMap] used by the [PhysicsServer].\n\t\t\t\t[code]local_shape[/code] the index of the [Shape] of this Area used by the [PhysicsServer]."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "SPACE_OVERRIDE_DISABLED",
            "enum": "SpaceOverride"
          },
          {
            "value": "1",
            "name": "SPACE_OVERRIDE_COMBINE",
            "enum": "SpaceOverride"
          },
          {
            "value": "2",
            "name": "SPACE_OVERRIDE_COMBINE_REPLACE",
            "enum": "SpaceOverride"
          },
          {
            "value": "3",
            "name": "SPACE_OVERRIDE_REPLACE",
            "enum": "SpaceOverride"
          },
          {
            "value": "4",
            "name": "SPACE_OVERRIDE_REPLACE_COMBINE",
            "enum": "SpaceOverride"
          }
        ]
      },
      "brief_description": "General-purpose area node for detection and 3D physics influence.",
      "description": "3D area that detects [CollisionObject] nodes overlapping, entering, or exiting. Can also alter or override local physics parameters (gravity, damping)."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/content/procedural_geometry/arraymesh.html"
      },
      "members": {
        "member": [
          {
            "default": "1",
            "value": "Sets the blend shape mode to one of [enum Mesh.BlendShapeMode].",
            "setter": "set_blend_shape_mode",
            "name": "blend_shape_mode",
            "getter": "get_blend_shape_mode",
            "type": "int",
            "enum": "Mesh.BlendShapeMode"
          },
          {
            "default": "AABB( 0, 0, 0, 0, 0, 0 )",
            "value": "Overrides the [AABB] with one defined by user for use with frustum culling. Especially useful to avoid unexpected culling when using a shader to offset vertices.",
            "setter": "set_custom_aabb",
            "name": "custom_aabb",
            "getter": "get_custom_aabb",
            "type": "AABB"
          }
        ]
      },
      "inherits": "Mesh",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "add_blend_shape",
            "description": "Adds name for a blend shape that will be added with [method add_surface_from_arrays]. Must be called before surface is added."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "primitive",
                "type": "int",
                "enum": "Mesh.PrimitiveType",
                "index": "0"
              },
              {
                "name": "arrays",
                "type": "Array",
                "index": "1"
              },
              {
                "default": "[  ]",
                "name": "blend_shapes",
                "type": "Array",
                "index": "2"
              },
              {
                "default": "97280",
                "name": "compress_flags",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "add_surface_from_arrays",
            "description": "Creates a new surface.\n\t\t\t\tSurfaces are created to be rendered using a [code]primitive[/code], which may be any of the types defined in [enum Mesh.PrimitiveType]. (As a note, when using indices, it is recommended to only use points, lines, or triangles.) [method Mesh.get_surface_count] will become the [code]surf_idx[/code] for this new surface.\n\t\t\t\tThe [code]arrays[/code] argument is an array of arrays. See [enum ArrayType] for the values used in this array. For example, [code]arrays[0][/code] is the array of vertices. That first vertex sub-array is always required; the others are optional. Adding an index array puts this function into \"index mode\" where the vertex and other arrays become the sources of data and the index array defines the vertex order. All sub-arrays must have the same length as the vertex array or be empty, except for [constant ARRAY_INDEX] if it is used."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_blend_shapes",
            "description": "Removes all blend shapes from this [ArrayMesh]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_blend_shape_count",
            "description": "Returns the number of blend shapes that the [ArrayMesh] holds."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_blend_shape_name",
            "description": "Returns the name of the blend shape at this index."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "transform",
                "type": "Transform",
                "index": "0"
              },
              {
                "name": "texel_size",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "lightmap_unwrap",
            "description": "Will perform a UV unwrap on the [ArrayMesh] to prepare the mesh for lightmapping."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "regen_normalmaps",
            "description": "Will regenerate normal maps for the [ArrayMesh]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "surface_find_by_name",
            "description": "Returns the index of the first surface with this name held within this [ArrayMesh]. If none are found, -1 is returned."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "surf_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "surface_get_array_index_len",
            "description": "Returns the length in indices of the index array in the requested surface (see [method add_surface_from_arrays])."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "surf_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "surface_get_array_len",
            "description": "Returns the length in vertices of the vertex array in the requested surface (see [method add_surface_from_arrays])."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "surf_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "surface_get_format",
            "description": "Returns the format mask of the requested surface (see [method add_surface_from_arrays])."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "surf_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "surface_get_name",
            "description": "Gets the name assigned to this surface."
          },
          {
            "return": {
              "type": "int",
              "enum": "Mesh.PrimitiveType"
            },
            "argument": {
              "name": "surf_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "surface_get_primitive_type",
            "description": "Returns the primitive type of the requested surface (see [method add_surface_from_arrays])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "surf_idx",
              "type": "int",
              "index": "0"
            },
            "name": "surface_remove",
            "description": "Removes a surface at position [code]surf_idx[/code], shifting greater surfaces one [code]surf_idx[/code] slot down."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "surf_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "name",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "surface_set_name",
            "description": "Sets a name for a given surface."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "surf_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "offset",
                "type": "int",
                "index": "1"
              },
              {
                "name": "data",
                "type": "PoolByteArray",
                "index": "2"
              }
            ],
            "name": "surface_update_region",
            "description": "Updates a specified region of mesh arrays on the GPU.\n\t\t\t\t[b]Warning:[/b] Only use if you know what you are doing. You can easily cause crashes by calling this function with improper arguments."
          }
        ]
      },
      "name": "ArrayMesh",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "-1",
            "name": "NO_INDEX_ARRAY"
          },
          {
            "value": "4",
            "name": "ARRAY_WEIGHTS_SIZE"
          },
          {
            "value": "0",
            "name": "ARRAY_VERTEX",
            "enum": "ArrayType"
          },
          {
            "value": "1",
            "name": "ARRAY_NORMAL",
            "enum": "ArrayType"
          },
          {
            "value": "2",
            "name": "ARRAY_TANGENT",
            "enum": "ArrayType"
          },
          {
            "value": "3",
            "name": "ARRAY_COLOR",
            "enum": "ArrayType"
          },
          {
            "value": "4",
            "name": "ARRAY_TEX_UV",
            "enum": "ArrayType"
          },
          {
            "value": "5",
            "name": "ARRAY_TEX_UV2",
            "enum": "ArrayType"
          },
          {
            "value": "6",
            "name": "ARRAY_BONES",
            "enum": "ArrayType"
          },
          {
            "value": "7",
            "name": "ARRAY_WEIGHTS",
            "enum": "ArrayType"
          },
          {
            "value": "8",
            "name": "ARRAY_INDEX",
            "enum": "ArrayType"
          },
          {
            "value": "9",
            "name": "ARRAY_MAX",
            "enum": "ArrayType"
          },
          {
            "value": "1",
            "name": "ARRAY_FORMAT_VERTEX",
            "enum": "ArrayFormat"
          },
          {
            "value": "2",
            "name": "ARRAY_FORMAT_NORMAL",
            "enum": "ArrayFormat"
          },
          {
            "value": "4",
            "name": "ARRAY_FORMAT_TANGENT",
            "enum": "ArrayFormat"
          },
          {
            "value": "8",
            "name": "ARRAY_FORMAT_COLOR",
            "enum": "ArrayFormat"
          },
          {
            "value": "16",
            "name": "ARRAY_FORMAT_TEX_UV",
            "enum": "ArrayFormat"
          },
          {
            "value": "32",
            "name": "ARRAY_FORMAT_TEX_UV2",
            "enum": "ArrayFormat"
          },
          {
            "value": "64",
            "name": "ARRAY_FORMAT_BONES",
            "enum": "ArrayFormat"
          },
          {
            "value": "128",
            "name": "ARRAY_FORMAT_WEIGHTS",
            "enum": "ArrayFormat"
          },
          {
            "value": "256",
            "name": "ARRAY_FORMAT_INDEX",
            "enum": "ArrayFormat"
          }
        ]
      },
      "brief_description": "[Mesh] type that provides utility for constructing a surface from arrays.",
      "description": "The [ArrayMesh] is used to construct a [Mesh] by specifying the attributes as arrays.\n\t\tThe most basic example is the creation of a single triangle:\n\t\t[codeblock]\n\t\tvar vertices = PoolVector3Array()\n\t\tvertices.push_back(Vector3(0, 1, 0))\n\t\tvertices.push_back(Vector3(1, 0, 0))\n\t\tvertices.push_back(Vector3(0, 0, 1))\n\t\t# Initialize the ArrayMesh.\n\t\tvar arr_mesh = ArrayMesh.new()\n\t\tvar arrays = []\n\t\tarrays.resize(ArrayMesh.ARRAY_MAX)\n\t\tarrays[ArrayMesh.ARRAY_VERTEX] = vertices\n\t\t# Create the Mesh.\n\t\tarr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, arrays)\n\t\tvar m = MeshInstance.new()\n\t\tm.mesh = arr_mesh\n\t\t[/codeblock]\n\t\tThe [MeshInstance] is ready to be added to the [SceneTree] to be shown.\n\t\tSee also [ImmediateGeometry], [MeshDataTool] and [SurfaceTool] for procedural geometry generation.\n\t\t[b]Note:[/b] Godot uses clockwise [url=https://learnopengl.com/Advanced-OpenGL/Face-culling]winding order[/url] for front faces of triangle primitive modes."
    }
  },
  {
    "class": {
      "tutorials": {},
      "methods": {
        "method": [
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "from",
              "type": "PoolColorArray",
              "index": "0"
            },
            "name": "Array",
            "description": "Constructs an array from a [PoolColorArray]."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "from",
              "type": "PoolVector3Array",
              "index": "0"
            },
            "name": "Array",
            "description": "Constructs an array from a [PoolVector3Array]."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "from",
              "type": "PoolVector2Array",
              "index": "0"
            },
            "name": "Array",
            "description": "Constructs an array from a [PoolVector2Array]."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "from",
              "type": "PoolStringArray",
              "index": "0"
            },
            "name": "Array",
            "description": "Constructs an array from a [PoolStringArray]."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "from",
              "type": "PoolRealArray",
              "index": "0"
            },
            "name": "Array",
            "description": "Constructs an array from a [PoolRealArray]."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "from",
              "type": "PoolIntArray",
              "index": "0"
            },
            "name": "Array",
            "description": "Constructs an array from a [PoolIntArray]."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "from",
              "type": "PoolByteArray",
              "index": "0"
            },
            "name": "Array",
            "description": "Constructs an array from a [PoolByteArray]."
          },
          {
            "argument": {
              "name": "value",
              "type": "Variant",
              "index": "0"
            },
            "name": "append",
            "description": "Appends an element at the end of the array (alias of [method push_back])."
          },
          {
            "argument": {
              "name": "array",
              "type": "Array",
              "index": "0"
            },
            "name": "append_array",
            "description": "Appends another array at the end of this array.\n\t\t\t\t[codeblock]\n\t\t\t\tvar array1 = [1, 2, 3]\n\t\t\t\tvar array2 = [4, 5, 6]\n\t\t\t\tarray1.append_array(array2)\n\t\t\t\tprint(array1) # Prints [1, 2, 3, 4, 5, 6].\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "Variant"
            },
            "name": "back",
            "description": "Returns the last element of the array. Prints an error and returns [code]null[/code] if the array is empty.\n\t\t\t\t[b]Note:[/b] Calling this function is not the same as writing [code]array[-1][/code]. If the array is empty, accessing by index will pause project execution when running from the editor."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "value",
                "type": "Variant",
                "index": "0"
              },
              {
                "default": "true",
                "name": "before",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "bsearch",
            "description": "Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a [code]before[/code] specifier can be passed. If [code]false[/code], the returned index comes after all existing entries of the value in the array.\n\t\t\t\t[b]Note:[/b] Calling [method bsearch] on an unsorted array results in unexpected behavior."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "value",
                "type": "Variant",
                "index": "0"
              },
              {
                "name": "obj",
                "type": "Object",
                "index": "1"
              },
              {
                "name": "func",
                "type": "String",
                "index": "2"
              },
              {
                "default": "true",
                "name": "before",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "bsearch_custom",
            "description": "Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search and a custom comparison method declared in the [code]obj[/code]. Optionally, a [code]before[/code] specifier can be passed. If [code]false[/code], the returned index comes after all existing entries of the value in the array. The custom method receives two arguments (an element from the array and the value searched for) and must return [code]true[/code] if the first argument is less than the second, and return [code]false[/code] otherwise.\n\t\t\t\t[codeblock]\n\t\t\t\tfunc cardinal_to_algebraic(a):\n\t\t\t\t    match a:\n\t\t\t\t        \"one\":\n\t\t\t\t            return 1\n\t\t\t\t        \"two\":\n\t\t\t\t            return 2\n\t\t\t\t        \"three\":\n\t\t\t\t            return 3\n\t\t\t\t        \"four\":\n\t\t\t\t            return 4\n\t\t\t\t        _:\n\t\t\t\t            return 0\n\n\t\t\t\tfunc compare(a, b):\n\t\t\t\t    return cardinal_to_algebraic(a) < cardinal_to_algebraic(b)\n\n\t\t\t\tfunc _ready():\n\t\t\t\t    var a = [\"one\", \"two\", \"three\", \"four\"]\n\t\t\t\t    # `compare` is defined in this object, so we use `self` as the `obj` parameter.\n\t\t\t\t    print(a.bsearch_custom(\"three\", self, \"compare\", true)) # Expected value is 2.\n\t\t\t\t[/codeblock]\n\t\t\t\t[b]Note:[/b] Calling [method bsearch_custom] on an unsorted array results in unexpected behavior."
          },
          {
            "name": "clear",
            "description": "Clears the array. This is equivalent to using [method resize] with a size of [code]0[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "value",
              "type": "Variant",
              "index": "0"
            },
            "name": "count",
            "description": "Returns the number of times an element is in the array."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "default": "false",
              "name": "deep",
              "type": "bool",
              "index": "0"
            },
            "name": "duplicate",
            "description": "Returns a copy of the array.\n\t\t\t\tIf [code]deep[/code] is [code]true[/code], a deep copy is performed: all nested arrays and dictionaries are duplicated and will not be shared with the original array. If [code]false[/code], a shallow copy is made and references to the original nested arrays and dictionaries are kept, so that modifying a sub-array or dictionary in the copy will also impact those referenced in the source array."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "empty",
            "description": "Returns [code]true[/code] if the array is empty."
          },
          {
            "argument": {
              "name": "value",
              "type": "Variant",
              "index": "0"
            },
            "name": "erase",
            "description": "Removes the first occurrence of a value from the array. To remove an element by index, use [method remove] instead.\n\t\t\t\t[b]Note:[/b] This method acts in-place and doesn't return a value.\n\t\t\t\t[b]Note:[/b] On large arrays, this method will be slower if the removed element is close to the beginning of the array (index 0). This is because all elements placed after the removed element have to be reindexed."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "what",
                "type": "Variant",
                "index": "0"
              },
              {
                "default": "0",
                "name": "from",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "find",
            "description": "Searches the array for a value and returns its index or [code]-1[/code] if not found. Optionally, the initial search index can be passed."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "value",
              "type": "Variant",
              "index": "0"
            },
            "name": "find_last",
            "description": "Searches the array in reverse order for a value and returns its index or [code]-1[/code] if not found."
          },
          {
            "return": {
              "type": "Variant"
            },
            "name": "front",
            "description": "Returns the first element of the array. Prints an error and returns [code]null[/code] if the array is empty.\n\t\t\t\t[b]Note:[/b] Calling this function is not the same as writing [code]array[0][/code]. If the array is empty, accessing by index will pause project execution when running from the editor."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "value",
              "type": "Variant",
              "index": "0"
            },
            "name": "has",
            "description": "Returns [code]true[/code] if the array contains the given value.\n\t\t\t\t[codeblock]\n\t\t\t\t[\"inside\", 7].has(\"inside\") # True\n\t\t\t\t[\"inside\", 7].has(\"outside\") # False\n\t\t\t\t[\"inside\", 7].has(7) # True\n\t\t\t\t[\"inside\", 7].has(\"7\") # False\n\t\t\t\t[/codeblock]\n\t\t\t\t[b]Note:[/b] This is equivalent to using the [code]in[/code] operator as follows:\n\t\t\t\t[codeblock]\n\t\t\t\t# Will evaluate to `true`.\n\t\t\t\tif 2 in [2, 4, 6, 8]:\n\t\t\t\t    pass\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "int"
            },
            "name": "hash",
            "description": "Returns a hashed integer value representing the array and its contents.\n\t\t\t\t[b]Note:[/b] Arrays with equal contents can still produce different hashes. Only the exact same arrays will produce the same hashed integer value."
          },
          {
            "argument": [
              {
                "name": "position",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "insert",
            "description": "Inserts a new element at a given position in the array. The position must be valid, or at the end of the array ([code]pos == size()[/code]).\n\t\t\t\t[b]Note:[/b] This method acts in-place and doesn't return a value.\n\t\t\t\t[b]Note:[/b] On large arrays, this method will be slower if the inserted element is close to the beginning of the array (index 0). This is because all elements placed after the newly inserted element have to be reindexed."
          },
          {
            "name": "invert",
            "description": "Reverses the order of the elements in the array."
          },
          {
            "return": {
              "type": "Variant"
            },
            "name": "max",
            "description": "Returns the maximum value contained in the array if all elements are of comparable types. If the elements can't be compared, [code]null[/code] is returned."
          },
          {
            "return": {
              "type": "Variant"
            },
            "name": "min",
            "description": "Returns the minimum value contained in the array if all elements are of comparable types. If the elements can't be compared, [code]null[/code] is returned."
          },
          {
            "return": {
              "type": "Variant"
            },
            "name": "pop_back",
            "description": "Removes and returns the last element of the array. Returns [code]null[/code] if the array is empty, without printing an error message. See also [method pop_front]."
          },
          {
            "return": {
              "type": "Variant"
            },
            "name": "pop_front",
            "description": "Removes and returns the first element of the array. Returns [code]null[/code] if the array is empty, without printing an error message. See also [method pop_back].\n\t\t\t\t[b]Note:[/b] On large arrays, this method is much slower than [method pop_back] as it will reindex all the array's elements every time it's called. The larger the array, the slower [method pop_front] will be."
          },
          {
            "argument": {
              "name": "value",
              "type": "Variant",
              "index": "0"
            },
            "name": "push_back",
            "description": "Appends an element at the end of the array. See also [method push_front]."
          },
          {
            "argument": {
              "name": "value",
              "type": "Variant",
              "index": "0"
            },
            "name": "push_front",
            "description": "Adds an element at the beginning of the array. See also [method push_back].\n\t\t\t\t[b]Note:[/b] On large arrays, this method is much slower than [method push_back] as it will reindex all the array's elements every time it's called. The larger the array, the slower [method push_front] will be."
          },
          {
            "argument": {
              "name": "position",
              "type": "int",
              "index": "0"
            },
            "name": "remove",
            "description": "Removes an element from the array by index. If the index does not exist in the array, nothing happens. To remove an element by searching for its value, use [method erase] instead.\n\t\t\t\t[b]Note:[/b] This method acts in-place and doesn't return a value.\n\t\t\t\t[b]Note:[/b] On large arrays, this method will be slower if the removed element is close to the beginning of the array (index 0). This is because all elements placed after the removed element have to be reindexed."
          },
          {
            "argument": {
              "name": "size",
              "type": "int",
              "index": "0"
            },
            "name": "resize",
            "description": "Resizes the array to contain a different number of elements. If the array size is smaller, elements are cleared, if bigger, new elements are [code]null[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "what",
                "type": "Variant",
                "index": "0"
              },
              {
                "default": "-1",
                "name": "from",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "rfind",
            "description": "Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array."
          },
          {
            "name": "shuffle",
            "description": "Shuffles the array such that the items will have a random order. This method uses the global random number generator common to methods such as [method @GDScript.randi]. Call [method @GDScript.randomize] to ensure that a new seed will be used each time if you want non-reproducible shuffling."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "size",
            "description": "Returns the number of elements in the array."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "begin",
                "type": "int",
                "index": "0"
              },
              {
                "name": "end",
                "type": "int",
                "index": "1"
              },
              {
                "default": "1",
                "name": "step",
                "type": "int",
                "index": "2"
              },
              {
                "default": "false",
                "name": "deep",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "slice",
            "description": "Duplicates the subset described in the function and returns it in an array, deeply copying the array if [code]deep[/code] is [code]true[/code]. Lower and upper index are inclusive, with the [code]step[/code] describing the change between indices while slicing."
          },
          {
            "name": "sort",
            "description": "Sorts the array.\n\t\t\t\t[b]Note:[/b] Strings are sorted in alphabetical order (as opposed to natural order). This may lead to unexpected behavior when sorting an array of strings ending with a sequence of numbers. Consider the following example:\n\t\t\t\t[codeblock]\n\t\t\t\tvar strings = [\"string1\", \"string2\", \"string10\", \"string11\"]\n\t\t\t\tstrings.sort()\n\t\t\t\tprint(strings) # Prints [string1, string10, string11, string2]\n\t\t\t\t[/codeblock]"
          },
          {
            "argument": [
              {
                "name": "obj",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "func",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "sort_custom",
            "description": "Sorts the array using a custom method. The arguments are an object that holds the method and the name of such method. The custom method receives two arguments (a pair of elements from the array) and must return either [code]true[/code] or [code]false[/code].\n\t\t\t\tFor two elements [code]a[/code] and [code]b[/code], if the given method returns [code]true[/code], element [code]b[/code] will be after element [code]a[/code] in the array.\n\t\t\t\t[b]Note:[/b] you cannot randomize the return value as the heapsort algorithm expects a deterministic result. Doing so will result in unexpected behavior.\n\t\t\t\t[codeblock]\n\t\t\t\tclass MyCustomSorter:\n\t\t\t\t    static func sort_ascending(a, b):\n\t\t\t\t        if a[0] < b[0]:\n\t\t\t\t            return true\n\t\t\t\t        return false\n\n\t\t\t\tvar my_items = [[5, \"Potato\"], [9, \"Rice\"], [4, \"Tomato\"]]\n\t\t\t\tmy_items.sort_custom(MyCustomSorter, \"sort_ascending\")\n\t\t\t\tprint(my_items) # Prints [[4, Tomato], [5, Potato], [9, Rice]].\n\t\t\t\t[/codeblock]"
          }
        ]
      },
      "name": "Array",
      "version": "3.3",
      "constants": {},
      "brief_description": "A generic array datatype.",
      "description": "A generic array that can contain several elements of any type, accessible by a numerical index starting at 0. Negative indices can be used to count from the back, like in Python (-1 is the last element, -2 is the second to last, etc.).\n\t\t[b]Example:[/b]\n\t\t[codeblock]\n\t\tvar array = [\"One\", 2, 3, \"Four\"]\n\t\tprint(array[0]) # One.\n\t\tprint(array[2]) # 3.\n\t\tprint(array[-1]) # Four.\n\t\tarray[2] = \"Three\"\n\t\tprint(array[-2]) # Three.\n\t\t[/codeblock]\n\t\tArrays can be concatenated using the [code]+[/code] operator:\n\t\t[codeblock]\n\t\tvar array1 = [\"One\", 2]\n\t\tvar array2 = [3, \"Four\"]\n\t\tprint(array1 + array2) # [\"One\", 2, 3, \"Four\"]\n\t\t[/codeblock]\n\t\t[b]Note:[/b] Concatenating with the [code]+=[/code] operator will create a new array, which has a cost. If you want to append another array to an existing array, [method append_array] is more efficient.\n\t\t[b]Note:[/b] Arrays are always passed by reference. To get a copy of an array that can be modified independently of the original array, use [method duplicate].\n\t\t[b]Note:[/b] When declaring an array with [code]const[/code], the array itself can still be mutated by defining the values at individual indices or pushing/removing elements. Using [code]const[/code] will only prevent assigning the constant with another value after it was initialized."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "1",
          "value": "The anchor's ID. You can set this before the anchor itself exists. The first anchor gets an ID of [code]1[/code], the second an ID of [code]2[/code], etc. When anchors get removed, the engine can then assign the corresponding ID to new anchors. The most common situation where anchors \"disappear\" is when the AR server identifies that two anchors represent different parts of the same plane and merges them.",
          "setter": "set_anchor_id",
          "name": "anchor_id",
          "getter": "get_anchor_id",
          "type": "int"
        }
      },
      "inherits": "Spatial",
      "methods": {
        "method": [
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_anchor_name",
            "description": "Returns the name given to this anchor."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "get_is_active",
            "description": "Returns [code]true[/code] if the anchor is being tracked and [code]false[/code] if no anchor with this ID is currently known."
          },
          {
            "return": {
              "type": "Mesh"
            },
            "qualifiers": "const",
            "name": "get_mesh",
            "description": "If provided by the [ARVRInterface], this returns a mesh object for the anchor. For an anchor, this can be a shape related to the object being tracked or it can be a mesh that provides topology related to the anchor and can be used to create shadows/reflections on surfaces or for generating collision shapes."
          },
          {
            "return": {
              "type": "Plane"
            },
            "qualifiers": "const",
            "name": "get_plane",
            "description": "Returns a plane aligned with our anchor; handy for intersection testing."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "qualifiers": "const",
            "name": "get_size",
            "description": "Returns the estimated size of the plane that was detected. Say when the anchor relates to a table in the real world, this is the estimated size of the surface of that table."
          }
        ]
      },
      "name": "ARVRAnchor",
      "version": "3.3",
      "signals": {
        "signal": {
          "argument": {
            "name": "mesh",
            "type": "Mesh",
            "index": "0"
          },
          "name": "mesh_updated",
          "description": "Emitted when the mesh associated with the anchor changes or when one becomes available. This is especially important for topology that is constantly being [code]mesh_updated[/code]."
        }
      },
      "constants": {},
      "brief_description": "An anchor point in AR space.",
      "description": "The [ARVRAnchor] point is a spatial node that maps a real world location identified by the AR platform to a position within the game world. For example, as long as plane detection in ARKit is on, ARKit will identify and update the position of planes (tables, floors, etc) and create anchors for them.\n\t\tThis node is mapped to one of the anchors through its unique ID. When you receive a signal that a new anchor is available, you should add this node to your scene for that anchor. You can predefine nodes and set the ID; the nodes will simply remain on 0,0,0 until a plane is recognized.\n\t\tKeep in mind that, as long as plane detection is enabled, the size, placing and orientation of an anchor will be updated as the detection logic learns more about the real world out there especially if only part of the surface is in view."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/vr/index.html"
      },
      "inherits": "Camera",
      "methods": {},
      "name": "ARVRCamera",
      "version": "3.3",
      "constants": {},
      "brief_description": "A camera node with a few overrules for AR/VR applied, such as location tracking.",
      "description": "This is a helper spatial node for our camera; note that, if stereoscopic rendering is applicable (VR-HMD), most of the camera properties are ignored, as the HMD information overrides them. The only properties that can be trusted are the near and far planes.\n\t\tThe position and orientation of this node is automatically updated by the ARVR Server to represent the location of the HMD if such tracking is available and can thus be used by game logic. Note that, in contrast to the ARVR Controller, the render thread has access to the most up-to-date tracking data of the HMD and the location of the ARVRCamera can lag a few milliseconds behind what is used for rendering as a result."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/vr/index.html"
      },
      "members": {
        "member": [
          {
            "default": "1",
            "value": "The controller's ID.\n\t\t\tA controller ID of 0 is unbound and will always result in an inactive node. Controller ID 1 is reserved for the first controller that identifies itself as the left-hand controller and ID 2 is reserved for the first controller that identifies itself as the right-hand controller.\n\t\t\tFor any other controller that the [ARVRServer] detects, we continue with controller ID 3.\n\t\t\tWhen a controller is turned off, its slot is freed. This ensures controllers will keep the same ID even when controllers with lower IDs are turned off.",
            "setter": "set_controller_id",
            "name": "controller_id",
            "getter": "get_controller_id",
            "type": "int"
          },
          {
            "default": "0.0",
            "value": "The degree to which the controller vibrates. Ranges from [code]0.0[/code] to [code]1.0[/code] with precision [code].01[/code]. If changed, updates [member ARVRPositionalTracker.rumble] accordingly.\n\t\t\tThis is a useful property to animate if you want the controller to vibrate for a limited duration.",
            "setter": "set_rumble",
            "name": "rumble",
            "getter": "get_rumble",
            "type": "float"
          }
        ]
      },
      "inherits": "Spatial",
      "methods": {
        "method": [
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_controller_name",
            "description": "If active, returns the name of the associated controller if provided by the AR/VR SDK used."
          },
          {
            "return": {
              "type": "int",
              "enum": "ARVRPositionalTracker.TrackerHand"
            },
            "qualifiers": "const",
            "name": "get_hand",
            "description": "Returns the hand holding this controller, if known. See [enum ARVRPositionalTracker.TrackerHand]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "get_is_active",
            "description": "Returns [code]true[/code] if the bound controller is active. ARVR systems attempt to track active controllers."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "axis",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_joystick_axis",
            "description": "Returns the value of the given axis for things like triggers, touchpads, etc. that are embedded into the controller."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_joystick_id",
            "description": "Returns the ID of the joystick object bound to this. Every controller tracked by the [ARVRServer] that has buttons and axis will also be registered as a joystick within Godot. This means that all the normal joystick tracking and input mapping will work for buttons and axis found on the AR/VR controllers. This ID is purely offered as information so you can link up the controller with its joystick entry."
          },
          {
            "return": {
              "type": "Mesh"
            },
            "qualifiers": "const",
            "name": "get_mesh",
            "description": "If provided by the [ARVRInterface], this returns a mesh associated with the controller. This can be used to visualize the controller."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "button",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_button_pressed",
            "description": "Returns [code]true[/code] if the button at index [code]button[/code] is pressed. See [enum JoystickList], in particular the [code]JOY_VR_*[/code] constants."
          }
        ]
      },
      "name": "ARVRController",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "button",
              "type": "int",
              "index": "0"
            },
            "name": "button_pressed",
            "description": "Emitted when a button on this controller is pressed."
          },
          {
            "argument": {
              "name": "button",
              "type": "int",
              "index": "0"
            },
            "name": "button_release",
            "description": "Emitted when a button on this controller is released."
          },
          {
            "argument": {
              "name": "mesh",
              "type": "Mesh",
              "index": "0"
            },
            "name": "mesh_updated",
            "description": "Emitted when the mesh associated with the controller changes or when one becomes available. Generally speaking this will be a static mesh after becoming available."
          }
        ]
      },
      "constants": {},
      "brief_description": "A spatial node representing a spatially-tracked controller.",
      "description": "This is a helper spatial node that is linked to the tracking of controllers. It also offers several handy passthroughs to the state of buttons and such on the controllers.\n\t\tControllers are linked by their ID. You can create controller nodes before the controllers are available. If your game always uses two controllers (one for each hand), you can predefine the controllers with ID 1 and 2; they will become active as soon as the controllers are identified. If you expect additional controllers to be used, you should react to the signals and add ARVRController nodes to your scene.\n\t\tThe position of the controller node is automatically updated by the [ARVRServer]. This makes this node ideal to add child nodes to visualize the controller."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/vr/index.html"
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "On an AR interface, [code]true[/code] if anchor detection is enabled.",
            "setter": "set_anchor_detection_is_enabled",
            "name": "ar_is_anchor_detection_enabled",
            "getter": "get_anchor_detection_is_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "[code]true[/code] if this interface been initialized.",
            "setter": "set_is_initialized",
            "name": "interface_is_initialized",
            "getter": "is_initialized",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "[code]true[/code] if this is the primary interface.",
            "setter": "set_is_primary",
            "name": "interface_is_primary",
            "getter": "is_primary",
            "type": "bool"
          }
        ]
      },
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int"
            },
            "name": "get_camera_feed_id",
            "description": "If this is an AR interface that requires displaying a camera feed as the background, this method returns the feed ID in the [CameraServer] for this interface."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_capabilities",
            "description": "Returns a combination of [enum Capabilities] flags providing information about the capabilities of this interface."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_name",
            "description": "Returns the name of this interface (OpenVR, OpenHMD, ARKit, etc)."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "name": "get_render_targetsize",
            "description": "Returns the resolution at which we should render our intermediate results before things like lens distortion are applied by the VR platform."
          },
          {
            "return": {
              "type": "int",
              "enum": "ARVRInterface.Tracking_status"
            },
            "qualifiers": "const",
            "name": "get_tracking_status",
            "description": "If supported, returns the status of our tracking. This will allow you to provide feedback to the user whether there are issues with positional tracking."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "initialize",
            "description": "Call this to initialize this interface. The first interface that is initialized is identified as the primary interface and it will be used for rendering output.\n\t\t\t\tAfter initializing the interface you want to use you then need to enable the AR/VR mode of a viewport and rendering should commence.\n\t\t\t\t[b]Note:[/b] You must enable the AR/VR mode on the main viewport for any device that uses the main output of Godot, such as for mobile VR.\n\t\t\t\tIf you do this for a platform that handles its own output (such as OpenVR) Godot will show just one eye without distortion on screen. Alternatively, you can add a separate viewport node to your scene and enable AR/VR on that viewport. It will be used to output to the HMD, leaving you free to do anything you like in the main window, such as using a separate camera as a spectator camera or rendering something completely different.\n\t\t\t\tWhile currently not used, you can activate additional interfaces. You may wish to do this if you want to track controllers from other platforms. However, at this point in time only one interface can render to an HMD."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_stereo",
            "description": "Returns [code]true[/code] if the current output of this interface is in stereo."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "uninitialize",
            "description": "Turns the interface off."
          }
        ]
      },
      "name": "ARVRInterface",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "ARVR_NONE",
            "enum": "Capabilities"
          },
          {
            "value": "1",
            "name": "ARVR_MONO",
            "enum": "Capabilities"
          },
          {
            "value": "2",
            "name": "ARVR_STEREO",
            "enum": "Capabilities"
          },
          {
            "value": "4",
            "name": "ARVR_AR",
            "enum": "Capabilities"
          },
          {
            "value": "8",
            "name": "ARVR_EXTERNAL",
            "enum": "Capabilities"
          },
          {
            "value": "0",
            "name": "EYE_MONO",
            "enum": "Eyes"
          },
          {
            "value": "1",
            "name": "EYE_LEFT",
            "enum": "Eyes"
          },
          {
            "value": "2",
            "name": "EYE_RIGHT",
            "enum": "Eyes"
          },
          {
            "value": "0",
            "name": "ARVR_NORMAL_TRACKING",
            "enum": "Tracking_status"
          },
          {
            "value": "1",
            "name": "ARVR_EXCESSIVE_MOTION",
            "enum": "Tracking_status"
          },
          {
            "value": "2",
            "name": "ARVR_INSUFFICIENT_FEATURES",
            "enum": "Tracking_status"
          },
          {
            "value": "3",
            "name": "ARVR_UNKNOWN_TRACKING",
            "enum": "Tracking_status"
          },
          {
            "value": "4",
            "name": "ARVR_NOT_TRACKING",
            "enum": "Tracking_status"
          }
        ]
      },
      "brief_description": "Base class for an AR/VR interface implementation.",
      "description": "This class needs to be implemented to make an AR or VR platform available to Godot and these should be implemented as C++ modules or GDNative modules (note that for GDNative the subclass ARVRScriptInterface should be used). Part of the interface is exposed to GDScript so you can detect, enable and configure an AR or VR platform.\n\t\tInterfaces should be written in such a way that simply enabling them will give us a working setup. You can query the available interfaces through [ARVRServer]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/vr/index.html"
      },
      "members": {
        "member": {
          "default": "1.0",
          "value": "Allows you to adjust the scale to your game's units. Most AR/VR platforms assume a scale of 1 game world unit = 1 real world meter.\n\t\t\t[b]Note:[/b] This method is a passthrough to the [ARVRServer] itself.",
          "setter": "set_world_scale",
          "name": "world_scale",
          "getter": "get_world_scale",
          "type": "float"
        }
      },
      "inherits": "Spatial",
      "methods": {},
      "name": "ARVROrigin",
      "version": "3.3",
      "constants": {},
      "brief_description": "The origin point in AR/VR.",
      "description": "This is a special node within the AR/VR system that maps the physical location of the center of our tracking space to the virtual location within our game world.\n\t\tThere should be only one of these nodes in your scene and you must have one. All the ARVRCamera, ARVRController and ARVRAnchor nodes should be direct children of this node for spatial tracking to work correctly.\n\t\tIt is the position of this node that you update when your character needs to move through your game world while we're not moving in the real world. Movement in the real world is always in relation to this origin point.\n\t\tFor example, if your character is driving a car, the ARVROrigin node should be a child node of this car. Or, if you're implementing a teleport system to move your character, you should change the position of this node."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/vr/index.html"
      },
      "members": {
        "member": {
          "default": "0.0",
          "value": "The degree to which the tracker rumbles. Ranges from [code]0.0[/code] to [code]1.0[/code] with precision [code].01[/code].",
          "setter": "set_rumble",
          "name": "rumble",
          "getter": "get_rumble",
          "type": "float"
        }
      },
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int",
              "enum": "ARVRPositionalTracker.TrackerHand"
            },
            "qualifiers": "const",
            "name": "get_hand",
            "description": "Returns the hand holding this tracker, if known. See [enum TrackerHand] constants."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_joy_id",
            "description": "If this is a controller that is being tracked, the controller will also be represented by a joystick entry with this ID."
          },
          {
            "return": {
              "type": "Mesh"
            },
            "qualifiers": "const",
            "name": "get_mesh",
            "description": "Returns the mesh related to a controller or anchor point if one is available."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_name",
            "description": "Returns the controller or anchor point's name if available."
          },
          {
            "return": {
              "type": "Basis"
            },
            "qualifiers": "const",
            "name": "get_orientation",
            "description": "Returns the controller's orientation matrix."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "qualifiers": "const",
            "name": "get_position",
            "description": "Returns the world-space controller position."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_tracker_id",
            "description": "Returns the internal tracker ID. This uniquely identifies the tracker per tracker type and matches the ID you need to specify for nodes such as the [ARVRController] and [ARVRAnchor] nodes."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "get_tracks_orientation",
            "description": "Returns [code]true[/code] if this device tracks orientation."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "get_tracks_position",
            "description": "Returns [code]true[/code] if this device tracks position."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": {
              "name": "adjust_by_reference_frame",
              "type": "bool",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_transform",
            "description": "Returns the transform combining this device's orientation and position."
          },
          {
            "return": {
              "type": "int",
              "enum": "ARVRServer.TrackerType"
            },
            "qualifiers": "const",
            "name": "get_type",
            "description": "Returns the tracker's type."
          }
        ]
      },
      "name": "ARVRPositionalTracker",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "TRACKER_HAND_UNKNOWN",
            "enum": "TrackerHand"
          },
          {
            "value": "1",
            "name": "TRACKER_LEFT_HAND",
            "enum": "TrackerHand"
          },
          {
            "value": "2",
            "name": "TRACKER_RIGHT_HAND",
            "enum": "TrackerHand"
          }
        ]
      },
      "brief_description": "A tracked object.",
      "description": "An instance of this object represents a device that is tracked, such as a controller or anchor point. HMDs aren't represented here as they are handled internally.\n\t\tAs controllers are turned on and the AR/VR interface detects them, instances of this object are automatically added to this list of active tracking objects accessible through the [ARVRServer].\n\t\tThe [ARVRController] and [ARVRAnchor] both consume objects of this type and should be used in your project. The positional trackers are just under-the-hood objects that make this all work. These are mostly exposed so that GDNative-based interfaces can interact with them."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/vr/index.html"
      },
      "members": {
        "member": [
          {
            "value": "The primary [ARVRInterface] currently bound to the [ARVRServer].",
            "setter": "set_primary_interface",
            "name": "primary_interface",
            "getter": "get_primary_interface",
            "type": "ARVRInterface"
          },
          {
            "default": "1.0",
            "value": "Allows you to adjust the scale to your game's units. Most AR/VR platforms assume a scale of 1 game world unit = 1 real world meter.",
            "setter": "set_world_scale",
            "name": "world_scale",
            "getter": "get_world_scale",
            "type": "float"
          }
        ]
      },
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "rotation_mode",
                "type": "int",
                "enum": "ARVRServer.RotationMode",
                "index": "0"
              },
              {
                "name": "keep_height",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "center_on_hmd",
            "description": "This is an important function to understand correctly. AR and VR platforms all handle positioning slightly differently.\n\t\t\t\tFor platforms that do not offer spatial tracking, our origin point (0,0,0) is the location of our HMD, but you have little control over the direction the player is facing in the real world.\n\t\t\t\tFor platforms that do offer spatial tracking, our origin point depends very much on the system. For OpenVR, our origin point is usually the center of the tracking space, on the ground. For other platforms, it's often the location of the tracking camera.\n\t\t\t\tThis method allows you to center your tracker on the location of the HMD. It will take the current location of the HMD and use that to adjust all your tracking data; in essence, realigning the real world to your player's current position in the game world.\n\t\t\t\tFor this method to produce usable results, tracking information must be available. This often takes a few frames after starting your game.\n\t\t\t\tYou should call this method after a few seconds have passed. For instance, when the user requests a realignment of the display holding a designated button on a controller for a short period of time, or when implementing a teleport mechanism."
          },
          {
            "return": {
              "type": "ARVRInterface"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "find_interface",
            "description": "Finds an interface by its name. For instance, if your project uses capabilities of an AR/VR platform, you can find the interface for that platform by name and initialize it."
          },
          {
            "return": {
              "type": "Transform"
            },
            "name": "get_hmd_transform",
            "description": "Returns the primary interface's transformation."
          },
          {
            "return": {
              "type": "ARVRInterface"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_interface",
            "description": "Returns the interface registered at a given index in our list of interfaces."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_interface_count",
            "description": "Returns the number of interfaces currently registered with the AR/VR server. If your project supports multiple AR/VR platforms, you can look through the available interface, and either present the user with a selection or simply try to initialize each interface and use the first one that returns [code]true[/code]."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_interfaces",
            "description": "Returns a list of available interfaces the ID and name of each interface."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_last_commit_usec",
            "description": "Returns the absolute timestamp (in μs) of the last [ARVRServer] commit of the AR/VR eyes to [VisualServer]. The value comes from an internal call to [method OS.get_ticks_usec]."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_last_frame_usec",
            "description": "Returns the duration (in μs) of the last frame. This is computed as the difference between [method get_last_commit_usec] and [method get_last_process_usec] when committing."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_last_process_usec",
            "description": "Returns the absolute timestamp (in μs) of the last [ARVRServer] process callback. The value comes from an internal call to [method OS.get_ticks_usec]."
          },
          {
            "return": {
              "type": "Transform"
            },
            "qualifiers": "const",
            "name": "get_reference_frame",
            "description": "Returns the reference frame transform. Mostly used internally and exposed for GDNative build interfaces."
          },
          {
            "return": {
              "type": "ARVRPositionalTracker"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_tracker",
            "description": "Returns the positional tracker at the given ID."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_tracker_count",
            "description": "Returns the number of trackers currently registered."
          }
        ]
      },
      "name": "ARVRServer",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "interface_name",
              "type": "String",
              "index": "0"
            },
            "name": "interface_added",
            "description": "Emitted when a new interface has been added."
          },
          {
            "argument": {
              "name": "interface_name",
              "type": "String",
              "index": "0"
            },
            "name": "interface_removed",
            "description": "Emitted when an interface is removed."
          },
          {
            "argument": [
              {
                "name": "tracker_name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "type",
                "type": "int",
                "index": "1"
              },
              {
                "name": "id",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "tracker_added",
            "description": "Emitted when a new tracker has been added. If you don't use a fixed number of controllers or if you're using [ARVRAnchor]s for an AR solution, it is important to react to this signal to add the appropriate [ARVRController] or [ARVRAnchor] nodes related to this new tracker."
          },
          {
            "argument": [
              {
                "name": "tracker_name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "type",
                "type": "int",
                "index": "1"
              },
              {
                "name": "id",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "tracker_removed",
            "description": "Emitted when a tracker is removed. You should remove any [ARVRController] or [ARVRAnchor] points if applicable. This is not mandatory, the nodes simply become inactive and will be made active again when a new tracker becomes available (i.e. a new controller is switched on that takes the place of the previous one)."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "1",
            "name": "TRACKER_CONTROLLER",
            "enum": "TrackerType"
          },
          {
            "value": "2",
            "name": "TRACKER_BASESTATION",
            "enum": "TrackerType"
          },
          {
            "value": "4",
            "name": "TRACKER_ANCHOR",
            "enum": "TrackerType"
          },
          {
            "value": "127",
            "name": "TRACKER_ANY_KNOWN",
            "enum": "TrackerType"
          },
          {
            "value": "128",
            "name": "TRACKER_UNKNOWN",
            "enum": "TrackerType"
          },
          {
            "value": "255",
            "name": "TRACKER_ANY",
            "enum": "TrackerType"
          },
          {
            "value": "0",
            "name": "RESET_FULL_ROTATION",
            "enum": "RotationMode"
          },
          {
            "value": "1",
            "name": "RESET_BUT_KEEP_TILT",
            "enum": "RotationMode"
          },
          {
            "value": "2",
            "name": "DONT_RESET_ROTATION",
            "enum": "RotationMode"
          }
        ]
      },
      "brief_description": "Server for AR and VR features.",
      "description": "The AR/VR server is the heart of our Advanced and Virtual Reality solution and handles all the processing."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "1",
            "value": "Specifies the horizontal relative position of child controls.",
            "setter": "set_alignment_horizontal",
            "name": "alignment_horizontal",
            "getter": "get_alignment_horizontal",
            "type": "int",
            "enum": "AspectRatioContainer.AlignMode"
          },
          {
            "default": "1",
            "value": "Specifies the vertical relative position of child controls.",
            "setter": "set_alignment_vertical",
            "name": "alignment_vertical",
            "getter": "get_alignment_vertical",
            "type": "int",
            "enum": "AspectRatioContainer.AlignMode"
          },
          {
            "default": "1.0",
            "value": "The aspect ratio to enforce on child controls. This is the width divided by the height. The ratio depends on the [member stretch_mode].",
            "setter": "set_ratio",
            "name": "ratio",
            "getter": "get_ratio",
            "type": "float"
          },
          {
            "default": "2",
            "value": "The stretch mode used to align child controls.",
            "setter": "set_stretch_mode",
            "name": "stretch_mode",
            "getter": "get_stretch_mode",
            "type": "int",
            "enum": "AspectRatioContainer.StretchMode"
          }
        ]
      },
      "inherits": "Container",
      "methods": {},
      "name": "AspectRatioContainer",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "STRETCH_WIDTH_CONTROLS_HEIGHT",
            "enum": "StretchMode"
          },
          {
            "value": "1",
            "name": "STRETCH_HEIGHT_CONTROLS_WIDTH",
            "enum": "StretchMode"
          },
          {
            "value": "2",
            "name": "STRETCH_FIT",
            "enum": "StretchMode"
          },
          {
            "value": "3",
            "name": "STRETCH_COVER",
            "enum": "StretchMode"
          },
          {
            "value": "0",
            "name": "ALIGN_BEGIN",
            "enum": "AlignMode"
          },
          {
            "value": "1",
            "name": "ALIGN_CENTER",
            "enum": "AlignMode"
          },
          {
            "value": "2",
            "name": "ALIGN_END",
            "enum": "AlignMode"
          }
        ]
      },
      "brief_description": "Container that preserves its child controls' aspect ratio.",
      "description": "Arranges child controls in a way to preserve their aspect ratio automatically whenever the container is resized. Solves the problem where the container size is dynamic and the contents' size needs to adjust accordingly without losing proportions."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "from_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_id",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "_compute_cost",
            "description": "Called when computing the cost between two connected points.\n\t\t\t\tNote that this function is hidden in the default [code]AStar2D[/code] class."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "from_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_id",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "_estimate_cost",
            "description": "Called when estimating the cost between a point and the path's ending point.\n\t\t\t\tNote that this function is hidden in the default [code]AStar2D[/code] class."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector2",
                "index": "1"
              },
              {
                "default": "1.0",
                "name": "weight_scale",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "add_point",
            "description": "Adds a new point at the given position with the given identifier. The [code]id[/code] must be 0 or larger, and the [code]weight_scale[/code] must be 1 or larger.\n\t\t\t\tThe [code]weight_scale[/code] is multiplied by the result of [method _compute_cost] when determining the overall cost of traveling across a segment from a neighboring point to this point. Thus, all else being equal, the algorithm prefers points with lower [code]weight_scale[/code]s to form a path.\n\t\t\t\t[codeblock]\n\t\t\t\tvar astar = AStar2D.new()\n\t\t\t\tastar.add_point(1, Vector2(1, 0), 4) # Adds the point (1, 0) with weight_scale 4 and id 1\n\t\t\t\t[/codeblock]\n\t\t\t\tIf there already exists a point for the given [code]id[/code], its position and weight scale are updated to the given values."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_id",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "are_points_connected",
            "description": "Returns whether there is a connection/segment between the given points."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Clears all the points and segments."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_id",
                "type": "int",
                "index": "1"
              },
              {
                "default": "true",
                "name": "bidirectional",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "connect_points",
            "description": "Creates a segment between the given points. If [code]bidirectional[/code] is [code]false[/code], only movement from [code]id[/code] to [code]to_id[/code] is allowed, not the reverse direction.\n\t\t\t\t[codeblock]\n\t\t\t\tvar astar = AStar2D.new()\n\t\t\t\tastar.add_point(1, Vector2(1, 1))\n\t\t\t\tastar.add_point(2, Vector2(0, 5))\n\t\t\t\tastar.connect_points(1, 2, false)\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_id",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "disconnect_points",
            "description": "Deletes the segment between the given points."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_available_point_id",
            "description": "Returns the next available point ID with no point associated to it."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "to_position",
                "type": "Vector2",
                "index": "0"
              },
              {
                "default": "false",
                "name": "include_disabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_closest_point",
            "description": "Returns the ID of the closest point to [code]to_position[/code], optionally taking disabled points into account. Returns [code]-1[/code] if there are no points in the points pool.\n\t\t\t\t[b]Note:[/b] If several points are the closest to [code]to_position[/code], the one with the smallest ID will be returned, ensuring a deterministic result."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "to_position",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_closest_position_in_segment",
            "description": "Returns the closest position to [code]to_position[/code] that resides inside a segment between two connected points.\n\t\t\t\t[codeblock]\n\t\t\t\tvar astar = AStar2D.new()\n\t\t\t\tastar.add_point(1, Vector2(0, 0))\n\t\t\t\tastar.add_point(2, Vector2(0, 5))\n\t\t\t\tastar.connect_points(1, 2)\n\t\t\t\tvar res = astar.get_closest_position_in_segment(Vector2(3, 3)) # Returns (0, 3)\n\t\t\t\t[/codeblock]\n\t\t\t\tThe result is in the segment that goes from [code]y = 0[/code] to [code]y = 5[/code]. It's the closest position in the segment to the given point."
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "argument": [
              {
                "name": "from_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_id",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "get_id_path",
            "description": "Returns an array with the IDs of the points that form the path found by AStar2D between the given points. The array is ordered from the starting point to the ending point of the path.\n\t\t\t\t[codeblock]\n\t\t\t\tvar astar = AStar2D.new()\n\t\t\t\tastar.add_point(1, Vector2(0, 0))\n\t\t\t\tastar.add_point(2, Vector2(0, 1), 1) # Default weight is 1\n\t\t\t\tastar.add_point(3, Vector2(1, 1))\n\t\t\t\tastar.add_point(4, Vector2(2, 0))\n\n\t\t\t\tastar.connect_points(1, 2, false)\n\t\t\t\tastar.connect_points(2, 3, false)\n\t\t\t\tastar.connect_points(4, 3, false)\n\t\t\t\tastar.connect_points(1, 4, false)\n\n\t\t\t\tvar res = astar.get_id_path(1, 3) # Returns [1, 2, 3]\n\t\t\t\t[/codeblock]\n\t\t\t\tIf you change the 2nd point's weight to 3, then the result will be [code][1, 4, 3][/code] instead, because now even though the distance is longer, it's \"easier\" to get through point 4 than through point 2."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_point_capacity",
            "description": "Returns the capacity of the structure backing the points, useful in conjunction with [code]reserve_space[/code]."
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "get_point_connections",
            "description": "Returns an array with the IDs of the points that form the connection with the given point.\n\t\t\t\t[codeblock]\n\t\t\t\tvar astar = AStar2D.new()\n\t\t\t\tastar.add_point(1, Vector2(0, 0))\n\t\t\t\tastar.add_point(2, Vector2(0, 1))\n\t\t\t\tastar.add_point(3, Vector2(1, 1))\n\t\t\t\tastar.add_point(4, Vector2(2, 0))\n\n\t\t\t\tastar.connect_points(1, 2, true)\n\t\t\t\tastar.connect_points(1, 3, true)\n\n\t\t\t\tvar neighbors = astar.get_point_connections(1) # Returns [2, 3]\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_point_count",
            "description": "Returns the number of points currently in the points pool."
          },
          {
            "return": {
              "type": "PoolVector2Array"
            },
            "argument": [
              {
                "name": "from_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_id",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "get_point_path",
            "description": "Returns an array with the points that are in the path found by AStar2D between the given points. The array is ordered from the starting point to the ending point of the path.\n\t\t\t\t[b]Note:[/b] This method is not thread-safe. If called from a [Thread], it will return an empty [PoolVector2Array] and will print an error message."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_point_position",
            "description": "Returns the position of the point associated with the given [code]id[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_point_weight_scale",
            "description": "Returns the weight scale of the point associated with the given [code]id[/code]."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "get_points",
            "description": "Returns an array of all points."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_point",
            "description": "Returns whether a point associated with the given [code]id[/code] exists."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_point_disabled",
            "description": "Returns whether a point is disabled or not for pathfinding. By default, all points are enabled."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "remove_point",
            "description": "Removes the point associated with the given [code]id[/code] from the points pool."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "num_nodes",
              "type": "int",
              "index": "0"
            },
            "name": "reserve_space",
            "description": "Reserves space internally for [code]num_nodes[/code] points, useful if you're adding a known large number of points at once, for a grid for instance. New capacity must be greater or equals to old capacity."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "default": "true",
                "name": "disabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_point_disabled",
            "description": "Disables or enables the specified point for pathfinding. Useful for making a temporary obstacle."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "set_point_position",
            "description": "Sets the [code]position[/code] for the point with the given [code]id[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "weight_scale",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_point_weight_scale",
            "description": "Sets the [code]weight_scale[/code] for the point with the given [code]id[/code]. The [code]weight_scale[/code] is multiplied by the result of [method _compute_cost] when determining the overall cost of traveling across a segment from a neighboring point to this point."
          }
        ]
      },
      "name": "AStar2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "AStar class representation that uses 2D vectors as edges.",
      "description": "This is a wrapper for the [AStar] class which uses 2D vectors instead of 3D vectors."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "from_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_id",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "_compute_cost",
            "description": "Called when computing the cost between two connected points.\n\t\t\t\tNote that this function is hidden in the default [code]AStar[/code] class."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "from_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_id",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "_estimate_cost",
            "description": "Called when estimating the cost between a point and the path's ending point.\n\t\t\t\tNote that this function is hidden in the default [code]AStar[/code] class."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector3",
                "index": "1"
              },
              {
                "default": "1.0",
                "name": "weight_scale",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "add_point",
            "description": "Adds a new point at the given position with the given identifier. The [code]id[/code] must be 0 or larger, and the [code]weight_scale[/code] must be 1 or larger.\n\t\t\t\tThe [code]weight_scale[/code] is multiplied by the result of [method _compute_cost] when determining the overall cost of traveling across a segment from a neighboring point to this point. Thus, all else being equal, the algorithm prefers points with lower [code]weight_scale[/code]s to form a path.\n\t\t\t\t[codeblock]\n\t\t\t\tvar astar = AStar.new()\n\t\t\t\tastar.add_point(1, Vector3(1, 0, 0), 4) # Adds the point (1, 0, 0) with weight_scale 4 and id 1\n\t\t\t\t[/codeblock]\n\t\t\t\tIf there already exists a point for the given [code]id[/code], its position and weight scale are updated to the given values."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_id",
                "type": "int",
                "index": "1"
              },
              {
                "default": "true",
                "name": "bidirectional",
                "type": "bool",
                "index": "2"
              }
            ],
            "qualifiers": "const",
            "name": "are_points_connected",
            "description": "Returns whether the two given points are directly connected by a segment. If [code]bidirectional[/code] is [code]false[/code], returns whether movement from [code]id[/code] to [code]to_id[/code] is possible through this segment."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Clears all the points and segments."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_id",
                "type": "int",
                "index": "1"
              },
              {
                "default": "true",
                "name": "bidirectional",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "connect_points",
            "description": "Creates a segment between the given points. If [code]bidirectional[/code] is [code]false[/code], only movement from [code]id[/code] to [code]to_id[/code] is allowed, not the reverse direction.\n\t\t\t\t[codeblock]\n\t\t\t\tvar astar = AStar.new()\n\t\t\t\tastar.add_point(1, Vector3(1, 1, 0))\n\t\t\t\tastar.add_point(2, Vector3(0, 5, 0))\n\t\t\t\tastar.connect_points(1, 2, false)\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_id",
                "type": "int",
                "index": "1"
              },
              {
                "default": "true",
                "name": "bidirectional",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "disconnect_points",
            "description": "Deletes the segment between the given points. If [code]bidirectional[/code] is [code]false[/code], only movement from [code]id[/code] to [code]to_id[/code] is prevented, and a unidirectional segment possibly remains."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_available_point_id",
            "description": "Returns the next available point ID with no point associated to it."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "to_position",
                "type": "Vector3",
                "index": "0"
              },
              {
                "default": "false",
                "name": "include_disabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_closest_point",
            "description": "Returns the ID of the closest point to [code]to_position[/code], optionally taking disabled points into account. Returns [code]-1[/code] if there are no points in the points pool.\n\t\t\t\t[b]Note:[/b] If several points are the closest to [code]to_position[/code], the one with the smallest ID will be returned, ensuring a deterministic result."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "to_position",
              "type": "Vector3",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_closest_position_in_segment",
            "description": "Returns the closest position to [code]to_position[/code] that resides inside a segment between two connected points.\n\t\t\t\t[codeblock]\n\t\t\t\tvar astar = AStar.new()\n\t\t\t\tastar.add_point(1, Vector3(0, 0, 0))\n\t\t\t\tastar.add_point(2, Vector3(0, 5, 0))\n\t\t\t\tastar.connect_points(1, 2)\n\t\t\t\tvar res = astar.get_closest_position_in_segment(Vector3(3, 3, 0)) # Returns (0, 3, 0)\n\t\t\t\t[/codeblock]\n\t\t\t\tThe result is in the segment that goes from [code]y = 0[/code] to [code]y = 5[/code]. It's the closest position in the segment to the given point."
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "argument": [
              {
                "name": "from_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_id",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "get_id_path",
            "description": "Returns an array with the IDs of the points that form the path found by AStar between the given points. The array is ordered from the starting point to the ending point of the path.\n\t\t\t\t[codeblock]\n\t\t\t\tvar astar = AStar.new()\n\t\t\t\tastar.add_point(1, Vector3(0, 0, 0))\n\t\t\t\tastar.add_point(2, Vector3(0, 1, 0), 1) # Default weight is 1\n\t\t\t\tastar.add_point(3, Vector3(1, 1, 0))\n\t\t\t\tastar.add_point(4, Vector3(2, 0, 0))\n\n\t\t\t\tastar.connect_points(1, 2, false)\n\t\t\t\tastar.connect_points(2, 3, false)\n\t\t\t\tastar.connect_points(4, 3, false)\n\t\t\t\tastar.connect_points(1, 4, false)\n\n\t\t\t\tvar res = astar.get_id_path(1, 3) # Returns [1, 2, 3]\n\t\t\t\t[/codeblock]\n\t\t\t\tIf you change the 2nd point's weight to 3, then the result will be [code][1, 4, 3][/code] instead, because now even though the distance is longer, it's \"easier\" to get through point 4 than through point 2."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_point_capacity",
            "description": "Returns the capacity of the structure backing the points, useful in conjunction with [code]reserve_space[/code]."
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "get_point_connections",
            "description": "Returns an array with the IDs of the points that form the connection with the given point.\n\t\t\t\t[codeblock]\n\t\t\t\tvar astar = AStar.new()\n\t\t\t\tastar.add_point(1, Vector3(0, 0, 0))\n\t\t\t\tastar.add_point(2, Vector3(0, 1, 0))\n\t\t\t\tastar.add_point(3, Vector3(1, 1, 0))\n\t\t\t\tastar.add_point(4, Vector3(2, 0, 0))\n\n\t\t\t\tastar.connect_points(1, 2, true)\n\t\t\t\tastar.connect_points(1, 3, true)\n\n\t\t\t\tvar neighbors = astar.get_point_connections(1) # Returns [2, 3]\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_point_count",
            "description": "Returns the number of points currently in the points pool."
          },
          {
            "return": {
              "type": "PoolVector3Array"
            },
            "argument": [
              {
                "name": "from_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_id",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "get_point_path",
            "description": "Returns an array with the points that are in the path found by AStar between the given points. The array is ordered from the starting point to the ending point of the path.\n\t\t\t\t[b]Note:[/b] This method is not thread-safe. If called from a [Thread], it will return an empty [PoolVector3Array] and will print an error message."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_point_position",
            "description": "Returns the position of the point associated with the given [code]id[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_point_weight_scale",
            "description": "Returns the weight scale of the point associated with the given [code]id[/code]."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "get_points",
            "description": "Returns an array of all points."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_point",
            "description": "Returns whether a point associated with the given [code]id[/code] exists."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_point_disabled",
            "description": "Returns whether a point is disabled or not for pathfinding. By default, all points are enabled."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "remove_point",
            "description": "Removes the point associated with the given [code]id[/code] from the points pool."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "num_nodes",
              "type": "int",
              "index": "0"
            },
            "name": "reserve_space",
            "description": "Reserves space internally for [code]num_nodes[/code] points, useful if you're adding a known large number of points at once, for a grid for instance. New capacity must be greater or equals to old capacity."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "default": "true",
                "name": "disabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_point_disabled",
            "description": "Disables or enables the specified point for pathfinding. Useful for making a temporary obstacle."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "set_point_position",
            "description": "Sets the [code]position[/code] for the point with the given [code]id[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "weight_scale",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_point_weight_scale",
            "description": "Sets the [code]weight_scale[/code] for the point with the given [code]id[/code]. The [code]weight_scale[/code] is multiplied by the result of [method _compute_cost] when determining the overall cost of traveling across a segment from a neighboring point to this point."
          }
        ]
      },
      "name": "AStar",
      "version": "3.3",
      "constants": {},
      "brief_description": "An implementation of A* to find the shortest paths among connected points in space.",
      "description": "A* (A star) is a computer algorithm that is widely used in pathfinding and graph traversal, the process of plotting short paths among vertices (points), passing through a given set of edges (segments). It enjoys widespread use due to its performance and accuracy. Godot's A* implementation uses points in three-dimensional space and Euclidean distances by default.\n\t\tYou must add points manually with [method add_point] and create segments manually with [method connect_points]. Then you can test if there is a path between two points with the [method are_points_connected] function, get a path containing indices by [method get_id_path], or one containing actual coordinates with [method get_point_path].\n\t\tIt is also possible to use non-Euclidean distances. To do so, create a class that extends [code]AStar[/code] and override methods [method _compute_cost] and [method _estimate_cost]. Both take two indices and return a length, as is shown in the following example.\n\t\t[codeblock]\n\t\tclass MyAStar:\n\t\t    extends AStar\n\n\t\t    func _compute_cost(u, v):\n\t\t        return abs(u - v)\n\n\t\t    func _estimate_cost(u, v):\n\t\t        return min(0, abs(u - v) - 1)\n\t\t[/codeblock]\n\t\t[method _estimate_cost] should return a lower bound of the distance, i.e. [code]_estimate_cost(u, v) <= _compute_cost(u, v)[/code]. This serves as a hint to the algorithm because the custom [code]_compute_cost[/code] might be computation-heavy. If this is not the case, make [method _estimate_cost] return the same value as [method _compute_cost] to provide the algorithm with the most accurate information.\n\t\tIf the default [method _estimate_cost] and [method _compute_cost] methods are used, or if the supplied [method _estimate_cost] method returns a lower bound of the cost, then the paths returned by A* will be the lowest-cost paths. Here, the cost of a path equals the sum of the [method _compute_cost] results of all segments in the path multiplied by the [code]weight_scale[/code]s of the endpoints of the respective segments. If the default methods are used and the [code]weight_scale[/code]s of all points are set to [code]1.0[/code], then this equals the sum of Euclidean distances of all segments in the path."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "value": "The texture that contains the atlas. Can be any [Texture] subtype.",
            "setter": "set_atlas",
            "name": "atlas",
            "getter": "get_atlas",
            "type": "Texture"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], clips the area outside of the region to avoid bleeding of the surrounding texture pixels.",
            "setter": "set_filter_clip",
            "name": "filter_clip",
            "getter": "has_filter_clip",
            "type": "bool"
          },
          {
            "default": "0",
            "setter": "set_flags",
            "override": "true",
            "name": "flags",
            "getter": "get_flags",
            "type": "int"
          },
          {
            "default": "Rect2( 0, 0, 0, 0 )",
            "value": "The margin around the region. The [Rect2]'s [member Rect2.size] parameter (\"w\" and \"h\" in the editor) resizes the texture so it fits within the margin.",
            "setter": "set_margin",
            "name": "margin",
            "getter": "get_margin",
            "type": "Rect2"
          },
          {
            "default": "Rect2( 0, 0, 0, 0 )",
            "value": "The AtlasTexture's used region.",
            "setter": "set_region",
            "name": "region",
            "getter": "get_region",
            "type": "Rect2"
          }
        ]
      },
      "inherits": "Texture",
      "methods": {},
      "name": "AtlasTexture",
      "version": "3.3",
      "constants": {},
      "brief_description": "Crops out one part of a texture, such as a texture from a texture atlas.",
      "description": "[Texture] resource that crops out one part of the [member atlas] texture, defined by [member region]. The main use case is cropping out textures from a texture atlas, which is a big texture file that packs multiple smaller textures. Consists of a [Texture] for the [member atlas], a [member region] that defines the area of [member atlas] to use, and a [member margin] that defines the border width.\n\t\t[AtlasTexture] cannot be used in an [AnimatedTexture], cannot be tiled in nodes such as [TextureRect], and does not work properly if used inside of other [AtlasTexture] resources. Multiple [AtlasTexture] resources can be used to crop multiple textures from the atlas. Using a texture atlas helps to optimize video memory costs and render calls compared to using multiple small files.\n\t\t[b]Note:[/b] AtlasTextures don't support repetition. The [constant Texture.FLAG_REPEAT] and [constant Texture.FLAG_MIRRORED_REPEAT] flags are ignored when using an AtlasTexture."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Resource",
      "methods": {},
      "name": "AudioBusLayout",
      "version": "3.3",
      "constants": {},
      "brief_description": "Stores information about the audio buses.",
      "description": "Stores position, muting, solo, bypass, effects, effect position, volume, and the connections between buses. See [AudioServer] for usage."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "0.0",
          "value": "Amount of amplification in decibels. Positive values make the sound louder, negative values make it quieter. Value can range from -80 to 24.",
          "setter": "set_volume_db",
          "name": "volume_db",
          "getter": "get_volume_db",
          "type": "float"
        }
      },
      "inherits": "AudioEffect",
      "methods": {},
      "name": "AudioEffectAmplify",
      "version": "3.3",
      "constants": {},
      "brief_description": "Adds an amplifying audio effect to an audio bus.\n\t\tIncreases or decreases the volume of the selected audio bus.",
      "description": "Increases or decreases the volume being routed through the audio bus."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "AudioEffectFilter",
      "methods": {},
      "name": "AudioEffectBandLimitFilter",
      "version": "3.3",
      "constants": {},
      "brief_description": "Adds a band limit filter to the audio bus.",
      "description": "Limits the frequencies in a range around the [member AudioEffectFilter.cutoff_hz] and allows frequencies outside of this range to pass."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "AudioEffectFilter",
      "methods": {},
      "name": "AudioEffectBandPassFilter",
      "version": "3.3",
      "constants": {},
      "brief_description": "Adds a band pass filter to the audio bus.",
      "description": "Attenuates the frequencies inside of a range around the [member AudioEffectFilter.cutoff_hz] and cuts frequencies outside of this band."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "0.1",
          "value": "Length of the internal ring buffer, in seconds. Setting the buffer length will have no effect if already initialized.",
          "setter": "set_buffer_length",
          "name": "buffer_length",
          "getter": "get_buffer_length",
          "type": "float"
        }
      },
      "inherits": "AudioEffect",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "frames",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "can_get_buffer",
            "description": "Returns [code]true[/code] if at least [code]frames[/code] audio frames are available to read in the internal ring buffer."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_buffer",
            "description": "Clears the internal ring buffer."
          },
          {
            "return": {
              "type": "PoolVector2Array"
            },
            "argument": {
              "name": "frames",
              "type": "int",
              "index": "0"
            },
            "name": "get_buffer",
            "description": "Gets the next [code]frames[/code] audio samples from the internal ring buffer.\n\t\t\t\tReturns a [PoolVector2Array] containing exactly [code]frames[/code] audio samples if available, or an empty [PoolVector2Array] if insufficient data was available."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_buffer_length_frames",
            "description": "Returns the total size of the internal ring buffer in frames."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_discarded_frames",
            "description": "Returns the number of audio frames discarded from the audio bus due to full buffer."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_frames_available",
            "description": "Returns the number of frames available to read using [method get_buffer]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_pushed_frames",
            "description": "Returns the number of audio frames inserted from the audio bus."
          }
        ]
      },
      "name": "AudioEffectCapture",
      "version": "3.3",
      "constants": {},
      "brief_description": "Captures audio from an audio bus in real-time.",
      "description": "AudioEffectCapture is an AudioEffect which copies all audio frames from the attached audio effect bus into its internal ring buffer.\n\t\tApplication code should consume these audio frames from this ring buffer using [method get_buffer] and process it as needed, for example to capture data from a microphone, implement application defined effects, or to transmit audio over the network."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "1.0",
            "value": "The effect's raw signal.",
            "setter": "set_dry",
            "name": "dry",
            "getter": "get_dry",
            "type": "float"
          },
          {
            "default": "8000.0",
            "value": "The voice's cutoff frequency.",
            "setter": "set_voice_cutoff_hz",
            "name": "voice/1/cutoff_hz",
            "getter": "get_voice_cutoff_hz",
            "type": "float"
          },
          {
            "default": "15.0",
            "value": "The voice's signal delay.",
            "setter": "set_voice_delay_ms",
            "name": "voice/1/delay_ms",
            "getter": "get_voice_delay_ms",
            "type": "float"
          },
          {
            "default": "2.0",
            "value": "The voice filter's depth.",
            "setter": "set_voice_depth_ms",
            "name": "voice/1/depth_ms",
            "getter": "get_voice_depth_ms",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The voice's volume.",
            "setter": "set_voice_level_db",
            "name": "voice/1/level_db",
            "getter": "get_voice_level_db",
            "type": "float"
          },
          {
            "default": "-0.5",
            "value": "The voice's pan level.",
            "setter": "set_voice_pan",
            "name": "voice/1/pan",
            "getter": "get_voice_pan",
            "type": "float"
          },
          {
            "default": "0.8",
            "value": "The voice's filter rate.",
            "setter": "set_voice_rate_hz",
            "name": "voice/1/rate_hz",
            "getter": "get_voice_rate_hz",
            "type": "float"
          },
          {
            "default": "8000.0",
            "value": "The voice's cutoff frequency.",
            "setter": "set_voice_cutoff_hz",
            "name": "voice/2/cutoff_hz",
            "getter": "get_voice_cutoff_hz",
            "type": "float"
          },
          {
            "default": "20.0",
            "value": "The voice's signal delay.",
            "setter": "set_voice_delay_ms",
            "name": "voice/2/delay_ms",
            "getter": "get_voice_delay_ms",
            "type": "float"
          },
          {
            "default": "3.0",
            "value": "The voice filter's depth.",
            "setter": "set_voice_depth_ms",
            "name": "voice/2/depth_ms",
            "getter": "get_voice_depth_ms",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The voice's volume.",
            "setter": "set_voice_level_db",
            "name": "voice/2/level_db",
            "getter": "get_voice_level_db",
            "type": "float"
          },
          {
            "default": "0.5",
            "value": "The voice's pan level.",
            "setter": "set_voice_pan",
            "name": "voice/2/pan",
            "getter": "get_voice_pan",
            "type": "float"
          },
          {
            "default": "1.2",
            "value": "The voice's filter rate.",
            "setter": "set_voice_rate_hz",
            "name": "voice/2/rate_hz",
            "getter": "get_voice_rate_hz",
            "type": "float"
          },
          {
            "value": "The voice's cutoff frequency.",
            "setter": "set_voice_cutoff_hz",
            "name": "voice/3/cutoff_hz",
            "getter": "get_voice_cutoff_hz",
            "type": "float"
          },
          {
            "value": "The voice's signal delay.",
            "setter": "set_voice_delay_ms",
            "name": "voice/3/delay_ms",
            "getter": "get_voice_delay_ms",
            "type": "float"
          },
          {
            "value": "The voice filter's depth.",
            "setter": "set_voice_depth_ms",
            "name": "voice/3/depth_ms",
            "getter": "get_voice_depth_ms",
            "type": "float"
          },
          {
            "value": "The voice's volume.",
            "setter": "set_voice_level_db",
            "name": "voice/3/level_db",
            "getter": "get_voice_level_db",
            "type": "float"
          },
          {
            "value": "The voice's pan level.",
            "setter": "set_voice_pan",
            "name": "voice/3/pan",
            "getter": "get_voice_pan",
            "type": "float"
          },
          {
            "value": "The voice's filter rate.",
            "setter": "set_voice_rate_hz",
            "name": "voice/3/rate_hz",
            "getter": "get_voice_rate_hz",
            "type": "float"
          },
          {
            "value": "The voice's cutoff frequency.",
            "setter": "set_voice_cutoff_hz",
            "name": "voice/4/cutoff_hz",
            "getter": "get_voice_cutoff_hz",
            "type": "float"
          },
          {
            "value": "The voice's signal delay.",
            "setter": "set_voice_delay_ms",
            "name": "voice/4/delay_ms",
            "getter": "get_voice_delay_ms",
            "type": "float"
          },
          {
            "value": "The voice filter's depth.",
            "setter": "set_voice_depth_ms",
            "name": "voice/4/depth_ms",
            "getter": "get_voice_depth_ms",
            "type": "float"
          },
          {
            "value": "The voice's volume.",
            "setter": "set_voice_level_db",
            "name": "voice/4/level_db",
            "getter": "get_voice_level_db",
            "type": "float"
          },
          {
            "value": "The voice's pan level.",
            "setter": "set_voice_pan",
            "name": "voice/4/pan",
            "getter": "get_voice_pan",
            "type": "float"
          },
          {
            "value": "The voice's filter rate.",
            "setter": "set_voice_rate_hz",
            "name": "voice/4/rate_hz",
            "getter": "get_voice_rate_hz",
            "type": "float"
          },
          {
            "default": "2",
            "value": "The amount of voices in the effect.",
            "setter": "set_voice_count",
            "name": "voice_count",
            "getter": "get_voice_count",
            "type": "int"
          },
          {
            "default": "0.5",
            "value": "The effect's processed signal.",
            "setter": "set_wet",
            "name": "wet",
            "getter": "get_wet",
            "type": "float"
          }
        ]
      },
      "inherits": "AudioEffect",
      "methods": {
        "method": [
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "voice_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_voice_cutoff_hz",
            "description": {}
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "voice_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_voice_delay_ms",
            "description": {}
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "voice_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_voice_depth_ms",
            "description": {}
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "voice_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_voice_level_db",
            "description": {}
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "voice_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_voice_pan",
            "description": {}
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "voice_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_voice_rate_hz",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "voice_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "cutoff_hz",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_voice_cutoff_hz",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "voice_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "delay_ms",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_voice_delay_ms",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "voice_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "depth_ms",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_voice_depth_ms",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "voice_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "level_db",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_voice_level_db",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "voice_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "pan",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_voice_pan",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "voice_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "rate_hz",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_voice_rate_hz",
            "description": {}
          }
        ]
      },
      "name": "AudioEffectChorus",
      "version": "3.3",
      "constants": {},
      "brief_description": "Adds a chorus audio effect.",
      "description": "Adds a chorus audio effect. The effect applies a filter with voices to duplicate the audio source and manipulate it through the filter."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "20.0",
            "value": "Compressor's reaction time when the signal exceeds the threshold, in microseconds. Value can range from 20 to 2000.",
            "setter": "set_attack_us",
            "name": "attack_us",
            "getter": "get_attack_us",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Gain applied to the output signal.",
            "setter": "set_gain",
            "name": "gain",
            "getter": "get_gain",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Balance between original signal and effect signal. Value can range from 0 (totally dry) to 1 (totally wet).",
            "setter": "set_mix",
            "name": "mix",
            "getter": "get_mix",
            "type": "float"
          },
          {
            "default": "4.0",
            "value": "Amount of compression applied to the audio once it passes the threshold level. The higher the ratio, the more the loud parts of the audio will be compressed. Value can range from 1 to 48.",
            "setter": "set_ratio",
            "name": "ratio",
            "getter": "get_ratio",
            "type": "float"
          },
          {
            "default": "250.0",
            "value": "Compressor's delay time to stop reducing the signal after the signal level falls below the threshold, in milliseconds. Value can range from 20 to 2000.",
            "setter": "set_release_ms",
            "name": "release_ms",
            "getter": "get_release_ms",
            "type": "float"
          },
          {
            "default": "\"\"",
            "value": "Reduce the sound level using another audio bus for threshold detection.",
            "setter": "set_sidechain",
            "name": "sidechain",
            "getter": "get_sidechain",
            "type": "String"
          },
          {
            "default": "0.0",
            "value": "The level above which compression is applied to the audio. Value can range from -60 to 0.",
            "setter": "set_threshold",
            "name": "threshold",
            "getter": "get_threshold",
            "type": "float"
          }
        ]
      },
      "inherits": "AudioEffect",
      "methods": {},
      "name": "AudioEffectCompressor",
      "version": "3.3",
      "constants": {},
      "brief_description": "Adds a compressor audio effect to an audio bus.\n\t\tReduces sounds that exceed a certain threshold level, smooths out the dynamics and increases the overall volume.",
      "description": "Dynamic range compressor reduces the level of the sound when the amplitude goes over a certain threshold in Decibels. One of the main uses of a compressor is to increase the dynamic range by clipping as little as possible (when sound goes over 0dB).\n\t\tCompressor has many uses in the mix:\n\t\t- In the Master bus to compress the whole output (although an [AudioEffectLimiter] is probably better).\n\t\t- In voice channels to ensure they sound as balanced as possible.\n\t\t- Sidechained. This can reduce the sound level sidechained with another audio bus for threshold detection. This technique is common in video game mixing to the level of music and SFX while voices are being heard.\n\t\t- Accentuates transients by using a wider attack, making effects sound more punchy."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "1.0",
            "value": "Output percent of original sound. At 0, only delayed sounds are output. Value can range from 0 to 1.",
            "setter": "set_dry",
            "name": "dry",
            "getter": "get_dry",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], feedback is enabled.",
            "setter": "set_feedback_active",
            "name": "feedback/active",
            "getter": "is_feedback_active",
            "type": "bool"
          },
          {
            "default": "340.0",
            "value": "Feedback delay time in milliseconds.",
            "setter": "set_feedback_delay_ms",
            "name": "feedback/delay_ms",
            "getter": "get_feedback_delay_ms",
            "type": "float"
          },
          {
            "default": "-6.0",
            "value": "Sound level for [code]tap1[/code].",
            "setter": "set_feedback_level_db",
            "name": "feedback/level_db",
            "getter": "get_feedback_level_db",
            "type": "float"
          },
          {
            "default": "16000.0",
            "value": "Low-pass filter for feedback, in Hz. Frequencies below this value are filtered out of the source signal.",
            "setter": "set_feedback_lowpass",
            "name": "feedback/lowpass",
            "getter": "get_feedback_lowpass",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], [code]tap1[/code] will be enabled.",
            "setter": "set_tap1_active",
            "name": "tap1/active",
            "getter": "is_tap1_active",
            "type": "bool"
          },
          {
            "default": "250.0",
            "value": "[code]tap1[/code] delay time in milliseconds.",
            "setter": "set_tap1_delay_ms",
            "name": "tap1/delay_ms",
            "getter": "get_tap1_delay_ms",
            "type": "float"
          },
          {
            "default": "-6.0",
            "value": "Sound level for [code]tap1[/code].",
            "setter": "set_tap1_level_db",
            "name": "tap1/level_db",
            "getter": "get_tap1_level_db",
            "type": "float"
          },
          {
            "default": "0.2",
            "value": "Pan position for [code]tap1[/code]. Value can range from -1 (fully left) to 1 (fully right).",
            "setter": "set_tap1_pan",
            "name": "tap1/pan",
            "getter": "get_tap1_pan",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], [code]tap2[/code] will be enabled.",
            "setter": "set_tap2_active",
            "name": "tap2/active",
            "getter": "is_tap2_active",
            "type": "bool"
          },
          {
            "default": "500.0",
            "value": "[b]Tap2[/b] delay time in milliseconds.",
            "setter": "set_tap2_delay_ms",
            "name": "tap2/delay_ms",
            "getter": "get_tap2_delay_ms",
            "type": "float"
          },
          {
            "default": "-12.0",
            "value": "Sound level for [code]tap2[/code].",
            "setter": "set_tap2_level_db",
            "name": "tap2/level_db",
            "getter": "get_tap2_level_db",
            "type": "float"
          },
          {
            "default": "-0.4",
            "value": "Pan position for [code]tap2[/code]. Value can range from -1 (fully left) to 1 (fully right).",
            "setter": "set_tap2_pan",
            "name": "tap2/pan",
            "getter": "get_tap2_pan",
            "type": "float"
          }
        ]
      },
      "inherits": "AudioEffect",
      "methods": {},
      "name": "AudioEffectDelay",
      "version": "3.3",
      "constants": {},
      "brief_description": "Adds a delay audio effect to an audio bus. Plays input signal back after a period of time.\n\t\tTwo tap delay and feedback options.",
      "description": "Plays input signal back after a period of time. The delayed signal may be played back multiple times to create the sound of a repeating, decaying echo. Delay effects range from a subtle echo effect to a pronounced blending of previous sounds with new sounds."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://docs.godotengine.org/en/3.3/tutorials/audio/audio_buses.html",
          "title": "Audio buses"
        }
      },
      "members": {
        "member": [
          {
            "default": "0.0",
            "value": "Distortion power. Value can range from 0 to 1.",
            "setter": "set_drive",
            "name": "drive",
            "getter": "get_drive",
            "type": "float"
          },
          {
            "default": "16000.0",
            "value": "High-pass filter, in Hz. Frequencies higher than this value will not be affected by the distortion. Value can range from 1 to 20000.",
            "setter": "set_keep_hf_hz",
            "name": "keep_hf_hz",
            "getter": "get_keep_hf_hz",
            "type": "float"
          },
          {
            "default": "0",
            "value": "Distortion type.",
            "setter": "set_mode",
            "name": "mode",
            "getter": "get_mode",
            "type": "int",
            "enum": "AudioEffectDistortion.Mode"
          },
          {
            "default": "0.0",
            "value": "Increases or decreases the volume after the effect. Value can range from -80 to 24.",
            "setter": "set_post_gain",
            "name": "post_gain",
            "getter": "get_post_gain",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Increases or decreases the volume before the effect. Value can range from -60 to 60.",
            "setter": "set_pre_gain",
            "name": "pre_gain",
            "getter": "get_pre_gain",
            "type": "float"
          }
        ]
      },
      "inherits": "AudioEffect",
      "methods": {},
      "name": "AudioEffectDistortion",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "MODE_CLIP",
            "enum": "Mode"
          },
          {
            "value": "1",
            "name": "MODE_ATAN",
            "enum": "Mode"
          },
          {
            "value": "2",
            "name": "MODE_LOFI",
            "enum": "Mode"
          },
          {
            "value": "3",
            "name": "MODE_OVERDRIVE",
            "enum": "Mode"
          },
          {
            "value": "4",
            "name": "MODE_WAVESHAPE",
            "enum": "Mode"
          }
        ]
      },
      "brief_description": "Adds a distortion audio effect to an Audio bus.\n\t\tModify the sound to make it distorted.",
      "description": "Different types are available: clip, tan, lo-fi (bit crushing), overdrive, or waveshape.\n\t\tBy distorting the waveform the frequency content change, which will often make the sound \"crunchy\" or \"abrasive\". For games, it can simulate sound coming from some saturated device or speaker very efficiently."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "AudioEffectEQ",
      "methods": {},
      "name": "AudioEffectEQ10",
      "version": "3.3",
      "constants": {},
      "brief_description": "Adds a 10-band equalizer audio effect to an Audio bus. Gives you control over frequencies from 31 Hz to 16000 Hz.\n\t\tEach frequency can be modulated between -60/+24 dB.",
      "description": "Frequency bands:\n\t\tBand 1: 31 Hz\n\t\tBand 2: 62 Hz\n\t\tBand 3: 125 Hz\n\t\tBand 4: 250 Hz\n\t\tBand 5: 500 Hz\n\t\tBand 6: 1000 Hz\n\t\tBand 7: 2000 Hz\n\t\tBand 8: 4000 Hz\n\t\tBand 9: 8000 Hz\n\t\tBand 10: 16000 Hz\n\t\tSee also [AudioEffectEQ], [AudioEffectEQ6], [AudioEffectEQ21]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "AudioEffectEQ",
      "methods": {},
      "name": "AudioEffectEQ21",
      "version": "3.3",
      "constants": {},
      "brief_description": "Adds a 21-band equalizer audio effect to an Audio bus. Gives you control over frequencies from 22 Hz to 22000 Hz.\n\t\tEach frequency can be modulated between -60/+24 dB.",
      "description": "Frequency bands:\n\t\tBand 1: 22 Hz\n\t\tBand 2: 32 Hz\n\t\tBand 3: 44 Hz\n\t\tBand 4: 63 Hz\n\t\tBand 5: 90 Hz\n\t\tBand 6: 125 Hz\n\t\tBand 7: 175 Hz\n\t\tBand 8: 250 Hz\n\t\tBand 9: 350 Hz\n\t\tBand 10: 500 Hz\n\t\tBand 11: 700 Hz\n\t\tBand 12: 1000 Hz\n\t\tBand 13: 1400 Hz\n\t\tBand 14: 2000 Hz\n\t\tBand 15: 2800 Hz\n\t\tBand 16: 4000 Hz\n\t\tBand 17: 5600 Hz\n\t\tBand 18: 8000 Hz\n\t\tBand 19: 11000 Hz\n\t\tBand 20: 16000 Hz\n\t\tBand 21: 22000 Hz\n\t\tSee also [AudioEffectEQ], [AudioEffectEQ6], [AudioEffectEQ10]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "AudioEffectEQ",
      "methods": {},
      "name": "AudioEffectEQ6",
      "version": "3.3",
      "constants": {},
      "brief_description": "Adds a 6-band equalizer audio effect to an Audio bus. Gives you control over frequencies from 32 Hz to 10000 Hz.\n\t\tEach frequency can be modulated between -60/+24 dB.",
      "description": "Frequency bands:\n\t\tBand 1: 32 Hz\n\t\tBand 2: 100 Hz\n\t\tBand 3: 320 Hz\n\t\tBand 4: 1000 Hz\n\t\tBand 5: 3200 Hz\n\t\tBand 6: 10000 Hz\n\t\tSee also [AudioEffectEQ], [AudioEffectEQ10], [AudioEffectEQ21]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "AudioEffect",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_band_count",
            "description": "Returns the number of bands of the equalizer."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "band_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_band_gain_db",
            "description": "Returns the band's gain at the specified index, in dB."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "band_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "volume_db",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_band_gain_db",
            "description": "Sets band's gain at the specified index, in dB."
          }
        ]
      },
      "name": "AudioEffectEQ",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base class for audio equalizers. Gives you control over frequencies.\n\t\tUse it to create a custom equalizer if [AudioEffectEQ6], [AudioEffectEQ10] or [AudioEffectEQ21] don't fit your needs.",
      "description": "AudioEffectEQ gives you control over frequencies. Use it to compensate for existing deficiencies in audio. AudioEffectEQs are useful on the Master bus to completely master a mix and give it more character. They are also useful when a game is run on a mobile device, to adjust the mix to that kind of speakers (it can be added but disabled when headphones are plugged)."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://docs.godotengine.org/en/3.3/tutorials/audio/audio_buses.html",
          "title": "Audio buses"
        }
      },
      "members": {
        "member": [
          {
            "default": "2000.0",
            "value": "Threshold frequency for the filter, in Hz.",
            "setter": "set_cutoff",
            "name": "cutoff_hz",
            "getter": "get_cutoff",
            "type": "float"
          },
          {
            "default": "0",
            "setter": "set_db",
            "name": "db",
            "getter": "get_db",
            "type": "int",
            "enum": "AudioEffectFilter.FilterDB"
          },
          {
            "default": "1.0",
            "value": "Gain amount of the frequencies after the filter.",
            "setter": "set_gain",
            "name": "gain",
            "getter": "get_gain",
            "type": "float"
          },
          {
            "default": "0.5",
            "value": "Amount of boost in the frequency range near the cutoff frequency.",
            "setter": "set_resonance",
            "name": "resonance",
            "getter": "get_resonance",
            "type": "float"
          }
        ]
      },
      "inherits": "AudioEffect",
      "methods": {},
      "name": "AudioEffectFilter",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "FILTER_6DB",
            "enum": "FilterDB"
          },
          {
            "value": "1",
            "name": "FILTER_12DB",
            "enum": "FilterDB"
          },
          {
            "value": "2",
            "name": "FILTER_18DB",
            "enum": "FilterDB"
          },
          {
            "value": "3",
            "name": "FILTER_24DB",
            "enum": "FilterDB"
          }
        ]
      },
      "brief_description": "Adds a filter to the audio bus.",
      "description": "Allows frequencies other than the [member cutoff_hz] to pass."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "AudioEffectFilter",
      "methods": {},
      "name": "AudioEffectHighPassFilter",
      "version": "3.3",
      "constants": {},
      "brief_description": "Adds a high-pass filter to the Audio Bus.",
      "description": "Cuts frequencies lower than the [member AudioEffectFilter.cutoff_hz] and allows higher frequencies to pass."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://docs.godotengine.org/en/3.3/tutorials/audio/audio_buses.html",
          "title": "Audio buses"
        }
      },
      "inherits": "AudioEffectFilter",
      "methods": {},
      "name": "AudioEffectHighShelfFilter",
      "version": "3.3",
      "constants": {},
      "brief_description": "Reduces all frequencies above the [member AudioEffectFilter.cutoff_hz].",
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {},
      "name": "AudioEffectInstance",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "-0.1",
            "value": "The waveform's maximum allowed value, in decibels. Value can range from -20 to -0.1.",
            "setter": "set_ceiling_db",
            "name": "ceiling_db",
            "getter": "get_ceiling_db",
            "type": "float"
          },
          {
            "default": "2.0",
            "value": "Applies a gain to the limited waves, in decibels. Value can range from 0 to 6.",
            "setter": "set_soft_clip_db",
            "name": "soft_clip_db",
            "getter": "get_soft_clip_db",
            "type": "float"
          },
          {
            "default": "10.0",
            "setter": "set_soft_clip_ratio",
            "name": "soft_clip_ratio",
            "getter": "get_soft_clip_ratio",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Threshold from which the limiter begins to be active, in decibels. Value can range from -30 to 0.",
            "setter": "set_threshold_db",
            "name": "threshold_db",
            "getter": "get_threshold_db",
            "type": "float"
          }
        ]
      },
      "inherits": "AudioEffect",
      "methods": {},
      "name": "AudioEffectLimiter",
      "version": "3.3",
      "constants": {},
      "brief_description": "Adds a soft-clip limiter audio effect to an Audio bus.",
      "description": "A limiter is similar to a compressor, but it's less flexible and designed to disallow sound going over a given dB threshold. Adding one in the Master bus is always recommended to reduce the effects of clipping.\n\t\tSoft clipping starts to reduce the peaks a little below the threshold level and progressively increases its effect as the input level increases such that the threshold is never exceeded."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "AudioEffectFilter",
      "methods": {},
      "name": "AudioEffectLowPassFilter",
      "version": "3.3",
      "constants": {},
      "brief_description": "Adds a low-pass filter to the Audio bus.",
      "description": "Cuts frequencies higher than the [member AudioEffectFilter.cutoff_hz] and allows lower frequencies to pass."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://docs.godotengine.org/en/3.3/tutorials/audio/audio_buses.html",
          "title": "Audio buses"
        }
      },
      "inherits": "AudioEffectFilter",
      "methods": {},
      "name": "AudioEffectLowShelfFilter",
      "version": "3.3",
      "constants": {},
      "brief_description": "Reduces all frequencies below the [member AudioEffectFilter.cutoff_hz].",
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "AudioEffectFilter",
      "methods": {},
      "name": "AudioEffectNotchFilter",
      "version": "3.3",
      "constants": {},
      "brief_description": "Adds a notch filter to the Audio bus.",
      "description": "Attenuates frequencies in a narrow band around the [member AudioEffectFilter.cutoff_hz] and cuts frequencies outside of this range."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "0.0",
          "value": "Pan position. Value can range from -1 (fully left) to 1 (fully right).",
          "setter": "set_pan",
          "name": "pan",
          "getter": "get_pan",
          "type": "float"
        }
      },
      "inherits": "AudioEffect",
      "methods": {},
      "name": "AudioEffectPanner",
      "version": "3.3",
      "constants": {},
      "brief_description": "Adds a panner audio effect to an Audio bus. Pans sound left or right.",
      "description": "Determines how much of an audio signal is sent to the left and right buses."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "1.0",
            "value": "Governs how high the filter frequencies sweep. Low value will primarily affect bass frequencies. High value can sweep high into the treble. Value can range from 0.1 to 4.",
            "setter": "set_depth",
            "name": "depth",
            "getter": "get_depth",
            "type": "float"
          },
          {
            "default": "0.7",
            "value": "Output percent of modified sound. Value can range from 0.1 to 0.9.",
            "setter": "set_feedback",
            "name": "feedback",
            "getter": "get_feedback",
            "type": "float"
          },
          {
            "default": "1600.0",
            "value": "Determines the maximum frequency affected by the LFO modulations, in Hz. Value can range from 10 to 10000.",
            "setter": "set_range_max_hz",
            "name": "range_max_hz",
            "getter": "get_range_max_hz",
            "type": "float"
          },
          {
            "default": "440.0",
            "value": "Determines the minimum frequency affected by the LFO modulations, in Hz. Value can range from 10 to 10000.",
            "setter": "set_range_min_hz",
            "name": "range_min_hz",
            "getter": "get_range_min_hz",
            "type": "float"
          },
          {
            "default": "0.5",
            "value": "Adjusts the rate in Hz at which the effect sweeps up and down across the frequency range.",
            "setter": "set_rate_hz",
            "name": "rate_hz",
            "getter": "get_rate_hz",
            "type": "float"
          }
        ]
      },
      "inherits": "AudioEffect",
      "methods": {},
      "name": "AudioEffectPhaser",
      "version": "3.3",
      "constants": {},
      "brief_description": "Adds a phaser audio effect to an Audio bus.\n\t\tCombines the original signal with a copy that is slightly out of phase with the original.",
      "description": "Combines phase-shifted signals with the original signal. The movement of the phase-shifted signals is controlled using a low-frequency oscillator."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "3",
            "setter": "set_fft_size",
            "name": "fft_size",
            "getter": "get_fft_size",
            "type": "int",
            "enum": "AudioEffectPitchShift.FFT_Size"
          },
          {
            "default": "4",
            "setter": "set_oversampling",
            "name": "oversampling",
            "getter": "get_oversampling",
            "type": "int"
          },
          {
            "default": "1.0",
            "value": "Pitch value. Can range from 0 (-1 octave) to 16 (+16 octaves).",
            "setter": "set_pitch_scale",
            "name": "pitch_scale",
            "getter": "get_pitch_scale",
            "type": "float"
          }
        ]
      },
      "inherits": "AudioEffect",
      "methods": {},
      "name": "AudioEffectPitchShift",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "FFT_SIZE_256",
            "enum": "FFT_Size"
          },
          {
            "value": "1",
            "name": "FFT_SIZE_512",
            "enum": "FFT_Size"
          },
          {
            "value": "2",
            "name": "FFT_SIZE_1024",
            "enum": "FFT_Size"
          },
          {
            "value": "3",
            "name": "FFT_SIZE_2048",
            "enum": "FFT_Size"
          },
          {
            "value": "4",
            "name": "FFT_SIZE_4096",
            "enum": "FFT_Size"
          },
          {
            "value": "5",
            "name": "FFT_SIZE_MAX",
            "enum": "FFT_Size"
          }
        ]
      },
      "brief_description": "Adds a pitch-shifting audio effect to an Audio bus.\n\t\tRaises or lowers the pitch of original sound.",
      "description": "Allows modulation of pitch independently of tempo. All frequencies can be increased/decreased with minimal effect on transients."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/audio/recording_with_microphone.html",
            "title": "Recording with microphone"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/527",
            "title": "Audio Mic Record Demo"
          }
        ]
      },
      "members": {
        "member": {
          "default": "1",
          "value": "Specifies the format in which the sample will be recorded. See [enum AudioStreamSample.Format] for available formats.",
          "setter": "set_format",
          "name": "format",
          "getter": "get_format",
          "type": "int",
          "enum": "AudioStreamSample.Format"
        }
      },
      "inherits": "AudioEffect",
      "methods": {
        "method": [
          {
            "return": {
              "type": "AudioStreamSample"
            },
            "qualifiers": "const",
            "name": "get_recording",
            "description": "Returns the recorded sample."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_recording_active",
            "description": "Returns whether the recording is active or not."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "record",
              "type": "bool",
              "index": "0"
            },
            "name": "set_recording_active",
            "description": "If [code]true[/code], the sound will be recorded. Note that restarting the recording will remove the previously recorded sample."
          }
        ]
      },
      "name": "AudioEffectRecord",
      "version": "3.3",
      "constants": {},
      "brief_description": "Audio effect used for recording sound from a microphone.",
      "description": "Allows the user to record sound from a microphone. It sets and gets the format in which the audio file will be recorded (8-bit, 16-bit, or compressed). It checks whether or not the recording is active, and if it is, records the sound. It then returns the recorded sample."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/678",
          "title": "Third Person Shooter Demo"
        }
      },
      "members": {
        "member": [
          {
            "default": "0.5",
            "value": "Defines how reflective the imaginary room's walls are. Value can range from 0 to 1.",
            "setter": "set_damping",
            "name": "damping",
            "getter": "get_damping",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Output percent of original sound. At 0, only modified sound is outputted. Value can range from 0 to 1.",
            "setter": "set_dry",
            "name": "dry",
            "getter": "get_dry",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "High-pass filter passes signals with a frequency higher than a certain cutoff frequency and attenuates signals with frequencies lower than the cutoff frequency. Value can range from 0 to 1.",
            "setter": "set_hpf",
            "name": "hipass",
            "getter": "get_hpf",
            "type": "float"
          },
          {
            "default": "0.4",
            "value": "Output percent of predelay. Value can range from 0 to 1.",
            "setter": "set_predelay_feedback",
            "name": "predelay_feedback",
            "getter": "get_predelay_feedback",
            "type": "float"
          },
          {
            "default": "150.0",
            "value": "Time between the original signal and the early reflections of the reverb signal, in milliseconds.",
            "setter": "set_predelay_msec",
            "name": "predelay_msec",
            "getter": "get_predelay_msec",
            "type": "float"
          },
          {
            "default": "0.8",
            "value": "Dimensions of simulated room. Bigger means more echoes. Value can range from 0 to 1.",
            "setter": "set_room_size",
            "name": "room_size",
            "getter": "get_room_size",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Widens or narrows the stereo image of the reverb tail. 1 means fully widens. Value can range from 0 to 1.",
            "setter": "set_spread",
            "name": "spread",
            "getter": "get_spread",
            "type": "float"
          },
          {
            "default": "0.5",
            "value": "Output percent of modified sound. At 0, only original sound is outputted. Value can range from 0 to 1.",
            "setter": "set_wet",
            "name": "wet",
            "getter": "get_wet",
            "type": "float"
          }
        ]
      },
      "inherits": "AudioEffect",
      "methods": {},
      "name": "AudioEffectReverb",
      "version": "3.3",
      "constants": {},
      "brief_description": "Adds a reverberation audio effect to an Audio bus.\n\t\tSimulates the sound of acoustic environments such as rooms, concert halls, caverns, or an open spaces.",
      "description": "Simulates rooms of different sizes. Its parameters can be adjusted to simulate the sound of a specific room."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "AudioEffectInstance",
      "methods": {
        "method": {
          "return": {
            "type": "Vector2"
          },
          "argument": [
            {
              "name": "from_hz",
              "type": "float",
              "index": "0"
            },
            {
              "name": "to_hz",
              "type": "float",
              "index": "1"
            },
            {
              "default": "1",
              "name": "mode",
              "type": "int",
              "enum": "AudioEffectSpectrumAnalyzerInstance.MagnitudeMode",
              "index": "2"
            }
          ],
          "qualifiers": "const",
          "name": "get_magnitude_for_frequency_range",
          "description": {}
        }
      },
      "name": "AudioEffectSpectrumAnalyzerInstance",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "MAGNITUDE_AVERAGE",
            "enum": "MagnitudeMode"
          },
          {
            "value": "1",
            "name": "MAGNITUDE_MAX",
            "enum": "MagnitudeMode"
          }
        ]
      },
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "2.0",
            "setter": "set_buffer_length",
            "name": "buffer_length",
            "getter": "get_buffer_length",
            "type": "float"
          },
          {
            "default": "2",
            "setter": "set_fft_size",
            "name": "fft_size",
            "getter": "get_fft_size",
            "type": "int",
            "enum": "AudioEffectSpectrumAnalyzer.FFT_Size"
          },
          {
            "default": "0.01",
            "setter": "set_tap_back_pos",
            "name": "tap_back_pos",
            "getter": "get_tap_back_pos",
            "type": "float"
          }
        ]
      },
      "inherits": "AudioEffect",
      "methods": {},
      "name": "AudioEffectSpectrumAnalyzer",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "FFT_SIZE_256",
            "enum": "FFT_Size"
          },
          {
            "value": "1",
            "name": "FFT_SIZE_512",
            "enum": "FFT_Size"
          },
          {
            "value": "2",
            "name": "FFT_SIZE_1024",
            "enum": "FFT_Size"
          },
          {
            "value": "3",
            "name": "FFT_SIZE_2048",
            "enum": "FFT_Size"
          },
          {
            "value": "4",
            "name": "FFT_SIZE_4096",
            "enum": "FFT_Size"
          },
          {
            "value": "5",
            "name": "FFT_SIZE_MAX",
            "enum": "FFT_Size"
          }
        ]
      },
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "1.0",
            "setter": "set_pan_pullout",
            "name": "pan_pullout",
            "getter": "get_pan_pullout",
            "type": "float"
          },
          {
            "default": "0.0",
            "setter": "set_surround",
            "name": "surround",
            "getter": "get_surround",
            "type": "float"
          },
          {
            "default": "0.0",
            "setter": "set_time_pullout",
            "name": "time_pullout_ms",
            "getter": "get_time_pullout",
            "type": "float"
          }
        ]
      },
      "inherits": "AudioEffect",
      "methods": {},
      "name": "AudioEffectStereoEnhance",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/527",
          "title": "Audio Mic Record Demo"
        }
      },
      "inherits": "Resource",
      "methods": {},
      "name": "AudioEffect",
      "version": "3.3",
      "constants": {},
      "brief_description": "Audio effect for audio.",
      "description": "Base resource for audio bus. Applies an audio effect on the bus that the resource is applied on."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/audio/audio_buses.html",
            "title": "Audio buses"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/525",
            "title": "Audio Device Changer Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/527",
            "title": "Audio Mic Record Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/528",
            "title": "Audio Spectrum Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "1",
            "value": "Number of available audio buses.",
            "setter": "set_bus_count",
            "name": "bus_count",
            "getter": "get_bus_count",
            "type": "int"
          },
          {
            "default": "\"Default\"",
            "value": "Name of the current device for audio output (see [method get_device_list]).",
            "setter": "set_device",
            "name": "device",
            "getter": "get_device",
            "type": "String"
          },
          {
            "default": "1.0",
            "value": "Scales the rate at which audio is played (i.e. setting it to [code]0.5[/code] will make the audio be played twice as fast).",
            "setter": "set_global_rate_scale",
            "name": "global_rate_scale",
            "getter": "get_global_rate_scale",
            "type": "float"
          }
        ]
      },
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "-1",
              "name": "at_position",
              "type": "int",
              "index": "0"
            },
            "name": "add_bus",
            "description": "Adds a bus at [code]at_position[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bus_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "effect",
                "type": "AudioEffect",
                "index": "1"
              },
              {
                "default": "-1",
                "name": "at_position",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "add_bus_effect",
            "description": "Adds an [AudioEffect] effect to the bus [code]bus_idx[/code] at [code]at_position[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "capture_get_device",
            "description": "Name of the current device for audio input (see [method capture_get_device_list])."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "capture_get_device_list",
            "description": "Returns the names of all audio input devices detected on the system."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "capture_set_device",
            "description": "Sets which audio input device is used for audio capture."
          },
          {
            "return": {
              "type": "AudioBusLayout"
            },
            "qualifiers": "const",
            "name": "generate_bus_layout",
            "description": "Generates an [AudioBusLayout] using the available buses and effects."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "bus_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_bus_channels",
            "description": "Returns the amount of channels of the bus at index [code]bus_idx[/code]."
          },
          {
            "return": {
              "type": "AudioEffect"
            },
            "argument": [
              {
                "name": "bus_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "effect_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "get_bus_effect",
            "description": "Returns the [AudioEffect] at position [code]effect_idx[/code] in bus [code]bus_idx[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "bus_idx",
              "type": "int",
              "index": "0"
            },
            "name": "get_bus_effect_count",
            "description": "Returns the number of effects on the bus at [code]bus_idx[/code]."
          },
          {
            "return": {
              "type": "AudioEffectInstance"
            },
            "argument": [
              {
                "name": "bus_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "effect_idx",
                "type": "int",
                "index": "1"
              },
              {
                "default": "0",
                "name": "channel",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "get_bus_effect_instance",
            "description": "Returns the [AudioEffectInstance] assigned to the given bus and effect indices (and optionally channel)."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "bus_name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_bus_index",
            "description": "Returns the index of the bus with the name [code]bus_name[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "bus_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_bus_name",
            "description": "Returns the name of the bus with the index [code]bus_idx[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "bus_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "channel",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_bus_peak_volume_left_db",
            "description": "Returns the peak volume of the left speaker at bus index [code]bus_idx[/code] and channel index [code]channel[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "bus_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "channel",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_bus_peak_volume_right_db",
            "description": "Returns the peak volume of the right speaker at bus index [code]bus_idx[/code] and channel index [code]channel[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "bus_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_bus_send",
            "description": "Returns the name of the bus that the bus at index [code]bus_idx[/code] sends to."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "bus_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_bus_volume_db",
            "description": "Returns the volume of the bus at index [code]bus_idx[/code] in dB."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "get_device_list",
            "description": "Returns the names of all audio devices detected on the system."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_mix_rate",
            "description": "Returns the sample rate at the output of the [AudioServer]."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_output_latency",
            "description": "Returns the audio driver's output latency."
          },
          {
            "return": {
              "type": "int",
              "enum": "AudioServer.SpeakerMode"
            },
            "qualifiers": "const",
            "name": "get_speaker_mode",
            "description": "Returns the speaker configuration."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_time_since_last_mix",
            "description": "Returns the relative time since the last mix occurred."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_time_to_next_mix",
            "description": "Returns the relative time until the next mix occurs."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "bus_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_bus_bypassing_effects",
            "description": "If [code]true[/code], the bus at index [code]bus_idx[/code] is bypassing effects."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "bus_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "effect_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "is_bus_effect_enabled",
            "description": "If [code]true[/code], the effect at index [code]effect_idx[/code] on the bus at index [code]bus_idx[/code] is enabled."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "bus_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_bus_mute",
            "description": "If [code]true[/code], the bus at index [code]bus_idx[/code] is muted."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "bus_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_bus_solo",
            "description": "If [code]true[/code], the bus at index [code]bus_idx[/code] is in solo mode."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "lock",
            "description": "Locks the audio driver's main loop.\n\t\t\t\t[b]Note:[/b] Remember to unlock it afterwards."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "index",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_index",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "move_bus",
            "description": "Moves the bus from index [code]index[/code] to index [code]to_index[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "name": "remove_bus",
            "description": "Removes the bus at index [code]index[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bus_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "effect_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "remove_bus_effect",
            "description": "Removes the effect at index [code]effect_idx[/code] from the bus at index [code]bus_idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bus_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_bus_bypass_effects",
            "description": "If [code]true[/code], the bus at index [code]bus_idx[/code] is bypassing effects."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bus_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "effect_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "set_bus_effect_enabled",
            "description": "If [code]true[/code], the effect at index [code]effect_idx[/code] on the bus at index [code]bus_idx[/code] is enabled."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "bus_layout",
              "type": "AudioBusLayout",
              "index": "0"
            },
            "name": "set_bus_layout",
            "description": "Overwrites the currently used [AudioBusLayout]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bus_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_bus_mute",
            "description": "If [code]true[/code], the bus at index [code]bus_idx[/code] is muted."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bus_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "name",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set_bus_name",
            "description": "Sets the name of the bus at index [code]bus_idx[/code] to [code]name[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bus_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "send",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set_bus_send",
            "description": "Connects the output of the bus at [code]bus_idx[/code] to the bus named [code]send[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bus_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_bus_solo",
            "description": "If [code]true[/code], the bus at index [code]bus_idx[/code] is in solo mode."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bus_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "volume_db",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_bus_volume_db",
            "description": "Sets the volume of the bus at index [code]bus_idx[/code] to [code]volume_db[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bus_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "effect_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "by_effect_idx",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "swap_bus_effects",
            "description": "Swaps the position of two effects in bus [code]bus_idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "unlock",
            "description": "Unlocks the audio driver's main loop. (After locking it, you should always unlock it.)"
          }
        ]
      },
      "name": "AudioServer",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "bus_layout_changed",
          "description": "Emitted when the [AudioBusLayout] changes."
        }
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "SPEAKER_MODE_STEREO",
            "enum": "SpeakerMode"
          },
          {
            "value": "1",
            "name": "SPEAKER_SURROUND_31",
            "enum": "SpeakerMode"
          },
          {
            "value": "2",
            "name": "SPEAKER_SURROUND_51",
            "enum": "SpeakerMode"
          },
          {
            "value": "3",
            "name": "SPEAKER_SURROUND_71",
            "enum": "SpeakerMode"
          }
        ]
      },
      "brief_description": "Server interface for low-level audio access.",
      "description": "[AudioServer] is a low-level server interface for audio access. It is in charge of creating sample data (playable audio) as well as its playback via a voice interface."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://github.com/godotengine/godot-demo-projects/tree/master/audio/generator"
      },
      "inherits": "AudioStreamPlaybackResampled",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "amount",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "can_push_buffer",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_buffer",
            "description": {}
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_frames_available",
            "description": {}
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_skips",
            "description": {}
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "frames",
              "type": "PoolVector2Array",
              "index": "0"
            },
            "name": "push_buffer",
            "description": {}
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "frame",
              "type": "Vector2",
              "index": "0"
            },
            "name": "push_frame",
            "description": {}
          }
        ]
      },
      "name": "AudioStreamGeneratorPlayback",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/526",
          "title": "Audio Generator Demo"
        }
      },
      "members": {
        "member": [
          {
            "default": "0.5",
            "setter": "set_buffer_length",
            "name": "buffer_length",
            "getter": "get_buffer_length",
            "type": "float"
          },
          {
            "default": "44100.0",
            "setter": "set_mix_rate",
            "name": "mix_rate",
            "getter": "get_mix_rate",
            "type": "float"
          }
        ]
      },
      "inherits": "AudioStream",
      "methods": {},
      "name": "AudioStreamGenerator",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "AudioStream",
      "methods": {},
      "name": "AudioStreamMicrophone",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "AudioStreamPlayback",
      "methods": {},
      "name": "AudioStreamPlaybackResampled",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/526",
          "title": "Audio Generator Demo"
        }
      },
      "inherits": "Reference",
      "methods": {},
      "name": "AudioStreamPlayback",
      "version": "3.3",
      "constants": {},
      "brief_description": "Meta class for playing back audio.",
      "description": "Can play, loop, pause a scroll through audio. See [AudioStream] and [AudioStreamOGGVorbis] for usage."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/audio/audio_streams.html"
      },
      "members": {
        "member": [
          {
            "default": "1",
            "value": "Areas in which this sound plays.",
            "setter": "set_area_mask",
            "name": "area_mask",
            "getter": "get_area_mask",
            "type": "int"
          },
          {
            "default": "1.0",
            "value": "Dampens audio over distance with this as an exponent.",
            "setter": "set_attenuation",
            "name": "attenuation",
            "getter": "get_attenuation",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], audio plays when added to scene tree.",
            "setter": "set_autoplay",
            "name": "autoplay",
            "getter": "is_autoplay_enabled",
            "type": "bool"
          },
          {
            "default": "\"Master\"",
            "value": "Bus on which this audio is playing.",
            "setter": "set_bus",
            "name": "bus",
            "getter": "get_bus",
            "type": "String"
          },
          {
            "default": "2000.0",
            "value": "Maximum distance from which audio is still hearable.",
            "setter": "set_max_distance",
            "name": "max_distance",
            "getter": "get_max_distance",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The pitch and the tempo of the audio, as a multiplier of the audio sample's sample rate.",
            "setter": "set_pitch_scale",
            "name": "pitch_scale",
            "getter": "get_pitch_scale",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], audio is playing.",
            "setter": "_set_playing",
            "name": "playing",
            "getter": "is_playing",
            "type": "bool"
          },
          {
            "value": "The [AudioStream] object to be played.",
            "setter": "set_stream",
            "name": "stream",
            "getter": "get_stream",
            "type": "AudioStream"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the playback is paused. You can resume it by setting [code]stream_paused[/code] to [code]false[/code].",
            "setter": "set_stream_paused",
            "name": "stream_paused",
            "getter": "get_stream_paused",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "Base volume without dampening.",
            "setter": "set_volume_db",
            "name": "volume_db",
            "getter": "get_volume_db",
            "type": "float"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {
        "method": [
          {
            "return": {
              "type": "float"
            },
            "name": "get_playback_position",
            "description": "Returns the position in the [AudioStream]."
          },
          {
            "return": {
              "type": "AudioStreamPlayback"
            },
            "name": "get_stream_playback",
            "description": "Returns the [AudioStreamPlayback] object associated with this [AudioStreamPlayer2D]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "0.0",
              "name": "from_position",
              "type": "float",
              "index": "0"
            },
            "name": "play",
            "description": "Plays the audio from the given position [code]from_position[/code], in seconds."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "to_position",
              "type": "float",
              "index": "0"
            },
            "name": "seek",
            "description": "Sets the position from which audio will be played, in seconds."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "stop",
            "description": "Stops the audio."
          }
        ]
      },
      "name": "AudioStreamPlayer2D",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "finished",
          "description": "Emitted when the audio stops playing."
        }
      },
      "constants": {},
      "brief_description": "Plays positional sound in 2D space.",
      "description": "Plays audio that dampens with distance from screen center.\n\t\tSee also [AudioStreamPlayer] to play a sound non-positionally.\n\t\t[b]Note:[/b] Hiding an [AudioStreamPlayer2D] node does not disable its audio output. To temporarily disable an [AudioStreamPlayer2D]'s audio output, set [member volume_db] to a very low value like [code]-100[/code] (which isn't audible to human hearing)."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/audio/audio_streams.html"
      },
      "members": {
        "member": [
          {
            "default": "1",
            "value": "Areas in which this sound plays.",
            "setter": "set_area_mask",
            "name": "area_mask",
            "getter": "get_area_mask",
            "type": "int"
          },
          {
            "default": "5000.0",
            "value": "Dampens audio using a low-pass filter above this frequency, in Hz. To disable the dampening effect entirely, set this to [code]20500[/code] as this frequency is above the human hearing limit.",
            "setter": "set_attenuation_filter_cutoff_hz",
            "name": "attenuation_filter_cutoff_hz",
            "getter": "get_attenuation_filter_cutoff_hz",
            "type": "float"
          },
          {
            "default": "-24.0",
            "value": "Amount how much the filter affects the loudness, in decibels.",
            "setter": "set_attenuation_filter_db",
            "name": "attenuation_filter_db",
            "getter": "get_attenuation_filter_db",
            "type": "float"
          },
          {
            "default": "0",
            "value": "Decides if audio should get quieter with distance linearly, quadratically, logarithmically, or not be affected by distance, effectively disabling attenuation.",
            "setter": "set_attenuation_model",
            "name": "attenuation_model",
            "getter": "get_attenuation_model",
            "type": "int",
            "enum": "AudioStreamPlayer3D.AttenuationModel"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], audio plays when the AudioStreamPlayer3D node is added to scene tree.",
            "setter": "set_autoplay",
            "name": "autoplay",
            "getter": "is_autoplay_enabled",
            "type": "bool"
          },
          {
            "default": "\"Master\"",
            "value": "The bus on which this audio is playing.",
            "setter": "set_bus",
            "name": "bus",
            "getter": "get_bus",
            "type": "String"
          },
          {
            "default": "0",
            "value": "Decides in which step the Doppler effect should be calculated.",
            "setter": "set_doppler_tracking",
            "name": "doppler_tracking",
            "getter": "get_doppler_tracking",
            "type": "int",
            "enum": "AudioStreamPlayer3D.DopplerTracking"
          },
          {
            "default": "45.0",
            "value": "The angle in which the audio reaches cameras undampened.",
            "setter": "set_emission_angle",
            "name": "emission_angle_degrees",
            "getter": "get_emission_angle",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the audio should be dampened according to the direction of the sound.",
            "setter": "set_emission_angle_enabled",
            "name": "emission_angle_enabled",
            "getter": "is_emission_angle_enabled",
            "type": "bool"
          },
          {
            "default": "-12.0",
            "value": "Dampens audio if camera is outside of [member emission_angle_degrees] and [member emission_angle_enabled] is set by this factor, in decibels.",
            "setter": "set_emission_angle_filter_attenuation_db",
            "name": "emission_angle_filter_attenuation_db",
            "getter": "get_emission_angle_filter_attenuation_db",
            "type": "float"
          },
          {
            "default": "3.0",
            "value": "Sets the absolute maximum of the soundlevel, in decibels.",
            "setter": "set_max_db",
            "name": "max_db",
            "getter": "get_max_db",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Sets the distance from which the [member out_of_range_mode] takes effect. Has no effect if set to 0.",
            "setter": "set_max_distance",
            "name": "max_distance",
            "getter": "get_max_distance",
            "type": "float"
          },
          {
            "default": "0",
            "value": "Decides if audio should pause when source is outside of [member max_distance] range.",
            "setter": "set_out_of_range_mode",
            "name": "out_of_range_mode",
            "getter": "get_out_of_range_mode",
            "type": "int",
            "enum": "AudioStreamPlayer3D.OutOfRangeMode"
          },
          {
            "default": "1.0",
            "value": "The pitch and the tempo of the audio, as a multiplier of the audio sample's sample rate.",
            "setter": "set_pitch_scale",
            "name": "pitch_scale",
            "getter": "get_pitch_scale",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], audio is playing.",
            "setter": "_set_playing",
            "name": "playing",
            "getter": "is_playing",
            "type": "bool"
          },
          {
            "value": "The [AudioStream] resource to be played.",
            "setter": "set_stream",
            "name": "stream",
            "getter": "get_stream",
            "type": "AudioStream"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the playback is paused. You can resume it by setting [member stream_paused] to [code]false[/code].",
            "setter": "set_stream_paused",
            "name": "stream_paused",
            "getter": "get_stream_paused",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "The base sound level unaffected by dampening, in decibels.",
            "setter": "set_unit_db",
            "name": "unit_db",
            "getter": "get_unit_db",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The factor for the attenuation effect. Higher values make the sound audible over a larger distance.",
            "setter": "set_unit_size",
            "name": "unit_size",
            "getter": "get_unit_size",
            "type": "float"
          }
        ]
      },
      "inherits": "Spatial",
      "methods": {
        "method": [
          {
            "return": {
              "type": "float"
            },
            "name": "get_playback_position",
            "description": "Returns the position in the [AudioStream]."
          },
          {
            "return": {
              "type": "AudioStreamPlayback"
            },
            "name": "get_stream_playback",
            "description": "Returns the [AudioStreamPlayback] object associated with this [AudioStreamPlayer3D]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "0.0",
              "name": "from_position",
              "type": "float",
              "index": "0"
            },
            "name": "play",
            "description": "Plays the audio from the given position [code]from_position[/code], in seconds."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "to_position",
              "type": "float",
              "index": "0"
            },
            "name": "seek",
            "description": "Sets the position from which audio will be played, in seconds."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "stop",
            "description": "Stops the audio."
          }
        ]
      },
      "name": "AudioStreamPlayer3D",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "finished",
          "description": "Emitted when the audio stops playing."
        }
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "ATTENUATION_INVERSE_DISTANCE",
            "enum": "AttenuationModel"
          },
          {
            "value": "1",
            "name": "ATTENUATION_INVERSE_SQUARE_DISTANCE",
            "enum": "AttenuationModel"
          },
          {
            "value": "2",
            "name": "ATTENUATION_LOGARITHMIC",
            "enum": "AttenuationModel"
          },
          {
            "value": "3",
            "name": "ATTENUATION_DISABLED",
            "enum": "AttenuationModel"
          },
          {
            "value": "0",
            "name": "OUT_OF_RANGE_MIX",
            "enum": "OutOfRangeMode"
          },
          {
            "value": "1",
            "name": "OUT_OF_RANGE_PAUSE",
            "enum": "OutOfRangeMode"
          },
          {
            "value": "0",
            "name": "DOPPLER_TRACKING_DISABLED",
            "enum": "DopplerTracking"
          },
          {
            "value": "1",
            "name": "DOPPLER_TRACKING_IDLE_STEP",
            "enum": "DopplerTracking"
          },
          {
            "value": "2",
            "name": "DOPPLER_TRACKING_PHYSICS_STEP",
            "enum": "DopplerTracking"
          }
        ]
      },
      "brief_description": "Plays positional sound in 3D space.",
      "description": "Plays a sound effect with directed sound effects, dampens with distance if needed, generates effect of hearable position in space. For greater realism, a low-pass filter is automatically applied to distant sounds. This can be disabled by setting [member attenuation_filter_cutoff_hz] to [code]20500[/code].\n\t\tBy default, audio is heard from the camera position. This can be changed by adding a [Listener] node to the scene and enabling it by calling [method Listener.make_current] on it.\n\t\tSee also [AudioStreamPlayer] to play a sound non-positionally.\n\t\t[b]Note:[/b] Hiding an [AudioStreamPlayer3D] node does not disable its audio output. To temporarily disable an [AudioStreamPlayer3D]'s audio output, set [member unit_db] to a very low value like [code]-100[/code] (which isn't audible to human hearing)."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/audio/audio_streams.html",
            "title": "Audio streams"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/515",
            "title": "2D Dodge The Creeps Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/525",
            "title": "Audio Device Changer Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/526",
            "title": "Audio Generator Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/527",
            "title": "Audio Mic Record Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/528",
            "title": "Audio Spectrum Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], audio plays when added to scene tree.",
            "setter": "set_autoplay",
            "name": "autoplay",
            "getter": "is_autoplay_enabled",
            "type": "bool"
          },
          {
            "default": "\"Master\"",
            "value": "Bus on which this audio is playing.",
            "setter": "set_bus",
            "name": "bus",
            "getter": "get_bus",
            "type": "String"
          },
          {
            "default": "0",
            "value": "If the audio configuration has more than two speakers, this sets the target channels. See [enum MixTarget] constants.",
            "setter": "set_mix_target",
            "name": "mix_target",
            "getter": "get_mix_target",
            "type": "int",
            "enum": "AudioStreamPlayer.MixTarget"
          },
          {
            "default": "1.0",
            "value": "The pitch and the tempo of the audio, as a multiplier of the audio sample's sample rate.",
            "setter": "set_pitch_scale",
            "name": "pitch_scale",
            "getter": "get_pitch_scale",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], audio is playing.",
            "setter": "_set_playing",
            "name": "playing",
            "getter": "is_playing",
            "type": "bool"
          },
          {
            "value": "The [AudioStream] object to be played.",
            "setter": "set_stream",
            "name": "stream",
            "getter": "get_stream",
            "type": "AudioStream"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the playback is paused. You can resume it by setting [code]stream_paused[/code] to [code]false[/code].",
            "setter": "set_stream_paused",
            "name": "stream_paused",
            "getter": "get_stream_paused",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "Volume of sound, in dB.",
            "setter": "set_volume_db",
            "name": "volume_db",
            "getter": "get_volume_db",
            "type": "float"
          }
        ]
      },
      "inherits": "Node",
      "methods": {
        "method": [
          {
            "return": {
              "type": "float"
            },
            "name": "get_playback_position",
            "description": "Returns the position in the [AudioStream] in seconds."
          },
          {
            "return": {
              "type": "AudioStreamPlayback"
            },
            "name": "get_stream_playback",
            "description": "Returns the [AudioStreamPlayback] object associated with this [AudioStreamPlayer]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "0.0",
              "name": "from_position",
              "type": "float",
              "index": "0"
            },
            "name": "play",
            "description": "Plays the audio from the given [code]from_position[/code], in seconds."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "to_position",
              "type": "float",
              "index": "0"
            },
            "name": "seek",
            "description": "Sets the position from which audio will be played, in seconds."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "stop",
            "description": "Stops the audio."
          }
        ]
      },
      "name": "AudioStreamPlayer",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "finished",
          "description": "Emitted when the audio stops playing."
        }
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "MIX_TARGET_STEREO",
            "enum": "MixTarget"
          },
          {
            "value": "1",
            "name": "MIX_TARGET_SURROUND",
            "enum": "MixTarget"
          },
          {
            "value": "2",
            "name": "MIX_TARGET_CENTER",
            "enum": "MixTarget"
          }
        ]
      },
      "brief_description": "Plays back audio non-positionally.",
      "description": "Plays an audio stream non-positionally.\n\t\tTo play audio positionally, use [AudioStreamPlayer2D] or [AudioStreamPlayer3D] instead of [AudioStreamPlayer]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "value": "The current [AudioStream].",
            "setter": "set_audio_stream",
            "name": "audio_stream",
            "getter": "get_audio_stream",
            "type": "AudioStream"
          },
          {
            "default": "1.1",
            "value": "The intensity of random pitch variation.",
            "setter": "set_random_pitch",
            "name": "random_pitch",
            "getter": "get_random_pitch",
            "type": "float"
          }
        ]
      },
      "inherits": "AudioStream",
      "methods": {},
      "name": "AudioStreamRandomPitch",
      "version": "3.3",
      "constants": {},
      "brief_description": "Plays audio with random pitch shifting.",
      "description": "Randomly varies pitch on each start."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "PoolByteArray(  )",
            "value": "Contains the audio data in bytes.\n\t\t\t[b]Note:[/b] This property expects signed PCM8 data. To convert unsigned PCM8 to signed PCM8, subtract 128 from each byte.",
            "setter": "set_data",
            "name": "data",
            "getter": "get_data",
            "type": "PoolByteArray"
          },
          {
            "default": "0",
            "value": "Audio format. See [enum Format] constants for values.",
            "setter": "set_format",
            "name": "format",
            "getter": "get_format",
            "type": "int",
            "enum": "AudioStreamSample.Format"
          },
          {
            "default": "0",
            "value": "The loop start point (in number of samples, relative to the beginning of the sample). This information will be imported automatically from the WAV file if present.",
            "setter": "set_loop_begin",
            "name": "loop_begin",
            "getter": "get_loop_begin",
            "type": "int"
          },
          {
            "default": "0",
            "value": "The loop end point (in number of samples, relative to the beginning of the sample). This information will be imported automatically from the WAV file if present.",
            "setter": "set_loop_end",
            "name": "loop_end",
            "getter": "get_loop_end",
            "type": "int"
          },
          {
            "default": "0",
            "value": "The loop mode. This information will be imported automatically from the WAV file if present. See [enum LoopMode] constants for values.",
            "setter": "set_loop_mode",
            "name": "loop_mode",
            "getter": "get_loop_mode",
            "type": "int",
            "enum": "AudioStreamSample.LoopMode"
          },
          {
            "default": "44100",
            "value": "The sample rate for mixing this audio.",
            "setter": "set_mix_rate",
            "name": "mix_rate",
            "getter": "get_mix_rate",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], audio is stereo.",
            "setter": "set_stereo",
            "name": "stereo",
            "getter": "is_stereo",
            "type": "bool"
          }
        ]
      },
      "inherits": "AudioStream",
      "methods": {
        "method": {
          "return": {
            "type": "int",
            "enum": "Error"
          },
          "argument": {
            "name": "path",
            "type": "String",
            "index": "0"
          },
          "name": "save_to_wav",
          "description": "Saves the AudioStreamSample as a WAV file to [code]path[/code]. Samples with IMA ADPCM format can't be saved.\n\t\t\t\t[b]Note:[/b] A [code].wav[/code] extension is automatically appended to [code]path[/code] if it is missing."
        }
      },
      "name": "AudioStreamSample",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "FORMAT_8_BITS",
            "enum": "Format"
          },
          {
            "value": "1",
            "name": "FORMAT_16_BITS",
            "enum": "Format"
          },
          {
            "value": "2",
            "name": "FORMAT_IMA_ADPCM",
            "enum": "Format"
          },
          {
            "value": "0",
            "name": "LOOP_DISABLED",
            "enum": "LoopMode"
          },
          {
            "value": "1",
            "name": "LOOP_FORWARD",
            "enum": "LoopMode"
          },
          {
            "value": "2",
            "name": "LOOP_PING_PONG",
            "enum": "LoopMode"
          },
          {
            "value": "3",
            "name": "LOOP_BACKWARD",
            "enum": "LoopMode"
          }
        ]
      },
      "brief_description": "Stores audio data loaded from WAV files.",
      "description": "AudioStreamSample stores sound samples loaded from WAV files. To play the stored sound, use an [AudioStreamPlayer] (for non-positional audio) or [AudioStreamPlayer2D]/[AudioStreamPlayer3D] (for positional audio). The sound can be looped.\n\t\tThis class can also be used to store dynamically-generated PCM audio data."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/audio/audio_streams.html",
            "title": "Audio streams"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/526",
            "title": "Audio Generator Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/527",
            "title": "Audio Mic Record Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/528",
            "title": "Audio Spectrum Demo"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {
        "method": {
          "return": {
            "type": "float"
          },
          "qualifiers": "const",
          "name": "get_length",
          "description": "Returns the length of the audio stream in seconds."
        }
      },
      "name": "AudioStream",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base class for audio streams.",
      "description": "Base class for audio streams. Audio streams are used for sound effects and music playback, and support WAV (via [AudioStreamSample]) and OGG (via [AudioStreamOGGVorbis]) file formats."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "1",
            "value": "Buffer mode. See [enum CopyMode] constants.",
            "setter": "set_copy_mode",
            "name": "copy_mode",
            "getter": "get_copy_mode",
            "type": "int",
            "enum": "BackBufferCopy.CopyMode"
          },
          {
            "default": "Rect2( -100, -100, 200, 200 )",
            "value": "The area covered by the BackBufferCopy. Only used if [member copy_mode] is [constant COPY_MODE_RECT].",
            "setter": "set_rect",
            "name": "rect",
            "getter": "get_rect",
            "type": "Rect2"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {},
      "name": "BackBufferCopy",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "COPY_MODE_DISABLED",
            "enum": "CopyMode"
          },
          {
            "value": "1",
            "name": "COPY_MODE_RECT",
            "enum": "CopyMode"
          },
          {
            "value": "2",
            "name": "COPY_MODE_VIEWPORT",
            "enum": "CopyMode"
          }
        ]
      },
      "brief_description": "Copies a region of the screen (or the whole screen) to a buffer so it can be accessed in your shader scripts through the [code]texture(SCREEN_TEXTURE, ...)[/code] function.",
      "description": "Node for back-buffering the currently-displayed screen. The region defined in the BackBufferCopy node is buffered with the content of the screen it covers, or the entire screen according to the copy mode set. Use the [code]texture(SCREEN_TEXTURE, ...)[/code] function in your shader scripts to access the buffer.\n\t\t[b]Note:[/b] Since this node inherits from [Node2D] (and not [Control]), anchors and margins won't apply to child [Control]-derived nodes. This can be problematic when resizing the window. To avoid this, add [Control]-derived nodes as [i]siblings[/i] to the BackBufferCopy node instead of adding them as children."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "AABB( 0, 0, 0, 0, 0, 0 )",
            "setter": "set_bounds",
            "name": "bounds",
            "getter": "get_bounds",
            "type": "AABB"
          },
          {
            "default": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )",
            "setter": "set_cell_space_transform",
            "name": "cell_space_transform",
            "getter": "get_cell_space_transform",
            "type": "Transform"
          },
          {
            "default": "1",
            "setter": "set_cell_subdiv",
            "name": "cell_subdiv",
            "getter": "get_cell_subdiv",
            "type": "int"
          },
          {
            "default": "1.0",
            "value": "Global energy multiplier for baked and dynamic capture objects.",
            "setter": "set_energy",
            "name": "energy",
            "getter": "get_energy",
            "type": "float"
          },
          {
            "default": "false",
            "value": "Controls whether dynamic capture objects receive environment lighting or not.",
            "setter": "set_interior",
            "name": "interior",
            "getter": "is_interior",
            "type": "bool"
          },
          {
            "default": "PoolByteArray(  )",
            "setter": "set_octree",
            "name": "octree",
            "getter": "get_octree",
            "type": "PoolByteArray"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "path",
                "type": "NodePath",
                "index": "0"
              },
              {
                "name": "lightmap",
                "type": "Resource",
                "index": "1"
              },
              {
                "name": "lightmap_slice",
                "type": "int",
                "index": "2"
              },
              {
                "name": "lightmap_uv_rect",
                "type": "Rect2",
                "index": "3"
              },
              {
                "name": "instance",
                "type": "int",
                "index": "4"
              }
            ],
            "name": "add_user",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_data",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_users",
            "description": {}
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_user_count",
            "description": {}
          },
          {
            "return": {
              "type": "Resource"
            },
            "argument": {
              "name": "user_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_user_lightmap",
            "description": {}
          },
          {
            "return": {
              "type": "NodePath"
            },
            "argument": {
              "name": "user_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_user_path",
            "description": {}
          }
        ]
      },
      "name": "BakedLightmapData",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/3d/baked_lightmaps.html"
      },
      "members": {
        "member": [
          {
            "default": "true",
            "value": "When enabled, the lightmapper will merge the textures for all meshes into a single large layered texture. Not supported in GLES2.",
            "setter": "set_generate_atlas",
            "name": "atlas_generate",
            "getter": "is_generate_atlas_enabled",
            "type": "bool"
          },
          {
            "default": "4096",
            "value": "Maximum size of each lightmap layer, only used when [member atlas_generate] is enabled.",
            "setter": "set_max_atlas_size",
            "name": "atlas_max_size",
            "getter": "get_max_atlas_size",
            "type": "int"
          },
          {
            "default": "0.005",
            "value": "Raycasting bias used during baking to avoid floating point precission issues.",
            "setter": "set_bias",
            "name": "bias",
            "getter": "get_bias",
            "type": "float"
          },
          {
            "default": "3",
            "value": "Number of light bounces that are taken into account during baking.",
            "setter": "set_bounces",
            "name": "bounces",
            "getter": "get_bounces",
            "type": "int"
          },
          {
            "default": "0.5",
            "value": "Grid size used for real-time capture information on dynamic objects.",
            "setter": "set_capture_cell_size",
            "name": "capture_cell_size",
            "getter": "get_capture_cell_size",
            "type": "float"
          },
          {
            "default": "true",
            "value": "When enabled, an octree containing the scene's lighting information will be computed. This octree will then be used to light dynamic objects in the scene.",
            "setter": "set_capture_enabled",
            "name": "capture_enabled",
            "getter": "get_capture_enabled",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "Bias value to reduce the amount of light proagation in the captured octree.",
            "setter": "set_capture_propagation",
            "name": "capture_propagation",
            "getter": "get_capture_propagation",
            "type": "float"
          },
          {
            "default": "1",
            "value": "Bake quality of the capture data.",
            "setter": "set_capture_quality",
            "name": "capture_quality",
            "getter": "get_capture_quality",
            "type": "int",
            "enum": "BakedLightmap.BakeQuality"
          },
          {
            "default": "16.0",
            "value": "If a baked mesh doesn't have a UV2 size hint, this value will be used to roughly compute a suitable lightmap size.",
            "setter": "set_default_texels_per_unit",
            "name": "default_texels_per_unit",
            "getter": "get_default_texels_per_unit",
            "type": "float"
          },
          {
            "value": "The environment color when [member environment_mode] is set to [constant ENVIRONMENT_MODE_CUSTOM_COLOR].",
            "setter": "set_environment_custom_color",
            "name": "environment_custom_color",
            "getter": "get_environment_custom_color",
            "type": "Color"
          },
          {
            "value": "The energy scaling factor when when [member environment_mode] is set to [constant ENVIRONMENT_MODE_CUSTOM_COLOR] or [constant ENVIRONMENT_MODE_CUSTOM_SKY].",
            "setter": "set_environment_custom_energy",
            "name": "environment_custom_energy",
            "getter": "get_environment_custom_energy",
            "type": "float"
          },
          {
            "value": "The [Sky] resource to use when [member environment_mode] is set o [constant ENVIRONMENT_MODE_CUSTOM_SKY].",
            "setter": "set_environment_custom_sky",
            "name": "environment_custom_sky",
            "getter": "get_environment_custom_sky",
            "type": "Sky"
          },
          {
            "value": "The rotation of the baked custom sky.",
            "setter": "set_environment_custom_sky_rotation_degrees",
            "name": "environment_custom_sky_rotation_degrees",
            "getter": "get_environment_custom_sky_rotation_degrees",
            "type": "Vector3"
          },
          {
            "default": "Color( 0, 0, 0, 1 )",
            "value": "Minimum ambient light for all the lightmap texels. This doesn't take into account any occlusion from the scene's geometry, it simply ensures a minimum amount of light on all the lightmap texels. Can be used for artistic control on shadow color.",
            "setter": "set_environment_min_light",
            "name": "environment_min_light",
            "getter": "get_environment_min_light",
            "type": "Color"
          },
          {
            "default": "0",
            "value": "Decides which environment to use during baking.",
            "setter": "set_environment_mode",
            "name": "environment_mode",
            "getter": "get_environment_mode",
            "type": "int",
            "enum": "BakedLightmap.EnvironmentMode"
          },
          {
            "default": "Vector3( 10, 10, 10 )",
            "value": "Size of the baked lightmap. Only meshes inside this region will be included in the baked lightmap, also used as the bounds of the captured region for dynamic lighting.",
            "setter": "set_extents",
            "name": "extents",
            "getter": "get_extents",
            "type": "Vector3"
          },
          {
            "value": "Deprecated, in previous versions it determined the location where lightmaps were be saved.",
            "setter": "set_image_path",
            "name": "image_path",
            "getter": "get_image_path",
            "type": "String"
          },
          {
            "value": "The calculated light data.",
            "setter": "set_light_data",
            "name": "light_data",
            "getter": "get_light_data",
            "type": "BakedLightmapData"
          },
          {
            "default": "1",
            "value": "Determines the amount of samples per texel used in indrect light baking. The amount of samples for each quality level can be configured in the project settings.",
            "setter": "set_bake_quality",
            "name": "quality",
            "getter": "get_bake_quality",
            "type": "int",
            "enum": "BakedLightmap.BakeQuality"
          },
          {
            "default": "true",
            "value": "Store full color values in the lightmap textures. When disabled, lightmap textures will store a single brightness channel. Can be disabled to reduce disk usage if the scene contains only white lights or you don't mind losing color information in indirect lighting.",
            "setter": "set_use_color",
            "name": "use_color",
            "getter": "is_using_color",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "When enabled, a lightmap denoiser will be used to reduce the noise inherent to Monte Carlo based global illumination.",
            "setter": "set_use_denoiser",
            "name": "use_denoiser",
            "getter": "is_using_denoiser",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], stores the lightmap textures in a high dynamic range format (EXR). If [code]false[/code], stores the lightmap texture in a low dynamic range PNG image. This can be set to [code]false[/code] to reduce disk usage, but light values over 1.0 will be clamped and you may see banding caused by the reduced precision.\n\t\t\t[b]Note:[/b] Setting [member use_hdr] to [code]true[/code] will decrease lightmap banding even when using the GLES2 backend or if [member ProjectSettings.rendering/quality/depth/hdr] is [code]false[/code].",
            "setter": "set_use_hdr",
            "name": "use_hdr",
            "getter": "is_using_hdr",
            "type": "bool"
          }
        ]
      },
      "inherits": "VisualInstance",
      "methods": {
        "method": {
          "return": {
            "type": "int",
            "enum": "BakedLightmap.BakeError"
          },
          "argument": [
            {
              "default": "null",
              "name": "from_node",
              "type": "Node",
              "index": "0"
            },
            {
              "default": "\"\"",
              "name": "data_save_path",
              "type": "String",
              "index": "1"
            }
          ],
          "name": "bake",
          "description": "Bakes the lightmap, scanning from the given [code]from_node[/code] root and saves the resulting [BakedLightmapData] in [code]data_save_path[/code]. If no save path is provided it will try to match the path from the current [member light_data]."
        }
      },
      "name": "BakedLightmap",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "BAKE_QUALITY_LOW",
            "enum": "BakeQuality"
          },
          {
            "value": "1",
            "name": "BAKE_QUALITY_MEDIUM",
            "enum": "BakeQuality"
          },
          {
            "value": "2",
            "name": "BAKE_QUALITY_HIGH",
            "enum": "BakeQuality"
          },
          {
            "value": "3",
            "name": "BAKE_QUALITY_ULTRA",
            "enum": "BakeQuality"
          },
          {
            "value": "0",
            "name": "BAKE_ERROR_OK",
            "enum": "BakeError"
          },
          {
            "value": "1",
            "name": "BAKE_ERROR_NO_SAVE_PATH",
            "enum": "BakeError"
          },
          {
            "value": "2",
            "name": "BAKE_ERROR_NO_MESHES",
            "enum": "BakeError"
          },
          {
            "value": "3",
            "name": "BAKE_ERROR_CANT_CREATE_IMAGE",
            "enum": "BakeError"
          },
          {
            "value": "4",
            "name": "BAKE_ERROR_LIGHTMAP_SIZE",
            "enum": "BakeError"
          },
          {
            "value": "5",
            "name": "BAKE_ERROR_INVALID_MESH",
            "enum": "BakeError"
          },
          {
            "value": "6",
            "name": "BAKE_ERROR_USER_ABORTED",
            "enum": "BakeError"
          },
          {
            "value": "7",
            "name": "BAKE_ERROR_NO_LIGHTMAPPER",
            "enum": "BakeError"
          },
          {
            "value": "0",
            "name": "ENVIRONMENT_MODE_DISABLED",
            "enum": "EnvironmentMode"
          },
          {
            "value": "1",
            "name": "ENVIRONMENT_MODE_SCENE",
            "enum": "EnvironmentMode"
          },
          {
            "value": "2",
            "name": "ENVIRONMENT_MODE_CUSTOM_SKY",
            "enum": "EnvironmentMode"
          },
          {
            "value": "3",
            "name": "ENVIRONMENT_MODE_CUSTOM_COLOR",
            "enum": "EnvironmentMode"
          }
        ]
      },
      "brief_description": "Prerendered indirect light map for a scene.",
      "description": "Baked lightmaps are an alternative workflow for adding indirect (or baked) lighting to a scene. Unlike the [GIProbe] approach, baked lightmaps work fine on low-end PCs and mobile devices as they consume almost no resources in run-time."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "1",
            "value": "Determines when the button is considered clicked, one of the [enum ActionMode] constants.",
            "setter": "set_action_mode",
            "name": "action_mode",
            "getter": "get_action_mode",
            "type": "int",
            "enum": "BaseButton.ActionMode"
          },
          {
            "default": "1",
            "value": "Binary mask to choose which mouse buttons this button will respond to.\n\t\t\tTo allow both left-click and right-click, use [code]BUTTON_MASK_LEFT | BUTTON_MASK_RIGHT[/code].",
            "setter": "set_button_mask",
            "name": "button_mask",
            "getter": "get_button_mask",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the button is in disabled state and can't be clicked or toggled.",
            "setter": "set_disabled",
            "name": "disabled",
            "getter": "is_disabled",
            "type": "bool"
          },
          {
            "default": "2",
            "value": "[i]Deprecated.[/i] This property has been deprecated due to redundancy and no longer has any effect when set. Please use [member Control.focus_mode] instead.",
            "setter": "set_enabled_focus_mode",
            "name": "enabled_focus_mode",
            "getter": "get_enabled_focus_mode",
            "type": "int",
            "enum": "Control.FocusMode"
          },
          {
            "default": "2",
            "setter": "set_focus_mode",
            "override": "true",
            "name": "focus_mode",
            "getter": "get_focus_mode",
            "type": "int",
            "enum": "Control.FocusMode"
          },
          {
            "value": "[ButtonGroup] associated to the button.",
            "setter": "set_button_group",
            "name": "group",
            "getter": "get_button_group",
            "type": "ButtonGroup"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the button stays pressed when moving the cursor outside the button while pressing it.\n\t\t\t[b]Note:[/b] This property only affects the button's visual appearance. Signals will be emitted at the same moment regardless of this property's value.",
            "setter": "set_keep_pressed_outside",
            "name": "keep_pressed_outside",
            "getter": "is_keep_pressed_outside",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the button's state is pressed. Means the button is pressed down or toggled (if [member toggle_mode] is active).",
            "setter": "set_pressed",
            "name": "pressed",
            "getter": "is_pressed",
            "type": "bool"
          },
          {
            "value": "[ShortCut] associated to the button.",
            "setter": "set_shortcut",
            "name": "shortcut",
            "getter": "get_shortcut",
            "type": "ShortCut"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the button will add information about its shortcut in the tooltip.",
            "setter": "set_shortcut_in_tooltip",
            "name": "shortcut_in_tooltip",
            "getter": "is_shortcut_in_tooltip_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the button is in toggle mode. Makes the button flip state between pressed and unpressed each time its area is clicked.",
            "setter": "set_toggle_mode",
            "name": "toggle_mode",
            "getter": "is_toggle_mode",
            "type": "bool"
          }
        ]
      },
      "inherits": "Control",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "qualifiers": "virtual",
            "name": "_pressed",
            "description": "Called when the button is pressed. If you need to know the button's pressed state (and [member toggle_mode] is active), use [method _toggled] instead."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "button_pressed",
              "type": "bool",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_toggled",
            "description": "Called when the button is toggled (only if [member toggle_mode] is active)."
          },
          {
            "return": {
              "type": "int",
              "enum": "BaseButton.DrawMode"
            },
            "qualifiers": "const",
            "name": "get_draw_mode",
            "description": "Returns the visual state used to draw the button. This is useful mainly when implementing your own draw code by either overriding _draw() or connecting to \"draw\" signal. The visual state of the button is defined by the [enum DrawMode] enum."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_hovered",
            "description": "Returns [code]true[/code] if the mouse has entered the button and has not left it yet."
          }
        ]
      },
      "name": "BaseButton",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "button_down",
            "description": "Emitted when the button starts being held down."
          },
          {
            "name": "button_up",
            "description": "Emitted when the button stops being held down."
          },
          {
            "name": "pressed",
            "description": "Emitted when the button is toggled or pressed. This is on [signal button_down] if [member action_mode] is [constant ACTION_MODE_BUTTON_PRESS] and on [signal button_up] otherwise.\n\t\t\t\tIf you need to know the button's pressed state (and [member toggle_mode] is active), use [signal toggled] instead."
          },
          {
            "argument": {
              "name": "button_pressed",
              "type": "bool",
              "index": "0"
            },
            "name": "toggled",
            "description": "Emitted when the button was just toggled between pressed and normal states (only if [member toggle_mode] is active). The new state is contained in the [code]button_pressed[/code] argument."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "DRAW_NORMAL",
            "enum": "DrawMode"
          },
          {
            "value": "1",
            "name": "DRAW_PRESSED",
            "enum": "DrawMode"
          },
          {
            "value": "2",
            "name": "DRAW_HOVER",
            "enum": "DrawMode"
          },
          {
            "value": "3",
            "name": "DRAW_DISABLED",
            "enum": "DrawMode"
          },
          {
            "value": "4",
            "name": "DRAW_HOVER_PRESSED",
            "enum": "DrawMode"
          },
          {
            "value": "0",
            "name": "ACTION_MODE_BUTTON_PRESS",
            "enum": "ActionMode"
          },
          {
            "value": "1",
            "name": "ACTION_MODE_BUTTON_RELEASE",
            "enum": "ActionMode"
          }
        ]
      },
      "brief_description": "Base class for different kinds of buttons.",
      "description": "BaseButton is the abstract base class for buttons, so it shouldn't be used directly (it doesn't display anything). Other types of buttons inherit from it."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/math/index.html",
            "title": "Math tutorial index"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/math/matrices_and_transforms.html",
            "title": "Matrices and transforms"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/3d/using_transforms.html",
            "title": "Using 3D transforms"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/584",
            "title": "Matrix Transform Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/125",
            "title": "3D Platformer Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/676",
            "title": "3D Voxel Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/583",
            "title": "2.5D Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "Vector3( 1, 0, 0 )",
            "value": "The basis matrix's X vector (column 0). Equivalent to array index [code]0[/code].",
            "setter": "",
            "name": "x",
            "getter": "",
            "type": "Vector3"
          },
          {
            "default": "Vector3( 0, 1, 0 )",
            "value": "The basis matrix's Y vector (column 1). Equivalent to array index [code]1[/code].",
            "setter": "",
            "name": "y",
            "getter": "",
            "type": "Vector3"
          },
          {
            "default": "Vector3( 0, 0, 1 )",
            "value": "The basis matrix's Z vector (column 2). Equivalent to array index [code]2[/code].",
            "setter": "",
            "name": "z",
            "getter": "",
            "type": "Vector3"
          }
        ]
      },
      "methods": {
        "method": [
          {
            "return": {
              "type": "Basis"
            },
            "argument": {
              "name": "from",
              "type": "Quat",
              "index": "0"
            },
            "name": "Basis",
            "description": "Constructs a pure rotation basis matrix from the given quaternion."
          },
          {
            "return": {
              "type": "Basis"
            },
            "argument": {
              "name": "from",
              "type": "Vector3",
              "index": "0"
            },
            "name": "Basis",
            "description": "Constructs a pure rotation basis matrix from the given Euler angles (in the YXZ convention: when *composing*, first Y, then X, and Z last), given in the vector format as (X angle, Y angle, Z angle).\n\t\t\t\tConsider using the [Quat] constructor instead, which uses a quaternion instead of Euler angles."
          },
          {
            "return": {
              "type": "Basis"
            },
            "argument": [
              {
                "name": "axis",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "phi",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "Basis",
            "description": "Constructs a pure rotation basis matrix, rotated around the given [code]axis[/code] by [code]phi[/code], in radians. The axis must be a normalized vector."
          },
          {
            "return": {
              "type": "Basis"
            },
            "argument": [
              {
                "name": "x_axis",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "y_axis",
                "type": "Vector3",
                "index": "1"
              },
              {
                "name": "z_axis",
                "type": "Vector3",
                "index": "2"
              }
            ],
            "name": "Basis",
            "description": "Constructs a basis matrix from 3 axis vectors (matrix columns)."
          },
          {
            "return": {
              "type": "float"
            },
            "name": "determinant",
            "description": "Returns the determinant of the basis matrix. If the basis is uniformly scaled, its determinant is the square of the scale.\n\t\t\t\tA negative determinant means the basis has a negative scale. A zero determinant means the basis isn't invertible, and is usually considered invalid."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "name": "get_euler",
            "description": "Returns the basis's rotation in the form of Euler angles (in the YXZ convention: when decomposing, first Z, then X, and Y last). The returned vector contains the rotation angles in the format (X angle, Y angle, Z angle).\n\t\t\t\tConsider using the [method get_rotation_quat] method instead, which returns a [Quat] quaternion instead of Euler angles."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_orthogonal_index",
            "description": "This function considers a discretization of rotations into 24 points on unit sphere, lying along the vectors (x,y,z) with each component being either -1, 0, or 1, and returns the index of the point best representing the orientation of the object. It is mainly used by the [GridMap] editor. For further details, refer to the Godot source code."
          },
          {
            "return": {
              "type": "Quat"
            },
            "name": "get_rotation_quat",
            "description": "Returns the basis's rotation in the form of a quaternion. See [method get_euler] if you need Euler angles, but keep in mind quaternions should generally be preferred to Euler angles."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "name": "get_scale",
            "description": "Assuming that the matrix is the combination of a rotation and scaling, return the absolute value of scaling factors along each axis."
          },
          {
            "return": {
              "type": "Basis"
            },
            "name": "inverse",
            "description": "Returns the inverse of the matrix."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "b",
                "type": "Basis",
                "index": "0"
              },
              {
                "default": "1e-05",
                "name": "epsilon",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "is_equal_approx",
            "description": "Returns [code]true[/code] if this basis and [code]b[/code] are approximately equal, by calling [code]is_equal_approx[/code] on each component.\n\t\t\t\t[b]Note:[/b] For complicated reasons, the epsilon argument is always discarded. Don't use the epsilon argument, it does nothing."
          },
          {
            "return": {
              "type": "Basis"
            },
            "name": "orthonormalized",
            "description": "Returns the orthonormalized version of the matrix (useful to call from time to time to avoid rounding error for orthogonal matrices). This performs a Gram-Schmidt orthonormalization on the basis of the matrix."
          },
          {
            "return": {
              "type": "Basis"
            },
            "argument": [
              {
                "name": "axis",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "phi",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "rotated",
            "description": "Introduce an additional rotation around the given axis by phi (radians). The axis must be a normalized vector."
          },
          {
            "return": {
              "type": "Basis"
            },
            "argument": {
              "name": "scale",
              "type": "Vector3",
              "index": "0"
            },
            "name": "scaled",
            "description": "Introduce an additional scaling specified by the given 3D scaling factor."
          },
          {
            "return": {
              "type": "Basis"
            },
            "argument": [
              {
                "name": "to",
                "type": "Basis",
                "index": "0"
              },
              {
                "name": "weight",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "slerp",
            "description": "Assuming that the matrix is a proper rotation matrix, slerp performs a spherical-linear interpolation with another rotation matrix."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "with",
              "type": "Vector3",
              "index": "0"
            },
            "name": "tdotx",
            "description": "Transposed dot product with the X axis of the matrix."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "with",
              "type": "Vector3",
              "index": "0"
            },
            "name": "tdoty",
            "description": "Transposed dot product with the Y axis of the matrix."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "with",
              "type": "Vector3",
              "index": "0"
            },
            "name": "tdotz",
            "description": "Transposed dot product with the Z axis of the matrix."
          },
          {
            "return": {
              "type": "Basis"
            },
            "name": "transposed",
            "description": "Returns the transposed version of the matrix."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "v",
              "type": "Vector3",
              "index": "0"
            },
            "name": "xform",
            "description": "Returns a vector transformed (multiplied) by the matrix."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "v",
              "type": "Vector3",
              "index": "0"
            },
            "name": "xform_inv",
            "description": "Returns a vector transformed (multiplied) by the transposed basis matrix.\n\t\t\t\t[b]Note:[/b] This results in a multiplication by the inverse of the matrix only if it represents a rotation-reflection."
          }
        ]
      },
      "name": "Basis",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "Basis( 1, 0, 0, 0, 1, 0, 0, 0, 1 )",
            "name": "IDENTITY"
          },
          {
            "value": "Basis( -1, 0, 0, 0, 1, 0, 0, 0, 1 )",
            "name": "FLIP_X"
          },
          {
            "value": "Basis( 1, 0, 0, 0, -1, 0, 0, 0, 1 )",
            "name": "FLIP_Y"
          },
          {
            "value": "Basis( 1, 0, 0, 0, 1, 0, 0, 0, -1 )",
            "name": "FLIP_Z"
          }
        ]
      },
      "brief_description": "3×3 matrix datatype.",
      "description": "3×3 matrix used for 3D rotation and scale. Almost always used as an orthogonal basis for a Transform.\n\t\tContains 3 vector fields X, Y and Z as its columns, which are typically interpreted as the local basis vectors of a transformation. For such use, it is composed of a scaling and a rotation matrix, in that order (M = R.S).\n\t\tCan also be accessed as array of 3D vectors. These vectors are normally orthogonal to each other, but are not necessarily normalized (due to scaling).\n\t\tFor more information, read the \"Matrices and transforms\" documentation article."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0.0",
            "value": "Ascent (number of pixels above the baseline).",
            "setter": "set_ascent",
            "name": "ascent",
            "getter": "get_ascent",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], distance field hint is enabled.",
            "setter": "set_distance_field_hint",
            "name": "distance_field",
            "getter": "is_distance_field_hint",
            "type": "bool"
          },
          {
            "value": "The fallback font.",
            "setter": "set_fallback",
            "name": "fallback",
            "getter": "get_fallback",
            "type": "BitmapFont"
          },
          {
            "default": "1.0",
            "value": "Total font height (ascent plus descent) in pixels.",
            "setter": "set_height",
            "name": "height",
            "getter": "get_height",
            "type": "float"
          }
        ]
      },
      "inherits": "Font",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "character",
                "type": "int",
                "index": "0"
              },
              {
                "name": "texture",
                "type": "int",
                "index": "1"
              },
              {
                "name": "rect",
                "type": "Rect2",
                "index": "2"
              },
              {
                "default": "Vector2( 0, 0 )",
                "name": "align",
                "type": "Vector2",
                "index": "3"
              },
              {
                "default": "-1",
                "name": "advance",
                "type": "float",
                "index": "4"
              }
            ],
            "name": "add_char",
            "description": "Adds a character to the font, where [code]character[/code] is the Unicode value, [code]texture[/code] is the texture index, [code]rect[/code] is the region in the texture (in pixels!), [code]align[/code] is the (optional) alignment for the character and [code]advance[/code] is the (optional) advance."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "char_a",
                "type": "int",
                "index": "0"
              },
              {
                "name": "char_b",
                "type": "int",
                "index": "1"
              },
              {
                "name": "kerning",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "add_kerning_pair",
            "description": "Adds a kerning pair to the [BitmapFont] as a difference. Kerning pairs are special cases where a typeface advance is determined by the next character."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "texture",
              "type": "Texture",
              "index": "0"
            },
            "name": "add_texture",
            "description": "Adds a texture to the [BitmapFont]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Clears all the font data and settings."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "create_from_fnt",
            "description": "Creates a BitmapFont from the [code]*.fnt[/code] file at [code]path[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "char_a",
                "type": "int",
                "index": "0"
              },
              {
                "name": "char_b",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_kerning_pair",
            "description": "Returns a kerning pair as a difference."
          },
          {
            "return": {
              "type": "Texture"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_texture",
            "description": "Returns the font atlas texture at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_texture_count",
            "description": "Returns the number of textures in the BitmapFont atlas."
          }
        ]
      },
      "name": "BitmapFont",
      "version": "3.3",
      "constants": {},
      "brief_description": "Renders text using fonts under the [url=https://www.angelcode.com/products/bmfont/]BMFont[/url] format.\n\t\tHandles files with the [code].fnt[/code] extension.",
      "description": "Renders text using [code]*.fnt[/code] fonts containing texture atlases. Supports distance fields. For using vector font files like TTF directly, see [DynamicFont]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "size",
              "type": "Vector2",
              "index": "0"
            },
            "name": "create",
            "description": "Creates a bitmap with the specified size, filled with [code]false[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "image",
                "type": "Image",
                "index": "0"
              },
              {
                "default": "0.1",
                "name": "threshold",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "create_from_image_alpha",
            "description": "Creates a bitmap that matches the given image dimensions, every element of the bitmap is set to [code]false[/code] if the alpha value of the image at that position is equal to [code]threshold[/code] or less, and [code]true[/code] in other case."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "position",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_bit",
            "description": "Returns bitmap's value at the specified position."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_size",
            "description": "Returns bitmap's dimensions."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_true_bit_count",
            "description": "Returns the amount of bitmap elements that are set to [code]true[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "pixels",
                "type": "int",
                "index": "0"
              },
              {
                "name": "rect",
                "type": "Rect2",
                "index": "1"
              }
            ],
            "name": "grow_mask",
            "description": "Applies morphological dilation to the bitmap. The first argument is the dilation amount, Rect2 is the area where the dilation will be applied."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "rect",
                "type": "Rect2",
                "index": "0"
              },
              {
                "default": "2.0",
                "name": "epsilon",
                "type": "float",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "opaque_to_polygons",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "position",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "bit",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_bit",
            "description": "Sets the bitmap's element at the specified position, to the specified value."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "rect",
                "type": "Rect2",
                "index": "0"
              },
              {
                "name": "bit",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_bit_rect",
            "description": "Sets a rectangular portion of the bitmap to the specified value."
          }
        ]
      },
      "name": "BitMap",
      "version": "3.3",
      "constants": {},
      "brief_description": "Boolean matrix.",
      "description": "A two-dimensional array of boolean values, can be used to efficiently store a binary matrix (every matrix element takes only one bit) and query the values using natural cartesian coordinates."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "16.0",
            "value": "Length of the bone's representation drawn in the editor's viewport in pixels.",
            "setter": "set_default_length",
            "name": "default_length",
            "getter": "get_default_length",
            "type": "float"
          },
          {
            "default": "Transform2D( 0, 0, 0, 0, 0, 0 )",
            "value": "Rest transform of the bone. You can reset the node's transforms to this value using [method apply_rest].",
            "setter": "set_rest",
            "name": "rest",
            "getter": "get_rest",
            "type": "Transform2D"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "name": "apply_rest",
            "description": "Stores the node's current transforms in [member rest]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_index_in_skeleton",
            "description": "Returns the node's index as part of the entire skeleton. See [Skeleton2D]."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "qualifiers": "const",
            "name": "get_skeleton_rest",
            "description": "Returns the node's [member rest] [code]Transform2D[/code] if it doesn't have a parent, or its rest pose relative to its parent."
          }
        ]
      },
      "name": "Bone2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Joint used with [Skeleton2D] to control and animate other nodes.",
      "description": "Use a hierarchy of [code]Bone2D[/code] bound to a [Skeleton2D] to control, and animate other [Node2D] nodes.\n\t\tYou can use [code]Bone2D[/code] and [code]Skeleton2D[/code] nodes to animate 2D meshes created with the Polygon 2D UV editor.\n\t\tEach bone has a [member rest] transform that you can reset to with [method apply_rest]. These rest poses are relative to the bone's parent.\n\t\tIf in the editor, you can set the rest pose of an entire skeleton using a menu option, from the code, you need to iterate over the bones to set their individual rest poses."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "\"\"",
          "value": "The name of the attached bone.",
          "setter": "set_bone_name",
          "name": "bone_name",
          "getter": "get_bone_name",
          "type": "String"
        }
      },
      "inherits": "Spatial",
      "methods": {},
      "name": "BoneAttachment",
      "version": "3.3",
      "constants": {},
      "brief_description": "A node that will attach to a bone.",
      "description": "This node must be the child of a [Skeleton] node. You can then select a bone for this node to attach to. The BoneAttachment node will copy the transform of the selected bone."
    }
  },
  {
    "class": {
      "tutorials": {},
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "from",
              "type": "int",
              "index": "0"
            },
            "name": "bool",
            "description": "Cast an [int] value to a boolean value, this method will return [code]false[/code] if [code]0[/code] is passed in, and [code]true[/code] for all other ints."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "from",
              "type": "float",
              "index": "0"
            },
            "name": "bool",
            "description": "Cast a [float] value to a boolean value, this method will return [code]false[/code] if [code]0.0[/code] is passed in, and [code]true[/code] for all other floats."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "from",
              "type": "String",
              "index": "0"
            },
            "name": "bool",
            "description": "Cast a [String] value to a boolean value, this method will return [code]false[/code] if [code]\"\"[/code] is passed in, and [code]true[/code] for all non-empty strings.\n\t\t\t\tExamples: [code]bool(\"False\")[/code] returns [code]true[/code], [code]bool(\"\")[/code] returns [code]false[/code]."
          }
        ]
      },
      "name": "bool",
      "version": "3.3",
      "constants": {},
      "brief_description": "Boolean built-in type.",
      "description": "Boolean is a built-in type. There are two boolean values: [code]true[/code] and [code]false[/code]. You can think of it as a switch with on or off (1 or 0) setting. Booleans are used in programming for logic in condition statements, like [code]if[/code] statements.\n\t\tBooleans can be directly used in [code]if[/code] statements. The code below demonstrates this on the [code]if can_shoot:[/code] line. You don't need to use [code]== true[/code], you only need [code]if can_shoot:[/code]. Similarly, use [code]if not can_shoot:[/code] rather than [code]== false[/code].\n\t\t[codeblock]\n\t\tvar can_shoot = true\n\n\t\tfunc shoot():\n\t\t    if can_shoot:\n\t\t        pass # Perform shooting actions here.\n\t\t[/codeblock]\n\t\tThe following code will only create a bullet if both conditions are met: action \"shoot\" is pressed and if [code]can_shoot[/code] is [code]true[/code].\n\t\t[b]Note:[/b] [code]Input.is_action_pressed(\"shoot\")[/code] is also a boolean that is [code]true[/code] when \"shoot\" is pressed and [code]false[/code] when \"shoot\" isn't pressed.\n\t\t[codeblock]\n\t\tvar can_shoot = true\n\n\t\tfunc shoot():\n\t\t    if can_shoot and Input.is_action_pressed(\"shoot\"):\n\t\t        create_bullet()\n\t\t[/codeblock]\n\t\tThe following code will set [code]can_shoot[/code] to [code]false[/code] and start a timer. This will prevent player from shooting until the timer runs out. Next [code]can_shoot[/code] will be set to [code]true[/code] again allowing player to shoot once again.\n\t\t[codeblock]\n\t\tvar can_shoot = true\n\t\tonready var cool_down = $CoolDownTimer\n\n\t\tfunc shoot():\n\t\t    if can_shoot and Input.is_action_pressed(\"shoot\"):\n\t\t        create_bullet()\n\t\t        can_shoot = false\n\t\t        cool_down.start()\n\n\t\tfunc _on_CoolDownTimer_timeout():\n\t\t    can_shoot = true\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0",
            "value": "The alignment of the container's children (must be one of [constant ALIGN_BEGIN], [constant ALIGN_CENTER] or [constant ALIGN_END]).",
            "setter": "set_alignment",
            "name": "alignment",
            "getter": "get_alignment",
            "type": "int",
            "enum": "BoxContainer.AlignMode"
          },
          {
            "default": "1",
            "setter": "set_mouse_filter",
            "override": "true",
            "name": "mouse_filter",
            "getter": "get_mouse_filter",
            "type": "int",
            "enum": "Control.MouseFilter"
          }
        ]
      },
      "inherits": "Container",
      "methods": {
        "method": {
          "return": {
            "type": "void"
          },
          "argument": {
            "name": "begin",
            "type": "bool",
            "index": "0"
          },
          "name": "add_spacer",
          "description": "Adds a control to the box as a spacer. If [code]true[/code], [code]begin[/code] will insert the spacer control in front of other children."
        }
      },
      "name": "BoxContainer",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "ALIGN_BEGIN",
            "enum": "AlignMode"
          },
          {
            "value": "1",
            "name": "ALIGN_CENTER",
            "enum": "AlignMode"
          },
          {
            "value": "2",
            "name": "ALIGN_END",
            "enum": "AlignMode"
          }
        ]
      },
      "brief_description": "Base class for box containers.",
      "description": "Arranges child controls vertically or horizontally, and rearranges the controls automatically when their minimum size changes."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://godotengine.org/asset-library/asset/675",
            "title": "3D Physics Tests Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/126",
            "title": "3D Kinematic Character Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/125",
            "title": "3D Platformer Demo"
          }
        ]
      },
      "members": {
        "member": {
          "default": "Vector3( 1, 1, 1 )",
          "value": "The box's half extents. The width, height and depth of this shape is twice the half extents.",
          "setter": "set_extents",
          "name": "extents",
          "getter": "get_extents",
          "type": "Vector3"
        }
      },
      "inherits": "Shape",
      "methods": {},
      "name": "BoxShape",
      "version": "3.3",
      "constants": {},
      "brief_description": "Box shape resource.",
      "description": "3D box shape that can be a child of a [PhysicsBody] or [Area]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "true",
          "setter": "set_local_to_scene",
          "override": "true",
          "name": "resource_local_to_scene",
          "getter": "is_local_to_scene",
          "type": "bool"
        }
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Array"
            },
            "name": "get_buttons",
            "description": "Returns an [Array] of [Button]s who have this as their [ButtonGroup] (see [member BaseButton.group])."
          },
          {
            "return": {
              "type": "BaseButton"
            },
            "name": "get_pressed_button",
            "description": "Returns the current pressed button."
          }
        ]
      },
      "name": "ButtonGroup",
      "version": "3.3",
      "constants": {},
      "brief_description": "Group of Buttons.",
      "description": "Group of [Button]. All direct and indirect children buttons become radios. Only one allows being pressed.\n\t\t[member BaseButton.toggle_mode] should be [code]true[/code]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://godotengine.org/asset-library/asset/515",
            "title": "2D Dodge The Creeps Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/677",
            "title": "OS Test Demo"
          }
        ]
      },
      "theme_items": {
        "theme_item": [
          {
            "value": "[StyleBox] used when the [Button] is disabled.",
            "name": "disabled",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] used when the [Button] is focused. It is displayed over the current [StyleBox], so using [StyleBoxEmpty] will just disable the focus visual effect.",
            "name": "focus",
            "type": "StyleBox"
          },
          {
            "value": "[Font] of the [Button]'s text.",
            "name": "font",
            "type": "Font"
          },
          {
            "default": "Color( 0.88, 0.88, 0.88, 1 )",
            "value": "Default text [Color] of the [Button].",
            "name": "font_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.9, 0.9, 0.9, 0.2 )",
            "value": "Text [Color] used when the [Button] is disabled.",
            "name": "font_color_disabled",
            "type": "Color"
          },
          {
            "default": "Color( 0.94, 0.94, 0.94, 1 )",
            "value": "Text [Color] used when the [Button] is being hovered.",
            "name": "font_color_hover",
            "type": "Color"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "Text [Color] used when the [Button] is being pressed.",
            "name": "font_color_pressed",
            "type": "Color"
          },
          {
            "value": "[StyleBox] used when the [Button] is being hovered.",
            "name": "hover",
            "type": "StyleBox"
          },
          {
            "default": "2",
            "value": "The horizontal space between [Button]'s icon and text.",
            "name": "hseparation",
            "type": "int"
          },
          {
            "value": "Default [StyleBox] for the [Button].",
            "name": "normal",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] used when the [Button] is being pressed.",
            "name": "pressed",
            "type": "StyleBox"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "1",
            "value": "Text alignment policy for the button's text, use one of the [enum TextAlign] constants.",
            "setter": "set_text_align",
            "name": "align",
            "getter": "get_text_align",
            "type": "int",
            "enum": "Button.TextAlign"
          },
          {
            "default": "false",
            "value": "When this property is enabled, text that is too large to fit the button is clipped, when disabled the Button will always be wide enough to hold the text.",
            "setter": "set_clip_text",
            "name": "clip_text",
            "getter": "get_clip_text",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "When enabled, the button's icon will expand/shrink to fit the button's size while keeping its aspect.",
            "setter": "set_expand_icon",
            "name": "expand_icon",
            "getter": "is_expand_icon",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Flat buttons don't display decoration.",
            "setter": "set_flat",
            "name": "flat",
            "getter": "is_flat",
            "type": "bool"
          },
          {
            "value": "Button's icon, if text is present the icon will be placed before the text.",
            "setter": "set_button_icon",
            "name": "icon",
            "getter": "get_button_icon",
            "type": "Texture"
          },
          {
            "default": "\"\"",
            "value": "The button's text that will be displayed inside the button's area.",
            "setter": "set_text",
            "name": "text",
            "getter": "get_text",
            "type": "String"
          }
        ]
      },
      "inherits": "BaseButton",
      "methods": {},
      "name": "Button",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "ALIGN_LEFT",
            "enum": "TextAlign"
          },
          {
            "value": "1",
            "name": "ALIGN_CENTER",
            "enum": "TextAlign"
          },
          {
            "value": "2",
            "name": "ALIGN_RIGHT",
            "enum": "TextAlign"
          }
        ]
      },
      "brief_description": "Standard themed Button.",
      "description": "Button is the standard themed button. It can contain text and an icon, and will display them according to the current [Theme].\n\t\t[b]Example of creating a button and assigning an action when pressed by code:[/b]\n\t\t[codeblock]\n\t\tfunc _ready():\n\t\t    var button = Button.new()\n\t\t    button.text = \"Click me\"\n\t\t    button.connect(\"pressed\", self, \"_button_pressed\")\n\t\t    add_child(button)\n\n\t\tfunc _button_pressed():\n\t\t    print(\"Hello world!\")\n\t\t[/codeblock]\n\t\tButtons (like all Control nodes) can also be created in the editor, but some situations may require creating them from code.\n\t\tSee also [BaseButton] which contains common properties and methods associated with this node.\n\t\t[b]Note:[/b] Buttons do not interpret touch input and therefore don't support multitouch, since mouse emulation can only press one button at a given time. Use [TouchScreenButton] for buttons that trigger gameplay movement or actions, as [TouchScreenButton] supports multitouch."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://godotengine.org/asset-library/asset/120",
            "title": "2D Platformer Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/112",
            "title": "2D Isometric Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/110",
            "title": "2D HDR Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "1",
            "value": "The Camera2D's anchor point. See [enum AnchorMode] constants.",
            "setter": "set_anchor_mode",
            "name": "anchor_mode",
            "getter": "get_anchor_mode",
            "type": "int",
            "enum": "Camera2D.AnchorMode"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the camera is the active camera for the current scene. Only one camera can be current, so setting a different camera [code]current[/code] will disable this one.",
            "setter": "_set_current",
            "name": "current",
            "getter": "is_current",
            "type": "bool"
          },
          {
            "value": "The custom [Viewport] node attached to the [Camera2D]. If [code]null[/code] or not a [Viewport], uses the default viewport instead.",
            "setter": "set_custom_viewport",
            "name": "custom_viewport",
            "getter": "get_custom_viewport",
            "type": "Node"
          },
          {
            "default": "0.2",
            "value": "Bottom margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen.",
            "setter": "set_drag_margin",
            "name": "drag_margin_bottom",
            "getter": "get_drag_margin",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the camera only moves when reaching the horizontal drag margins. If [code]false[/code], the camera moves horizontally regardless of margins.",
            "setter": "set_h_drag_enabled",
            "name": "drag_margin_h_enabled",
            "getter": "is_h_drag_enabled",
            "type": "bool"
          },
          {
            "default": "0.2",
            "value": "Left margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen.",
            "setter": "set_drag_margin",
            "name": "drag_margin_left",
            "getter": "get_drag_margin",
            "type": "float"
          },
          {
            "default": "0.2",
            "value": "Right margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen.",
            "setter": "set_drag_margin",
            "name": "drag_margin_right",
            "getter": "get_drag_margin",
            "type": "float"
          },
          {
            "default": "0.2",
            "value": "Top margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen.",
            "setter": "set_drag_margin",
            "name": "drag_margin_top",
            "getter": "get_drag_margin",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the camera only moves when reaching the vertical drag margins. If [code]false[/code], the camera moves vertically regardless of margins.",
            "setter": "set_v_drag_enabled",
            "name": "drag_margin_v_enabled",
            "getter": "is_v_drag_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], draws the camera's drag margin rectangle in the editor.",
            "setter": "set_margin_drawing_enabled",
            "name": "editor_draw_drag_margin",
            "getter": "is_margin_drawing_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], draws the camera's limits rectangle in the editor.",
            "setter": "set_limit_drawing_enabled",
            "name": "editor_draw_limits",
            "getter": "is_limit_drawing_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], draws the camera's screen rectangle in the editor.",
            "setter": "set_screen_drawing_enabled",
            "name": "editor_draw_screen",
            "getter": "is_screen_drawing_enabled",
            "type": "bool"
          },
          {
            "default": "10000000",
            "value": "Bottom scroll limit in pixels. The camera stops moving when reaching this value.",
            "setter": "set_limit",
            "name": "limit_bottom",
            "getter": "get_limit",
            "type": "int"
          },
          {
            "default": "-10000000",
            "value": "Left scroll limit in pixels. The camera stops moving when reaching this value.",
            "setter": "set_limit",
            "name": "limit_left",
            "getter": "get_limit",
            "type": "int"
          },
          {
            "default": "10000000",
            "value": "Right scroll limit in pixels. The camera stops moving when reaching this value.",
            "setter": "set_limit",
            "name": "limit_right",
            "getter": "get_limit",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the camera smoothly stops when reaches its limits.",
            "setter": "set_limit_smoothing_enabled",
            "name": "limit_smoothed",
            "getter": "is_limit_smoothing_enabled",
            "type": "bool"
          },
          {
            "default": "-10000000",
            "value": "Top scroll limit in pixels. The camera stops moving when reaching this value.",
            "setter": "set_limit",
            "name": "limit_top",
            "getter": "get_limit",
            "type": "int"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The camera's offset, useful for looking around or camera shake animations.",
            "setter": "set_offset",
            "name": "offset",
            "getter": "get_offset",
            "type": "Vector2"
          },
          {
            "default": "0.0",
            "value": "The horizontal offset of the camera, relative to the drag margins.\n\t\t\t[b]Note:[/b] Offset H is used only to force offset relative to margins. It's not updated in any way if drag margins are enabled and can be used to set initial offset.",
            "setter": "set_h_offset",
            "name": "offset_h",
            "getter": "get_h_offset",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The vertical offset of the camera, relative to the drag margins.\n\t\t\t[b]Note:[/b] Used the same as [member offset_h].",
            "setter": "set_v_offset",
            "name": "offset_v",
            "getter": "get_v_offset",
            "type": "float"
          },
          {
            "default": "1",
            "value": "The camera's process callback. See [enum Camera2DProcessMode].",
            "setter": "set_process_mode",
            "name": "process_mode",
            "getter": "get_process_mode",
            "type": "int",
            "enum": "Camera2D.Camera2DProcessMode"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the camera rotates with the target.",
            "setter": "set_rotating",
            "name": "rotating",
            "getter": "is_rotating",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the camera smoothly moves towards the target at [member smoothing_speed].",
            "setter": "set_enable_follow_smoothing",
            "name": "smoothing_enabled",
            "getter": "is_follow_smoothing_enabled",
            "type": "bool"
          },
          {
            "default": "5.0",
            "value": "Speed in pixels per second of the camera's smoothing effect when [member smoothing_enabled] is [code]true[/code].",
            "setter": "set_follow_smoothing",
            "name": "smoothing_speed",
            "getter": "get_follow_smoothing",
            "type": "float"
          },
          {
            "default": "Vector2( 1, 1 )",
            "value": "The camera's zoom relative to the viewport. Values larger than [code]Vector2(1, 1)[/code] zoom out and smaller values zoom in. For an example, use [code]Vector2(0.5, 0.5)[/code] for a 2× zoom-in, and [code]Vector2(4, 4)[/code] for a 4× zoom-out.",
            "setter": "set_zoom",
            "name": "zoom",
            "getter": "get_zoom",
            "type": "Vector2"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "name": "align",
            "description": "Aligns the camera to the tracked node."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_current",
            "description": "Removes any [Camera2D] from the ancestor [Viewport]'s internal currently-assigned camera."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "force_update_scroll",
            "description": "Forces the camera to update scroll immediately."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_camera_position",
            "description": "Returns the camera position."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_camera_screen_center",
            "description": "Returns the location of the [Camera2D]'s screen-center, relative to the origin."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_drag_margin",
            "description": "Returns the specified margin. See also [member drag_margin_bottom], [member drag_margin_top], [member drag_margin_left], and [member drag_margin_right]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_limit",
            "description": "Returns the specified camera limit. See also [member limit_bottom], [member limit_top], [member limit_left], and [member limit_right]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "make_current",
            "description": "Make this the current 2D camera for the scene (viewport and layer), in case there are many cameras in the scene."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "reset_smoothing",
            "description": "Sets the camera's position immediately to its current smoothing destination.\n\t\t\t\tThis has no effect if smoothing is disabled."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "margin",
                "type": "int",
                "enum": "Margin",
                "index": "0"
              },
              {
                "name": "drag_margin",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_drag_margin",
            "description": "Sets the specified margin. See also [member drag_margin_bottom], [member drag_margin_top], [member drag_margin_left], and [member drag_margin_right]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "margin",
                "type": "int",
                "enum": "Margin",
                "index": "0"
              },
              {
                "name": "limit",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set_limit",
            "description": "Sets the specified camera limit. See also [member limit_bottom], [member limit_top], [member limit_left], and [member limit_right]."
          }
        ]
      },
      "name": "Camera2D",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "ANCHOR_MODE_FIXED_TOP_LEFT",
            "enum": "AnchorMode"
          },
          {
            "value": "1",
            "name": "ANCHOR_MODE_DRAG_CENTER",
            "enum": "AnchorMode"
          },
          {
            "value": "0",
            "name": "CAMERA2D_PROCESS_PHYSICS",
            "enum": "Camera2DProcessMode"
          },
          {
            "value": "1",
            "name": "CAMERA2D_PROCESS_IDLE",
            "enum": "Camera2DProcessMode"
          }
        ]
      },
      "brief_description": "Camera node for 2D scenes.",
      "description": "Camera node for 2D scenes. It forces the screen (current layer) to scroll following this node. This makes it easier (and faster) to program scrollable scenes than manually changing the position of [CanvasItem]-based nodes.\n\t\tThis node is intended to be a simple helper to get things going quickly, but more functionality may be desired to change how the camera works. To make your own custom camera node, inherit it from [Node2D] and change the transform of the canvas by setting [member Viewport.canvas_transform] in [Viewport] (you can obtain the current [Viewport] by using [method Node.get_viewport]).\n\t\tNote that the [Camera2D] node's [code]position[/code] doesn't represent the actual position of the screen, which may differ due to applied smoothing or limits. You can use [method get_camera_screen_center] to get the real position."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the feed is active.",
            "setter": "set_active",
            "name": "feed_is_active",
            "getter": "is_active",
            "type": "bool"
          },
          {
            "default": "Transform2D( 1, 0, 0, -1, 0, 1 )",
            "value": "The transform applied to the camera's image.",
            "setter": "set_transform",
            "name": "feed_transform",
            "getter": "get_transform",
            "type": "Transform2D"
          }
        ]
      },
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_id",
            "description": "Returns the unique ID for this feed."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_name",
            "description": "Returns the camera's name."
          },
          {
            "return": {
              "type": "int",
              "enum": "CameraFeed.FeedPosition"
            },
            "qualifiers": "const",
            "name": "get_position",
            "description": "Returns the position of camera on the device."
          }
        ]
      },
      "name": "CameraFeed",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "FEED_NOIMAGE",
            "enum": "FeedDataType"
          },
          {
            "value": "1",
            "name": "FEED_RGB",
            "enum": "FeedDataType"
          },
          {
            "value": "2",
            "name": "FEED_YCBCR",
            "enum": "FeedDataType"
          },
          {
            "value": "3",
            "name": "FEED_YCBCR_SEP",
            "enum": "FeedDataType"
          },
          {
            "value": "0",
            "name": "FEED_UNSPECIFIED",
            "enum": "FeedPosition"
          },
          {
            "value": "1",
            "name": "FEED_FRONT",
            "enum": "FeedPosition"
          },
          {
            "value": "2",
            "name": "FEED_BACK",
            "enum": "FeedPosition"
          }
        ]
      },
      "brief_description": "A camera feed gives you access to a single physical camera attached to your device.",
      "description": "A camera feed gives you access to a single physical camera attached to your device. When enabled, Godot will start capturing frames from the camera which can then be used.\n\t\t[b]Note:[/b] Many cameras will return YCbCr images which are split into two textures and need to be combined in a shader. Godot does this automatically for you if you set the environment to show the camera image in the background."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "feed",
              "type": "CameraFeed",
              "index": "0"
            },
            "name": "add_feed",
            "description": "Adds a camera feed to the camera server."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "feeds",
            "description": "Returns an array of [CameraFeed]s."
          },
          {
            "return": {
              "type": "CameraFeed"
            },
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "name": "get_feed",
            "description": "Returns the [CameraFeed] with this id."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_feed_count",
            "description": "Returns the number of [CameraFeed]s registered."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "feed",
              "type": "CameraFeed",
              "index": "0"
            },
            "name": "remove_feed",
            "description": "Removes a [CameraFeed]."
          }
        ]
      },
      "name": "CameraServer",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "camera_feed_added",
            "description": "Emitted when a [CameraFeed] is added (e.g. webcam is plugged in)."
          },
          {
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "camera_feed_removed",
            "description": "Emitted when a [CameraFeed] is removed (e.g. webcam is unplugged)."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "FEED_RGBA_IMAGE",
            "enum": "FeedImage"
          },
          {
            "value": "0",
            "name": "FEED_YCBCR_IMAGE",
            "enum": "FeedImage"
          },
          {
            "value": "0",
            "name": "FEED_Y_IMAGE",
            "enum": "FeedImage"
          },
          {
            "value": "1",
            "name": "FEED_CBCR_IMAGE",
            "enum": "FeedImage"
          }
        ]
      },
      "brief_description": "Server keeping track of different cameras accessible in Godot.",
      "description": "The [CameraServer] keeps track of different cameras accessible in Godot. These are external cameras such as webcams or the cameras on your phone.\n\t\tIt is notably used to provide AR modules with a video feed from the camera."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0",
            "value": "The ID of the [CameraFeed] for which we want to display the image.",
            "setter": "set_camera_feed_id",
            "name": "camera_feed_id",
            "getter": "get_camera_feed_id",
            "type": "int"
          },
          {
            "default": "false",
            "value": "Convenience property that gives access to the active property of the [CameraFeed].",
            "setter": "set_camera_active",
            "name": "camera_is_active",
            "getter": "get_camera_active",
            "type": "bool"
          },
          {
            "default": "0",
            "setter": "set_flags",
            "override": "true",
            "name": "flags",
            "getter": "get_flags",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Which image within the [CameraFeed] we want access to, important if the camera image is split in a Y and CbCr component.",
            "setter": "set_which_feed",
            "name": "which_feed",
            "getter": "get_which_feed",
            "type": "int",
            "enum": "CameraServer.FeedImage"
          }
        ]
      },
      "inherits": "Texture",
      "methods": {},
      "name": "CameraTexture",
      "version": "3.3",
      "constants": {},
      "brief_description": "Texture provided by a [CameraFeed].",
      "description": "This texture gives access to the camera texture provided by a [CameraFeed].\n\t\t[b]Note:[/b] Many cameras supply YCbCr images which need to be converted in a shader."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/678",
          "title": "Third Person Shooter Demo"
        }
      },
      "members": {
        "member": [
          {
            "default": "1048575",
            "value": "The culling mask that describes which 3D render layers are rendered by this camera.",
            "setter": "set_cull_mask",
            "name": "cull_mask",
            "getter": "get_cull_mask",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the ancestor [Viewport] is currently using this camera.",
            "setter": "set_current",
            "name": "current",
            "getter": "is_current",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "If not [constant DOPPLER_TRACKING_DISABLED], this camera will simulate the [url=https://en.wikipedia.org/wiki/Doppler_effect]Doppler effect[/url] for objects changed in particular [code]_process[/code] methods. See [enum DopplerTracking] for possible values.",
            "setter": "set_doppler_tracking",
            "name": "doppler_tracking",
            "getter": "get_doppler_tracking",
            "type": "int",
            "enum": "Camera.DopplerTracking"
          },
          {
            "value": "The [Environment] to use for this camera.",
            "setter": "set_environment",
            "name": "environment",
            "getter": "get_environment",
            "type": "Environment"
          },
          {
            "default": "100.0",
            "value": "The distance to the far culling boundary for this camera relative to its local Z axis.",
            "setter": "set_zfar",
            "name": "far",
            "getter": "get_zfar",
            "type": "float"
          },
          {
            "default": "70.0",
            "value": "The camera's field of view angle (in degrees). Only applicable in perspective mode. Since [member keep_aspect] locks one axis, [code]fov[/code] sets the other axis' field of view angle.\n\t\t\tFor reference, the default vertical field of view value ([code]70.0[/code]) is equivalent to a horizontal FOV of:\n\t\t\t- ~86.07 degrees in a 4:3 viewport\n\t\t\t- ~96.50 degrees in a 16:10 viewport\n\t\t\t- ~102.45 degrees in a 16:9 viewport\n\t\t\t- ~117.06 degrees in a 21:9 viewport",
            "setter": "set_fov",
            "name": "fov",
            "getter": "get_fov",
            "type": "float"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The camera's frustum offset. This can be changed from the default to create \"tilted frustum\" effects such as [url=https://zdoom.org/wiki/Y-shearing]Y-shearing[/url].",
            "setter": "set_frustum_offset",
            "name": "frustum_offset",
            "getter": "get_frustum_offset",
            "type": "Vector2"
          },
          {
            "default": "0.0",
            "value": "The horizontal (X) offset of the camera viewport.",
            "setter": "set_h_offset",
            "name": "h_offset",
            "getter": "get_h_offset",
            "type": "float"
          },
          {
            "default": "1",
            "value": "The axis to lock during [member fov]/[member size] adjustments. Can be either [constant KEEP_WIDTH] or [constant KEEP_HEIGHT].",
            "setter": "set_keep_aspect_mode",
            "name": "keep_aspect",
            "getter": "get_keep_aspect_mode",
            "type": "int",
            "enum": "Camera.KeepAspect"
          },
          {
            "default": "0.05",
            "value": "The distance to the near culling boundary for this camera relative to its local Z axis.",
            "setter": "set_znear",
            "name": "near",
            "getter": "get_znear",
            "type": "float"
          },
          {
            "default": "0",
            "value": "The camera's projection mode. In [constant PROJECTION_PERSPECTIVE] mode, objects' Z distance from the camera's local space scales their perceived size.",
            "setter": "set_projection",
            "name": "projection",
            "getter": "get_projection",
            "type": "int",
            "enum": "Camera.Projection"
          },
          {
            "default": "1.0",
            "value": "The camera's size measured as 1/2 the width or height. Only applicable in orthogonal mode. Since [member keep_aspect] locks on axis, [code]size[/code] sets the other axis' size length.",
            "setter": "set_size",
            "name": "size",
            "getter": "get_size",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The vertical (Y) offset of the camera viewport.",
            "setter": "set_v_offset",
            "name": "v_offset",
            "getter": "get_v_offset",
            "type": "float"
          }
        ]
      },
      "inherits": "Spatial",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "true",
              "name": "enable_next",
              "type": "bool",
              "index": "0"
            },
            "name": "clear_current",
            "description": "If this is the current camera, remove it from being current. If [code]enable_next[/code] is [code]true[/code], request to make the next camera current, if any."
          },
          {
            "return": {
              "type": "RID"
            },
            "qualifiers": "const",
            "name": "get_camera_rid",
            "description": "Returns the camera's RID from the [VisualServer]."
          },
          {
            "return": {
              "type": "Transform"
            },
            "qualifiers": "const",
            "name": "get_camera_transform",
            "description": "Gets the camera transform. Subclassed cameras such as [InterpolatedCamera] may provide different transforms than the [Node] transform."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "layer",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_cull_mask_bit",
            "description": "Returns [code]true[/code] if the given [code]layer[/code] in the [member cull_mask] is enabled, [code]false[/code] otherwise."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_frustum",
            "description": "Returns the camera's frustum planes in world space units as an array of [Plane]s in the following order: near, far, left, top, right, bottom. Not to be confused with [member frustum_offset]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "world_point",
              "type": "Vector3",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_position_behind",
            "description": "Returns [code]true[/code] if the given position is behind the camera.\n\t\t\t\t[b]Note:[/b] A position which returns [code]false[/code] may still be outside the camera's field of view."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "make_current",
            "description": "Makes this camera the current camera for the [Viewport] (see class description). If the camera node is outside the scene tree, it will attempt to become current once it's added."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "screen_point",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "project_local_ray_normal",
            "description": "Returns a normal vector from the screen point location directed along the camera. Orthogonal cameras are normalized. Perspective cameras account for perspective, screen width/height, etc."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": [
              {
                "name": "screen_point",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "z_depth",
                "type": "float",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "project_position",
            "description": "Returns the 3D point in world space that maps to the given 2D coordinate in the [Viewport] rectangle on a plane that is the given [code]z_depth[/code] distance into the scene away from the camera."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "screen_point",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "project_ray_normal",
            "description": "Returns a normal vector in world space, that is the result of projecting a point on the [Viewport] rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "screen_point",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "project_ray_origin",
            "description": "Returns a 3D position in world space, that is the result of projecting a point on the [Viewport] rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "layer",
                "type": "int",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_cull_mask_bit",
            "description": "Enables or disables the given [code]layer[/code] in the [member cull_mask]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "size",
                "type": "float",
                "index": "0"
              },
              {
                "name": "offset",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "z_near",
                "type": "float",
                "index": "2"
              },
              {
                "name": "z_far",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "set_frustum",
            "description": "Sets the camera projection to frustum mode (see [constant PROJECTION_FRUSTUM]), by specifying a [code]size[/code], an [code]offset[/code], and the [code]z_near[/code] and [code]z_far[/code] clip planes in world space units."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "size",
                "type": "float",
                "index": "0"
              },
              {
                "name": "z_near",
                "type": "float",
                "index": "1"
              },
              {
                "name": "z_far",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "set_orthogonal",
            "description": "Sets the camera projection to orthogonal mode (see [constant PROJECTION_ORTHOGONAL]), by specifying a [code]size[/code], and the [code]z_near[/code] and [code]z_far[/code] clip planes in world space units. (As a hint, 2D games often use this projection, with values specified in pixels.)"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "fov",
                "type": "float",
                "index": "0"
              },
              {
                "name": "z_near",
                "type": "float",
                "index": "1"
              },
              {
                "name": "z_far",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "set_perspective",
            "description": "Sets the camera projection to perspective mode (see [constant PROJECTION_PERSPECTIVE]), by specifying a [code]fov[/code] (field of view) angle in degrees, and the [code]z_near[/code] and [code]z_far[/code] clip planes in world space units."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "world_point",
              "type": "Vector3",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "unproject_position",
            "description": "Returns the 2D coordinate in the [Viewport] rectangle that maps to the given 3D point in world space.\n\t\t\t\t[b]Note:[/b] When using this to position GUI elements over a 3D viewport, use [method is_position_behind] to prevent them from appearing if the 3D point is behind the camera:\n\t\t\t\t[codeblock]\n\t\t\t\t# This code block is part of a script that inherits from Spatial.\n\t\t\t\t# `control` is a reference to a node inheriting from Control.\n\t\t\t\tcontrol.visible = not get_viewport().get_camera().is_position_behind(global_transform.origin)\n\t\t\t\tcontrol.rect_position = get_viewport().get_camera().unproject_position(global_transform.origin)\n\t\t\t\t[/codeblock]"
          }
        ]
      },
      "name": "Camera",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "PROJECTION_PERSPECTIVE",
            "enum": "Projection"
          },
          {
            "value": "1",
            "name": "PROJECTION_ORTHOGONAL",
            "enum": "Projection"
          },
          {
            "value": "2",
            "name": "PROJECTION_FRUSTUM",
            "enum": "Projection"
          },
          {
            "value": "0",
            "name": "KEEP_WIDTH",
            "enum": "KeepAspect"
          },
          {
            "value": "1",
            "name": "KEEP_HEIGHT",
            "enum": "KeepAspect"
          },
          {
            "value": "0",
            "name": "DOPPLER_TRACKING_DISABLED",
            "enum": "DopplerTracking"
          },
          {
            "value": "1",
            "name": "DOPPLER_TRACKING_IDLE_STEP",
            "enum": "DopplerTracking"
          },
          {
            "value": "2",
            "name": "DOPPLER_TRACKING_PHYSICS_STEP",
            "enum": "DopplerTracking"
          }
        ]
      },
      "brief_description": "Camera node, displays from a point of view.",
      "description": "Camera is a special node that displays what is visible from its current location. Cameras register themselves in the nearest [Viewport] node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the camera will register in the global viewport. In other words, a camera just provides 3D display capabilities to a [Viewport], and, without one, a scene registered in that [Viewport] (or higher viewports) can't be displayed."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0",
            "value": "The manner in which a material's rendering is applied to underlying textures.",
            "setter": "set_blend_mode",
            "name": "blend_mode",
            "getter": "get_blend_mode",
            "type": "int",
            "enum": "CanvasItemMaterial.BlendMode"
          },
          {
            "default": "0",
            "value": "The manner in which material reacts to lighting.",
            "setter": "set_light_mode",
            "name": "light_mode",
            "getter": "get_light_mode",
            "type": "int",
            "enum": "CanvasItemMaterial.LightMode"
          },
          {
            "value": "The number of columns in the spritesheet assigned as [Texture] for a [Particles2D] or [CPUParticles2D].\n\t\t\t[b]Note:[/b] This property is only used and visible in the editor if [member particles_animation] is [code]true[/code].",
            "setter": "set_particles_anim_h_frames",
            "name": "particles_anim_h_frames",
            "getter": "get_particles_anim_h_frames",
            "type": "int"
          },
          {
            "value": "If [code]true[/code], the particles animation will loop.\n\t\t\t[b]Note:[/b] This property is only used and visible in the editor if [member particles_animation] is [code]true[/code].",
            "setter": "set_particles_anim_loop",
            "name": "particles_anim_loop",
            "getter": "get_particles_anim_loop",
            "type": "bool"
          },
          {
            "value": "The number of rows in the spritesheet assigned as [Texture] for a [Particles2D] or [CPUParticles2D].\n\t\t\t[b]Note:[/b] This property is only used and visible in the editor if [member particles_animation] is [code]true[/code].",
            "setter": "set_particles_anim_v_frames",
            "name": "particles_anim_v_frames",
            "getter": "get_particles_anim_v_frames",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], enable spritesheet-based animation features when assigned to [Particles2D] and [CPUParticles2D] nodes. The [member ParticlesMaterial.anim_speed] or [member CPUParticles2D.anim_speed] should also be set to a positive value for the animation to play.\n\t\t\tThis property (and other [code]particles_anim_*[/code] properties that depend on it) has no effect on other types of nodes.",
            "setter": "set_particles_animation",
            "name": "particles_animation",
            "getter": "get_particles_animation",
            "type": "bool"
          }
        ]
      },
      "inherits": "Material",
      "methods": {},
      "name": "CanvasItemMaterial",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "BLEND_MODE_MIX",
            "enum": "BlendMode"
          },
          {
            "value": "1",
            "name": "BLEND_MODE_ADD",
            "enum": "BlendMode"
          },
          {
            "value": "2",
            "name": "BLEND_MODE_SUB",
            "enum": "BlendMode"
          },
          {
            "value": "3",
            "name": "BLEND_MODE_MUL",
            "enum": "BlendMode"
          },
          {
            "value": "4",
            "name": "BLEND_MODE_PREMULT_ALPHA",
            "enum": "BlendMode"
          },
          {
            "value": "0",
            "name": "LIGHT_MODE_NORMAL",
            "enum": "LightMode"
          },
          {
            "value": "1",
            "name": "LIGHT_MODE_UNSHADED",
            "enum": "LightMode"
          },
          {
            "value": "2",
            "name": "LIGHT_MODE_LIGHT_ONLY",
            "enum": "LightMode"
          }
        ]
      },
      "brief_description": "A material for [CanvasItem]s.",
      "description": "[CanvasItemMaterial]s provide a means of modifying the textures associated with a CanvasItem. They specialize in describing blend and lighting behaviors for textures. Use a [ShaderMaterial] to more fully customize a material's interactions with a [CanvasItem]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/2d/2d_transforms.html",
            "title": "Viewport and canvas transforms"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/2d/custom_drawing_in_2d.html",
            "title": "Custom drawing in 2D"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/528",
            "title": "Audio Spectrum Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "1",
            "value": "The rendering layers in which this [CanvasItem] responds to [Light2D] nodes.",
            "setter": "set_light_mask",
            "name": "light_mask",
            "getter": "get_light_mask",
            "type": "int"
          },
          {
            "value": "The material applied to textures on this [CanvasItem].",
            "setter": "set_material",
            "name": "material",
            "getter": "get_material",
            "type": "Material"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "The color applied to textures on this [CanvasItem].",
            "setter": "set_modulate",
            "name": "modulate",
            "getter": "get_modulate",
            "type": "Color"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "The color applied to textures on this [CanvasItem]. This is not inherited by children [CanvasItem]s.",
            "setter": "set_self_modulate",
            "name": "self_modulate",
            "getter": "get_self_modulate",
            "type": "Color"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the object draws behind its parent.",
            "setter": "set_draw_behind_parent",
            "name": "show_behind_parent",
            "getter": "is_draw_behind_parent_enabled",
            "type": "bool"
          },
          {
            "value": "If [code]true[/code], the object draws on top of its parent.",
            "setter": "_set_on_top",
            "name": "show_on_top",
            "getter": "_is_on_top",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the parent [CanvasItem]'s [member material] property is used as this one's material.",
            "setter": "set_use_parent_material",
            "name": "use_parent_material",
            "getter": "get_use_parent_material",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], this [CanvasItem] is drawn. The node is only visible if all of its antecedents are visible as well (in other words, [method is_visible_in_tree] must return [code]true[/code]).\n\t\t\t[b]Note:[/b] For controls that inherit [Popup], the correct way to make them visible is to call one of the multiple [code]popup*()[/code] functions instead.",
            "setter": "set_visible",
            "name": "visible",
            "getter": "is_visible",
            "type": "bool"
          }
        ]
      },
      "inherits": "Node",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "qualifiers": "virtual",
            "name": "_draw",
            "description": "Overridable function called by the engine (if defined) to draw the canvas item."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "center",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "radius",
                "type": "float",
                "index": "1"
              },
              {
                "name": "start_angle",
                "type": "float",
                "index": "2"
              },
              {
                "name": "end_angle",
                "type": "float",
                "index": "3"
              },
              {
                "name": "point_count",
                "type": "int",
                "index": "4"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "5"
              },
              {
                "default": "1.0",
                "name": "width",
                "type": "float",
                "index": "6"
              },
              {
                "default": "false",
                "name": "antialiased",
                "type": "bool",
                "index": "7"
              }
            ],
            "name": "draw_arc",
            "description": "Draws an arc between the given angles. The larger the value of [code]point_count[/code], the smoother the curve."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "font",
                "type": "Font",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "char",
                "type": "String",
                "index": "2"
              },
              {
                "name": "next",
                "type": "String",
                "index": "3"
              },
              {
                "default": "Color( 1, 1, 1, 1 )",
                "name": "modulate",
                "type": "Color",
                "index": "4"
              }
            ],
            "name": "draw_char",
            "description": "Draws a string character using a custom font. Returns the advance, depending on the character width and kerning with an optional next character."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "position",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "radius",
                "type": "float",
                "index": "1"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "2"
              }
            ],
            "name": "draw_circle",
            "description": "Draws a colored circle."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "points",
                "type": "PoolVector2Array",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              },
              {
                "default": "PoolVector2Array(  )",
                "name": "uvs",
                "type": "PoolVector2Array",
                "index": "2"
              },
              {
                "default": "null",
                "name": "texture",
                "type": "Texture",
                "index": "3"
              },
              {
                "default": "null",
                "name": "normal_map",
                "type": "Texture",
                "index": "4"
              },
              {
                "default": "false",
                "name": "antialiased",
                "type": "bool",
                "index": "5"
              }
            ],
            "name": "draw_colored_polygon",
            "description": "Draws a colored polygon of any amount of points, convex or concave."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "from",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "to",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "2"
              },
              {
                "default": "1.0",
                "name": "width",
                "type": "float",
                "index": "3"
              },
              {
                "default": "false",
                "name": "antialiased",
                "type": "bool",
                "index": "4"
              }
            ],
            "name": "draw_line",
            "description": "Draws a line from a 2D point to another, with a given color and width. It can be optionally antialiased."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "Mesh",
                "index": "0"
              },
              {
                "name": "texture",
                "type": "Texture",
                "index": "1"
              },
              {
                "default": "null",
                "name": "normal_map",
                "type": "Texture",
                "index": "2"
              },
              {
                "default": "Transform2D( 1, 0, 0, 1, 0, 0 )",
                "name": "transform",
                "type": "Transform2D",
                "index": "3"
              },
              {
                "default": "Color( 1, 1, 1, 1 )",
                "name": "modulate",
                "type": "Color",
                "index": "4"
              }
            ],
            "name": "draw_mesh",
            "description": "Draws a [Mesh] in 2D, using the provided texture. See [MeshInstance2D] for related documentation."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "points",
                "type": "PoolVector2Array",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              },
              {
                "default": "1.0",
                "name": "width",
                "type": "float",
                "index": "2"
              },
              {
                "default": "false",
                "name": "antialiased",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "draw_multiline",
            "description": "Draws multiple, parallel lines with a uniform [code]color[/code].\n\t\t\t\t[b]Note:[/b] [code]width[/code] and [code]antialiased[/code] are currently not implemented and have no effect."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "points",
                "type": "PoolVector2Array",
                "index": "0"
              },
              {
                "name": "colors",
                "type": "PoolColorArray",
                "index": "1"
              },
              {
                "default": "1.0",
                "name": "width",
                "type": "float",
                "index": "2"
              },
              {
                "default": "false",
                "name": "antialiased",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "draw_multiline_colors",
            "description": "Draws multiple, parallel lines with a uniform [code]width[/code] and segment-by-segment coloring. Colors assigned to line segments match by index between [code]points[/code] and [code]colors[/code].\n\t\t\t\t[b]Note:[/b] [code]width[/code] and [code]antialiased[/code] are currently not implemented and have no effect."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "multimesh",
                "type": "MultiMesh",
                "index": "0"
              },
              {
                "name": "texture",
                "type": "Texture",
                "index": "1"
              },
              {
                "default": "null",
                "name": "normal_map",
                "type": "Texture",
                "index": "2"
              }
            ],
            "name": "draw_multimesh",
            "description": "Draws a [MultiMesh] in 2D with the provided texture. See [MultiMeshInstance2D] for related documentation."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "points",
                "type": "PoolVector2Array",
                "index": "0"
              },
              {
                "name": "colors",
                "type": "PoolColorArray",
                "index": "1"
              },
              {
                "default": "PoolVector2Array(  )",
                "name": "uvs",
                "type": "PoolVector2Array",
                "index": "2"
              },
              {
                "default": "null",
                "name": "texture",
                "type": "Texture",
                "index": "3"
              },
              {
                "default": "null",
                "name": "normal_map",
                "type": "Texture",
                "index": "4"
              },
              {
                "default": "false",
                "name": "antialiased",
                "type": "bool",
                "index": "5"
              }
            ],
            "name": "draw_polygon",
            "description": "Draws a polygon of any amount of points, convex or concave."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "points",
                "type": "PoolVector2Array",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              },
              {
                "default": "1.0",
                "name": "width",
                "type": "float",
                "index": "2"
              },
              {
                "default": "false",
                "name": "antialiased",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "draw_polyline",
            "description": "Draws interconnected line segments with a uniform [code]color[/code] and [code]width[/code] and optional antialiasing."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "points",
                "type": "PoolVector2Array",
                "index": "0"
              },
              {
                "name": "colors",
                "type": "PoolColorArray",
                "index": "1"
              },
              {
                "default": "1.0",
                "name": "width",
                "type": "float",
                "index": "2"
              },
              {
                "default": "false",
                "name": "antialiased",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "draw_polyline_colors",
            "description": "Draws interconnected line segments with a uniform [code]width[/code], segment-by-segment coloring, and optional antialiasing. Colors assigned to line segments match by index between [code]points[/code] and [code]colors[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "points",
                "type": "PoolVector2Array",
                "index": "0"
              },
              {
                "name": "colors",
                "type": "PoolColorArray",
                "index": "1"
              },
              {
                "name": "uvs",
                "type": "PoolVector2Array",
                "index": "2"
              },
              {
                "default": "null",
                "name": "texture",
                "type": "Texture",
                "index": "3"
              },
              {
                "default": "1.0",
                "name": "width",
                "type": "float",
                "index": "4"
              },
              {
                "default": "null",
                "name": "normal_map",
                "type": "Texture",
                "index": "5"
              }
            ],
            "name": "draw_primitive",
            "description": "Draws a custom primitive. 1 point for a point, 2 points for a line, 3 points for a triangle and 4 points for a quad."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "rect",
                "type": "Rect2",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              },
              {
                "default": "true",
                "name": "filled",
                "type": "bool",
                "index": "2"
              },
              {
                "default": "1.0",
                "name": "width",
                "type": "float",
                "index": "3"
              },
              {
                "default": "false",
                "name": "antialiased",
                "type": "bool",
                "index": "4"
              }
            ],
            "name": "draw_rect",
            "description": "Draws a rectangle. If [code]filled[/code] is [code]true[/code], the rectangle will be filled with the [code]color[/code] specified. If [code]filled[/code] is [code]false[/code], the rectangle will be drawn as a stroke with the [code]color[/code] and [code]width[/code] specified. If [code]antialiased[/code] is [code]true[/code], the lines will be antialiased.\n\t\t\t\t[b]Note:[/b] [code]width[/code] and [code]antialiased[/code] are only effective if [code]filled[/code] is [code]false[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "position",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "rotation",
                "type": "float",
                "index": "1"
              },
              {
                "name": "scale",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "draw_set_transform",
            "description": "Sets a custom transform for drawing via components. Anything drawn afterwards will be transformed by this."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "xform",
              "type": "Transform2D",
              "index": "0"
            },
            "name": "draw_set_transform_matrix",
            "description": "Sets a custom transform for drawing via matrix. Anything drawn afterwards will be transformed by this."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "font",
                "type": "Font",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "text",
                "type": "String",
                "index": "2"
              },
              {
                "default": "Color( 1, 1, 1, 1 )",
                "name": "modulate",
                "type": "Color",
                "index": "3"
              },
              {
                "default": "-1",
                "name": "clip_w",
                "type": "int",
                "index": "4"
              }
            ],
            "name": "draw_string",
            "description": "Draws [code]text[/code] using the specified [code]font[/code] at the [code]position[/code] (bottom-left corner using the baseline of the font). The text will have its color multiplied by [code]modulate[/code]. If [code]clip_w[/code] is greater than or equal to 0, the text will be clipped if it exceeds the specified width.\n\t\t\t\t[b]Example using the default project font:[/b]\n\t\t\t\t[codeblock]\n\t\t\t\t# If using this method in a script that redraws constantly, move the\n\t\t\t\t# `default_font` declaration to a member variable assigned in `_ready()`\n\t\t\t\t# so the Control is only created once.\n\t\t\t\tvar default_font = Control.new().get_font(\"font\")\n\t\t\t\tdraw_string(default_font, Vector2(64, 64), \"Hello world\")\n\t\t\t\t[/codeblock]\n\t\t\t\tSee also [method Font.draw]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "style_box",
                "type": "StyleBox",
                "index": "0"
              },
              {
                "name": "rect",
                "type": "Rect2",
                "index": "1"
              }
            ],
            "name": "draw_style_box",
            "description": "Draws a styled rectangle."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "texture",
                "type": "Texture",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector2",
                "index": "1"
              },
              {
                "default": "Color( 1, 1, 1, 1 )",
                "name": "modulate",
                "type": "Color",
                "index": "2"
              },
              {
                "default": "null",
                "name": "normal_map",
                "type": "Texture",
                "index": "3"
              }
            ],
            "name": "draw_texture",
            "description": "Draws a texture at a given position."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "texture",
                "type": "Texture",
                "index": "0"
              },
              {
                "name": "rect",
                "type": "Rect2",
                "index": "1"
              },
              {
                "name": "tile",
                "type": "bool",
                "index": "2"
              },
              {
                "default": "Color( 1, 1, 1, 1 )",
                "name": "modulate",
                "type": "Color",
                "index": "3"
              },
              {
                "default": "false",
                "name": "transpose",
                "type": "bool",
                "index": "4"
              },
              {
                "default": "null",
                "name": "normal_map",
                "type": "Texture",
                "index": "5"
              }
            ],
            "name": "draw_texture_rect",
            "description": "Draws a textured rectangle at a given position, optionally modulated by a color. If [code]transpose[/code] is [code]true[/code], the texture will have its X and Y coordinates swapped."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "texture",
                "type": "Texture",
                "index": "0"
              },
              {
                "name": "rect",
                "type": "Rect2",
                "index": "1"
              },
              {
                "name": "src_rect",
                "type": "Rect2",
                "index": "2"
              },
              {
                "default": "Color( 1, 1, 1, 1 )",
                "name": "modulate",
                "type": "Color",
                "index": "3"
              },
              {
                "default": "false",
                "name": "transpose",
                "type": "bool",
                "index": "4"
              },
              {
                "default": "null",
                "name": "normal_map",
                "type": "Texture",
                "index": "5"
              },
              {
                "default": "true",
                "name": "clip_uv",
                "type": "bool",
                "index": "6"
              }
            ],
            "name": "draw_texture_rect_region",
            "description": "Draws a textured rectangle region at a given position, optionally modulated by a color. If [code]transpose[/code] is [code]true[/code], the texture will have its X and Y coordinates swapped."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "force_update_transform",
            "description": "Forces the transform to update. Transform changes in physics are not instant for performance reasons. Transforms are accumulated and then set. Use this if you need an up-to-date transform when doing physics operations."
          },
          {
            "return": {
              "type": "RID"
            },
            "qualifiers": "const",
            "name": "get_canvas",
            "description": "Returns the [RID] of the [World2D] canvas where this item is in."
          },
          {
            "return": {
              "type": "RID"
            },
            "qualifiers": "const",
            "name": "get_canvas_item",
            "description": "Returns the canvas item RID used by [VisualServer] for this item."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "qualifiers": "const",
            "name": "get_canvas_transform",
            "description": "Returns the transform matrix of this item's canvas."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_global_mouse_position",
            "description": "Returns the global position of the mouse."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "qualifiers": "const",
            "name": "get_global_transform",
            "description": "Returns the global transform matrix of this item."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "qualifiers": "const",
            "name": "get_global_transform_with_canvas",
            "description": "Returns the global transform matrix of this item in relation to the canvas."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_local_mouse_position",
            "description": "Returns the mouse position relative to this item's position."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "qualifiers": "const",
            "name": "get_transform",
            "description": "Returns the transform matrix of this item."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "qualifiers": "const",
            "name": "get_viewport_rect",
            "description": "Returns the viewport's boundaries as a [Rect2]."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "qualifiers": "const",
            "name": "get_viewport_transform",
            "description": "Returns this item's transform in relation to the viewport."
          },
          {
            "return": {
              "type": "World2D"
            },
            "qualifiers": "const",
            "name": "get_world_2d",
            "description": "Returns the [World2D] where this item is in."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "hide",
            "description": "Hide the [CanvasItem] if it's currently visible."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_local_transform_notification_enabled",
            "description": "Returns [code]true[/code] if local transform notifications are communicated to children."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_set_as_toplevel",
            "description": "Returns [code]true[/code] if the node is set as top-level. See [method set_as_toplevel]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_transform_notification_enabled",
            "description": "Returns [code]true[/code] if global transform notifications are communicated to children."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_visible_in_tree",
            "description": "Returns [code]true[/code] if the node is present in the [SceneTree], its [member visible] property is [code]true[/code] and all its antecedents are also visible. If any antecedent is hidden, this node will not be visible in the scene tree."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "screen_point",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "make_canvas_position_local",
            "description": "Assigns [code]screen_point[/code] as this node's new local transform."
          },
          {
            "return": {
              "type": "InputEvent"
            },
            "argument": {
              "name": "event",
              "type": "InputEvent",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "make_input_local",
            "description": "Transformations issued by [code]event[/code]'s inputs are applied in local space instead of global space."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enable",
              "type": "bool",
              "index": "0"
            },
            "name": "set_as_toplevel",
            "description": "If [code]enable[/code] is [code]true[/code], the node won't inherit its transform from parent canvas items."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enable",
              "type": "bool",
              "index": "0"
            },
            "name": "set_notify_local_transform",
            "description": "If [code]enable[/code] is [code]true[/code], children will be updated with local transform data."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enable",
              "type": "bool",
              "index": "0"
            },
            "name": "set_notify_transform",
            "description": "If [code]enable[/code] is [code]true[/code], children will be updated with global transform data."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "show",
            "description": "Show the [CanvasItem] if it's currently hidden. For controls that inherit [Popup], the correct way to make them visible is to call one of the multiple [code]popup*()[/code] functions instead."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "update",
            "description": "Queue the [CanvasItem] for update. [constant NOTIFICATION_DRAW] will be called on idle time to request redraw."
          }
        ]
      },
      "name": "CanvasItem",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "draw",
            "description": "Emitted when the [CanvasItem] must redraw. This can only be connected realtime, as deferred will not allow drawing."
          },
          {
            "name": "hide",
            "description": "Emitted when becoming hidden."
          },
          {
            "name": "item_rect_changed",
            "description": "Emitted when the item's [Rect2] boundaries (position or size) have changed, or when an action is taking place that may have impacted these boundaries (e.g. changing [member Sprite.texture])."
          },
          {
            "name": "visibility_changed",
            "description": "Emitted when the visibility (hidden/visible) changes."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "BLEND_MODE_MIX",
            "enum": "BlendMode"
          },
          {
            "value": "1",
            "name": "BLEND_MODE_ADD",
            "enum": "BlendMode"
          },
          {
            "value": "2",
            "name": "BLEND_MODE_SUB",
            "enum": "BlendMode"
          },
          {
            "value": "3",
            "name": "BLEND_MODE_MUL",
            "enum": "BlendMode"
          },
          {
            "value": "4",
            "name": "BLEND_MODE_PREMULT_ALPHA",
            "enum": "BlendMode"
          },
          {
            "value": "5",
            "name": "BLEND_MODE_DISABLED",
            "enum": "BlendMode"
          },
          {
            "value": "2000",
            "name": "NOTIFICATION_TRANSFORM_CHANGED"
          },
          {
            "value": "30",
            "name": "NOTIFICATION_DRAW"
          },
          {
            "value": "31",
            "name": "NOTIFICATION_VISIBILITY_CHANGED"
          },
          {
            "value": "32",
            "name": "NOTIFICATION_ENTER_CANVAS"
          },
          {
            "value": "33",
            "name": "NOTIFICATION_EXIT_CANVAS"
          }
        ]
      },
      "brief_description": "Base class of anything 2D.",
      "description": "Base class of anything 2D. Canvas items are laid out in a tree; children inherit and extend their parent's transform. [CanvasItem] is extended by [Control] for anything GUI-related, and by [Node2D] for anything related to the 2D engine.\n\t\tAny [CanvasItem] can draw. For this, [method update] must be called, then [constant NOTIFICATION_DRAW] will be received on idle time to request redraw. Because of this, canvas items don't need to be redrawn on every frame, improving the performance significantly. Several functions for drawing on the [CanvasItem] are provided (see [code]draw_*[/code] functions). However, they can only be used inside the [method Object._notification], signal or [method _draw] virtual functions.\n\t\tCanvas items are drawn in tree order. By default, children are on top of their parents so a root [CanvasItem] will be drawn behind everything. This behavior can be changed on a per-item basis.\n\t\tA [CanvasItem] can also be hidden, which will also hide its children. It provides many ways to change parameters such as modulation (for itself and its children) and self modulation (only for itself), as well as its blend mode.\n\t\tUltimately, a transform notification can be requested, which will notify the node that its global position changed in case the parent tree changed.\n\t\t[b]Note:[/b] Unless otherwise specified, all methods that have angle parameters must have angles specified as [i]radians[/i]. To convert degrees to radians, use [method @GDScript.deg2rad]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/2d/2d_transforms.html",
            "title": "Viewport and canvas transforms"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/2d/canvas_layers.html",
            "title": "Canvas layers"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/515",
            "title": "2D Dodge The Creeps Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "value": "The custom [Viewport] node assigned to the [CanvasLayer]. If [code]null[/code], uses the default viewport instead.",
            "setter": "set_custom_viewport",
            "name": "custom_viewport",
            "getter": "get_custom_viewport",
            "type": "Node"
          },
          {
            "default": "false",
            "value": "Sets the layer to follow the viewport in order to simulate a pseudo 3D effect.",
            "setter": "set_follow_viewport",
            "name": "follow_viewport_enable",
            "getter": "is_following_viewport",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "Scales the layer when using [member follow_viewport_enable]. Layers moving into the foreground should have increasing scales, while layers moving into the background should have decreasing scales.",
            "setter": "set_follow_viewport_scale",
            "name": "follow_viewport_scale",
            "getter": "get_follow_viewport_scale",
            "type": "float"
          },
          {
            "default": "1",
            "value": "Layer index for draw order. Lower values are drawn first.",
            "setter": "set_layer",
            "name": "layer",
            "getter": "get_layer",
            "type": "int"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The layer's base offset.",
            "setter": "set_offset",
            "name": "offset",
            "getter": "get_offset",
            "type": "Vector2"
          },
          {
            "default": "0.0",
            "value": "The layer's rotation in radians.",
            "setter": "set_rotation",
            "name": "rotation",
            "getter": "get_rotation",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The layer's rotation in degrees.",
            "setter": "set_rotation_degrees",
            "name": "rotation_degrees",
            "getter": "get_rotation_degrees",
            "type": "float"
          },
          {
            "default": "Vector2( 1, 1 )",
            "value": "The layer's scale.",
            "setter": "set_scale",
            "name": "scale",
            "getter": "get_scale",
            "type": "Vector2"
          },
          {
            "default": "Transform2D( 1, 0, 0, 1, 0, 0 )",
            "value": "The layer's transform.",
            "setter": "set_transform",
            "name": "transform",
            "getter": "get_transform",
            "type": "Transform2D"
          }
        ]
      },
      "inherits": "Node",
      "methods": {
        "method": {
          "return": {
            "type": "RID"
          },
          "qualifiers": "const",
          "name": "get_canvas",
          "description": "Returns the RID of the canvas used by this layer."
        }
      },
      "name": "CanvasLayer",
      "version": "3.3",
      "constants": {},
      "brief_description": "Canvas drawing layer.",
      "description": "Canvas drawing layer. [CanvasItem] nodes that are direct or indirect children of a [CanvasLayer] will be drawn in that layer. The layer is a numeric index that defines the draw order. The default 2D scene renders with index 0, so a [CanvasLayer] with index -1 will be drawn below, and one with index 1 will be drawn above. This is very useful for HUDs (in layer 1+ or above), or backgrounds (in layer -1 or below)."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "Color( 1, 1, 1, 1 )",
          "value": "The tint color to apply.",
          "setter": "set_color",
          "name": "color",
          "getter": "get_color",
          "type": "Color"
        }
      },
      "inherits": "Node2D",
      "methods": {},
      "name": "CanvasModulate",
      "version": "3.3",
      "constants": {},
      "brief_description": "Tint the entire canvas.",
      "description": "[CanvasModulate] tints the canvas elements using its assigned [member color]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "1.0",
            "value": "Height of the middle cylindrical part of the capsule (without the hemispherical ends).\n\t\t\t[b]Note:[/b] The capsule's total height is equal to [member mid_height] + 2 * [member radius].",
            "setter": "set_mid_height",
            "name": "mid_height",
            "getter": "get_mid_height",
            "type": "float"
          },
          {
            "default": "64",
            "value": "Number of radial segments on the capsule mesh.",
            "setter": "set_radial_segments",
            "name": "radial_segments",
            "getter": "get_radial_segments",
            "type": "int"
          },
          {
            "default": "1.0",
            "value": "Radius of the capsule mesh.",
            "setter": "set_radius",
            "name": "radius",
            "getter": "get_radius",
            "type": "float"
          },
          {
            "default": "8",
            "value": "Number of rings along the height of the capsule.",
            "setter": "set_rings",
            "name": "rings",
            "getter": "get_rings",
            "type": "int"
          }
        ]
      },
      "inherits": "PrimitiveMesh",
      "methods": {},
      "name": "CapsuleMesh",
      "version": "3.3",
      "constants": {},
      "brief_description": "Class representing a capsule-shaped [PrimitiveMesh].",
      "description": "Class representing a capsule-shaped [PrimitiveMesh]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "20.0",
            "value": "The capsule's height.",
            "setter": "set_height",
            "name": "height",
            "getter": "get_height",
            "type": "float"
          },
          {
            "default": "10.0",
            "value": "The capsule's radius.",
            "setter": "set_radius",
            "name": "radius",
            "getter": "get_radius",
            "type": "float"
          }
        ]
      },
      "inherits": "Shape2D",
      "methods": {},
      "name": "CapsuleShape2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Capsule shape for 2D collisions.",
      "description": "Capsule shape for 2D collisions."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/675",
          "title": "3D Physics Tests Demo"
        }
      },
      "members": {
        "member": [
          {
            "default": "1.0",
            "value": "The capsule's height.",
            "setter": "set_height",
            "name": "height",
            "getter": "get_height",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The capsule's radius.",
            "setter": "set_radius",
            "name": "radius",
            "getter": "get_radius",
            "type": "float"
          }
        ]
      },
      "inherits": "Shape",
      "methods": {},
      "name": "CapsuleShape",
      "version": "3.3",
      "constants": {},
      "brief_description": "Capsule shape for collisions.",
      "description": "Capsule shape for collisions."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "false",
          "value": "If [code]true[/code], centers children relative to the [CenterContainer]'s top left corner.",
          "setter": "set_use_top_left",
          "name": "use_top_left",
          "getter": "is_using_top_left",
          "type": "bool"
        }
      },
      "inherits": "Container",
      "methods": {},
      "name": "CenterContainer",
      "version": "3.3",
      "constants": {},
      "brief_description": "Keeps children controls centered.",
      "description": "CenterContainer keeps children controls centered. This container keeps all children to their minimum size, in the center."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          "https://docs.godotengine.org/en/3.3/tutorials/gui/bbcode_in_richtextlabel.html",
          "https://github.com/Eoin-ONeill-Yokai/Godot-Rich-Text-Effect-Test-Project"
        ]
      },
      "members": {
        "member": [
          {
            "default": "0",
            "value": "The index of the current character (starting from 0). Setting this property won't affect drawing.",
            "setter": "set_absolute_index",
            "name": "absolute_index",
            "getter": "get_absolute_index",
            "type": "int"
          },
          {
            "default": "0",
            "value": "The Unicode codepoint the character will use. This only affects non-whitespace characters. [method @GDScript.ord] can be useful here. For example, the following will replace all characters with asterisks:\n\t\t\t[codeblock]\n\t\t\t# `char_fx` is the CharFXTransform parameter from `_process_custom_fx()`.\n\t\t\t# See the RichTextEffect documentation for details.\n\t\t\tchar_fx.character = ord(\"*\")\n\t\t\t[/codeblock]",
            "setter": "set_character",
            "name": "character",
            "getter": "get_character",
            "type": "int"
          },
          {
            "default": "Color( 0, 0, 0, 1 )",
            "value": "The color the character will be drawn with.",
            "setter": "set_color",
            "name": "color",
            "getter": "get_color",
            "type": "Color"
          },
          {
            "default": "0.0",
            "value": "The time elapsed since the [RichTextLabel] was added to the scene tree (in seconds). Time stops when the project is paused, unless the [RichTextLabel]'s [member Node.pause_mode] is set to [constant Node.PAUSE_MODE_PROCESS].\n\t\t\t[b]Note:[/b] Time still passes while the [RichTextLabel] is hidden.",
            "setter": "set_elapsed_time",
            "name": "elapsed_time",
            "getter": "get_elapsed_time",
            "type": "float"
          },
          {
            "default": "{}",
            "value": "Contains the arguments passed in the opening BBCode tag. By default, arguments are strings; if their contents match a type such as [bool], [int] or [float], they will be converted automatically. Color codes in the form [code]#rrggbb[/code] or [code]#rgb[/code] will be converted to an opaque [Color]. String arguments may not contain spaces, even if they're quoted. If present, quotes will also be present in the final string.\n\t\t\tFor example, the opening BBCode tag [code][example foo=hello bar=true baz=42 color=#ffffff][/code] will map to the following [Dictionary]:\n\t\t\t[codeblock]\n\t\t\t{\"foo\": \"hello\", \"bar\": true, \"baz\": 42, \"color\": Color(1, 1, 1, 1)}\n\t\t\t[/codeblock]",
            "setter": "set_environment",
            "name": "env",
            "getter": "get_environment",
            "type": "Dictionary"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The position offset the character will be drawn with (in pixels).",
            "setter": "set_offset",
            "name": "offset",
            "getter": "get_offset",
            "type": "Vector2"
          },
          {
            "default": "0",
            "value": "The index of the current character (starting from 0). Setting this property won't affect drawing.",
            "setter": "set_relative_index",
            "name": "relative_index",
            "getter": "get_relative_index",
            "type": "int"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the character will be drawn. If [code]false[/code], the character will be hidden. Characters around hidden characters will reflow to take the space of hidden characters. If this is not desired, set their [member color] to [code]Color(1, 1, 1, 0)[/code] instead.",
            "setter": "set_visibility",
            "name": "visible",
            "getter": "is_visible",
            "type": "bool"
          }
        ]
      },
      "inherits": "Reference",
      "methods": {},
      "name": "CharFXTransform",
      "version": "3.3",
      "constants": {},
      "brief_description": "Controls how an individual character will be displayed in a [RichTextEffect].",
      "description": "By setting various properties on this object, you can control how individual characters will be displayed in a [RichTextEffect]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "default": "0",
            "value": "The vertical offset used when rendering the check icons (in pixels).",
            "name": "check_vadjust",
            "type": "int"
          },
          {
            "value": "The check icon to display when the [CheckBox] is checked.",
            "name": "checked",
            "type": "Texture"
          },
          {
            "value": "The [StyleBox] to display as a background when the [CheckBox] is disabled.",
            "name": "disabled",
            "type": "StyleBox"
          },
          {
            "value": "The [StyleBox] to display as a background when the [CheckBox] is focused.",
            "name": "focus",
            "type": "StyleBox"
          },
          {
            "value": "The [Font] to use for the [CheckBox] text.",
            "name": "font",
            "type": "Font"
          },
          {
            "default": "Color( 0.88, 0.88, 0.88, 1 )",
            "value": "The [CheckBox] text's font color.",
            "name": "font_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.9, 0.9, 0.9, 0.2 )",
            "value": "The [CheckBox] text's font color when it's disabled.",
            "name": "font_color_disabled",
            "type": "Color"
          },
          {
            "default": "Color( 0.94, 0.94, 0.94, 1 )",
            "value": "The [CheckBox] text's font color when it's hovered.",
            "name": "font_color_hover",
            "type": "Color"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "The [CheckBox] text's font color when it's hovered and pressed.",
            "name": "font_color_hover_pressed",
            "type": "Color"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "The [CheckBox] text's font color when it's pressed.",
            "name": "font_color_pressed",
            "type": "Color"
          },
          {
            "value": "The [StyleBox] to display as a background when the [CheckBox] is hovered.",
            "name": "hover",
            "type": "StyleBox"
          },
          {
            "value": "The [StyleBox] to display as a background when the [CheckBox] is hovered and pressed.",
            "name": "hover_pressed",
            "type": "StyleBox"
          },
          {
            "default": "4",
            "value": "The separation between the check icon and the text (in pixels).",
            "name": "hseparation",
            "type": "int"
          },
          {
            "value": "The [StyleBox] to display as a background.",
            "name": "normal",
            "type": "StyleBox"
          },
          {
            "value": "The [StyleBox] to display as a background when the [CheckBox] is pressed.",
            "name": "pressed",
            "type": "StyleBox"
          },
          {
            "value": "If the [CheckBox] is configured as a radio button, the icon to display when the [CheckBox] is checked.",
            "name": "radio_checked",
            "type": "Texture"
          },
          {
            "value": "If the [CheckBox] is configured as a radio button, the icon to display when the [CheckBox] is unchecked.",
            "name": "radio_unchecked",
            "type": "Texture"
          },
          {
            "value": "The check icon to display when the [CheckBox] is unchecked.",
            "name": "unchecked",
            "type": "Texture"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "0",
            "setter": "set_text_align",
            "override": "true",
            "name": "align",
            "getter": "get_text_align",
            "type": "int",
            "enum": "Button.TextAlign"
          },
          {
            "default": "true",
            "setter": "set_toggle_mode",
            "override": "true",
            "name": "toggle_mode",
            "getter": "is_toggle_mode",
            "type": "bool"
          }
        ]
      },
      "inherits": "Button",
      "methods": {},
      "name": "CheckBox",
      "version": "3.3",
      "constants": {},
      "brief_description": "Binary choice user interface widget. See also [CheckButton].",
      "description": "A checkbox allows the user to make a binary choice (choosing only one of two possible options). It's similar to [CheckButton] in functionality, but it has a different appearance. To follow established UX patterns, it's recommended to use CheckBox when toggling it has [b]no[/b] immediate effect on something. For instance, it should be used when toggling it will only do something once a confirmation button is pressed.\n\t\tSee also [BaseButton] which contains common properties and methods associated with this node."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "default": "0",
            "value": "The vertical offset used when rendering the toggle icons (in pixels).",
            "name": "check_vadjust",
            "type": "int"
          },
          {
            "value": "The [StyleBox] to display as a background when the [CheckButton] is disabled.",
            "name": "disabled",
            "type": "StyleBox"
          },
          {
            "value": "The [StyleBox] to display as a background when the [CheckButton] is focused.",
            "name": "focus",
            "type": "StyleBox"
          },
          {
            "value": "The [Font] to use for the [CheckButton] text.",
            "name": "font",
            "type": "Font"
          },
          {
            "default": "Color( 0.88, 0.88, 0.88, 1 )",
            "value": "The [CheckButton] text's font color.",
            "name": "font_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.9, 0.9, 0.9, 0.2 )",
            "value": "The [CheckButton] text's font color when it's disabled.",
            "name": "font_color_disabled",
            "type": "Color"
          },
          {
            "default": "Color( 0.94, 0.94, 0.94, 1 )",
            "value": "The [CheckButton] text's font color when it's hovered.",
            "name": "font_color_hover",
            "type": "Color"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "The [CheckButton] text's font color when it's hovered and pressed.",
            "name": "font_color_hover_pressed",
            "type": "Color"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "The [CheckButton] text's font color when it's pressed.",
            "name": "font_color_pressed",
            "type": "Color"
          },
          {
            "value": "The [StyleBox] to display as a background when the [CheckButton] is hovered.",
            "name": "hover",
            "type": "StyleBox"
          },
          {
            "value": "The [StyleBox] to display as a background when the [CheckButton] is hovered and pressed.",
            "name": "hover_pressed",
            "type": "StyleBox"
          },
          {
            "default": "4",
            "value": "The separation between the toggle icon and the text (in pixels).",
            "name": "hseparation",
            "type": "int"
          },
          {
            "value": "The [StyleBox] to display as a background.",
            "name": "normal",
            "type": "StyleBox"
          },
          {
            "value": "The icon to display when the [CheckButton] is unchecked.",
            "name": "off",
            "type": "Texture"
          },
          {
            "value": "The icon to display when the [CheckButton] is unchecked and disabled.",
            "name": "off_disabled",
            "type": "Texture"
          },
          {
            "value": "The icon to display when the [CheckButton] is checked.",
            "name": "on",
            "type": "Texture"
          },
          {
            "value": "The icon to display when the [CheckButton] is checked and disabled.",
            "name": "on_disabled",
            "type": "Texture"
          },
          {
            "value": "The [StyleBox] to display as a background when the [CheckButton] is pressed.",
            "name": "pressed",
            "type": "StyleBox"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "0",
            "setter": "set_text_align",
            "override": "true",
            "name": "align",
            "getter": "get_text_align",
            "type": "int",
            "enum": "Button.TextAlign"
          },
          {
            "default": "true",
            "setter": "set_toggle_mode",
            "override": "true",
            "name": "toggle_mode",
            "getter": "is_toggle_mode",
            "type": "bool"
          }
        ]
      },
      "inherits": "Button",
      "methods": {},
      "name": "CheckButton",
      "version": "3.3",
      "constants": {},
      "brief_description": "Checkable button. See also [CheckBox].",
      "description": "CheckButton is a toggle button displayed as a check field. It's similar to [CheckBox] in functionality, but it has a different appearance. To follow established UX patterns, it's recommended to use CheckButton when toggling it has an [b]immediate[/b] effect on something. For instance, it should be used if toggling it enables/disables a setting without requiring the user to press a confirmation button.\n\t\tSee also [BaseButton] which contains common properties and methods associated with this node."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "10.0",
          "value": "The circle's radius.",
          "setter": "set_radius",
          "name": "radius",
          "getter": "get_radius",
          "type": "float"
        }
      },
      "inherits": "Shape2D",
      "methods": {},
      "name": "CircleShape2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Circular shape for 2D collisions.",
      "description": "Circular shape for 2D collisions. This shape is useful for modeling balls or small characters and its collision detection with everything else is very fast."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "class",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "can_instance",
            "description": "Returns [code]true[/code] if you can instance objects from the specified [code]class[/code], [code]false[/code] in other case."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "class",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "class_exists",
            "description": "Returns whether the specified [code]class[/code] is available or not."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "class",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "class_get_category",
            "description": "Returns a category associated with the class for use in documentation and the Asset Library. Debug mode required."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "class",
                "type": "String",
                "index": "0"
              },
              {
                "name": "name",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "class_get_integer_constant",
            "description": "Returns the value of the integer constant [code]name[/code] of [code]class[/code] or its ancestry. Always returns 0 when the constant could not be found."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "argument": [
              {
                "name": "class",
                "type": "String",
                "index": "0"
              },
              {
                "default": "false",
                "name": "no_inheritance",
                "type": "bool",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "class_get_integer_constant_list",
            "description": "Returns an array with the names all the integer constants of [code]class[/code] or its ancestry."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "class",
                "type": "String",
                "index": "0"
              },
              {
                "default": "false",
                "name": "no_inheritance",
                "type": "bool",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "class_get_method_list",
            "description": "Returns an array with all the methods of [code]class[/code] or its ancestry if [code]no_inheritance[/code] is [code]false[/code]. Every element of the array is a [Dictionary] with the following keys: [code]args[/code], [code]default_args[/code], [code]flags[/code], [code]id[/code], [code]name[/code], [code]return: (class_name, hint, hint_string, name, type, usage)[/code].\n\t\t\t\t[b]Note:[/b] In exported release builds the debug info is not available, so the returned dictionaries will contain only method names."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "property",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "class_get_property",
            "description": "Returns the value of [code]property[/code] of [code]class[/code] or its ancestry."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "class",
                "type": "String",
                "index": "0"
              },
              {
                "default": "false",
                "name": "no_inheritance",
                "type": "bool",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "class_get_property_list",
            "description": "Returns an array with all the properties of [code]class[/code] or its ancestry if [code]no_inheritance[/code] is [code]false[/code]."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "argument": [
              {
                "name": "class",
                "type": "String",
                "index": "0"
              },
              {
                "name": "signal",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "class_get_signal",
            "description": "Returns the [code]signal[/code] data of [code]class[/code] or its ancestry. The returned value is a [Dictionary] with the following keys: [code]args[/code], [code]default_args[/code], [code]flags[/code], [code]id[/code], [code]name[/code], [code]return: (class_name, hint, hint_string, name, type, usage)[/code]."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "class",
                "type": "String",
                "index": "0"
              },
              {
                "default": "false",
                "name": "no_inheritance",
                "type": "bool",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "class_get_signal_list",
            "description": "Returns an array with all the signals of [code]class[/code] or its ancestry if [code]no_inheritance[/code] is [code]false[/code]. Every element of the array is a [Dictionary] as described in [method class_get_signal]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "class",
                "type": "String",
                "index": "0"
              },
              {
                "name": "name",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "class_has_integer_constant",
            "description": "Returns whether [code]class[/code] or its ancestry has an integer constant called [code]name[/code] or not."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "class",
                "type": "String",
                "index": "0"
              },
              {
                "name": "method",
                "type": "String",
                "index": "1"
              },
              {
                "default": "false",
                "name": "no_inheritance",
                "type": "bool",
                "index": "2"
              }
            ],
            "qualifiers": "const",
            "name": "class_has_method",
            "description": "Returns whether [code]class[/code] (or its ancestry if [code]no_inheritance[/code] is [code]false[/code]) has a method called [code]method[/code] or not."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "class",
                "type": "String",
                "index": "0"
              },
              {
                "name": "signal",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "class_has_signal",
            "description": "Returns whether [code]class[/code] or its ancestry has a signal called [code]signal[/code] or not."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "property",
                "type": "String",
                "index": "1"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "2"
              }
            ],
            "qualifiers": "const",
            "name": "class_set_property",
            "description": "Sets [code]property[/code] value of [code]class[/code] to [code]value[/code]."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "qualifiers": "const",
            "name": "get_class_list",
            "description": "Returns the names of all the classes available."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "argument": {
              "name": "class",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_inheriters_from_class",
            "description": "Returns the names of all the classes that directly or indirectly inherit from [code]class[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "class",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_parent_class",
            "description": "Returns the parent class of [code]class[/code]."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "class",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "instance",
            "description": "Creates an instance of [code]class[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "class",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_class_enabled",
            "description": "Returns whether this [code]class[/code] is enabled or not."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "class",
                "type": "String",
                "index": "0"
              },
              {
                "name": "inherits",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "is_parent_class",
            "description": "Returns whether [code]inherits[/code] is an ancestor of [code]class[/code] or not."
          }
        ]
      },
      "name": "ClassDB",
      "version": "3.3",
      "constants": {},
      "brief_description": "Class information repository.",
      "description": "Provides access to metadata stored for every available class."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the camera stops on contact with [Area]s.",
            "setter": "set_clip_to_areas",
            "name": "clip_to_areas",
            "getter": "is_clip_to_areas_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the camera stops on contact with [PhysicsBody]s.",
            "setter": "set_clip_to_bodies",
            "name": "clip_to_bodies",
            "getter": "is_clip_to_bodies_enabled",
            "type": "bool"
          },
          {
            "default": "1",
            "value": "The camera's collision mask. Only objects in at least one collision layer matching the mask will be detected. See [url=https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.",
            "setter": "set_collision_mask",
            "name": "collision_mask",
            "getter": "get_collision_mask",
            "type": "int"
          },
          {
            "default": "0.0",
            "value": "The camera's collision margin. The camera can't get closer than this distance to a colliding object.",
            "setter": "set_margin",
            "name": "margin",
            "getter": "get_margin",
            "type": "float"
          },
          {
            "default": "0",
            "value": "The camera's process callback. See [enum ProcessMode].",
            "setter": "set_process_mode",
            "name": "process_mode",
            "getter": "get_process_mode",
            "type": "int",
            "enum": "ClippedCamera.ProcessMode"
          }
        ]
      },
      "inherits": "Camera",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "node",
              "type": "Object",
              "index": "0"
            },
            "name": "add_exception",
            "description": "Adds a collision exception so the camera does not collide with the specified node."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "rid",
              "type": "RID",
              "index": "0"
            },
            "name": "add_exception_rid",
            "description": "Adds a collision exception so the camera does not collide with the specified [RID]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_exceptions",
            "description": "Removes all collision exceptions."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_clip_offset",
            "description": "Returns the distance the camera has been offset due to a collision."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "bit",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_collision_mask_bit",
            "description": "Returns [code]true[/code] if the specified bit index is on.\n\t\t\t\t[b]Note:[/b] Bit indices range from 0-19."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "node",
              "type": "Object",
              "index": "0"
            },
            "name": "remove_exception",
            "description": "Removes a collision exception with the specified node."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "rid",
              "type": "RID",
              "index": "0"
            },
            "name": "remove_exception_rid",
            "description": "Removes a collision exception with the specified [RID]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bit",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_collision_mask_bit",
            "description": "Sets the specified bit index to the [code]value[/code].\n\t\t\t\t[b]Note:[/b] Bit indices range from 0-19."
          }
        ]
      },
      "name": "ClippedCamera",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "CLIP_PROCESS_PHYSICS",
            "enum": "ProcessMode"
          },
          {
            "value": "1",
            "name": "CLIP_PROCESS_IDLE",
            "enum": "ProcessMode"
          }
        ]
      },
      "brief_description": "A [Camera] that includes collision.",
      "description": "This node extends [Camera] to add collisions with [Area] and/or [PhysicsBody] nodes. The camera cannot move through colliding objects."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "true",
          "value": "If [code]true[/code], this object is pickable. A pickable object can detect the mouse pointer entering/leaving, and if the mouse is inside it, report input events. Requires at least one [code]collision_layer[/code] bit to be set.",
          "setter": "set_pickable",
          "name": "input_pickable",
          "getter": "is_pickable",
          "type": "bool"
        }
      },
      "inherits": "Node2D",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "event",
                "type": "InputEvent",
                "index": "1"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "2"
              }
            ],
            "qualifiers": "virtual",
            "name": "_input_event",
            "description": "Accepts unhandled [InputEvent]s. Requires [member input_pickable] to be [code]true[/code]. [code]shape_idx[/code] is the child index of the clicked [Shape2D]. Connect to the [code]input_event[/code] signal to easily pick up these events."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "owner",
              "type": "Object",
              "index": "0"
            },
            "name": "create_shape_owner",
            "description": "Creates a new shape owner for the given object. Returns [code]owner_id[/code] of the new owner for future reference."
          },
          {
            "return": {
              "type": "RID"
            },
            "qualifiers": "const",
            "name": "get_rid",
            "description": "Returns the object's [RID]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "owner_id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_shape_owner_one_way_collision_margin",
            "description": "Returns the [code]one_way_collision_margin[/code] of the shape owner identified by given [code]owner_id[/code]."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "get_shape_owners",
            "description": "Returns an [Array] of [code]owner_id[/code] identifiers. You can use these ids in other methods that take [code]owner_id[/code] as an argument."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "owner_id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_shape_owner_disabled",
            "description": "If [code]true[/code], the shape owner and its shapes are disabled."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "owner_id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_shape_owner_one_way_collision_enabled",
            "description": "Returns [code]true[/code] if collisions for the shape owner originating from this [CollisionObject2D] will not be reported to collided with [CollisionObject2D]s."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "owner_id",
              "type": "int",
              "index": "0"
            },
            "name": "remove_shape_owner",
            "description": "Removes the given shape owner."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "shape_index",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "shape_find_owner",
            "description": "Returns the [code]owner_id[/code] of the given shape."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "owner_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shape",
                "type": "Shape2D",
                "index": "1"
              }
            ],
            "name": "shape_owner_add_shape",
            "description": "Adds a [Shape2D] to the shape owner."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "owner_id",
              "type": "int",
              "index": "0"
            },
            "name": "shape_owner_clear_shapes",
            "description": "Removes all shapes from the shape owner."
          },
          {
            "return": {
              "type": "Object"
            },
            "argument": {
              "name": "owner_id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "shape_owner_get_owner",
            "description": "Returns the parent object of the given shape owner."
          },
          {
            "return": {
              "type": "Shape2D"
            },
            "argument": [
              {
                "name": "owner_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shape_id",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "shape_owner_get_shape",
            "description": "Returns the [Shape2D] with the given id from the given shape owner."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "owner_id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "shape_owner_get_shape_count",
            "description": "Returns the number of shapes the given shape owner contains."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "owner_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shape_id",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "shape_owner_get_shape_index",
            "description": "Returns the child index of the [Shape2D] with the given id from the given shape owner."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "argument": {
              "name": "owner_id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "shape_owner_get_transform",
            "description": "Returns the shape owner's [Transform2D]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "owner_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shape_id",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "shape_owner_remove_shape",
            "description": "Removes a shape from the given shape owner."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "owner_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "disabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "shape_owner_set_disabled",
            "description": "If [code]true[/code], disables the given shape owner."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "owner_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "shape_owner_set_one_way_collision",
            "description": "If [code]enable[/code] is [code]true[/code], collisions for the shape owner originating from this [CollisionObject2D] will not be reported to collided with [CollisionObject2D]s."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "owner_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "margin",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "shape_owner_set_one_way_collision_margin",
            "description": "Sets the [code]one_way_collision_margin[/code] of the shape owner identified by given [code]owner_id[/code] to [code]margin[/code] pixels."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "owner_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "transform",
                "type": "Transform2D",
                "index": "1"
              }
            ],
            "name": "shape_owner_set_transform",
            "description": "Sets the [Transform2D] of the given shape owner."
          }
        ]
      },
      "name": "CollisionObject2D",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": [
              {
                "name": "viewport",
                "type": "Node",
                "index": "0"
              },
              {
                "name": "event",
                "type": "InputEvent",
                "index": "1"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "input_event",
            "description": "Emitted when an input event occurs. Requires [member input_pickable] to be [code]true[/code] and at least one [code]collision_layer[/code] bit to be set. See [method _input_event] for details."
          },
          {
            "name": "mouse_entered",
            "description": "Emitted when the mouse pointer enters any of this object's shapes. Requires [member input_pickable] to be [code]true[/code] and at least one [code]collision_layer[/code] bit to be set."
          },
          {
            "name": "mouse_exited",
            "description": "Emitted when the mouse pointer exits all this object's shapes. Requires [member input_pickable] to be [code]true[/code] and at least one [code]collision_layer[/code] bit to be set."
          }
        ]
      },
      "constants": {},
      "brief_description": "Base node for 2D collision objects.",
      "description": "CollisionObject2D is the base class for 2D physics objects. It can hold any number of 2D collision [Shape2D]s. Each shape must be assigned to a [i]shape owner[/i]. The CollisionObject2D can have any number of shape owners. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the [code]shape_owner_*[/code] methods."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the [CollisionObject] will continue to receive input events as the mouse is dragged across its shapes.",
            "setter": "set_capture_input_on_drag",
            "name": "input_capture_on_drag",
            "getter": "get_capture_input_on_drag",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the [CollisionObject]'s shapes will respond to [RayCast]s.",
            "setter": "set_ray_pickable",
            "name": "input_ray_pickable",
            "getter": "is_ray_pickable",
            "type": "bool"
          }
        ]
      },
      "inherits": "Spatial",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "camera",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "event",
                "type": "InputEvent",
                "index": "1"
              },
              {
                "name": "click_position",
                "type": "Vector3",
                "index": "2"
              },
              {
                "name": "click_normal",
                "type": "Vector3",
                "index": "3"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "4"
              }
            ],
            "qualifiers": "virtual",
            "name": "_input_event",
            "description": "Accepts unhandled [InputEvent]s. [code]click_position[/code] is the clicked location in world space and [code]click_normal[/code] is the normal vector extending from the clicked surface of the [Shape] at [code]shape_idx[/code]. Connect to the [code]input_event[/code] signal to easily pick up these events."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "owner",
              "type": "Object",
              "index": "0"
            },
            "name": "create_shape_owner",
            "description": "Creates a new shape owner for the given object. Returns [code]owner_id[/code] of the new owner for future reference."
          },
          {
            "return": {
              "type": "RID"
            },
            "qualifiers": "const",
            "name": "get_rid",
            "description": "Returns the object's [RID]."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "get_shape_owners",
            "description": "Returns an [Array] of [code]owner_id[/code] identifiers. You can use these ids in other methods that take [code]owner_id[/code] as an argument."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "owner_id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_shape_owner_disabled",
            "description": "If [code]true[/code], the shape owner and its shapes are disabled."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "owner_id",
              "type": "int",
              "index": "0"
            },
            "name": "remove_shape_owner",
            "description": "Removes the given shape owner."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "shape_index",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "shape_find_owner",
            "description": "Returns the [code]owner_id[/code] of the given shape."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "owner_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shape",
                "type": "Shape",
                "index": "1"
              }
            ],
            "name": "shape_owner_add_shape",
            "description": "Adds a [Shape] to the shape owner."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "owner_id",
              "type": "int",
              "index": "0"
            },
            "name": "shape_owner_clear_shapes",
            "description": "Removes all shapes from the shape owner."
          },
          {
            "return": {
              "type": "Object"
            },
            "argument": {
              "name": "owner_id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "shape_owner_get_owner",
            "description": "Returns the parent object of the given shape owner."
          },
          {
            "return": {
              "type": "Shape"
            },
            "argument": [
              {
                "name": "owner_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shape_id",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "shape_owner_get_shape",
            "description": "Returns the [Shape] with the given id from the given shape owner."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "owner_id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "shape_owner_get_shape_count",
            "description": "Returns the number of shapes the given shape owner contains."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "owner_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shape_id",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "shape_owner_get_shape_index",
            "description": "Returns the child index of the [Shape] with the given id from the given shape owner."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": {
              "name": "owner_id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "shape_owner_get_transform",
            "description": "Returns the shape owner's [Transform]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "owner_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shape_id",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "shape_owner_remove_shape",
            "description": "Removes a shape from the given shape owner."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "owner_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "disabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "shape_owner_set_disabled",
            "description": "If [code]true[/code], disables the given shape owner."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "owner_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "transform",
                "type": "Transform",
                "index": "1"
              }
            ],
            "name": "shape_owner_set_transform",
            "description": "Sets the [Transform] of the given shape owner."
          }
        ]
      },
      "name": "CollisionObject",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": [
              {
                "name": "camera",
                "type": "Node",
                "index": "0"
              },
              {
                "name": "event",
                "type": "InputEvent",
                "index": "1"
              },
              {
                "name": "click_position",
                "type": "Vector3",
                "index": "2"
              },
              {
                "name": "click_normal",
                "type": "Vector3",
                "index": "3"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "4"
              }
            ],
            "name": "input_event",
            "description": "Emitted when [method _input_event] receives an event. See its description for details."
          },
          {
            "name": "mouse_entered",
            "description": "Emitted when the mouse pointer enters any of this object's shapes."
          },
          {
            "name": "mouse_exited",
            "description": "Emitted when the mouse pointer exits all this object's shapes."
          }
        ]
      },
      "constants": {},
      "brief_description": "Base node for collision objects.",
      "description": "CollisionObject is the base class for physics objects. It can hold any number of collision [Shape]s. Each shape must be assigned to a [i]shape owner[/i]. The CollisionObject can have any number of shape owners. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the [code]shape_owner_*[/code] methods."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0",
            "value": "Collision build mode. Use one of the [enum BuildMode] constants.",
            "setter": "set_build_mode",
            "name": "build_mode",
            "getter": "get_build_mode",
            "type": "int",
            "enum": "CollisionPolygon2D.BuildMode"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], no collisions will be detected.",
            "setter": "set_disabled",
            "name": "disabled",
            "getter": "is_disabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], only edges that face up, relative to [CollisionPolygon2D]'s rotation, will collide with other objects.",
            "setter": "set_one_way_collision",
            "name": "one_way_collision",
            "getter": "is_one_way_collision_enabled",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "The margin used for one-way collision (in pixels). Higher values will make the shape thicker, and work better for colliders that enter the polygon at a high velocity.",
            "setter": "set_one_way_collision_margin",
            "name": "one_way_collision_margin",
            "getter": "get_one_way_collision_margin",
            "type": "float"
          },
          {
            "default": "PoolVector2Array(  )",
            "value": "The polygon's list of vertices. The final point will be connected to the first. The returned value is a clone of the [PoolVector2Array], not a reference.",
            "setter": "set_polygon",
            "name": "polygon",
            "getter": "get_polygon",
            "type": "PoolVector2Array"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {},
      "name": "CollisionPolygon2D",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "BUILD_SOLIDS",
            "enum": "BuildMode"
          },
          {
            "value": "1",
            "name": "BUILD_SEGMENTS",
            "enum": "BuildMode"
          }
        ]
      },
      "brief_description": "Defines a 2D collision polygon.",
      "description": "Provides a 2D collision polygon to a [CollisionObject2D] parent. Polygons can be drawn in the editor or specified by a list of vertices."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "1.0",
            "value": "Length that the resulting collision extends in either direction perpendicular to its polygon.",
            "setter": "set_depth",
            "name": "depth",
            "getter": "get_depth",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], no collision will be produced.",
            "setter": "set_disabled",
            "name": "disabled",
            "getter": "is_disabled",
            "type": "bool"
          },
          {
            "default": "0.04",
            "value": "The collision margin for the generated [Shape]. See [member Shape.margin] for more details.",
            "setter": "set_margin",
            "name": "margin",
            "getter": "get_margin",
            "type": "float"
          },
          {
            "default": "PoolVector2Array(  )",
            "value": "Array of vertices which define the polygon.\n\t\t\t[b]Note:[/b] The returned value is a copy of the original. Methods which mutate the size or properties of the return value will not impact the original polygon. To change properties of the polygon, assign it to a temporary variable and make changes before reassigning the [code]polygon[/code] member.",
            "setter": "set_polygon",
            "name": "polygon",
            "getter": "get_polygon",
            "type": "PoolVector2Array"
          }
        ]
      },
      "inherits": "Spatial",
      "methods": {},
      "name": "CollisionPolygon",
      "version": "3.3",
      "constants": {},
      "brief_description": "Editor-only class for defining a collision polygon in 3D space.",
      "description": "Allows editing a collision polygon's vertices on a selected plane. Can also set a depth perpendicular to that plane. This class is only available in the editor. It will not appear in the scene tree at run-time. Creates a [Shape] for gameplay. Properties modified during gameplay will have no effect."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html",
            "title": "Physics introduction"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/515",
            "title": "2D Dodge The Creeps Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/121",
            "title": "2D Pong Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/113",
            "title": "2D Kinematic Character Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "A disabled collision shape has no effect in the world. This property should be changed with [method Object.set_deferred].",
            "setter": "set_disabled",
            "name": "disabled",
            "getter": "is_disabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Sets whether this collision shape should only detect collision on one side (top or bottom).",
            "setter": "set_one_way_collision",
            "name": "one_way_collision",
            "getter": "is_one_way_collision_enabled",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "The margin used for one-way collision (in pixels). Higher values will make the shape thicker, and work better for colliders that enter the shape at a high velocity.",
            "setter": "set_one_way_collision_margin",
            "name": "one_way_collision_margin",
            "getter": "get_one_way_collision_margin",
            "type": "float"
          },
          {
            "value": "The actual shape owned by this collision shape.",
            "setter": "set_shape",
            "name": "shape",
            "getter": "get_shape",
            "type": "Shape2D"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {},
      "name": "CollisionShape2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Node that represents collision shape data in 2D space.",
      "description": "Editor facility for creating and editing collision shapes in 2D space. You can use this node to represent all sorts of collision shapes, for example, add this to an [Area2D] to give it a detection shape, or add it to a [PhysicsBody2D] to create a solid object. [b]IMPORTANT[/b]: this is an Editor-only helper to create shapes, use [method CollisionObject2D.shape_owner_get_shape] to get the actual shape."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html",
            "title": "Physics introduction"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/126",
            "title": "3D Kinematic Character Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/125",
            "title": "3D Platformer Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "A disabled collision shape has no effect in the world.",
            "setter": "set_disabled",
            "name": "disabled",
            "getter": "is_disabled",
            "type": "bool"
          },
          {
            "value": "The actual shape owned by this collision shape.",
            "setter": "set_shape",
            "name": "shape",
            "getter": "get_shape",
            "type": "Shape"
          }
        ]
      },
      "inherits": "Spatial",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "name": "make_convex_from_brothers",
            "description": "Sets the collision shape's shape to the addition of all its convexed [MeshInstance] siblings geometry."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "resource",
              "type": "Resource",
              "index": "0"
            },
            "name": "resource_changed",
            "description": "If this method exists within a script it will be called whenever the shape resource has been modified."
          }
        ]
      },
      "name": "CollisionShape",
      "version": "3.3",
      "constants": {},
      "brief_description": "Node that represents collision shape data in 3D space.",
      "description": "Editor facility for creating and editing collision shapes in 3D space. You can use this node to represent all sorts of collision shapes, for example, add this to an [Area] to give it a detection shape, or add it to a [PhysicsBody] to create a solid object. [b]IMPORTANT[/b]: this is an Editor-only helper to create shapes, use [method CollisionObject.shape_owner_get_shape] to get the actual shape."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://godotengine.org/asset-library/asset/133",
            "title": "GUI Drag And Drop Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/517",
            "title": "2D GD Paint Demo"
          }
        ]
      },
      "theme_items": {
        "theme_item": [
          {
            "value": "The background of the color preview rect on the button.",
            "name": "bg",
            "type": "Texture"
          },
          {
            "value": "[StyleBox] used when the [ColorPickerButton] is disabled.",
            "name": "disabled",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] used when the [ColorPickerButton] is focused. It is displayed over the current [StyleBox], so using [StyleBoxEmpty] will just disable the focus visual effect.",
            "name": "focus",
            "type": "StyleBox"
          },
          {
            "value": "[Font] of the [ColorPickerButton]'s text.",
            "name": "font",
            "type": "Font"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "Default text [Color] of the [ColorPickerButton].",
            "name": "font_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.9, 0.9, 0.9, 0.3 )",
            "value": "Text [Color] used when the [ColorPickerButton] is disabled.",
            "name": "font_color_disabled",
            "type": "Color"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "Text [Color] used when the [ColorPickerButton] is being hovered.",
            "name": "font_color_hover",
            "type": "Color"
          },
          {
            "default": "Color( 0.8, 0.8, 0.8, 1 )",
            "value": "Text [Color] used when the [ColorPickerButton] is being pressed.",
            "name": "font_color_pressed",
            "type": "Color"
          },
          {
            "value": "[StyleBox] used when the [ColorPickerButton] is being hovered.",
            "name": "hover",
            "type": "StyleBox"
          },
          {
            "default": "2",
            "value": "The horizontal space between [ColorPickerButton]'s icon and text.",
            "name": "hseparation",
            "type": "int"
          },
          {
            "value": "Default [StyleBox] for the [ColorPickerButton].",
            "name": "normal",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] used when the [ColorPickerButton] is being pressed.",
            "name": "pressed",
            "type": "StyleBox"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "Color( 0, 0, 0, 1 )",
            "value": "The currently selected color.",
            "setter": "set_pick_color",
            "name": "color",
            "getter": "get_pick_color",
            "type": "Color"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the alpha channel in the displayed [ColorPicker] will be visible.",
            "setter": "set_edit_alpha",
            "name": "edit_alpha",
            "getter": "is_editing_alpha",
            "type": "bool"
          },
          {
            "default": "true",
            "setter": "set_toggle_mode",
            "override": "true",
            "name": "toggle_mode",
            "getter": "is_toggle_mode",
            "type": "bool"
          }
        ]
      },
      "inherits": "Button",
      "methods": {
        "method": [
          {
            "return": {
              "type": "ColorPicker"
            },
            "name": "get_picker",
            "description": "Returns the [ColorPicker] that this node toggles."
          },
          {
            "return": {
              "type": "PopupPanel"
            },
            "name": "get_popup",
            "description": "Returns the control's [PopupPanel] which allows you to connect to popup signals. This allows you to handle events when the ColorPicker is shown or hidden."
          }
        ]
      },
      "name": "ColorPickerButton",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "color",
              "type": "Color",
              "index": "0"
            },
            "name": "color_changed",
            "description": "Emitted when the color changes."
          },
          {
            "name": "picker_created",
            "description": "Emitted when the [ColorPicker] is created (the button is pressed for the first time)."
          },
          {
            "name": "popup_closed",
            "description": "Emitted when the [ColorPicker] is closed."
          }
        ]
      },
      "constants": {},
      "brief_description": "Button that pops out a [ColorPicker].",
      "description": "Encapsulates a [ColorPicker] making it accessible by pressing a button. Pressing the button will toggle the [ColorPicker] visibility.\n\t\tSee also [BaseButton] which contains common properties and methods associated with this node."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/146",
          "title": "Tween Demo"
        }
      },
      "theme_items": {
        "theme_item": [
          {
            "value": "The icon for the \"Add Preset\" button.",
            "name": "add_preset",
            "type": "Texture"
          },
          {
            "value": "Custom texture for the hue selection slider on the right.",
            "name": "color_hue",
            "type": "Texture"
          },
          {
            "name": "color_sample",
            "type": "Texture"
          },
          {
            "default": "30",
            "value": "The width of the hue selection slider.",
            "name": "h_width",
            "type": "int"
          },
          {
            "default": "10",
            "name": "label_width",
            "type": "int"
          },
          {
            "default": "4",
            "value": "The margin around the [ColorPicker].",
            "name": "margin",
            "type": "int"
          },
          {
            "value": "The indicator used to signalize that the color value is outside the 0-1 range.",
            "name": "overbright_indicator",
            "type": "Texture"
          },
          {
            "name": "preset_bg",
            "type": "Texture"
          },
          {
            "value": "The icon for the screen color picker button.",
            "name": "screen_picker",
            "type": "Texture"
          },
          {
            "default": "256",
            "value": "The height of the saturation-value selection box.",
            "name": "sv_height",
            "type": "int"
          },
          {
            "default": "256",
            "value": "The width of the saturation-value selection box.",
            "name": "sv_width",
            "type": "int"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "The currently selected color.",
            "setter": "set_pick_color",
            "name": "color",
            "getter": "get_pick_color",
            "type": "Color"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the color will apply only after the user releases the mouse button, otherwise it will apply immediately even in mouse motion event (which can cause performance issues).",
            "setter": "set_deferred_mode",
            "name": "deferred_mode",
            "getter": "is_deferred_mode",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], shows an alpha channel slider (transparency).",
            "setter": "set_edit_alpha",
            "name": "edit_alpha",
            "getter": "is_editing_alpha",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], allows editing the color with Hue/Saturation/Value sliders.\n\t\t\t[b]Note:[/b] Cannot be enabled if raw mode is on.",
            "setter": "set_hsv_mode",
            "name": "hsv_mode",
            "getter": "is_hsv_mode",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the \"add preset\" button is enabled.",
            "setter": "set_presets_enabled",
            "name": "presets_enabled",
            "getter": "are_presets_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], saved color presets are visible.",
            "setter": "set_presets_visible",
            "name": "presets_visible",
            "getter": "are_presets_visible",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], allows the color R, G, B component values to go beyond 1.0, which can be used for certain special operations that require it (like tinting without darkening or rendering sprites in HDR).\n\t\t\t[b]Note:[/b] Cannot be enabled if HSV mode is on.",
            "setter": "set_raw_mode",
            "name": "raw_mode",
            "getter": "is_raw_mode",
            "type": "bool"
          }
        ]
      },
      "inherits": "BoxContainer",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "color",
              "type": "Color",
              "index": "0"
            },
            "name": "add_preset",
            "description": "Adds the given color to a list of color presets. The presets are displayed in the color picker and the user will be able to select them.\n\t\t\t\t[b]Note:[/b] the presets list is only for [i]this[/i] color picker."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "color",
              "type": "Color",
              "index": "0"
            },
            "name": "erase_preset",
            "description": "Removes the given color from the list of color presets of this color picker."
          },
          {
            "return": {
              "type": "PoolColorArray"
            },
            "qualifiers": "const",
            "name": "get_presets",
            "description": "Returns the list of colors in the presets of the color picker."
          }
        ]
      },
      "name": "ColorPicker",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "color",
              "type": "Color",
              "index": "0"
            },
            "name": "color_changed",
            "description": "Emitted when the color is changed."
          },
          {
            "argument": {
              "name": "color",
              "type": "Color",
              "index": "0"
            },
            "name": "preset_added",
            "description": "Emitted when a preset is added."
          },
          {
            "argument": {
              "name": "color",
              "type": "Color",
              "index": "0"
            },
            "name": "preset_removed",
            "description": "Emitted when a preset is removed."
          }
        ]
      },
      "constants": {},
      "brief_description": "Color picker control.",
      "description": "[Control] node displaying a color picker widget. It's useful for selecting a color from an RGB/RGBA colorspace."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/515",
          "title": "2D Dodge The Creeps Demo"
        }
      },
      "members": {
        "member": {
          "default": "Color( 1, 1, 1, 1 )",
          "value": "The fill color.\n\t\t\t[codeblock]\n\t\t\t$ColorRect.color = Color(1, 0, 0, 1) # Set ColorRect's color to red.\n\t\t\t[/codeblock]",
          "setter": "set_frame_color",
          "name": "color",
          "getter": "get_frame_color",
          "type": "Color"
        }
      },
      "inherits": "Control",
      "methods": {},
      "name": "ColorRect",
      "version": "3.3",
      "constants": {},
      "brief_description": "Colored rectangle.",
      "description": "Displays a rectangle filled with a solid [member color]. If you need to display the border alone, consider using [ReferenceRect] instead."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://godotengine.org/asset-library/asset/517",
            "title": "2D GD Paint Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/146",
            "title": "Tween Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/133",
            "title": "GUI Drag And Drop Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "1.0",
            "value": "The color's alpha (transparency) component, typically on the range of 0 to 1.",
            "setter": "",
            "name": "a",
            "getter": "",
            "type": "float"
          },
          {
            "default": "255",
            "value": "Wrapper for [member a] that uses the range 0 to 255 instead of 0 to 1.",
            "setter": "",
            "name": "a8",
            "getter": "",
            "type": "int"
          },
          {
            "default": "0.0",
            "value": "The color's blue component, typically on the range of 0 to 1.",
            "setter": "",
            "name": "b",
            "getter": "",
            "type": "float"
          },
          {
            "default": "0",
            "value": "Wrapper for [member b] that uses the range 0 to 255 instead of 0 to 1.",
            "setter": "",
            "name": "b8",
            "getter": "",
            "type": "int"
          },
          {
            "default": "0.0",
            "value": "The color's green component, typically on the range of 0 to 1.",
            "setter": "",
            "name": "g",
            "getter": "",
            "type": "float"
          },
          {
            "default": "0",
            "value": "Wrapper for [member g] that uses the range 0 to 255 instead of 0 to 1.",
            "setter": "",
            "name": "g8",
            "getter": "",
            "type": "int"
          },
          {
            "default": "0.0",
            "value": "The HSV hue of this color, on the range 0 to 1.",
            "setter": "",
            "name": "h",
            "getter": "",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The color's red component, typically on the range of 0 to 1.",
            "setter": "",
            "name": "r",
            "getter": "",
            "type": "float"
          },
          {
            "default": "0",
            "value": "Wrapper for [member r] that uses the range 0 to 255 instead of 0 to 1.",
            "setter": "",
            "name": "r8",
            "getter": "",
            "type": "int"
          },
          {
            "default": "0.0",
            "value": "The HSV saturation of this color, on the range 0 to 1.",
            "setter": "",
            "name": "s",
            "getter": "",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The HSV value (brightness) of this color, on the range 0 to 1.",
            "setter": "",
            "name": "v",
            "getter": "",
            "type": "float"
          }
        ]
      },
      "methods": {
        "method": [
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "from",
              "type": "String",
              "index": "0"
            },
            "name": "Color",
            "description": "Constructs a color from an HTML hexadecimal color string in ARGB or RGB format. See also [method @GDScript.ColorN].\n\t\t\t\t[codeblock]\n\t\t\t\t# Each of the following creates the same color RGBA(178, 217, 10, 255).\n\t\t\t\tvar c1 = Color(\"#ffb2d90a\") # ARGB format with \"#\".\n\t\t\t\tvar c2 = Color(\"ffb2d90a\") # ARGB format.\n\t\t\t\tvar c3 = Color(\"#b2d90a\") # RGB format with \"#\".\n\t\t\t\tvar c4 = Color(\"b2d90a\") # RGB format.\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "from",
              "type": "int",
              "index": "0"
            },
            "name": "Color",
            "description": "Constructs a color from a 32-bit integer in RGBA format (each byte represents a color channel).\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(274) # Similar to Color(0.0, 0.0, 0.004, 0.07)\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": [
              {
                "name": "r",
                "type": "float",
                "index": "0"
              },
              {
                "name": "g",
                "type": "float",
                "index": "1"
              },
              {
                "name": "b",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "Color",
            "description": "Constructs a color from RGB values, typically between 0 and 1. Alpha will be 1.\n\t\t\t\t[codeblock]\n\t\t\t\tvar color = Color(0.2, 1.0, 0.7) # Similar to Color8(51, 255, 178, 255)\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": [
              {
                "name": "r",
                "type": "float",
                "index": "0"
              },
              {
                "name": "g",
                "type": "float",
                "index": "1"
              },
              {
                "name": "b",
                "type": "float",
                "index": "2"
              },
              {
                "name": "a",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "Color",
            "description": "Constructs a color from RGBA values, typically between 0 and 1.\n\t\t\t\t[codeblock]\n\t\t\t\tvar color = Color(0.2, 1.0, 0.7, 0.8) # Similar to Color8(51, 255, 178, 204)\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "over",
              "type": "Color",
              "index": "0"
            },
            "name": "blend",
            "description": "Returns a new color resulting from blending this color over another. If the color is opaque, the result is also opaque. The second color may have a range of alpha values.\n\t\t\t\t[codeblock]\n\t\t\t\tvar bg = Color(0.0, 1.0, 0.0, 0.5) # Green with alpha of 50%\n\t\t\t\tvar fg = Color(1.0, 0.0, 0.0, 0.5) # Red with alpha of 50%\n\t\t\t\tvar blended_color = bg.blend(fg) # Brown with alpha of 75%\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "Color"
            },
            "name": "contrasted",
            "description": "Returns the most contrasting color.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(0.3, 0.4, 0.9)\n\t\t\t\tvar contrasted_color = c.contrasted() # Equivalent to RGBA(204, 229, 102, 255)\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "amount",
              "type": "float",
              "index": "0"
            },
            "name": "darkened",
            "description": "Returns a new color resulting from making this color darker by the specified percentage (ratio from 0 to 1).\n\t\t\t\t[codeblock]\n\t\t\t\tvar green = Color(0.0, 1.0, 0.0)\n\t\t\t\tvar darkgreen = green.darkened(0.2) # 20% darker than regular green\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": [
              {
                "name": "h",
                "type": "float",
                "index": "0"
              },
              {
                "name": "s",
                "type": "float",
                "index": "1"
              },
              {
                "name": "v",
                "type": "float",
                "index": "2"
              },
              {
                "default": "1.0",
                "name": "a",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "from_hsv",
            "description": "Constructs a color from an HSV profile. [code]h[/code], [code]s[/code], and [code]v[/code] are values between 0 and 1.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color.from_hsv(0.58, 0.5, 0.79, 0.8) # Equivalent to HSV(210, 50, 79, 0.8) or Color8(100, 151, 201, 0.8)\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "float"
            },
            "name": "gray",
            "description": "Returns the color's grayscale representation.\n\t\t\t\tThe gray value is calculated as [code](r + g + b) / 3[/code].\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(0.2, 0.45, 0.82)\n\t\t\t\tvar gray = c.gray() # A value of 0.466667\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "Color"
            },
            "name": "inverted",
            "description": "Returns the inverted color [code](1 - r, 1 - g, 1 - b, a)[/code].\n\t\t\t\t[codeblock]\n\t\t\t\tvar color = Color(0.3, 0.4, 0.9)\n\t\t\t\tvar inverted_color = color.inverted() # Equivalent to Color(0.7, 0.6, 0.1)\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "color",
              "type": "Color",
              "index": "0"
            },
            "name": "is_equal_approx",
            "description": "Returns [code]true[/code] if this color and [code]color[/code] are approximately equal, by running [method @GDScript.is_equal_approx] on each component."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "amount",
              "type": "float",
              "index": "0"
            },
            "name": "lightened",
            "description": "Returns a new color resulting from making this color lighter by the specified percentage (ratio from 0 to 1).\n\t\t\t\t[codeblock]\n\t\t\t\tvar green = Color(0.0, 1.0, 0.0)\n\t\t\t\tvar lightgreen = green.lightened(0.2) # 20% lighter than regular green\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": [
              {
                "name": "to",
                "type": "Color",
                "index": "0"
              },
              {
                "name": "weight",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "linear_interpolate",
            "description": "Returns the linear interpolation with another color. The interpolation factor [code]weight[/code] is between 0 and 1.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c1 = Color(1.0, 0.0, 0.0)\n\t\t\t\tvar c2 = Color(0.0, 1.0, 0.0)\n\t\t\t\tvar li_c = c1.linear_interpolate(c2, 0.5) # Equivalent to Color(0.5, 0.5, 0.0)\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "int"
            },
            "name": "to_abgr32",
            "description": "Returns the color converted to a 32-bit integer in ABGR format (each byte represents a color channel). ABGR is the reversed version of the default format.\n\t\t\t\t[codeblock]\n\t\t\t\tvar color = Color(1, 0.5, 0.2)\n\t\t\t\tprint(color.to_abgr32()) # Prints 4281565439\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "int"
            },
            "name": "to_abgr64",
            "description": "Returns the color converted to a 64-bit integer in ABGR format (each word represents a color channel). ABGR is the reversed version of the default format.\n\t\t\t\t[codeblock]\n\t\t\t\tvar color = Color(1, 0.5, 0.2)\n\t\t\t\tprint(color.to_abgr64()) # Prints -225178692812801\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "int"
            },
            "name": "to_argb32",
            "description": "Returns the color converted to a 32-bit integer in ARGB format (each byte represents a color channel). ARGB is more compatible with DirectX.\n\t\t\t\t[codeblock]\n\t\t\t\tvar color = Color(1, 0.5, 0.2)\n\t\t\t\tprint(color.to_argb32()) # Prints 4294934323\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "int"
            },
            "name": "to_argb64",
            "description": "Returns the color converted to a 64-bit integer in ARGB format (each word represents a color channel). ARGB is more compatible with DirectX.\n\t\t\t\t[codeblock]\n\t\t\t\tvar color = Color(1, 0.5, 0.2)\n\t\t\t\tprint(color.to_argb64()) # Prints -2147470541\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "default": "true",
              "name": "with_alpha",
              "type": "bool",
              "index": "0"
            },
            "name": "to_html",
            "description": "Returns the color's HTML hexadecimal color string in ARGB format (ex: [code]ff34f822[/code]).\n\t\t\t\tSetting [code]with_alpha[/code] to [code]false[/code] excludes alpha from the hexadecimal string.\n\t\t\t\t[codeblock]\n\t\t\t\tvar c = Color(1, 1, 1, 0.5)\n\t\t\t\tvar s1 = c.to_html() # Returns \"7fffffff\"\n\t\t\t\tvar s2 = c.to_html(false) # Returns \"ffffff\"\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "int"
            },
            "name": "to_rgba32",
            "description": "Returns the color converted to a 32-bit integer in RGBA format (each byte represents a color channel). RGBA is Godot's default format.\n\t\t\t\t[codeblock]\n\t\t\t\tvar color = Color(1, 0.5, 0.2)\n\t\t\t\tprint(color.to_rgba32()) # Prints 4286526463\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "int"
            },
            "name": "to_rgba64",
            "description": "Returns the color converted to a 64-bit integer in RGBA format (each word represents a color channel). RGBA is Godot's default format.\n\t\t\t\t[codeblock]\n\t\t\t\tvar color = Color(1, 0.5, 0.2)\n\t\t\t\tprint(color.to_rgba64()) # Prints -140736629309441\n\t\t\t\t[/codeblock]"
          }
        ]
      },
      "name": "Color",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "Color( 0.94, 0.97, 1, 1 )",
            "name": "aliceblue"
          },
          {
            "value": "Color( 0.98, 0.92, 0.84, 1 )",
            "name": "antiquewhite"
          },
          {
            "value": "Color( 0, 1, 1, 1 )",
            "name": "aqua"
          },
          {
            "value": "Color( 0.5, 1, 0.83, 1 )",
            "name": "aquamarine"
          },
          {
            "value": "Color( 0.94, 1, 1, 1 )",
            "name": "azure"
          },
          {
            "value": "Color( 0.96, 0.96, 0.86, 1 )",
            "name": "beige"
          },
          {
            "value": "Color( 1, 0.89, 0.77, 1 )",
            "name": "bisque"
          },
          {
            "value": "Color( 0, 0, 0, 1 )",
            "name": "black"
          },
          {
            "value": "Color( 1, 0.92, 0.8, 1 )",
            "name": "blanchedalmond"
          },
          {
            "value": "Color( 0, 0, 1, 1 )",
            "name": "blue"
          },
          {
            "value": "Color( 0.54, 0.17, 0.89, 1 )",
            "name": "blueviolet"
          },
          {
            "value": "Color( 0.65, 0.16, 0.16, 1 )",
            "name": "brown"
          },
          {
            "value": "Color( 0.87, 0.72, 0.53, 1 )",
            "name": "burlywood"
          },
          {
            "value": "Color( 0.37, 0.62, 0.63, 1 )",
            "name": "cadetblue"
          },
          {
            "value": "Color( 0.5, 1, 0, 1 )",
            "name": "chartreuse"
          },
          {
            "value": "Color( 0.82, 0.41, 0.12, 1 )",
            "name": "chocolate"
          },
          {
            "value": "Color( 1, 0.5, 0.31, 1 )",
            "name": "coral"
          },
          {
            "value": "Color( 0.39, 0.58, 0.93, 1 )",
            "name": "cornflower"
          },
          {
            "value": "Color( 1, 0.97, 0.86, 1 )",
            "name": "cornsilk"
          },
          {
            "value": "Color( 0.86, 0.08, 0.24, 1 )",
            "name": "crimson"
          },
          {
            "value": "Color( 0, 1, 1, 1 )",
            "name": "cyan"
          },
          {
            "value": "Color( 0, 0, 0.55, 1 )",
            "name": "darkblue"
          },
          {
            "value": "Color( 0, 0.55, 0.55, 1 )",
            "name": "darkcyan"
          },
          {
            "value": "Color( 0.72, 0.53, 0.04, 1 )",
            "name": "darkgoldenrod"
          },
          {
            "value": "Color( 0.66, 0.66, 0.66, 1 )",
            "name": "darkgray"
          },
          {
            "value": "Color( 0, 0.39, 0, 1 )",
            "name": "darkgreen"
          },
          {
            "value": "Color( 0.74, 0.72, 0.42, 1 )",
            "name": "darkkhaki"
          },
          {
            "value": "Color( 0.55, 0, 0.55, 1 )",
            "name": "darkmagenta"
          },
          {
            "value": "Color( 0.33, 0.42, 0.18, 1 )",
            "name": "darkolivegreen"
          },
          {
            "value": "Color( 1, 0.55, 0, 1 )",
            "name": "darkorange"
          },
          {
            "value": "Color( 0.6, 0.2, 0.8, 1 )",
            "name": "darkorchid"
          },
          {
            "value": "Color( 0.55, 0, 0, 1 )",
            "name": "darkred"
          },
          {
            "value": "Color( 0.91, 0.59, 0.48, 1 )",
            "name": "darksalmon"
          },
          {
            "value": "Color( 0.56, 0.74, 0.56, 1 )",
            "name": "darkseagreen"
          },
          {
            "value": "Color( 0.28, 0.24, 0.55, 1 )",
            "name": "darkslateblue"
          },
          {
            "value": "Color( 0.18, 0.31, 0.31, 1 )",
            "name": "darkslategray"
          },
          {
            "value": "Color( 0, 0.81, 0.82, 1 )",
            "name": "darkturquoise"
          },
          {
            "value": "Color( 0.58, 0, 0.83, 1 )",
            "name": "darkviolet"
          },
          {
            "value": "Color( 1, 0.08, 0.58, 1 )",
            "name": "deeppink"
          },
          {
            "value": "Color( 0, 0.75, 1, 1 )",
            "name": "deepskyblue"
          },
          {
            "value": "Color( 0.41, 0.41, 0.41, 1 )",
            "name": "dimgray"
          },
          {
            "value": "Color( 0.12, 0.56, 1, 1 )",
            "name": "dodgerblue"
          },
          {
            "value": "Color( 0.7, 0.13, 0.13, 1 )",
            "name": "firebrick"
          },
          {
            "value": "Color( 1, 0.98, 0.94, 1 )",
            "name": "floralwhite"
          },
          {
            "value": "Color( 0.13, 0.55, 0.13, 1 )",
            "name": "forestgreen"
          },
          {
            "value": "Color( 1, 0, 1, 1 )",
            "name": "fuchsia"
          },
          {
            "value": "Color( 0.86, 0.86, 0.86, 1 )",
            "name": "gainsboro"
          },
          {
            "value": "Color( 0.97, 0.97, 1, 1 )",
            "name": "ghostwhite"
          },
          {
            "value": "Color( 1, 0.84, 0, 1 )",
            "name": "gold"
          },
          {
            "value": "Color( 0.85, 0.65, 0.13, 1 )",
            "name": "goldenrod"
          },
          {
            "value": "Color( 0.75, 0.75, 0.75, 1 )",
            "name": "gray"
          },
          {
            "value": "Color( 0, 1, 0, 1 )",
            "name": "green"
          },
          {
            "value": "Color( 0.68, 1, 0.18, 1 )",
            "name": "greenyellow"
          },
          {
            "value": "Color( 0.94, 1, 0.94, 1 )",
            "name": "honeydew"
          },
          {
            "value": "Color( 1, 0.41, 0.71, 1 )",
            "name": "hotpink"
          },
          {
            "value": "Color( 0.8, 0.36, 0.36, 1 )",
            "name": "indianred"
          },
          {
            "value": "Color( 0.29, 0, 0.51, 1 )",
            "name": "indigo"
          },
          {
            "value": "Color( 1, 1, 0.94, 1 )",
            "name": "ivory"
          },
          {
            "value": "Color( 0.94, 0.9, 0.55, 1 )",
            "name": "khaki"
          },
          {
            "value": "Color( 0.9, 0.9, 0.98, 1 )",
            "name": "lavender"
          },
          {
            "value": "Color( 1, 0.94, 0.96, 1 )",
            "name": "lavenderblush"
          },
          {
            "value": "Color( 0.49, 0.99, 0, 1 )",
            "name": "lawngreen"
          },
          {
            "value": "Color( 1, 0.98, 0.8, 1 )",
            "name": "lemonchiffon"
          },
          {
            "value": "Color( 0.68, 0.85, 0.9, 1 )",
            "name": "lightblue"
          },
          {
            "value": "Color( 0.94, 0.5, 0.5, 1 )",
            "name": "lightcoral"
          },
          {
            "value": "Color( 0.88, 1, 1, 1 )",
            "name": "lightcyan"
          },
          {
            "value": "Color( 0.98, 0.98, 0.82, 1 )",
            "name": "lightgoldenrod"
          },
          {
            "value": "Color( 0.83, 0.83, 0.83, 1 )",
            "name": "lightgray"
          },
          {
            "value": "Color( 0.56, 0.93, 0.56, 1 )",
            "name": "lightgreen"
          },
          {
            "value": "Color( 1, 0.71, 0.76, 1 )",
            "name": "lightpink"
          },
          {
            "value": "Color( 1, 0.63, 0.48, 1 )",
            "name": "lightsalmon"
          },
          {
            "value": "Color( 0.13, 0.7, 0.67, 1 )",
            "name": "lightseagreen"
          },
          {
            "value": "Color( 0.53, 0.81, 0.98, 1 )",
            "name": "lightskyblue"
          },
          {
            "value": "Color( 0.47, 0.53, 0.6, 1 )",
            "name": "lightslategray"
          },
          {
            "value": "Color( 0.69, 0.77, 0.87, 1 )",
            "name": "lightsteelblue"
          },
          {
            "value": "Color( 1, 1, 0.88, 1 )",
            "name": "lightyellow"
          },
          {
            "value": "Color( 0, 1, 0, 1 )",
            "name": "lime"
          },
          {
            "value": "Color( 0.2, 0.8, 0.2, 1 )",
            "name": "limegreen"
          },
          {
            "value": "Color( 0.98, 0.94, 0.9, 1 )",
            "name": "linen"
          },
          {
            "value": "Color( 1, 0, 1, 1 )",
            "name": "magenta"
          },
          {
            "value": "Color( 0.69, 0.19, 0.38, 1 )",
            "name": "maroon"
          },
          {
            "value": "Color( 0.4, 0.8, 0.67, 1 )",
            "name": "mediumaquamarine"
          },
          {
            "value": "Color( 0, 0, 0.8, 1 )",
            "name": "mediumblue"
          },
          {
            "value": "Color( 0.73, 0.33, 0.83, 1 )",
            "name": "mediumorchid"
          },
          {
            "value": "Color( 0.58, 0.44, 0.86, 1 )",
            "name": "mediumpurple"
          },
          {
            "value": "Color( 0.24, 0.7, 0.44, 1 )",
            "name": "mediumseagreen"
          },
          {
            "value": "Color( 0.48, 0.41, 0.93, 1 )",
            "name": "mediumslateblue"
          },
          {
            "value": "Color( 0, 0.98, 0.6, 1 )",
            "name": "mediumspringgreen"
          },
          {
            "value": "Color( 0.28, 0.82, 0.8, 1 )",
            "name": "mediumturquoise"
          },
          {
            "value": "Color( 0.78, 0.08, 0.52, 1 )",
            "name": "mediumvioletred"
          },
          {
            "value": "Color( 0.1, 0.1, 0.44, 1 )",
            "name": "midnightblue"
          },
          {
            "value": "Color( 0.96, 1, 0.98, 1 )",
            "name": "mintcream"
          },
          {
            "value": "Color( 1, 0.89, 0.88, 1 )",
            "name": "mistyrose"
          },
          {
            "value": "Color( 1, 0.89, 0.71, 1 )",
            "name": "moccasin"
          },
          {
            "value": "Color( 1, 0.87, 0.68, 1 )",
            "name": "navajowhite"
          },
          {
            "value": "Color( 0, 0, 0.5, 1 )",
            "name": "navyblue"
          },
          {
            "value": "Color( 0.99, 0.96, 0.9, 1 )",
            "name": "oldlace"
          },
          {
            "value": "Color( 0.5, 0.5, 0, 1 )",
            "name": "olive"
          },
          {
            "value": "Color( 0.42, 0.56, 0.14, 1 )",
            "name": "olivedrab"
          },
          {
            "value": "Color( 1, 0.65, 0, 1 )",
            "name": "orange"
          },
          {
            "value": "Color( 1, 0.27, 0, 1 )",
            "name": "orangered"
          },
          {
            "value": "Color( 0.85, 0.44, 0.84, 1 )",
            "name": "orchid"
          },
          {
            "value": "Color( 0.93, 0.91, 0.67, 1 )",
            "name": "palegoldenrod"
          },
          {
            "value": "Color( 0.6, 0.98, 0.6, 1 )",
            "name": "palegreen"
          },
          {
            "value": "Color( 0.69, 0.93, 0.93, 1 )",
            "name": "paleturquoise"
          },
          {
            "value": "Color( 0.86, 0.44, 0.58, 1 )",
            "name": "palevioletred"
          },
          {
            "value": "Color( 1, 0.94, 0.84, 1 )",
            "name": "papayawhip"
          },
          {
            "value": "Color( 1, 0.85, 0.73, 1 )",
            "name": "peachpuff"
          },
          {
            "value": "Color( 0.8, 0.52, 0.25, 1 )",
            "name": "peru"
          },
          {
            "value": "Color( 1, 0.75, 0.8, 1 )",
            "name": "pink"
          },
          {
            "value": "Color( 0.87, 0.63, 0.87, 1 )",
            "name": "plum"
          },
          {
            "value": "Color( 0.69, 0.88, 0.9, 1 )",
            "name": "powderblue"
          },
          {
            "value": "Color( 0.63, 0.13, 0.94, 1 )",
            "name": "purple"
          },
          {
            "value": "Color( 0.4, 0.2, 0.6, 1 )",
            "name": "rebeccapurple"
          },
          {
            "value": "Color( 1, 0, 0, 1 )",
            "name": "red"
          },
          {
            "value": "Color( 0.74, 0.56, 0.56, 1 )",
            "name": "rosybrown"
          },
          {
            "value": "Color( 0.25, 0.41, 0.88, 1 )",
            "name": "royalblue"
          },
          {
            "value": "Color( 0.55, 0.27, 0.07, 1 )",
            "name": "saddlebrown"
          },
          {
            "value": "Color( 0.98, 0.5, 0.45, 1 )",
            "name": "salmon"
          },
          {
            "value": "Color( 0.96, 0.64, 0.38, 1 )",
            "name": "sandybrown"
          },
          {
            "value": "Color( 0.18, 0.55, 0.34, 1 )",
            "name": "seagreen"
          },
          {
            "value": "Color( 1, 0.96, 0.93, 1 )",
            "name": "seashell"
          },
          {
            "value": "Color( 0.63, 0.32, 0.18, 1 )",
            "name": "sienna"
          },
          {
            "value": "Color( 0.75, 0.75, 0.75, 1 )",
            "name": "silver"
          },
          {
            "value": "Color( 0.53, 0.81, 0.92, 1 )",
            "name": "skyblue"
          },
          {
            "value": "Color( 0.42, 0.35, 0.8, 1 )",
            "name": "slateblue"
          },
          {
            "value": "Color( 0.44, 0.5, 0.56, 1 )",
            "name": "slategray"
          },
          {
            "value": "Color( 1, 0.98, 0.98, 1 )",
            "name": "snow"
          },
          {
            "value": "Color( 0, 1, 0.5, 1 )",
            "name": "springgreen"
          },
          {
            "value": "Color( 0.27, 0.51, 0.71, 1 )",
            "name": "steelblue"
          },
          {
            "value": "Color( 0.82, 0.71, 0.55, 1 )",
            "name": "tan"
          },
          {
            "value": "Color( 0, 0.5, 0.5, 1 )",
            "name": "teal"
          },
          {
            "value": "Color( 0.85, 0.75, 0.85, 1 )",
            "name": "thistle"
          },
          {
            "value": "Color( 1, 0.39, 0.28, 1 )",
            "name": "tomato"
          },
          {
            "value": "Color( 1, 1, 1, 0 )",
            "name": "transparent"
          },
          {
            "value": "Color( 0.25, 0.88, 0.82, 1 )",
            "name": "turquoise"
          },
          {
            "value": "Color( 0.93, 0.51, 0.93, 1 )",
            "name": "violet"
          },
          {
            "value": "Color( 0.5, 0.5, 0.5, 1 )",
            "name": "webgray"
          },
          {
            "value": "Color( 0, 0.5, 0, 1 )",
            "name": "webgreen"
          },
          {
            "value": "Color( 0.5, 0, 0, 1 )",
            "name": "webmaroon"
          },
          {
            "value": "Color( 0.5, 0, 0.5, 1 )",
            "name": "webpurple"
          },
          {
            "value": "Color( 0.96, 0.87, 0.7, 1 )",
            "name": "wheat"
          },
          {
            "value": "Color( 1, 1, 1, 1 )",
            "name": "white"
          },
          {
            "value": "Color( 0.96, 0.96, 0.96, 1 )",
            "name": "whitesmoke"
          },
          {
            "value": "Color( 1, 1, 0, 1 )",
            "name": "yellow"
          },
          {
            "value": "Color( 0.6, 0.8, 0.2, 1 )",
            "name": "yellowgreen"
          }
        ]
      },
      "brief_description": "Color in RGBA format using floats on the range of 0 to 1.",
      "description": "A color represented by red, green, blue, and alpha (RGBA) components. The alpha component is often used for transparency. Values are in floating-point and usually range from 0 to 1. Some properties (such as CanvasItem.modulate) may accept values greater than 1 (overbright or HDR colors).\n\t\tYou can also create a color from standardized color names by using [method @GDScript.ColorN] or directly using the color constants defined here. The standardized color set is based on the [url=https://en.wikipedia.org/wiki/X11_color_names]X11 color names[/url].\n\t\tIf you want to supply values in a range of 0 to 255, you should use [method @GDScript.Color8].\n\t\t[b]Note:[/b] In a boolean context, a Color will evaluate to [code]false[/code] if it's equal to [code]Color(0, 0, 0, 1)[/code] (opaque black). Otherwise, a Color will always evaluate to [code]true[/code].\n\t\t[url=https://raw.githubusercontent.com/godotengine/godot-docs/master/img/color_constants.png]Color constants cheatsheet[/url]"
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "PoolVector2Array(  )",
          "value": "The array of points that make up the [ConcavePolygonShape2D]'s line segments.",
          "setter": "set_segments",
          "name": "segments",
          "getter": "get_segments",
          "type": "PoolVector2Array"
        }
      },
      "inherits": "Shape2D",
      "methods": {},
      "name": "ConcavePolygonShape2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Concave polygon 2D shape resource for physics.",
      "description": "Concave polygon 2D shape resource for physics. It is made out of segments and is optimal for complex polygonal concave collisions. However, it is not advised to use for [RigidBody2D] nodes. A CollisionPolygon2D in convex decomposition mode (solids) or several convex objects are advised for that instead. Otherwise, a concave polygon 2D shape is better for static collisions.\n\t\tThe main difference between a [ConvexPolygonShape2D] and a [ConcavePolygonShape2D] is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/675",
          "title": "3D Physics Tests Demo"
        }
      },
      "inherits": "Shape",
      "methods": {
        "method": [
          {
            "return": {
              "type": "PoolVector3Array"
            },
            "qualifiers": "const",
            "name": "get_faces",
            "description": "Returns the faces (an array of triangles)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "faces",
              "type": "PoolVector3Array",
              "index": "0"
            },
            "name": "set_faces",
            "description": "Sets the faces (an array of triangles)."
          }
        ]
      },
      "name": "ConcavePolygonShape",
      "version": "3.3",
      "constants": {},
      "brief_description": "Concave polygon shape.",
      "description": "Concave polygon shape resource, which can be set into a [PhysicsBody] or area. This shape is created by feeding a list of triangles.\n\t\tNote: when used for collision, [ConcavePolygonShape] is intended to work with static [PhysicsBody] nodes like [StaticBody] and will not work with [KinematicBody] or [RigidBody] with a mode other than Static."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0.3",
            "value": "The speed with which the swing or twist will take place.\n\t\t\tThe higher, the faster.",
            "setter": "set_param",
            "name": "bias",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Defines, how fast the swing- and twist-speed-difference on both sides gets synced.",
            "setter": "set_param",
            "name": "relaxation",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "0.8",
            "value": "The ease with which the joint starts to twist. If it's too low, it takes more force to start twisting the joint.",
            "setter": "set_param",
            "name": "softness",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "45.0",
            "value": "Swing is rotation from side to side, around the axis perpendicular to the twist axis.\n\t\t\tThe swing span defines, how much rotation will not get corrected along the swing axis.\n\t\t\tCould be defined as looseness in the [ConeTwistJoint].\n\t\t\tIf below 0.05, this behavior is locked.",
            "setter": "_set_swing_span",
            "name": "swing_span",
            "getter": "_get_swing_span",
            "type": "float"
          },
          {
            "default": "180.0",
            "value": "Twist is the rotation around the twist axis, this value defined how far the joint can twist.\n\t\t\tTwist is locked if below 0.05.",
            "setter": "_set_twist_span",
            "name": "twist_span",
            "getter": "_get_twist_span",
            "type": "float"
          }
        ]
      },
      "inherits": "Joint",
      "methods": {
        "method": [
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "param",
              "type": "int",
              "enum": "ConeTwistJoint.Param",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_param",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "param",
                "type": "int",
                "enum": "ConeTwistJoint.Param",
                "index": "0"
              },
              {
                "name": "value",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_param",
            "description": {}
          }
        ]
      },
      "name": "ConeTwistJoint",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "PARAM_SWING_SPAN",
            "enum": "Param"
          },
          {
            "value": "1",
            "name": "PARAM_TWIST_SPAN",
            "enum": "Param"
          },
          {
            "value": "2",
            "name": "PARAM_BIAS",
            "enum": "Param"
          },
          {
            "value": "3",
            "name": "PARAM_SOFTNESS",
            "enum": "Param"
          },
          {
            "value": "4",
            "name": "PARAM_RELAXATION",
            "enum": "Param"
          },
          {
            "value": "5",
            "name": "PARAM_MAX",
            "enum": "Param"
          }
        ]
      },
      "brief_description": "A twist joint between two 3D PhysicsBodies.",
      "description": "The joint can rotate the bodies across an axis defined by the local x-axes of the [Joint].\n\t\tThe twist axis is initiated as the X axis of the [Joint].\n\t\tOnce the Bodies swing, the twist axis is calculated as the middle of the x-axes of the Joint in the local space of the two Bodies. See also [Generic6DOFJoint]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "section",
              "type": "String",
              "index": "0"
            },
            "name": "erase_section",
            "description": "Deletes the specified section along with all the key-value pairs inside. Raises an error if the section does not exist."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "section",
                "type": "String",
                "index": "0"
              },
              {
                "name": "key",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "erase_section_key",
            "description": "Deletes the specified key in a section. Raises an error if either the section or the key do not exist."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "argument": {
              "name": "section",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_section_keys",
            "description": "Returns an array of all defined key identifiers in the specified section. Raises an error and returns an empty array if the section does not exist."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "qualifiers": "const",
            "name": "get_sections",
            "description": "Returns an array of all defined section identifiers."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "section",
                "type": "String",
                "index": "0"
              },
              {
                "name": "key",
                "type": "String",
                "index": "1"
              },
              {
                "default": "null",
                "name": "default",
                "type": "Variant",
                "index": "2"
              }
            ],
            "qualifiers": "const",
            "name": "get_value",
            "description": "Returns the current value for the specified section and key. If either the section or the key do not exist, the method returns the fallback [code]default[/code] value. If [code]default[/code] is not specified or set to [code]null[/code], an error is also raised."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "section",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_section",
            "description": "Returns [code]true[/code] if the specified section exists."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "section",
                "type": "String",
                "index": "0"
              },
              {
                "name": "key",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "has_section_key",
            "description": "Returns [code]true[/code] if the specified section-key pair exists."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "load",
            "description": "Loads the config file specified as a parameter. The file's contents are parsed and loaded in the [ConfigFile] object which the method was called on.\n\t\t\t\tReturns one of the [enum Error] code constants ([code]OK[/code] on success)."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "key",
                "type": "PoolByteArray",
                "index": "1"
              }
            ],
            "name": "load_encrypted",
            "description": "Loads the encrypted config file specified as a parameter, using the provided [code]key[/code] to decrypt it. The file's contents are parsed and loaded in the [ConfigFile] object which the method was called on.\n\t\t\t\tReturns one of the [enum Error] code constants ([code]OK[/code] on success)."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "password",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "load_encrypted_pass",
            "description": "Loads the encrypted config file specified as a parameter, using the provided [code]password[/code] to decrypt it. The file's contents are parsed and loaded in the [ConfigFile] object which the method was called on.\n\t\t\t\tReturns one of the [enum Error] code constants ([code]OK[/code] on success)."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "data",
              "type": "String",
              "index": "0"
            },
            "name": "parse",
            "description": "Parses the passed string as the contents of a config file. The string is parsed and loaded in the ConfigFile object which the method was called on.\n\t\t\t\tReturns one of the [enum Error] code constants ([code]OK[/code] on success)."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "save",
            "description": "Saves the contents of the [ConfigFile] object to the file specified as a parameter. The output file uses an INI-style structure.\n\t\t\t\tReturns one of the [enum Error] code constants ([code]OK[/code] on success)."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "key",
                "type": "PoolByteArray",
                "index": "1"
              }
            ],
            "name": "save_encrypted",
            "description": "Saves the contents of the [ConfigFile] object to the AES-256 encrypted file specified as a parameter, using the provided [code]key[/code] to encrypt it. The output file uses an INI-style structure.\n\t\t\t\tReturns one of the [enum Error] code constants ([code]OK[/code] on success)."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "password",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "save_encrypted_pass",
            "description": "Saves the contents of the [ConfigFile] object to the AES-256 encrypted file specified as a parameter, using the provided [code]password[/code] to encrypt it. The output file uses an INI-style structure.\n\t\t\t\tReturns one of the [enum Error] code constants ([code]OK[/code] on success)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "section",
                "type": "String",
                "index": "0"
              },
              {
                "name": "key",
                "type": "String",
                "index": "1"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "2"
              }
            ],
            "name": "set_value",
            "description": "Assigns a value to the specified key of the specified section. If either the section or the key do not exist, they are created. Passing a [code]null[/code] value deletes the specified key if it exists, and deletes the section if it ends up empty once the key has been removed."
          }
        ]
      },
      "name": "ConfigFile",
      "version": "3.3",
      "constants": {},
      "brief_description": "Helper class to handle INI-style files.",
      "description": "This helper class can be used to store [Variant] values on the filesystem using INI-style formatting. The stored values are identified by a section and a key:\n\t\t[codeblock]\n\t\t[section]\n\t\tsome_key=42\n\t\tstring_example=\"Hello World!\"\n\t\ta_vector=Vector3( 1, 0, 2 )\n\t\t[/codeblock]\n\t\tThe stored data can be saved to or parsed from a file, though ConfigFile objects can also be used directly without accessing the filesystem.\n\t\tThe following example shows how to create a simple [ConfigFile] and save it on disk:\n\t\t[codeblock]\n\t\t# Create new ConfigFile object.\n\t\tvar config = ConfigFile.new()\n\n\t\t# Store some values.\n\t\tconfig.set_value(\"Player1\", \"player_name\", \"Steve\")\n\t\tconfig.set_value(\"Player1\", \"best_score\", 10)\n\t\tconfig.set_value(\"Player2\", \"player_name\", \"V3geta\")\n\t\tconfig.set_value(\"Player2\", \"best_score\", 9001)\n\n\t\t# Save it to a file (overwrite if already exists).\n\t\tconfig.save(\"user://scores.cfg\")\n\t\t[/codeblock]\n\t\tThis example shows how the above file could be loaded:\n\t\t[codeblock]\n\t\tvar score_data = {}\n\t\tvar config = ConfigFile.new()\n\n\t\t# Load data from a file.\n\t\tvar err = config.load(\"user://scores.cfg\")\n\n\t\t# If the file didn't load, ignore it.\n\t\tif err != OK:\n\t\t    return\n\n\t\t# Iterate over all sections.\n\t\tfor player in config.get_sections():\n\t\t    # Fetch the data for each section.\n\t\t    var player_name = config.get_value(player, \"player_name\")\n\t\t    var player_score = config.get_value(player, \"best_score\")\n\t\t    score_data[player_name] = player_score\n\t\t[/codeblock]\n\t\tKeep in mind that section and property names can't contain spaces. Anything after a space will be ignored on save and on load.\n\t\tConfigFiles can also contain manually written comment lines starting with a semicolon ([code];[/code]). Those lines will be ignored when parsing the file. Note that comments will be lost when saving the ConfigFile. This can still be useful for dedicated server configuration files, which are typically never overwritten without explicit user action."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "Vector2( 200, 70 )",
            "setter": "set_custom_minimum_size",
            "override": "true",
            "name": "rect_min_size",
            "getter": "get_custom_minimum_size",
            "type": "Vector2"
          },
          {
            "default": "\"Please Confirm...\"",
            "setter": "set_title",
            "override": "true",
            "name": "window_title",
            "getter": "get_title",
            "type": "String"
          }
        ]
      },
      "inherits": "AcceptDialog",
      "methods": {
        "method": {
          "return": {
            "type": "Button"
          },
          "name": "get_cancel",
          "description": "Returns the cancel button."
        }
      },
      "name": "ConfirmationDialog",
      "version": "3.3",
      "constants": {},
      "brief_description": "Dialog for confirmation of actions.",
      "description": "Dialog for confirmation of actions. This dialog inherits from [AcceptDialog], but has by default an OK and Cancel button (in host OS order).\n\t\tTo get cancel action, you can use:\n\t\t[codeblock]\n\t\tget_cancel().connect(\"pressed\", self, \"cancelled\")\n\t\t[/codeblock]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Control",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "child",
                "type": "Control",
                "index": "0"
              },
              {
                "name": "rect",
                "type": "Rect2",
                "index": "1"
              }
            ],
            "name": "fit_child_in_rect",
            "description": "Fit a child control in a given rect. This is mainly a helper for creating custom container classes."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "queue_sort",
            "description": "Queue resort of the contained children. This is called automatically anyway, but can be called upon request."
          }
        ]
      },
      "name": "Container",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "sort_children",
          "description": "Emitted when sorting the children is needed."
        }
      },
      "constants": {
        "constant": {
          "value": "50",
          "name": "NOTIFICATION_SORT_CHILDREN"
        }
      },
      "brief_description": "Base node for containers.",
      "description": "Base node for containers. A [Container] contains other controls and automatically arranges them in a certain way.\n\t\tA Control can inherit this to create custom container classes."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/gui/index.html",
            "title": "GUI tutorial index"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/2d/custom_drawing_in_2d.html",
            "title": "Custom drawing in 2D"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/gui/control_node_gallery.html",
            "title": "Control node gallery"
          },
          {
            "value": "https://github.com/godotengine/godot-demo-projects/tree/master/gui",
            "title": "All GUI Demos"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "0.0",
            "value": "Anchors the bottom edge of the node to the origin, the center, or the end of its parent control. It changes how the bottom margin updates when the node moves or changes size. You can use one of the [enum Anchor] constants for convenience.",
            "setter": "_set_anchor",
            "name": "anchor_bottom",
            "getter": "get_anchor",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Anchors the left edge of the node to the origin, the center or the end of its parent control. It changes how the left margin updates when the node moves or changes size. You can use one of the [enum Anchor] constants for convenience.",
            "setter": "_set_anchor",
            "name": "anchor_left",
            "getter": "get_anchor",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Anchors the right edge of the node to the origin, the center or the end of its parent control. It changes how the right margin updates when the node moves or changes size. You can use one of the [enum Anchor] constants for convenience.",
            "setter": "_set_anchor",
            "name": "anchor_right",
            "getter": "get_anchor",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Anchors the top edge of the node to the origin, the center or the end of its parent control. It changes how the top margin updates when the node moves or changes size. You can use  one of the [enum Anchor] constants for convenience.",
            "setter": "_set_anchor",
            "name": "anchor_top",
            "getter": "get_anchor",
            "type": "float"
          },
          {
            "default": "0",
            "value": "The focus access mode for the control (None, Click or All). Only one Control can be focused at the same time, and it will receive keyboard signals.",
            "setter": "set_focus_mode",
            "name": "focus_mode",
            "getter": "get_focus_mode",
            "type": "int",
            "enum": "Control.FocusMode"
          },
          {
            "default": "NodePath(\"\")",
            "value": "Tells Godot which node it should give keyboard focus to if the user presses the down arrow on the keyboard or down on a gamepad by default. You can change the key by editing the [code]ui_down[/code] input action. The node must be a [Control]. If this property is not set, Godot will give focus to the closest [Control] to the bottom of this one.",
            "setter": "set_focus_neighbour",
            "name": "focus_neighbour_bottom",
            "getter": "get_focus_neighbour",
            "type": "NodePath"
          },
          {
            "default": "NodePath(\"\")",
            "value": "Tells Godot which node it should give keyboard focus to if the user presses the left arrow on the keyboard or left on a gamepad by default. You can change the key by editing the [code]ui_left[/code] input action. The node must be a [Control]. If this property is not set, Godot will give focus to the closest [Control] to the left of this one.",
            "setter": "set_focus_neighbour",
            "name": "focus_neighbour_left",
            "getter": "get_focus_neighbour",
            "type": "NodePath"
          },
          {
            "default": "NodePath(\"\")",
            "value": "Tells Godot which node it should give keyboard focus to if the user presses the right arrow on the keyboard or right on a gamepad  by default. You can change the key by editing the [code]ui_right[/code] input action. The node must be a [Control]. If this property is not set, Godot will give focus to the closest [Control] to the bottom of this one.",
            "setter": "set_focus_neighbour",
            "name": "focus_neighbour_right",
            "getter": "get_focus_neighbour",
            "type": "NodePath"
          },
          {
            "default": "NodePath(\"\")",
            "value": "Tells Godot which node it should give keyboard focus to if the user presses the top arrow on the keyboard or top on a gamepad by default. You can change the key by editing the [code]ui_top[/code] input action. The node must be a [Control]. If this property is not set, Godot will give focus to the closest [Control] to the bottom of this one.",
            "setter": "set_focus_neighbour",
            "name": "focus_neighbour_top",
            "getter": "get_focus_neighbour",
            "type": "NodePath"
          },
          {
            "default": "NodePath(\"\")",
            "value": "Tells Godot which node it should give keyboard focus to if the user presses Tab on a keyboard by default. You can change the key by editing the [code]ui_focus_next[/code] input action.\n\t\t\tIf this property is not set, Godot will select a \"best guess\" based on surrounding nodes in the scene tree.",
            "setter": "set_focus_next",
            "name": "focus_next",
            "getter": "get_focus_next",
            "type": "NodePath"
          },
          {
            "default": "NodePath(\"\")",
            "value": "Tells Godot which node it should give keyboard focus to if the user presses Shift+Tab on a keyboard by default. You can change the key by editing the [code]ui_focus_prev[/code] input action.\n\t\t\tIf this property is not set, Godot will select a \"best guess\" based on surrounding nodes in the scene tree.",
            "setter": "set_focus_previous",
            "name": "focus_previous",
            "getter": "get_focus_previous",
            "type": "NodePath"
          },
          {
            "default": "1",
            "value": "Controls the direction on the horizontal axis in which the control should grow if its horizontal minimum size is changed to be greater than its current size, as the control always has to be at least the minimum size.",
            "setter": "set_h_grow_direction",
            "name": "grow_horizontal",
            "getter": "get_h_grow_direction",
            "type": "int",
            "enum": "Control.GrowDirection"
          },
          {
            "default": "1",
            "value": "Controls the direction on the vertical axis in which the control should grow if its vertical minimum size is changed to be greater than its current size, as the control always has to be at least the minimum size.",
            "setter": "set_v_grow_direction",
            "name": "grow_vertical",
            "getter": "get_v_grow_direction",
            "type": "int",
            "enum": "Control.GrowDirection"
          },
          {
            "default": "\"\"",
            "value": "Changes the tooltip text. The tooltip appears when the user's mouse cursor stays idle over this control for a few moments, provided that the [member mouse_filter] property is not [constant MOUSE_FILTER_IGNORE]. You can change the time required for the tooltip to appear with [code]gui/timers/tooltip_delay_sec[/code] option in Project Settings.\n\t\t\tThe tooltip popup will use either a default implementation, or a custom one that you can provide by overriding [method _make_custom_tooltip]. The default tooltip includes a [PopupPanel] and [Label] whose theme properties can be customized using [Theme] methods with the [code]\"TooltipPanel\"[/code] and [code]\"TooltipLabel\"[/code] respectively. For example:\n\t\t\t[codeblock]\n\t\t\tvar style_box = StyleBoxFlat.new()\n\t\t\tstyle_box.set_bg_color(Color(1, 1, 0))\n\t\t\tstyle_box.set_border_width_all(2)\n\t\t\t# We assume here that the `theme` property has been assigned a custom Theme beforehand.\n\t\t\ttheme.set_stylebox(\"panel\", \"TooltipPanel\", style_box)\n\t\t\ttheme.set_color(\"font_color\", \"TooltipLabel\", Color(0, 1, 1))\n\t\t\t[/codeblock]",
            "setter": "set_tooltip",
            "name": "hint_tooltip",
            "getter": "_get_tooltip",
            "type": "String"
          },
          {
            "default": "true",
            "value": "Enables whether input should propagate when you close the control as modal.\n\t\t\tIf [code]false[/code], stops event handling at the viewport input event handling. The viewport first hides the modal and after marks the input as handled.",
            "setter": "set_pass_on_modal_close_click",
            "name": "input_pass_on_modal_close_click",
            "getter": "get_pass_on_modal_close_click",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "Distance between the node's bottom edge and its parent control, based on [member anchor_bottom].\n\t\t\tMargins are often controlled by one or multiple parent [Container] nodes, so you should not modify them manually if your node is a direct child of a [Container]. Margins update automatically when you move or resize the node.",
            "setter": "set_margin",
            "name": "margin_bottom",
            "getter": "get_margin",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Distance between the node's left edge and its parent control, based on [member anchor_left].\n\t\t\tMargins are often controlled by one or multiple parent [Container] nodes, so you should not modify them manually if your node is a direct child of a [Container]. Margins update automatically when you move or resize the node.",
            "setter": "set_margin",
            "name": "margin_left",
            "getter": "get_margin",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Distance between the node's right edge and its parent control, based on [member anchor_right].\n\t\t\tMargins are often controlled by one or multiple parent [Container] nodes, so you should not modify them manually if your node is a direct child of a [Container]. Margins update automatically when you move or resize the node.",
            "setter": "set_margin",
            "name": "margin_right",
            "getter": "get_margin",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Distance between the node's top edge and its parent control, based on [member anchor_top].\n\t\t\tMargins are often controlled by one or multiple parent [Container] nodes, so you should not modify them manually if your node is a direct child of a [Container]. Margins update automatically when you move or resize the node.",
            "setter": "set_margin",
            "name": "margin_top",
            "getter": "get_margin",
            "type": "float"
          },
          {
            "default": "0",
            "value": "The default cursor shape for this control. Useful for Godot plugins and applications or games that use the system's mouse cursors.\n\t\t\t[b]Note:[/b] On Linux, shapes may vary depending on the cursor theme of the system.",
            "setter": "set_default_cursor_shape",
            "name": "mouse_default_cursor_shape",
            "getter": "get_default_cursor_shape",
            "type": "int",
            "enum": "Control.CursorShape"
          },
          {
            "default": "0",
            "value": "Controls whether the control will be able to receive mouse button input events through [method _gui_input] and how these events should be handled. Also controls whether the control can receive the [signal mouse_entered], and [signal mouse_exited] signals. See the constants to learn what each does.",
            "setter": "set_mouse_filter",
            "name": "mouse_filter",
            "getter": "get_mouse_filter",
            "type": "int",
            "enum": "Control.MouseFilter"
          },
          {
            "default": "false",
            "value": "Enables whether rendering of [CanvasItem] based children should be clipped to this control's rectangle. If [code]true[/code], parts of a child which would be visibly outside of this control's rectangle will not be rendered.",
            "setter": "set_clip_contents",
            "name": "rect_clip_content",
            "getter": "is_clipping_contents",
            "type": "bool"
          },
          {
            "value": "The node's global position, relative to the world (usually to the top-left corner of the window).",
            "setter": "_set_global_position",
            "name": "rect_global_position",
            "getter": "get_global_position",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The minimum size of the node's bounding rectangle. If you set it to a value greater than (0, 0), the node's bounding rectangle will always have at least this size, even if its content is smaller. If it's set to (0, 0), the node sizes automatically to fit its content, be it a texture or child nodes.",
            "setter": "set_custom_minimum_size",
            "name": "rect_min_size",
            "getter": "get_custom_minimum_size",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "By default, the node's pivot is its top-left corner. When you change its [member rect_scale], it will scale around this pivot. Set this property to [member rect_size] / 2 to center the pivot in the node's rectangle.",
            "setter": "set_pivot_offset",
            "name": "rect_pivot_offset",
            "getter": "get_pivot_offset",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The node's position, relative to its parent. It corresponds to the rectangle's top-left corner. The property is not affected by [member rect_pivot_offset].",
            "setter": "_set_position",
            "name": "rect_position",
            "getter": "get_position",
            "type": "Vector2"
          },
          {
            "default": "0.0",
            "value": "The node's rotation around its pivot, in degrees. See [member rect_pivot_offset] to change the pivot's position.",
            "setter": "set_rotation_degrees",
            "name": "rect_rotation",
            "getter": "get_rotation_degrees",
            "type": "float"
          },
          {
            "default": "Vector2( 1, 1 )",
            "value": "The node's scale, relative to its [member rect_size]. Change this property to scale the node around its [member rect_pivot_offset]. The Control's [member hint_tooltip] will also scale according to this value.\n\t\t\t[b]Note:[/b] This property is mainly intended to be used for animation purposes. Text inside the Control will look pixelated or blurry when the Control is scaled. To support multiple resolutions in your project, use an appropriate viewport stretch mode as described in the [url=https://docs.godotengine.org/en/3.3/tutorials/viewports/multiple_resolutions.html]documentation[/url] instead of scaling Controls individually.\n\t\t\t[b]Note:[/b] If the Control node is a child of a [Container] node, the scale will be reset to [code]Vector2(1, 1)[/code] when the scene is instanced. To set the Control's scale when it's instanced, wait for one frame using [code]yield(get_tree(), \"idle_frame\")[/code] then set its [member rect_scale] property.",
            "setter": "set_scale",
            "name": "rect_scale",
            "getter": "get_scale",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The size of the node's bounding rectangle, in pixels. [Container] nodes update this property automatically.",
            "setter": "_set_size",
            "name": "rect_size",
            "getter": "get_size",
            "type": "Vector2"
          },
          {
            "default": "1",
            "value": "Tells the parent [Container] nodes how they should resize and place the node on the X axis. Use one of the [enum SizeFlags] constants to change the flags. See the constants to learn what each does.",
            "setter": "set_h_size_flags",
            "name": "size_flags_horizontal",
            "getter": "get_h_size_flags",
            "type": "int"
          },
          {
            "default": "1.0",
            "value": "If the node and at least one of its neighbours uses the [constant SIZE_EXPAND] size flag, the parent [Container] will let it take more or less space depending on this property. If this node has a stretch ratio of 2 and its neighbour a ratio of 1, this node will take two thirds of the available space.",
            "setter": "set_stretch_ratio",
            "name": "size_flags_stretch_ratio",
            "getter": "get_stretch_ratio",
            "type": "float"
          },
          {
            "default": "1",
            "value": "Tells the parent [Container] nodes how they should resize and place the node on the Y axis. Use one of the [enum SizeFlags] constants to change the flags. See the constants to learn what each does.",
            "setter": "set_v_size_flags",
            "name": "size_flags_vertical",
            "getter": "get_v_size_flags",
            "type": "int"
          },
          {
            "value": "Changing this property replaces the current [Theme] resource this node and all its [Control] children use.",
            "setter": "set_theme",
            "name": "theme",
            "getter": "get_theme",
            "type": "Theme"
          }
        ]
      },
      "inherits": "CanvasItem",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "virtual",
            "name": "_clips_input",
            "description": "Virtual method to be implemented by the user. Returns whether [method _gui_input] should not be called for children controls outside this control's rectangle. Input will be clipped to the Rect of this [Control]. Similar to [member rect_clip_content], but doesn't affect visibility.\n\t\t\t\tIf not overridden, defaults to [code]false[/code]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "virtual",
            "name": "_get_minimum_size",
            "description": "Virtual method to be implemented by the user. Returns the minimum size for this control. Alternative to [member rect_min_size] for controlling minimum size via code. The actual minimum size will be the max value of these two (in each axis separately).\n\t\t\t\tIf not overridden, defaults to [constant Vector2.ZERO]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "event",
              "type": "InputEvent",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_gui_input",
            "description": "Virtual method to be implemented by the user. Use this method to process and accept inputs on UI elements. See [method accept_event].\n\t\t\t\tExample: clicking a control.\n\t\t\t\t[codeblock]\n\t\t\t\tfunc _gui_input(event):\n\t\t\t\t    if event is InputEventMouseButton:\n\t\t\t\t        if event.button_index == BUTTON_LEFT and event.pressed:\n\t\t\t\t            print(\"I've been clicked D:\")\n\t\t\t\t[/codeblock]\n\t\t\t\tThe event won't trigger if:\n\t\t\t\t* clicking outside the control (see [method has_point]);\n\t\t\t\t* control has [member mouse_filter] set to [constant MOUSE_FILTER_IGNORE];\n\t\t\t\t* control is obstructed by another [Control] on top of it, which doesn't have [member mouse_filter] set to [constant MOUSE_FILTER_IGNORE];\n\t\t\t\t* control's parent has [member mouse_filter] set to [constant MOUSE_FILTER_STOP] or has accepted the event;\n\t\t\t\t* it happens outside the parent's rectangle and the parent has either [member rect_clip_content] or [method _clips_input] enabled."
          },
          {
            "return": {
              "type": "Control"
            },
            "argument": {
              "name": "for_text",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_make_custom_tooltip",
            "description": "Virtual method to be implemented by the user. Returns a [Control] node that should be used as a tooltip instead of the default one. The [code]for_text[/code] includes the contents of the [member hint_tooltip] property.\n\t\t\t\tThe returned node must be of type [Control] or Control-derived. It can have child nodes of any type. It is freed when the tooltip disappears, so make sure you always provide a new instance (if you want to use a pre-existing node from your scene tree, you can duplicate it and pass the duplicated instance). When [code]null[/code] or a non-Control node is returned, the default tooltip will be used instead.\n\t\t\t\tThe returned node will be added as child to a [PopupPanel], so you should only provide the contents of that panel. That [PopupPanel] can be themed using [method Theme.set_stylebox] for the type [code]\"TooltipPanel\"[/code] (see [member hint_tooltip] for an example).\n\t\t\t\t[b]Note:[/b] The tooltip is shrunk to minimal size. If you want to ensure it's fully visible, you might want to set its [member rect_min_size] to some non-zero value.\n\t\t\t\tExample of usage with a custom-constructed node:\n\t\t\t\t[codeblock]\n\t\t\t\tfunc _make_custom_tooltip(for_text):\n\t\t\t\t    var label = Label.new()\n\t\t\t\t    label.text = for_text\n\t\t\t\t    return label\n\t\t\t\t[/codeblock]\n\t\t\t\tExample of usage with a custom scene instance:\n\t\t\t\t[codeblock]\n\t\t\t\tfunc _make_custom_tooltip(for_text):\n\t\t\t\t    var tooltip = preload(\"res://SomeTooltipScene.tscn\").instance()\n\t\t\t\t    tooltip.get_node(\"Label\").text = for_text\n\t\t\t\t    return tooltip\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "name": "accept_event",
            "description": "Marks an input event as handled. Once you accept an input event, it stops propagating, even to nodes listening to [method Node._unhandled_input] or [method Node._unhandled_key_input]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "add_color_override",
            "description": "Overrides the [Color] with given [code]name[/code] in the [member theme] resource the control uses.\n\t\t\t\t[b]Note:[/b] Unlike other theme overrides, there is no way to undo a color override without manually assigning the previous color.\n\t\t\t\t[b]Example of overriding a label's color and resetting it later:[/b]\n\t\t\t\t[codeblock]\n\t\t\t\t# Override the child node \"MyLabel\"'s font color to orange.\n\t\t\t\t$MyLabel.add_color_override(\"font_color\", Color(1, 0.5, 0))\n\n\t\t\t\t# Reset the color by creating a new node to get the default value:\n\t\t\t\tvar default_label_color = Label.new().get_color(\"font_color\")\n\t\t\t\t$MyLabel.add_color_override(\"font_color\", default_label_color)\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "constant",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "add_constant_override",
            "description": "Overrides an integer constant with given [code]name[/code] in the [member theme] resource the control uses. If the [code]constant[/code] is [code]0[/code], the override is cleared and the constant from assigned [Theme] is used."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "font",
                "type": "Font",
                "index": "1"
              }
            ],
            "name": "add_font_override",
            "description": "Overrides the font with given [code]name[/code] in the [member theme] resource the control uses. If [code]font[/code] is [code]null[/code] or invalid, the override is cleared and the font from assigned [Theme] is used."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "texture",
                "type": "Texture",
                "index": "1"
              }
            ],
            "name": "add_icon_override",
            "description": "Overrides the icon with given [code]name[/code] in the [member theme] resource the control uses. If [code]icon[/code] is [code]null[/code] or invalid, the override is cleared and the icon from assigned [Theme] is used."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "shader",
                "type": "Shader",
                "index": "1"
              }
            ],
            "name": "add_shader_override",
            "description": "Overrides the [Shader] with given [code]name[/code] in the [member theme] resource the control uses. If [code]shader[/code] is [code]null[/code] or invalid, the override is cleared and the shader from assigned [Theme] is used."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "stylebox",
                "type": "StyleBox",
                "index": "1"
              }
            ],
            "name": "add_stylebox_override",
            "description": "Overrides the [StyleBox] with given [code]name[/code] in the [member theme] resource the control uses. If [code]stylebox[/code] is empty or invalid, the override is cleared and the [StyleBox] from assigned [Theme] is used.\n\t\t\t\t[b]Example of modifying a property in a StyleBox by duplicating it:[/b]\n\t\t\t\t[codeblock]\n\t\t\t\t# The snippet below assumes the child node MyButton has a StyleBoxFlat assigned.\n\t\t\t\t# Resources are shared across instances, so we need to duplicate it\n\t\t\t\t# to avoid modifying the appearance of all other buttons.\n\t\t\t\tvar new_stylebox_normal = $MyButton.get_stylebox(\"normal\").duplicate()\n\t\t\t\tnew_stylebox_normal.border_width_top = 3\n\t\t\t\tnew_stylebox_normal.border_color = Color(0, 1, 0.5)\n\t\t\t\t$MyButton.add_stylebox_override(\"normal\", new_stylebox_normal)\n\n\t\t\t\t# Remove the stylebox override:\n\t\t\t\t$MyButton.add_stylebox_override(\"normal\", null)\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "position",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "data",
                "type": "Variant",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "can_drop_data",
            "description": "Godot calls this method to test if [code]data[/code] from a control's [method get_drag_data] can be dropped at [code]position[/code]. [code]position[/code] is local to this control.\n\t\t\t\tThis method should only be used to test the data. Process the data in [method drop_data].\n\t\t\t\t[codeblock]\n\t\t\t\tfunc can_drop_data(position, data):\n\t\t\t\t    # Check position if it is relevant to you\n\t\t\t\t    # Otherwise, just check data\n\t\t\t\t    return typeof(data) == TYPE_DICTIONARY and data.has(\"expected\")\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "position",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "data",
                "type": "Variant",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "drop_data",
            "description": "Godot calls this method to pass you the [code]data[/code] from a control's [method get_drag_data] result. Godot first calls [method can_drop_data] to test if [code]data[/code] is allowed to drop at [code]position[/code] where [code]position[/code] is local to this control.\n\t\t\t\t[codeblock]\n\t\t\t\tfunc can_drop_data(position, data):\n\t\t\t\t    return typeof(data) == TYPE_DICTIONARY and data.has(\"color\")\n\n\t\t\t\tfunc drop_data(position, data):\n\t\t\t\t    color = data[\"color\"]\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "Control"
            },
            "qualifiers": "const",
            "name": "find_next_valid_focus",
            "description": "Finds the next (below in the tree) [Control] that can receive the focus."
          },
          {
            "return": {
              "type": "Control"
            },
            "qualifiers": "const",
            "name": "find_prev_valid_focus",
            "description": "Finds the previous (above in the tree) [Control] that can receive the focus."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "data",
                "type": "Variant",
                "index": "0"
              },
              {
                "name": "preview",
                "type": "Control",
                "index": "1"
              }
            ],
            "name": "force_drag",
            "description": "Forces drag and bypasses [method get_drag_data] and [method set_drag_preview] by passing [code]data[/code] and [code]preview[/code]. Drag will start even if the mouse is neither over nor pressed on this control.\n\t\t\t\tThe methods [method can_drop_data] and [method drop_data] must be implemented on controls that want to receive drop data."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_anchor",
            "description": "Returns the anchor identified by [code]margin[/code] constant from [enum Margin] enum. A getter method for [member anchor_bottom], [member anchor_left], [member anchor_right] and [member anchor_top]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_begin",
            "description": "Returns [member margin_left] and [member margin_top]. See also [member rect_position]."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "default": "\"\"",
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_color",
            "description": "Returns a color from assigned [Theme] with given [code]name[/code] and associated with [Control] of given [code]node_type[/code].\n\t\t\t\t[codeblock]\n\t\t\t\tfunc _ready():\n\t\t\t\t    modulate = get_color(\"font_color\", \"Button\") #get the color defined for button fonts\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_combined_minimum_size",
            "description": "Returns combined minimum size from [member rect_min_size] and [method get_minimum_size]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "default": "\"\"",
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_constant",
            "description": "Returns a constant from assigned [Theme] with given [code]name[/code] and associated with [Control] of given [code]node_type[/code]."
          },
          {
            "return": {
              "type": "int",
              "enum": "Control.CursorShape"
            },
            "argument": {
              "default": "Vector2( 0, 0 )",
              "name": "position",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_cursor_shape",
            "description": "Returns the mouse cursor shape the control displays on mouse hover. See [enum CursorShape]."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "position",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "get_drag_data",
            "description": "Godot calls this method to get data that can be dragged and dropped onto controls that expect drop data. Returns [code]null[/code] if there is no data to drag. Controls that want to receive drop data should implement [method can_drop_data] and [method drop_data]. [code]position[/code] is local to this control. Drag may be forced with [method force_drag].\n\t\t\t\tA preview that will follow the mouse that should represent the data can be set with [method set_drag_preview]. A good time to set the preview is in this method.\n\t\t\t\t[codeblock]\n\t\t\t\tfunc get_drag_data(position):\n\t\t\t\t    var mydata = make_data()\n\t\t\t\t    set_drag_preview(make_preview(mydata))\n\t\t\t\t    return mydata\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_end",
            "description": "Returns [member margin_right] and [member margin_bottom]."
          },
          {
            "return": {
              "type": "NodePath"
            },
            "argument": {
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_focus_neighbour",
            "description": "Returns the focus neighbour identified by [code]margin[/code] constant from [enum Margin] enum. A getter method for [member focus_neighbour_bottom], [member focus_neighbour_left], [member focus_neighbour_right] and [member focus_neighbour_top]."
          },
          {
            "return": {
              "type": "Control"
            },
            "qualifiers": "const",
            "name": "get_focus_owner",
            "description": "Returns the control that has the keyboard focus or [code]null[/code] if none."
          },
          {
            "return": {
              "type": "Font"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "default": "\"\"",
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_font",
            "description": "Returns a font from assigned [Theme] with given [code]name[/code] and associated with [Control] of given [code]node_type[/code]."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "qualifiers": "const",
            "name": "get_global_rect",
            "description": "Returns the position and size of the control relative to the top-left corner of the screen. See [member rect_position] and [member rect_size]."
          },
          {
            "return": {
              "type": "Texture"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "default": "\"\"",
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_icon",
            "description": "Returns an icon from assigned [Theme] with given [code]name[/code] and associated with [Control] of given [code]node_type[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_margin",
            "description": "Returns the anchor identified by [code]margin[/code] constant from [enum Margin] enum. A getter method for [member margin_bottom], [member margin_left], [member margin_right] and [member margin_top]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_minimum_size",
            "description": "Returns the minimum size for this control. See [member rect_min_size]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_parent_area_size",
            "description": "Returns the width/height occupied in the parent control."
          },
          {
            "return": {
              "type": "Control"
            },
            "qualifiers": "const",
            "name": "get_parent_control",
            "description": "Returns the parent control node."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "qualifiers": "const",
            "name": "get_rect",
            "description": "Returns the position and size of the control relative to the top-left corner of the parent Control. See [member rect_position] and [member rect_size]."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_rotation",
            "description": "Returns the rotation (in radians)."
          },
          {
            "return": {
              "type": "StyleBox"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "default": "\"\"",
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_stylebox",
            "description": "Returns a [StyleBox] from assigned [Theme] with given [code]name[/code] and associated with [Control] of given [code]node_type[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "default": "Vector2( 0, 0 )",
              "name": "at_position",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_tooltip",
            "description": "Returns the tooltip, which will appear when the cursor is resting over this control. See [member hint_tooltip]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "grab_click_focus",
            "description": "Creates an [InputEventMouseButton] that attempts to click the control. If the event is received, the control acquires focus.\n\t\t\t\t[codeblock]\n\t\t\t\tfunc _process(delta):\n\t\t\t\t    grab_click_focus() #when clicking another Control node, this node will be clicked instead\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "name": "grab_focus",
            "description": "Steal the focus from another control and become the focused control (see [member focus_mode])."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "default": "\"\"",
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "has_color",
            "description": "Returns [code]true[/code] if [Color] with given [code]name[/code] and associated with [Control] of given [code]node_type[/code] exists in assigned [Theme]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_color_override",
            "description": "Returns [code]true[/code] if [Color] with given [code]name[/code] has a valid override in this [Control] node."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "default": "\"\"",
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "has_constant",
            "description": "Returns [code]true[/code] if constant with given [code]name[/code] and associated with [Control] of given [code]node_type[/code] exists in assigned [Theme]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_constant_override",
            "description": "Returns [code]true[/code] if constant with given [code]name[/code] has a valid override in this [Control] node."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "has_focus",
            "description": "Returns [code]true[/code] if this is the current focused control. See [member focus_mode]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "default": "\"\"",
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "has_font",
            "description": "Returns [code]true[/code] if font with given [code]name[/code] and associated with [Control] of given [code]node_type[/code] exists in assigned [Theme]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_font_override",
            "description": "Returns [code]true[/code] if font with given [code]name[/code] has a valid override in this [Control] node."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "default": "\"\"",
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "has_icon",
            "description": "Returns [code]true[/code] if icon with given [code]name[/code] and associated with [Control] of given [code]node_type[/code] exists in assigned [Theme]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_icon_override",
            "description": "Returns [code]true[/code] if icon with given [code]name[/code] has a valid override in this [Control] node."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "point",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "has_point",
            "description": "Virtual method to be implemented by the user. Returns whether the given [code]point[/code] is inside this control.\n\t\t\t\tIf not overridden, default behavior is checking if the point is within control's Rect.\n\t\t\t\t[b]Note:[/b] If you want to check if a point is inside the control, you can use [code]get_rect().has_point(point)[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_shader_override",
            "description": "Returns [code]true[/code] if [Shader] with given [code]name[/code] has a valid override in this [Control] node."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "default": "\"\"",
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "has_stylebox",
            "description": "Returns [code]true[/code] if [StyleBox] with given [code]name[/code] and associated with [Control] of given [code]node_type[/code] exists in assigned [Theme]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_stylebox_override",
            "description": "Returns [code]true[/code] if [StyleBox] with given [code]name[/code] has a valid override in this [Control] node."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "minimum_size_changed",
            "description": "Invalidates the size cache in this node and in parent nodes up to toplevel. Intended to be used with [method get_minimum_size] when the return value is changed. Setting [member rect_min_size] directly calls this method automatically."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "release_focus",
            "description": "Give up the focus. No other control will be able to receive keyboard input."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "margin",
                "type": "int",
                "enum": "Margin",
                "index": "0"
              },
              {
                "name": "anchor",
                "type": "float",
                "index": "1"
              },
              {
                "default": "false",
                "name": "keep_margin",
                "type": "bool",
                "index": "2"
              },
              {
                "default": "true",
                "name": "push_opposite_anchor",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "set_anchor",
            "description": "Sets the anchor identified by [code]margin[/code] constant from [enum Margin] enum to value [code]anchor[/code]. A setter method for [member anchor_bottom], [member anchor_left], [member anchor_right] and [member anchor_top].\n\t\t\t\tIf [code]keep_margin[/code] is [code]true[/code], margins aren't updated after this operation.\n\t\t\t\tIf [code]push_opposite_anchor[/code] is [code]true[/code] and the opposite anchor overlaps this anchor, the opposite one will have its value overridden. For example, when setting left anchor to 1 and the right anchor has value of 0.5, the right anchor will also get value of 1. If [code]push_opposite_anchor[/code] was [code]false[/code], the left anchor would get value 0.5."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "margin",
                "type": "int",
                "enum": "Margin",
                "index": "0"
              },
              {
                "name": "anchor",
                "type": "float",
                "index": "1"
              },
              {
                "name": "offset",
                "type": "float",
                "index": "2"
              },
              {
                "default": "false",
                "name": "push_opposite_anchor",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "set_anchor_and_margin",
            "description": "Works the same as [method set_anchor], but instead of [code]keep_margin[/code] argument and automatic update of margin, it allows to set the margin offset yourself (see [method set_margin])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "preset",
                "type": "int",
                "enum": "Control.LayoutPreset",
                "index": "0"
              },
              {
                "default": "0",
                "name": "resize_mode",
                "type": "int",
                "enum": "Control.LayoutPresetMode",
                "index": "1"
              },
              {
                "default": "0",
                "name": "margin",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "set_anchors_and_margins_preset",
            "description": "Sets both anchor preset and margin preset. See [method set_anchors_preset] and [method set_margins_preset]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "preset",
                "type": "int",
                "enum": "Control.LayoutPreset",
                "index": "0"
              },
              {
                "default": "false",
                "name": "keep_margins",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_anchors_preset",
            "description": "Sets the anchors to a [code]preset[/code] from [enum Control.LayoutPreset] enum. This is the code equivalent to using the Layout menu in the 2D editor.\n\t\t\t\tIf [code]keep_margins[/code] is [code]true[/code], control's position will also be updated."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "position",
              "type": "Vector2",
              "index": "0"
            },
            "name": "set_begin",
            "description": "Sets [member margin_left] and [member margin_top] at the same time. Equivalent of changing [member rect_position]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "target",
              "type": "Control",
              "index": "0"
            },
            "name": "set_drag_forwarding",
            "description": "Forwards the handling of this control's drag and drop to [code]target[/code] control.\n\t\t\t\tForwarding can be implemented in the target control similar to the methods [method get_drag_data], [method can_drop_data], and [method drop_data] but with two differences:\n\t\t\t\t1. The function name must be suffixed with [b]_fw[/b]\n\t\t\t\t2. The function must take an extra argument that is the control doing the forwarding\n\t\t\t\t[codeblock]\n\t\t\t\t# ThisControl.gd\n\t\t\t\textends Control\n\t\t\t\tfunc _ready():\n\t\t\t\t    set_drag_forwarding(target_control)\n\n\t\t\t\t# TargetControl.gd\n\t\t\t\textends Control\n\t\t\t\tfunc can_drop_data_fw(position, data, from_control):\n\t\t\t\t    return true\n\n\t\t\t\tfunc drop_data_fw(position, data, from_control):\n\t\t\t\t    my_handle_data(data)\n\n\t\t\t\tfunc get_drag_data_fw(position, from_control):\n\t\t\t\t    set_drag_preview(my_preview)\n\t\t\t\t    return my_data()\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "control",
              "type": "Control",
              "index": "0"
            },
            "name": "set_drag_preview",
            "description": "Shows the given control at the mouse pointer. A good time to call this method is in [method get_drag_data]. The control must not be in the scene tree. You should not free the control, and you should not keep a reference to the control beyond the duration of the drag. It will be deleted automatically after the drag has ended.\n\t\t\t\t[codeblock]\n\t\t\t\texport (Color, RGBA) var color = Color(1, 0, 0, 1)\n\n\t\t\t\tfunc get_drag_data(position):\n\t\t\t\t    # Use a control that is not in the tree\n\t\t\t\t    var cpb = ColorPickerButton.new()\n\t\t\t\t    cpb.color = color\n\t\t\t\t    cpb.rect_size = Vector2(50, 50)\n\t\t\t\t    set_drag_preview(cpb)\n\t\t\t\t    return color\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "position",
              "type": "Vector2",
              "index": "0"
            },
            "name": "set_end",
            "description": "Sets [member margin_right] and [member margin_bottom] at the same time."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "margin",
                "type": "int",
                "enum": "Margin",
                "index": "0"
              },
              {
                "name": "neighbour",
                "type": "NodePath",
                "index": "1"
              }
            ],
            "name": "set_focus_neighbour",
            "description": "Sets the anchor identified by [code]margin[/code] constant from [enum Margin] enum to [Control] at [code]neighbor[/code] node path. A setter method for [member focus_neighbour_bottom], [member focus_neighbour_left], [member focus_neighbour_right] and [member focus_neighbour_top]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "position",
                "type": "Vector2",
                "index": "0"
              },
              {
                "default": "false",
                "name": "keep_margins",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_global_position",
            "description": "Sets the [member rect_global_position] to given [code]position[/code].\n\t\t\t\tIf [code]keep_margins[/code] is [code]true[/code], control's anchors will be updated instead of margins."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "margin",
                "type": "int",
                "enum": "Margin",
                "index": "0"
              },
              {
                "name": "offset",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_margin",
            "description": "Sets the margin identified by [code]margin[/code] constant from [enum Margin] enum to given [code]offset[/code]. A setter method for [member margin_bottom], [member margin_left], [member margin_right] and [member margin_top]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "preset",
                "type": "int",
                "enum": "Control.LayoutPreset",
                "index": "0"
              },
              {
                "default": "0",
                "name": "resize_mode",
                "type": "int",
                "enum": "Control.LayoutPresetMode",
                "index": "1"
              },
              {
                "default": "0",
                "name": "margin",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "set_margins_preset",
            "description": "Sets the margins to a [code]preset[/code] from [enum Control.LayoutPreset] enum. This is the code equivalent to using the Layout menu in the 2D editor.\n\t\t\t\tUse parameter [code]resize_mode[/code] with constants from [enum Control.LayoutPresetMode] to better determine the resulting size of the [Control]. Constant size will be ignored if used with presets that change size, e.g. [code]PRESET_LEFT_WIDE[/code].\n\t\t\t\tUse parameter [code]margin[/code] to determine the gap between the [Control] and the edges."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "position",
                "type": "Vector2",
                "index": "0"
              },
              {
                "default": "false",
                "name": "keep_margins",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_position",
            "description": "Sets the [member rect_position] to given [code]position[/code].\n\t\t\t\tIf [code]keep_margins[/code] is [code]true[/code], control's anchors will be updated instead of margins."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "radians",
              "type": "float",
              "index": "0"
            },
            "name": "set_rotation",
            "description": "Sets the rotation (in radians)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "size",
                "type": "Vector2",
                "index": "0"
              },
              {
                "default": "false",
                "name": "keep_margins",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_size",
            "description": "Sets the size (see [member rect_size]).\n\t\t\t\tIf [code]keep_margins[/code] is [code]true[/code], control's anchors will be updated instead of margins."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "false",
              "name": "exclusive",
              "type": "bool",
              "index": "0"
            },
            "name": "show_modal",
            "description": "Displays a control as modal. Control must be a subwindow. Modal controls capture the input signals until closed or the area outside them is accessed. When a modal control loses focus, or the ESC key is pressed, they automatically hide. Modal controls are used extensively for popup dialogs and menus.\n\t\t\t\tIf [code]exclusive[/code] is [code]true[/code], other controls will not receive input and clicking outside this control will not close it."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "to_position",
              "type": "Vector2",
              "index": "0"
            },
            "name": "warp_mouse",
            "description": "Moves the mouse cursor to [code]to_position[/code], relative to [member rect_position] of this [Control]."
          }
        ]
      },
      "name": "Control",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "focus_entered",
            "description": "Emitted when the node gains keyboard focus."
          },
          {
            "name": "focus_exited",
            "description": "Emitted when the node loses keyboard focus."
          },
          {
            "argument": {
              "name": "event",
              "type": "InputEvent",
              "index": "0"
            },
            "name": "gui_input",
            "description": "Emitted when the node receives an [InputEvent]."
          },
          {
            "name": "minimum_size_changed",
            "description": "Emitted when the node's minimum size changes."
          },
          {
            "name": "modal_closed",
            "description": "Emitted when a modal [Control] is closed. See [method show_modal]."
          },
          {
            "name": "mouse_entered",
            "description": "Emitted when the mouse enters the control's [code]Rect[/code] area, provided its [member mouse_filter] lets the event reach it.\n\t\t\t\t[b]Note:[/b] [signal mouse_entered] will not be emitted if the mouse enters a child [Control] node before entering the parent's [code]Rect[/code] area, at least until the mouse is moved to reach the parent's [code]Rect[/code] area."
          },
          {
            "name": "mouse_exited",
            "description": "Emitted when the mouse leaves the control's [code]Rect[/code] area, provided its [member mouse_filter] lets the event reach it.\n\t\t\t\t[b]Note:[/b] [signal mouse_exited] will be emitted if the mouse enters a child [Control] node, even if the mouse cursor is still inside the parent's [code]Rect[/code] area."
          },
          {
            "name": "resized",
            "description": "Emitted when the control changes size."
          },
          {
            "name": "size_flags_changed",
            "description": "Emitted when one of the size flags changes. See [member size_flags_horizontal] and [member size_flags_vertical]."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "FOCUS_NONE",
            "enum": "FocusMode"
          },
          {
            "value": "1",
            "name": "FOCUS_CLICK",
            "enum": "FocusMode"
          },
          {
            "value": "2",
            "name": "FOCUS_ALL",
            "enum": "FocusMode"
          },
          {
            "value": "40",
            "name": "NOTIFICATION_RESIZED"
          },
          {
            "value": "41",
            "name": "NOTIFICATION_MOUSE_ENTER"
          },
          {
            "value": "42",
            "name": "NOTIFICATION_MOUSE_EXIT"
          },
          {
            "value": "43",
            "name": "NOTIFICATION_FOCUS_ENTER"
          },
          {
            "value": "44",
            "name": "NOTIFICATION_FOCUS_EXIT"
          },
          {
            "value": "45",
            "name": "NOTIFICATION_THEME_CHANGED"
          },
          {
            "value": "46",
            "name": "NOTIFICATION_MODAL_CLOSE"
          },
          {
            "value": "47",
            "name": "NOTIFICATION_SCROLL_BEGIN"
          },
          {
            "value": "48",
            "name": "NOTIFICATION_SCROLL_END"
          },
          {
            "value": "0",
            "name": "CURSOR_ARROW",
            "enum": "CursorShape"
          },
          {
            "value": "1",
            "name": "CURSOR_IBEAM",
            "enum": "CursorShape"
          },
          {
            "value": "2",
            "name": "CURSOR_POINTING_HAND",
            "enum": "CursorShape"
          },
          {
            "value": "3",
            "name": "CURSOR_CROSS",
            "enum": "CursorShape"
          },
          {
            "value": "4",
            "name": "CURSOR_WAIT",
            "enum": "CursorShape"
          },
          {
            "value": "5",
            "name": "CURSOR_BUSY",
            "enum": "CursorShape"
          },
          {
            "value": "6",
            "name": "CURSOR_DRAG",
            "enum": "CursorShape"
          },
          {
            "value": "7",
            "name": "CURSOR_CAN_DROP",
            "enum": "CursorShape"
          },
          {
            "value": "8",
            "name": "CURSOR_FORBIDDEN",
            "enum": "CursorShape"
          },
          {
            "value": "9",
            "name": "CURSOR_VSIZE",
            "enum": "CursorShape"
          },
          {
            "value": "10",
            "name": "CURSOR_HSIZE",
            "enum": "CursorShape"
          },
          {
            "value": "11",
            "name": "CURSOR_BDIAGSIZE",
            "enum": "CursorShape"
          },
          {
            "value": "12",
            "name": "CURSOR_FDIAGSIZE",
            "enum": "CursorShape"
          },
          {
            "value": "13",
            "name": "CURSOR_MOVE",
            "enum": "CursorShape"
          },
          {
            "value": "14",
            "name": "CURSOR_VSPLIT",
            "enum": "CursorShape"
          },
          {
            "value": "15",
            "name": "CURSOR_HSPLIT",
            "enum": "CursorShape"
          },
          {
            "value": "16",
            "name": "CURSOR_HELP",
            "enum": "CursorShape"
          },
          {
            "value": "0",
            "name": "PRESET_TOP_LEFT",
            "enum": "LayoutPreset"
          },
          {
            "value": "1",
            "name": "PRESET_TOP_RIGHT",
            "enum": "LayoutPreset"
          },
          {
            "value": "2",
            "name": "PRESET_BOTTOM_LEFT",
            "enum": "LayoutPreset"
          },
          {
            "value": "3",
            "name": "PRESET_BOTTOM_RIGHT",
            "enum": "LayoutPreset"
          },
          {
            "value": "4",
            "name": "PRESET_CENTER_LEFT",
            "enum": "LayoutPreset"
          },
          {
            "value": "5",
            "name": "PRESET_CENTER_TOP",
            "enum": "LayoutPreset"
          },
          {
            "value": "6",
            "name": "PRESET_CENTER_RIGHT",
            "enum": "LayoutPreset"
          },
          {
            "value": "7",
            "name": "PRESET_CENTER_BOTTOM",
            "enum": "LayoutPreset"
          },
          {
            "value": "8",
            "name": "PRESET_CENTER",
            "enum": "LayoutPreset"
          },
          {
            "value": "9",
            "name": "PRESET_LEFT_WIDE",
            "enum": "LayoutPreset"
          },
          {
            "value": "10",
            "name": "PRESET_TOP_WIDE",
            "enum": "LayoutPreset"
          },
          {
            "value": "11",
            "name": "PRESET_RIGHT_WIDE",
            "enum": "LayoutPreset"
          },
          {
            "value": "12",
            "name": "PRESET_BOTTOM_WIDE",
            "enum": "LayoutPreset"
          },
          {
            "value": "13",
            "name": "PRESET_VCENTER_WIDE",
            "enum": "LayoutPreset"
          },
          {
            "value": "14",
            "name": "PRESET_HCENTER_WIDE",
            "enum": "LayoutPreset"
          },
          {
            "value": "15",
            "name": "PRESET_WIDE",
            "enum": "LayoutPreset"
          },
          {
            "value": "0",
            "name": "PRESET_MODE_MINSIZE",
            "enum": "LayoutPresetMode"
          },
          {
            "value": "1",
            "name": "PRESET_MODE_KEEP_WIDTH",
            "enum": "LayoutPresetMode"
          },
          {
            "value": "2",
            "name": "PRESET_MODE_KEEP_HEIGHT",
            "enum": "LayoutPresetMode"
          },
          {
            "value": "3",
            "name": "PRESET_MODE_KEEP_SIZE",
            "enum": "LayoutPresetMode"
          },
          {
            "value": "1",
            "name": "SIZE_FILL",
            "enum": "SizeFlags"
          },
          {
            "value": "2",
            "name": "SIZE_EXPAND",
            "enum": "SizeFlags"
          },
          {
            "value": "3",
            "name": "SIZE_EXPAND_FILL",
            "enum": "SizeFlags"
          },
          {
            "value": "4",
            "name": "SIZE_SHRINK_CENTER",
            "enum": "SizeFlags"
          },
          {
            "value": "8",
            "name": "SIZE_SHRINK_END",
            "enum": "SizeFlags"
          },
          {
            "value": "0",
            "name": "MOUSE_FILTER_STOP",
            "enum": "MouseFilter"
          },
          {
            "value": "1",
            "name": "MOUSE_FILTER_PASS",
            "enum": "MouseFilter"
          },
          {
            "value": "2",
            "name": "MOUSE_FILTER_IGNORE",
            "enum": "MouseFilter"
          },
          {
            "value": "0",
            "name": "GROW_DIRECTION_BEGIN",
            "enum": "GrowDirection"
          },
          {
            "value": "1",
            "name": "GROW_DIRECTION_END",
            "enum": "GrowDirection"
          },
          {
            "value": "2",
            "name": "GROW_DIRECTION_BOTH",
            "enum": "GrowDirection"
          },
          {
            "value": "0",
            "name": "ANCHOR_BEGIN",
            "enum": "Anchor"
          },
          {
            "value": "1",
            "name": "ANCHOR_END",
            "enum": "Anchor"
          }
        ]
      },
      "brief_description": "All user interface nodes inherit from Control. A control's anchors and margins adapt its position and size relative to its parent.",
      "description": "Base class for all UI-related nodes. [Control] features a bounding rectangle that defines its extents, an anchor position relative to its parent control or the current viewport, and margins that represent an offset to the anchor. The margins update automatically when the node, any of its parents, or the screen size change.\n\t\tFor more information on Godot's UI system, anchors, margins, and containers, see the related tutorials in the manual. To build flexible UIs, you'll need a mix of UI elements that inherit from [Control] and [Container] nodes.\n\t\t[b]User Interface nodes and input[/b]\n\t\tGodot sends input events to the scene's root node first, by calling [method Node._input]. [method Node._input] forwards the event down the node tree to the nodes under the mouse cursor, or on keyboard focus. To do so, it calls [method MainLoop._input_event]. Call [method accept_event] so no other node receives the event. Once you accept an input, it becomes handled so [method Node._unhandled_input] will not process it.\n\t\tOnly one [Control] node can be in keyboard focus. Only the node in focus will receive keyboard events. To get the focus, call [method grab_focus]. [Control] nodes lose focus when another node grabs it, or if you hide the node in focus.\n\t\tSets [member mouse_filter] to [constant MOUSE_FILTER_IGNORE] to tell a [Control] node to ignore mouse or touch events. You'll need it if you place an icon on top of a button.\n\t\t[Theme] resources change the Control's appearance. If you change the [Theme] on a [Control] node, it affects all of its children. To override some of the theme's parameters, call one of the [code]add_*_override[/code] methods, like [method add_font_override]. You can override the theme with the inspector.\n\t\t[b]Note:[/b] Theme items are [i]not[/i] [Object] properties. This means you can't access their values using [method Object.get] and [method Object.set]. Instead, use [method get_color], [method get_constant], [method get_font], [method get_icon], [method get_stylebox], and the [code]add_*_override[/code] methods provided by this class."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "PoolVector2Array(  )",
          "value": "The polygon's list of vertices. Can be in either clockwise or counterclockwise order.",
          "setter": "set_points",
          "name": "points",
          "getter": "get_points",
          "type": "PoolVector2Array"
        }
      },
      "inherits": "Shape2D",
      "methods": {
        "method": {
          "return": {
            "type": "void"
          },
          "argument": {
            "name": "point_cloud",
            "type": "PoolVector2Array",
            "index": "0"
          },
          "name": "set_point_cloud",
          "description": "Based on the set of points provided, this creates and assigns the [member points] property using the convex hull algorithm. Removing all unneeded points. See [method Geometry.convex_hull_2d] for details."
        }
      },
      "name": "ConvexPolygonShape2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Convex polygon shape for 2D physics.",
      "description": "Convex polygon shape for 2D physics. A convex polygon, whatever its shape, is internally decomposed into as many convex polygons as needed to ensure all collision checks against it are always done on convex polygons (which are faster to check).\n\t\tThe main difference between a [ConvexPolygonShape2D] and a [ConcavePolygonShape2D] is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/675",
          "title": "3D Physics Tests Demo"
        }
      },
      "members": {
        "member": {
          "default": "PoolVector3Array(  )",
          "value": "The list of 3D points forming the convex polygon shape.",
          "setter": "set_points",
          "name": "points",
          "getter": "get_points",
          "type": "PoolVector3Array"
        }
      },
      "inherits": "Shape",
      "methods": {},
      "name": "ConvexPolygonShape",
      "version": "3.3",
      "constants": {},
      "brief_description": "Convex polygon shape for 3D physics.",
      "description": "Convex polygon shape resource, which can be added to a [PhysicsBody] or area."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/2d/particle_systems_2d.html"
      },
      "members": {
        "member": [
          {
            "default": "8",
            "value": "The number of particles emitted in one emission cycle (corresponding to the [member lifetime]).\n\t\t\t[b]Note:[/b] Changing [member amount] will reset the particle emission, therefore removing all particles that were already emitted before changing [member amount].",
            "setter": "set_amount",
            "name": "amount",
            "getter": "get_amount",
            "type": "int"
          },
          {
            "default": "0.0",
            "value": "Initial rotation applied to each particle, in degrees.",
            "setter": "set_param",
            "name": "angle",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's rotation will be animated along this [Curve].",
            "setter": "set_param_curve",
            "name": "angle_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Rotation randomness ratio.",
            "setter": "set_param_randomness",
            "name": "angle_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Initial angular velocity applied to each particle. Sets the speed of rotation of the particle.",
            "setter": "set_param",
            "name": "angular_velocity",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's angular velocity will vary along this [Curve].",
            "setter": "set_param_curve",
            "name": "angular_velocity_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Angular velocity randomness ratio.",
            "setter": "set_param_randomness",
            "name": "angular_velocity_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Particle animation offset.",
            "setter": "set_param",
            "name": "anim_offset",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's animation offset will vary along this [Curve].",
            "setter": "set_param_curve",
            "name": "anim_offset_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Animation offset randomness ratio.",
            "setter": "set_param_randomness",
            "name": "anim_offset_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Particle animation speed.",
            "setter": "set_param",
            "name": "anim_speed",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's animation speed will vary along this [Curve].",
            "setter": "set_param_curve",
            "name": "anim_speed_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Animation speed randomness ratio.",
            "setter": "set_param_randomness",
            "name": "anim_speed_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "Each particle's initial color. If [member texture] is defined, it will be multiplied by this color.",
            "setter": "set_color",
            "name": "color",
            "getter": "get_color",
            "type": "Color"
          },
          {
            "value": "Each particle's color will vary along this [Gradient].",
            "setter": "set_color_ramp",
            "name": "color_ramp",
            "getter": "get_color_ramp",
            "type": "Gradient"
          },
          {
            "default": "0.0",
            "value": "The rate at which particles lose velocity.",
            "setter": "set_param",
            "name": "damping",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Damping will vary along this [Curve].",
            "setter": "set_param_curve",
            "name": "damping_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Damping randomness ratio.",
            "setter": "set_param_randomness",
            "name": "damping_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "Vector2( 1, 0 )",
            "value": "Unit vector specifying the particles' emission direction.",
            "setter": "set_direction",
            "name": "direction",
            "getter": "get_direction",
            "type": "Vector2"
          },
          {
            "default": "0",
            "value": "Particle draw order. Uses [enum DrawOrder] values.",
            "setter": "set_draw_order",
            "name": "draw_order",
            "getter": "get_draw_order",
            "type": "int",
            "enum": "CPUParticles2D.DrawOrder"
          },
          {
            "value": "Sets the [Color]s to modulate particles by when using [constant EMISSION_SHAPE_POINTS] or [constant EMISSION_SHAPE_DIRECTED_POINTS].",
            "setter": "set_emission_colors",
            "name": "emission_colors",
            "getter": "get_emission_colors",
            "type": "PoolColorArray"
          },
          {
            "value": "Sets the direction the particles will be emitted in when using [constant EMISSION_SHAPE_DIRECTED_POINTS].",
            "setter": "set_emission_normals",
            "name": "emission_normals",
            "getter": "get_emission_normals",
            "type": "PoolVector2Array"
          },
          {
            "value": "Sets the initial positions to spawn particles when using [constant EMISSION_SHAPE_POINTS] or [constant EMISSION_SHAPE_DIRECTED_POINTS].",
            "setter": "set_emission_points",
            "name": "emission_points",
            "getter": "get_emission_points",
            "type": "PoolVector2Array"
          },
          {
            "value": "The rectangle's extents if [member emission_shape] is set to [constant EMISSION_SHAPE_RECTANGLE].",
            "setter": "set_emission_rect_extents",
            "name": "emission_rect_extents",
            "getter": "get_emission_rect_extents",
            "type": "Vector2"
          },
          {
            "default": "0",
            "value": "Particles will be emitted inside this region. See [enum EmissionShape] for possible values.",
            "setter": "set_emission_shape",
            "name": "emission_shape",
            "getter": "get_emission_shape",
            "type": "int",
            "enum": "CPUParticles2D.EmissionShape"
          },
          {
            "value": "The sphere's radius if [member emission_shape] is set to [constant EMISSION_SHAPE_SPHERE].",
            "setter": "set_emission_sphere_radius",
            "name": "emission_sphere_radius",
            "getter": "get_emission_sphere_radius",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], particles are being emitted.",
            "setter": "set_emitting",
            "name": "emitting",
            "getter": "is_emitting",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "How rapidly particles in an emission cycle are emitted. If greater than [code]0[/code], there will be a gap in emissions before the next cycle begins.",
            "setter": "set_explosiveness_ratio",
            "name": "explosiveness",
            "getter": "get_explosiveness_ratio",
            "type": "float"
          },
          {
            "default": "0",
            "value": "The particle system's frame rate is fixed to a value. For instance, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the simulation of the particle system itself.",
            "setter": "set_fixed_fps",
            "name": "fixed_fps",
            "getter": "get_fixed_fps",
            "type": "int"
          },
          {
            "default": "false",
            "value": "Align Y axis of particle with the direction of its velocity.",
            "setter": "set_particle_flag",
            "name": "flag_align_y",
            "getter": "get_particle_flag",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], results in fractional delta calculation which has a smoother particles display effect.",
            "setter": "set_fractional_delta",
            "name": "fract_delta",
            "getter": "get_fractional_delta",
            "type": "bool"
          },
          {
            "default": "Vector2( 0, 98 )",
            "value": "Gravity applied to every particle.",
            "setter": "set_gravity",
            "name": "gravity",
            "getter": "get_gravity",
            "type": "Vector2"
          },
          {
            "default": "0.0",
            "value": "Initial hue variation applied to each particle.",
            "setter": "set_param",
            "name": "hue_variation",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's hue will vary along this [Curve].",
            "setter": "set_param_curve",
            "name": "hue_variation_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Hue variation randomness ratio.",
            "setter": "set_param_randomness",
            "name": "hue_variation_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Initial velocity magnitude for each particle. Direction comes from [member spread] and the node's orientation.",
            "setter": "set_param",
            "name": "initial_velocity",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Initial velocity randomness ratio.",
            "setter": "set_param_randomness",
            "name": "initial_velocity_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The amount of time each particle will exist (in seconds).",
            "setter": "set_lifetime",
            "name": "lifetime",
            "getter": "get_lifetime",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Particle lifetime randomness ratio.",
            "setter": "set_lifetime_randomness",
            "name": "lifetime_randomness",
            "getter": "get_lifetime_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Linear acceleration applied to each particle in the direction of motion.",
            "setter": "set_param",
            "name": "linear_accel",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's linear acceleration will vary along this [Curve].",
            "setter": "set_param_curve",
            "name": "linear_accel_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Linear acceleration randomness ratio.",
            "setter": "set_param_randomness",
            "name": "linear_accel_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], particles use the parent node's coordinate space. If [code]false[/code], they use global coordinates.",
            "setter": "set_use_local_coordinates",
            "name": "local_coords",
            "getter": "get_use_local_coordinates",
            "type": "bool"
          },
          {
            "value": "Normal map to be used for the [member texture] property.\n\t\t\t[b]Note:[/b] Godot expects the normal map to use X+, Y-, and Z+ coordinates. See [url=http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates]this page[/url] for a comparison of normal map coordinates expected by popular engines.",
            "setter": "set_normalmap",
            "name": "normalmap",
            "getter": "get_normalmap",
            "type": "Texture"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], only one emission cycle occurs. If set [code]true[/code] during a cycle, emission will stop at the cycle's end.",
            "setter": "set_one_shot",
            "name": "one_shot",
            "getter": "get_one_shot",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "Orbital velocity applied to each particle. Makes the particles circle around origin. Specified in number of full rotations around origin per second.",
            "setter": "set_param",
            "name": "orbit_velocity",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's orbital velocity will vary along this [Curve].",
            "setter": "set_param_curve",
            "name": "orbit_velocity_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Orbital velocity randomness ratio.",
            "setter": "set_param_randomness",
            "name": "orbit_velocity_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Particle system starts as if it had already run for this many seconds.",
            "setter": "set_pre_process_time",
            "name": "preprocess",
            "getter": "get_pre_process_time",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Radial acceleration applied to each particle. Makes particle accelerate away from origin.",
            "setter": "set_param",
            "name": "radial_accel",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's radial acceleration will vary along this [Curve].",
            "setter": "set_param_curve",
            "name": "radial_accel_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Radial acceleration randomness ratio.",
            "setter": "set_param_randomness",
            "name": "radial_accel_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Emission lifetime randomness ratio.",
            "setter": "set_randomness_ratio",
            "name": "randomness",
            "getter": "get_randomness_ratio",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Initial scale applied to each particle.",
            "setter": "set_param",
            "name": "scale_amount",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's scale will vary along this [Curve].",
            "setter": "set_param_curve",
            "name": "scale_amount_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Scale randomness ratio.",
            "setter": "set_param_randomness",
            "name": "scale_amount_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Particle system's running speed scaling ratio. A value of [code]0[/code] can be used to pause the particles.",
            "setter": "set_speed_scale",
            "name": "speed_scale",
            "getter": "get_speed_scale",
            "type": "float"
          },
          {
            "default": "45.0",
            "value": "Each particle's initial direction range from [code]+spread[/code] to [code]-spread[/code] degrees.",
            "setter": "set_spread",
            "name": "spread",
            "getter": "get_spread",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity giving the particles a swirling motion.",
            "setter": "set_param",
            "name": "tangential_accel",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's tangential acceleration will vary along this [Curve].",
            "setter": "set_param_curve",
            "name": "tangential_accel_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Tangential acceleration randomness ratio.",
            "setter": "set_param_randomness",
            "name": "tangential_accel_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "value": "Particle texture. If [code]null[/code], particles will be squares.",
            "setter": "set_texture",
            "name": "texture",
            "getter": "get_texture",
            "type": "Texture"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "particles",
              "type": "Node",
              "index": "0"
            },
            "name": "convert_from_particles",
            "description": "Sets this node's properties to match a given [Particles2D] node with an assigned [ParticlesMaterial]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "param",
              "type": "int",
              "enum": "CPUParticles2D.Parameter",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_param",
            "description": "Returns the base value of the parameter specified by [enum Parameter]."
          },
          {
            "return": {
              "type": "Curve"
            },
            "argument": {
              "name": "param",
              "type": "int",
              "enum": "CPUParticles2D.Parameter",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_param_curve",
            "description": "Returns the [Curve] of the parameter specified by [enum Parameter]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "param",
              "type": "int",
              "enum": "CPUParticles2D.Parameter",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_param_randomness",
            "description": "Returns the randomness factor of the parameter specified by [enum Parameter]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "flag",
              "type": "int",
              "enum": "CPUParticles2D.Flags",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_particle_flag",
            "description": "Returns the enabled state of the given flag (see [enum Flags] for options)."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "restart",
            "description": "Restarts the particle emitter."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "param",
                "type": "int",
                "enum": "CPUParticles2D.Parameter",
                "index": "0"
              },
              {
                "name": "value",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_param",
            "description": "Sets the base value of the parameter specified by [enum Parameter]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "param",
                "type": "int",
                "enum": "CPUParticles2D.Parameter",
                "index": "0"
              },
              {
                "name": "curve",
                "type": "Curve",
                "index": "1"
              }
            ],
            "name": "set_param_curve",
            "description": "Sets the [Curve] of the parameter specified by [enum Parameter]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "param",
                "type": "int",
                "enum": "CPUParticles2D.Parameter",
                "index": "0"
              },
              {
                "name": "randomness",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_param_randomness",
            "description": "Sets the randomness factor of the parameter specified by [enum Parameter]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "flag",
                "type": "int",
                "enum": "CPUParticles2D.Flags",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_particle_flag",
            "description": "Enables or disables the given flag (see [enum Flags] for options)."
          }
        ]
      },
      "name": "CPUParticles2D",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "DRAW_ORDER_INDEX",
            "enum": "DrawOrder"
          },
          {
            "value": "1",
            "name": "DRAW_ORDER_LIFETIME",
            "enum": "DrawOrder"
          },
          {
            "value": "0",
            "name": "PARAM_INITIAL_LINEAR_VELOCITY",
            "enum": "Parameter"
          },
          {
            "value": "1",
            "name": "PARAM_ANGULAR_VELOCITY",
            "enum": "Parameter"
          },
          {
            "value": "2",
            "name": "PARAM_ORBIT_VELOCITY",
            "enum": "Parameter"
          },
          {
            "value": "3",
            "name": "PARAM_LINEAR_ACCEL",
            "enum": "Parameter"
          },
          {
            "value": "4",
            "name": "PARAM_RADIAL_ACCEL",
            "enum": "Parameter"
          },
          {
            "value": "5",
            "name": "PARAM_TANGENTIAL_ACCEL",
            "enum": "Parameter"
          },
          {
            "value": "6",
            "name": "PARAM_DAMPING",
            "enum": "Parameter"
          },
          {
            "value": "7",
            "name": "PARAM_ANGLE",
            "enum": "Parameter"
          },
          {
            "value": "8",
            "name": "PARAM_SCALE",
            "enum": "Parameter"
          },
          {
            "value": "9",
            "name": "PARAM_HUE_VARIATION",
            "enum": "Parameter"
          },
          {
            "value": "10",
            "name": "PARAM_ANIM_SPEED",
            "enum": "Parameter"
          },
          {
            "value": "11",
            "name": "PARAM_ANIM_OFFSET",
            "enum": "Parameter"
          },
          {
            "value": "12",
            "name": "PARAM_MAX",
            "enum": "Parameter"
          },
          {
            "value": "0",
            "name": "FLAG_ALIGN_Y_TO_VELOCITY",
            "enum": "Flags"
          },
          {
            "value": "1",
            "name": "FLAG_ROTATE_Y",
            "enum": "Flags"
          },
          {
            "value": "2",
            "name": "FLAG_DISABLE_Z",
            "enum": "Flags"
          },
          {
            "value": "3",
            "name": "FLAG_MAX",
            "enum": "Flags"
          },
          {
            "value": "0",
            "name": "EMISSION_SHAPE_POINT",
            "enum": "EmissionShape"
          },
          {
            "value": "1",
            "name": "EMISSION_SHAPE_SPHERE",
            "enum": "EmissionShape"
          },
          {
            "value": "2",
            "name": "EMISSION_SHAPE_RECTANGLE",
            "enum": "EmissionShape"
          },
          {
            "value": "3",
            "name": "EMISSION_SHAPE_POINTS",
            "enum": "EmissionShape"
          },
          {
            "value": "4",
            "name": "EMISSION_SHAPE_DIRECTED_POINTS",
            "enum": "EmissionShape"
          },
          {
            "value": "5",
            "name": "EMISSION_SHAPE_MAX",
            "enum": "EmissionShape"
          }
        ]
      },
      "brief_description": "CPU-based 2D particle emitter.",
      "description": "CPU-based 2D particle node used to create a variety of particle systems and effects.\n\t\tSee also [Particles2D], which provides the same functionality with hardware acceleration, but may not run on older devices.\n\t\t[b]Note:[/b] Unlike [Particles2D], the visibility rect is generated on-the-fly and doesn't need to be configured by the user."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "8",
            "value": "The number of particles emitted in one emission cycle (corresponding to the [member lifetime]).\n\t\t\t[b]Note:[/b] Changing [member amount] will reset the particle emission, therefore removing all particles that were already emitted before changing [member amount].",
            "setter": "set_amount",
            "name": "amount",
            "getter": "get_amount",
            "type": "int"
          },
          {
            "default": "0.0",
            "value": "Initial rotation applied to each particle, in degrees.",
            "setter": "set_param",
            "name": "angle",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's rotation will be animated along this [Curve].",
            "setter": "set_param_curve",
            "name": "angle_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Rotation randomness ratio.",
            "setter": "set_param_randomness",
            "name": "angle_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Initial angular velocity applied to each particle. Sets the speed of rotation of the particle.",
            "setter": "set_param",
            "name": "angular_velocity",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's angular velocity will vary along this [Curve].",
            "setter": "set_param_curve",
            "name": "angular_velocity_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Angular velocity randomness ratio.",
            "setter": "set_param_randomness",
            "name": "angular_velocity_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Particle animation offset.",
            "setter": "set_param",
            "name": "anim_offset",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's animation offset will vary along this [Curve].",
            "setter": "set_param_curve",
            "name": "anim_offset_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Animation offset randomness ratio.",
            "setter": "set_param_randomness",
            "name": "anim_offset_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Particle animation speed.",
            "setter": "set_param",
            "name": "anim_speed",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's animation speed will vary along this [Curve].",
            "setter": "set_param_curve",
            "name": "anim_speed_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Animation speed randomness ratio.",
            "setter": "set_param_randomness",
            "name": "anim_speed_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "Unused for 3D particles.",
            "setter": "set_color",
            "name": "color",
            "getter": "get_color",
            "type": "Color"
          },
          {
            "value": "Unused for 3D particles.",
            "setter": "set_color_ramp",
            "name": "color_ramp",
            "getter": "get_color_ramp",
            "type": "Gradient"
          },
          {
            "default": "0.0",
            "value": "The rate at which particles lose velocity.",
            "setter": "set_param",
            "name": "damping",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Damping will vary along this [Curve].",
            "setter": "set_param_curve",
            "name": "damping_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Damping randomness ratio.",
            "setter": "set_param_randomness",
            "name": "damping_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "Vector3( 1, 0, 0 )",
            "value": "Unit vector specifying the particles' emission direction.",
            "setter": "set_direction",
            "name": "direction",
            "getter": "get_direction",
            "type": "Vector3"
          },
          {
            "default": "0",
            "value": "Particle draw order. Uses [enum DrawOrder] values.",
            "setter": "set_draw_order",
            "name": "draw_order",
            "getter": "get_draw_order",
            "type": "int",
            "enum": "CPUParticles.DrawOrder"
          },
          {
            "value": "The rectangle's extents if [member emission_shape] is set to [constant EMISSION_SHAPE_BOX].",
            "setter": "set_emission_box_extents",
            "name": "emission_box_extents",
            "getter": "get_emission_box_extents",
            "type": "Vector3"
          },
          {
            "default": "PoolColorArray(  )",
            "value": "Sets the [Color]s to modulate particles by when using [constant EMISSION_SHAPE_POINTS] or [constant EMISSION_SHAPE_DIRECTED_POINTS].",
            "setter": "set_emission_colors",
            "name": "emission_colors",
            "getter": "get_emission_colors",
            "type": "PoolColorArray"
          },
          {
            "value": "Sets the direction the particles will be emitted in when using [constant EMISSION_SHAPE_DIRECTED_POINTS].",
            "setter": "set_emission_normals",
            "name": "emission_normals",
            "getter": "get_emission_normals",
            "type": "PoolVector3Array"
          },
          {
            "default": "PoolVector3Array(  )",
            "value": "Sets the initial positions to spawn particles when using [constant EMISSION_SHAPE_POINTS] or [constant EMISSION_SHAPE_DIRECTED_POINTS].",
            "setter": "set_emission_points",
            "name": "emission_points",
            "getter": "get_emission_points",
            "type": "PoolVector3Array"
          },
          {
            "default": "0",
            "value": "Particles will be emitted inside this region. See [enum EmissionShape] for possible values.",
            "setter": "set_emission_shape",
            "name": "emission_shape",
            "getter": "get_emission_shape",
            "type": "int",
            "enum": "CPUParticles.EmissionShape"
          },
          {
            "value": "The sphere's radius if [enum EmissionShape] is set to [constant EMISSION_SHAPE_SPHERE].",
            "setter": "set_emission_sphere_radius",
            "name": "emission_sphere_radius",
            "getter": "get_emission_sphere_radius",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], particles are being emitted.",
            "setter": "set_emitting",
            "name": "emitting",
            "getter": "is_emitting",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "How rapidly particles in an emission cycle are emitted. If greater than [code]0[/code], there will be a gap in emissions before the next cycle begins.",
            "setter": "set_explosiveness_ratio",
            "name": "explosiveness",
            "getter": "get_explosiveness_ratio",
            "type": "float"
          },
          {
            "default": "0",
            "value": "The particle system's frame rate is fixed to a value. For instance, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the particle system itself.",
            "setter": "set_fixed_fps",
            "name": "fixed_fps",
            "getter": "get_fixed_fps",
            "type": "int"
          },
          {
            "default": "false",
            "value": "Align Y axis of particle with the direction of its velocity.",
            "setter": "set_particle_flag",
            "name": "flag_align_y",
            "getter": "get_particle_flag",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], particles will not move on the z axis.",
            "setter": "set_particle_flag",
            "name": "flag_disable_z",
            "getter": "get_particle_flag",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], particles rotate around Y axis by [member angle].",
            "setter": "set_particle_flag",
            "name": "flag_rotate_y",
            "getter": "get_particle_flag",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "Amount of [member spread] in Y/Z plane. A value of [code]1[/code] restricts particles to X/Z plane.",
            "setter": "set_flatness",
            "name": "flatness",
            "getter": "get_flatness",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], results in fractional delta calculation which has a smoother particles display effect.",
            "setter": "set_fractional_delta",
            "name": "fract_delta",
            "getter": "get_fractional_delta",
            "type": "bool"
          },
          {
            "default": "Vector3( 0, -9.8, 0 )",
            "value": "Gravity applied to every particle.",
            "setter": "set_gravity",
            "name": "gravity",
            "getter": "get_gravity",
            "type": "Vector3"
          },
          {
            "default": "0.0",
            "value": "Initial hue variation applied to each particle.",
            "setter": "set_param",
            "name": "hue_variation",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's hue will vary along this [Curve].",
            "setter": "set_param_curve",
            "name": "hue_variation_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Hue variation randomness ratio.",
            "setter": "set_param_randomness",
            "name": "hue_variation_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Initial velocity magnitude for each particle. Direction comes from [member spread] and the node's orientation.",
            "setter": "set_param",
            "name": "initial_velocity",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Initial velocity randomness ratio.",
            "setter": "set_param_randomness",
            "name": "initial_velocity_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The amount of time each particle will exist (in seconds).",
            "setter": "set_lifetime",
            "name": "lifetime",
            "getter": "get_lifetime",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Particle lifetime randomness ratio.",
            "setter": "set_lifetime_randomness",
            "name": "lifetime_randomness",
            "getter": "get_lifetime_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Linear acceleration applied to each particle in the direction of motion.",
            "setter": "set_param",
            "name": "linear_accel",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's linear acceleration will vary along this [Curve].",
            "setter": "set_param_curve",
            "name": "linear_accel_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Linear acceleration randomness ratio.",
            "setter": "set_param_randomness",
            "name": "linear_accel_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], particles use the parent node's coordinate space. If [code]false[/code], they use global coordinates.",
            "setter": "set_use_local_coordinates",
            "name": "local_coords",
            "getter": "get_use_local_coordinates",
            "type": "bool"
          },
          {
            "value": "The [Mesh] used for each particle. If [code]null[/code], particles will be spheres.",
            "setter": "set_mesh",
            "name": "mesh",
            "getter": "get_mesh",
            "type": "Mesh"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], only one emission cycle occurs. If set [code]true[/code] during a cycle, emission will stop at the cycle's end.",
            "setter": "set_one_shot",
            "name": "one_shot",
            "getter": "get_one_shot",
            "type": "bool"
          },
          {
            "value": "Orbital velocity applied to each particle. Makes the particles circle around origin in the local XY plane. Specified in number of full rotations around origin per second.\n\t\t\tThis property is only available when [member flag_disable_z] is [code]true[/code].",
            "setter": "set_param",
            "name": "orbit_velocity",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's orbital velocity will vary along this [Curve].",
            "setter": "set_param_curve",
            "name": "orbit_velocity_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "value": "Orbital velocity randomness ratio.",
            "setter": "set_param_randomness",
            "name": "orbit_velocity_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Particle system starts as if it had already run for this many seconds.",
            "setter": "set_pre_process_time",
            "name": "preprocess",
            "getter": "get_pre_process_time",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Radial acceleration applied to each particle. Makes particle accelerate away from origin.",
            "setter": "set_param",
            "name": "radial_accel",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's radial acceleration will vary along this [Curve].",
            "setter": "set_param_curve",
            "name": "radial_accel_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Radial acceleration randomness ratio.",
            "setter": "set_param_randomness",
            "name": "radial_accel_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Emission lifetime randomness ratio.",
            "setter": "set_randomness_ratio",
            "name": "randomness",
            "getter": "get_randomness_ratio",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Initial scale applied to each particle.",
            "setter": "set_param",
            "name": "scale_amount",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's scale will vary along this [Curve].",
            "setter": "set_param_curve",
            "name": "scale_amount_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Scale randomness ratio.",
            "setter": "set_param_randomness",
            "name": "scale_amount_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Particle system's running speed scaling ratio. A value of [code]0[/code] can be used to pause the particles.",
            "setter": "set_speed_scale",
            "name": "speed_scale",
            "getter": "get_speed_scale",
            "type": "float"
          },
          {
            "default": "45.0",
            "value": "Each particle's initial direction range from [code]+spread[/code] to [code]-spread[/code] degrees. Applied to X/Z plane and Y/Z planes.",
            "setter": "set_spread",
            "name": "spread",
            "getter": "get_spread",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity giving the particles a swirling motion.",
            "setter": "set_param",
            "name": "tangential_accel",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's tangential acceleration will vary along this [Curve].",
            "setter": "set_param_curve",
            "name": "tangential_accel_curve",
            "getter": "get_param_curve",
            "type": "Curve"
          },
          {
            "default": "0.0",
            "value": "Tangential acceleration randomness ratio.",
            "setter": "set_param_randomness",
            "name": "tangential_accel_random",
            "getter": "get_param_randomness",
            "type": "float"
          }
        ]
      },
      "inherits": "GeometryInstance",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "particles",
              "type": "Node",
              "index": "0"
            },
            "name": "convert_from_particles",
            "description": "Sets this node's properties to match a given [Particles] node with an assigned [ParticlesMaterial]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "param",
              "type": "int",
              "enum": "CPUParticles.Parameter",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_param",
            "description": "Returns the base value of the parameter specified by [enum Parameter]."
          },
          {
            "return": {
              "type": "Curve"
            },
            "argument": {
              "name": "param",
              "type": "int",
              "enum": "CPUParticles.Parameter",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_param_curve",
            "description": "Returns the [Curve] of the parameter specified by [enum Parameter]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "param",
              "type": "int",
              "enum": "CPUParticles.Parameter",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_param_randomness",
            "description": "Returns the randomness factor of the parameter specified by [enum Parameter]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "flag",
              "type": "int",
              "enum": "CPUParticles.Flags",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_particle_flag",
            "description": "Returns the enabled state of the given flag (see [enum Flags] for options)."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "restart",
            "description": "Restarts the particle emitter."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "param",
                "type": "int",
                "enum": "CPUParticles.Parameter",
                "index": "0"
              },
              {
                "name": "value",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_param",
            "description": "Sets the base value of the parameter specified by [enum Parameter]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "param",
                "type": "int",
                "enum": "CPUParticles.Parameter",
                "index": "0"
              },
              {
                "name": "curve",
                "type": "Curve",
                "index": "1"
              }
            ],
            "name": "set_param_curve",
            "description": "Sets the [Curve] of the parameter specified by [enum Parameter]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "param",
                "type": "int",
                "enum": "CPUParticles.Parameter",
                "index": "0"
              },
              {
                "name": "randomness",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_param_randomness",
            "description": "Sets the randomness factor of the parameter specified by [enum Parameter]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "flag",
                "type": "int",
                "enum": "CPUParticles.Flags",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_particle_flag",
            "description": "Enables or disables the given flag (see [enum Flags] for options)."
          }
        ]
      },
      "name": "CPUParticles",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "DRAW_ORDER_INDEX",
            "enum": "DrawOrder"
          },
          {
            "value": "1",
            "name": "DRAW_ORDER_LIFETIME",
            "enum": "DrawOrder"
          },
          {
            "value": "2",
            "name": "DRAW_ORDER_VIEW_DEPTH",
            "enum": "DrawOrder"
          },
          {
            "value": "0",
            "name": "PARAM_INITIAL_LINEAR_VELOCITY",
            "enum": "Parameter"
          },
          {
            "value": "1",
            "name": "PARAM_ANGULAR_VELOCITY",
            "enum": "Parameter"
          },
          {
            "value": "2",
            "name": "PARAM_ORBIT_VELOCITY",
            "enum": "Parameter"
          },
          {
            "value": "3",
            "name": "PARAM_LINEAR_ACCEL",
            "enum": "Parameter"
          },
          {
            "value": "4",
            "name": "PARAM_RADIAL_ACCEL",
            "enum": "Parameter"
          },
          {
            "value": "5",
            "name": "PARAM_TANGENTIAL_ACCEL",
            "enum": "Parameter"
          },
          {
            "value": "6",
            "name": "PARAM_DAMPING",
            "enum": "Parameter"
          },
          {
            "value": "7",
            "name": "PARAM_ANGLE",
            "enum": "Parameter"
          },
          {
            "value": "8",
            "name": "PARAM_SCALE",
            "enum": "Parameter"
          },
          {
            "value": "9",
            "name": "PARAM_HUE_VARIATION",
            "enum": "Parameter"
          },
          {
            "value": "10",
            "name": "PARAM_ANIM_SPEED",
            "enum": "Parameter"
          },
          {
            "value": "11",
            "name": "PARAM_ANIM_OFFSET",
            "enum": "Parameter"
          },
          {
            "value": "12",
            "name": "PARAM_MAX",
            "enum": "Parameter"
          },
          {
            "value": "0",
            "name": "FLAG_ALIGN_Y_TO_VELOCITY",
            "enum": "Flags"
          },
          {
            "value": "1",
            "name": "FLAG_ROTATE_Y",
            "enum": "Flags"
          },
          {
            "value": "2",
            "name": "FLAG_DISABLE_Z",
            "enum": "Flags"
          },
          {
            "value": "3",
            "name": "FLAG_MAX",
            "enum": "Flags"
          },
          {
            "value": "0",
            "name": "EMISSION_SHAPE_POINT",
            "enum": "EmissionShape"
          },
          {
            "value": "1",
            "name": "EMISSION_SHAPE_SPHERE",
            "enum": "EmissionShape"
          },
          {
            "value": "2",
            "name": "EMISSION_SHAPE_BOX",
            "enum": "EmissionShape"
          },
          {
            "value": "3",
            "name": "EMISSION_SHAPE_POINTS",
            "enum": "EmissionShape"
          },
          {
            "value": "4",
            "name": "EMISSION_SHAPE_DIRECTED_POINTS",
            "enum": "EmissionShape"
          },
          {
            "value": "5",
            "name": "EMISSION_SHAPE_MAX",
            "enum": "EmissionShape"
          }
        ]
      },
      "brief_description": "CPU-based 3D particle emitter.",
      "description": "CPU-based 3D particle node used to create a variety of particle systems and effects.\n\t\tSee also [Particles], which provides the same functionality with hardware acceleration, but may not run on older devices.\n\t\t[b]Note:[/b] Unlike [Particles], the visibility rect is generated on-the-fly and doesn't need to be configured by the user."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "load",
            "description": "Loads a key from [code]path[/code] (\"*.key\" file)."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "save",
            "description": "Saves a key to the given [code]path[/code] (should be a \"*.key\" file)."
          }
        ]
      },
      "name": "CryptoKey",
      "version": "3.3",
      "constants": {},
      "brief_description": "A cryptographic key (RSA).",
      "description": "The CryptoKey class represents a cryptographic key. Keys can be loaded and saved like any other [Resource].\n\t\tThey can be used to generate a self-signed [X509Certificate] via [method Crypto.generate_self_signed_certificate] and as private key in [method StreamPeerSSL.accept_stream] along with the appropriate certificate.\n\t\t[b]Note:[/b] Not available in HTML5 exports."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "PoolByteArray"
            },
            "argument": {
              "name": "size",
              "type": "int",
              "index": "0"
            },
            "name": "generate_random_bytes",
            "description": "Generates a [PoolByteArray] of cryptographically secure random bytes with given [code]size[/code]."
          },
          {
            "return": {
              "type": "CryptoKey"
            },
            "argument": {
              "name": "size",
              "type": "int",
              "index": "0"
            },
            "name": "generate_rsa",
            "description": "Generates an RSA [CryptoKey] that can be used for creating self-signed certificates and passed to [method StreamPeerSSL.accept_stream]."
          },
          {
            "return": {
              "type": "X509Certificate"
            },
            "argument": [
              {
                "name": "key",
                "type": "CryptoKey",
                "index": "0"
              },
              {
                "default": "\"CN=myserver,O=myorganisation,C=IT\"",
                "name": "issuer_name",
                "type": "String",
                "index": "1"
              },
              {
                "default": "\"20140101000000\"",
                "name": "not_before",
                "type": "String",
                "index": "2"
              },
              {
                "default": "\"20340101000000\"",
                "name": "not_after",
                "type": "String",
                "index": "3"
              }
            ],
            "name": "generate_self_signed_certificate",
            "description": "Generates a self-signed [X509Certificate] from the given [CryptoKey] and [code]issuer_name[/code]. The certificate validity will be defined by [code]not_before[/code] and [code]not_after[/code] (first valid date and last valid date). The [code]issuer_name[/code] must contain at least \"CN=\" (common name, i.e. the domain name), \"O=\" (organization, i.e. your company name), \"C=\" (country, i.e. 2 lettered ISO-3166 code of the country the organization is based in).\n\t\t\t\tA small example to generate an RSA key and a X509 self-signed certificate.\n\t\t\t\t[codeblock]\n\t\t\t\tvar crypto = Crypto.new()\n\t\t\t\t# Generate 4096 bits RSA key.\n\t\t\t\tvar key = crypto.generate_rsa(4096)\n\t\t\t\t# Generate self-signed certificate using the given key.\n\t\t\t\tvar cert = crypto.generate_self_signed_certificate(key, \"CN=example.com,O=A Game Company,C=IT\")\n\t\t\t\t[/codeblock]"
          }
        ]
      },
      "name": "Crypto",
      "version": "3.3",
      "constants": {},
      "brief_description": "Access to advanced cryptographic functionalities.",
      "description": "The Crypto class allows you to access some more advanced cryptographic functionalities in Godot.\n\t\tFor now, this includes generating cryptographically secure random bytes, and RSA keys and self-signed X509 certificates generation. More functionalities are planned for future releases.\n\t\t[codeblock]\n\t\textends Node\n\n\t\tvar crypto = Crypto.new()\n\t\tvar key = CryptoKey.new()\n\t\tvar cert = X509Certificate.new()\n\n\t\tfunc _ready():\n\t\t    # Generate new RSA key.\n\t\t    key = crypto.generate_rsa(4096)\n\t\t    # Generate new self-signed certificate with the given key.\n\t\t    cert = crypto.generate_self_signed_certificate(key, \"CN=mydomain.com,O=My Game Company,C=IT\")\n\t\t    # Save key and certificate in the user folder.\n\t\t    key.save(\"user://generated.key\")\n\t\t    cert.save(\"user://generated.crt\")\n\t\t[/codeblock]\n\t\t[b]Note:[/b] Not available in HTML5 exports."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "7",
            "value": "The render flags for the [CubeMap]. See the [enum Flags] constants for details.",
            "setter": "set_flags",
            "name": "flags",
            "getter": "get_flags",
            "type": "int"
          },
          {
            "default": "0.7",
            "value": "The lossy storage quality of the [CubeMap] if the storage mode is set to [constant STORAGE_COMPRESS_LOSSY].",
            "setter": "set_lossy_storage_quality",
            "name": "lossy_storage_quality",
            "getter": "get_lossy_storage_quality",
            "type": "float"
          },
          {
            "default": "0",
            "value": "The [CubeMap]'s storage mode. See [enum Storage] constants.",
            "setter": "set_storage",
            "name": "storage_mode",
            "getter": "get_storage",
            "type": "int",
            "enum": "CubeMap.Storage"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_height",
            "description": "Returns the [CubeMap]'s height."
          },
          {
            "return": {
              "type": "Image"
            },
            "argument": {
              "name": "side",
              "type": "int",
              "enum": "CubeMap.Side",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_side",
            "description": "Returns an [Image] for a side of the [CubeMap] using one of the [enum Side] constants."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_width",
            "description": "Returns the [CubeMap]'s width."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "side",
                "type": "int",
                "enum": "CubeMap.Side",
                "index": "0"
              },
              {
                "name": "image",
                "type": "Image",
                "index": "1"
              }
            ],
            "name": "set_side",
            "description": "Sets an [Image] for a side of the [CubeMap] using one of the [enum Side] constants."
          }
        ]
      },
      "name": "CubeMap",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "STORAGE_RAW",
            "enum": "Storage"
          },
          {
            "value": "1",
            "name": "STORAGE_COMPRESS_LOSSY",
            "enum": "Storage"
          },
          {
            "value": "2",
            "name": "STORAGE_COMPRESS_LOSSLESS",
            "enum": "Storage"
          },
          {
            "value": "0",
            "name": "SIDE_LEFT",
            "enum": "Side"
          },
          {
            "value": "1",
            "name": "SIDE_RIGHT",
            "enum": "Side"
          },
          {
            "value": "2",
            "name": "SIDE_BOTTOM",
            "enum": "Side"
          },
          {
            "value": "3",
            "name": "SIDE_TOP",
            "enum": "Side"
          },
          {
            "value": "4",
            "name": "SIDE_FRONT",
            "enum": "Side"
          },
          {
            "value": "5",
            "name": "SIDE_BACK",
            "enum": "Side"
          },
          {
            "value": "1",
            "name": "FLAG_MIPMAPS",
            "enum": "Flags"
          },
          {
            "value": "2",
            "name": "FLAG_REPEAT",
            "enum": "Flags"
          },
          {
            "value": "4",
            "name": "FLAG_FILTER",
            "enum": "Flags"
          },
          {
            "value": "7",
            "name": "FLAGS_DEFAULT",
            "enum": "Flags"
          }
        ]
      },
      "brief_description": "A CubeMap is a 6-sided 3D texture.",
      "description": "A 6-sided 3D texture typically used for faking reflections. It can be used to make an object look as if it's reflecting its surroundings. This usually delivers much better performance than other reflection methods."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "Vector3( 2, 2, 2 )",
            "value": "Size of the cuboid mesh.",
            "setter": "set_size",
            "name": "size",
            "getter": "get_size",
            "type": "Vector3"
          },
          {
            "default": "0",
            "value": "Number of extra edge loops inserted along the Z axis.",
            "setter": "set_subdivide_depth",
            "name": "subdivide_depth",
            "getter": "get_subdivide_depth",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Number of extra edge loops inserted along the Y axis.",
            "setter": "set_subdivide_height",
            "name": "subdivide_height",
            "getter": "get_subdivide_height",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Number of extra edge loops inserted along the X axis.",
            "setter": "set_subdivide_width",
            "name": "subdivide_width",
            "getter": "get_subdivide_width",
            "type": "int"
          }
        ]
      },
      "inherits": "PrimitiveMesh",
      "methods": {},
      "name": "CubeMesh",
      "version": "3.3",
      "constants": {},
      "brief_description": "Generate an axis-aligned cuboid [PrimitiveMesh].",
      "description": "Generate an axis-aligned cuboid [PrimitiveMesh].\n\t\tThe cube's UV layout is arranged in a 3×2 layout that allows texturing each face individually. To apply the same texture on all faces, change the material's UV property to [code]Vector3(3, 2, 1)[/code].\n\t\t[b]Note:[/b] When using a large textured [CubeMesh] (e.g. as a floor), you may stumble upon UV jittering issues depending on the camera angle. To solve this, increase [member subdivide_depth], [member subdivide_height] and [member subdivide_width] until you no longer notice UV jittering."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "5.0",
          "value": "The distance in pixels between two adjacent cached points. Changing it forces the cache to be recomputed the next time the [method get_baked_points] or [method get_baked_length] function is called. The smaller the distance, the more points in the cache and the more memory it will consume, so use with care.",
          "setter": "set_bake_interval",
          "name": "bake_interval",
          "getter": "get_bake_interval",
          "type": "float"
        }
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "position",
                "type": "Vector2",
                "index": "0"
              },
              {
                "default": "Vector2( 0, 0 )",
                "name": "in",
                "type": "Vector2",
                "index": "1"
              },
              {
                "default": "Vector2( 0, 0 )",
                "name": "out",
                "type": "Vector2",
                "index": "2"
              },
              {
                "default": "-1",
                "name": "at_position",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "add_point",
            "description": "Adds a point to a curve at [code]position[/code], with control points [code]in[/code] and [code]out[/code].\n\t\t\t\tIf [code]at_position[/code] is given, the point is inserted before the point number [code]at_position[/code], moving that point (and every point after) after the inserted point. If [code]at_position[/code] is not given, or is an illegal value ([code]at_position <0[/code] or [code]at_position >= [method get_point_count][/code]), the point will be appended at the end of the point list."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_points",
            "description": "Removes all points from the curve."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_baked_length",
            "description": "Returns the total length of the curve, based on the cached points. Given enough density (see [member bake_interval]), it should be approximate enough."
          },
          {
            "return": {
              "type": "PoolVector2Array"
            },
            "qualifiers": "const",
            "name": "get_baked_points",
            "description": "Returns the cache of points as a [PoolVector2Array]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "to_point",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_closest_offset",
            "description": "Returns the closest offset to [code]to_point[/code]. This offset is meant to be used in [method interpolate_baked].\n\t\t\t\t[code]to_point[/code] must be in this curve's local space."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "to_point",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_closest_point",
            "description": "Returns the closest baked point (in curve's local space) to [code]to_point[/code].\n\t\t\t\t[code]to_point[/code] must be in this curve's local space."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_point_count",
            "description": "Returns the number of points describing the curve."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_point_in",
            "description": "Returns the position of the control point leading to the vertex [code]idx[/code]. The returned position is relative to the vertex [code]idx[/code]. If the index is out of bounds, the function sends an error to the console, and returns [code](0, 0)[/code]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_point_out",
            "description": "Returns the position of the control point leading out of the vertex [code]idx[/code]. The returned position is relative to the vertex [code]idx[/code]. If the index is out of bounds, the function sends an error to the console, and returns [code](0, 0)[/code]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_point_position",
            "description": "Returns the position of the vertex [code]idx[/code]. If the index is out of bounds, the function sends an error to the console, and returns [code](0, 0)[/code]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "t",
                "type": "float",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "interpolate",
            "description": "Returns the position between the vertex [code]idx[/code] and the vertex [code]idx + 1[/code], where [code]t[/code] controls if the point is the first vertex ([code]t = 0.0[/code]), the last vertex ([code]t = 1.0[/code]), or in between. Values of [code]t[/code] outside the range ([code]0.0 >= t <=1[/code]) give strange, but predictable results.\n\t\t\t\tIf [code]idx[/code] is out of bounds it is truncated to the first or last vertex, and [code]t[/code] is ignored. If the curve has no points, the function sends an error to the console, and returns [code](0, 0)[/code]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "offset",
                "type": "float",
                "index": "0"
              },
              {
                "default": "false",
                "name": "cubic",
                "type": "bool",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "interpolate_baked",
            "description": "Returns a point within the curve at position [code]offset[/code], where [code]offset[/code] is measured as a pixel distance along the curve.\n\t\t\t\tTo do that, it finds the two cached points where the [code]offset[/code] lies between, then interpolates the values. This interpolation is cubic if [code]cubic[/code] is set to [code]true[/code], or linear if set to [code]false[/code].\n\t\t\t\tCubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough)."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "fofs",
              "type": "float",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "interpolatef",
            "description": "Returns the position at the vertex [code]fofs[/code]. It calls [method interpolate] using the integer part of [code]fofs[/code] as [code]idx[/code], and its fractional part as [code]t[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "remove_point",
            "description": "Deletes the point [code]idx[/code] from the curve. Sends an error to the console if [code]idx[/code] is out of bounds."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "set_point_in",
            "description": "Sets the position of the control point leading to the vertex [code]idx[/code]. If the index is out of bounds, the function sends an error to the console. The position is relative to the vertex."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "set_point_out",
            "description": "Sets the position of the control point leading out of the vertex [code]idx[/code]. If the index is out of bounds, the function sends an error to the console. The position is relative to the vertex."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "set_point_position",
            "description": "Sets the position for the vertex [code]idx[/code]. If the index is out of bounds, the function sends an error to the console."
          },
          {
            "return": {
              "type": "PoolVector2Array"
            },
            "argument": [
              {
                "default": "5",
                "name": "max_stages",
                "type": "int",
                "index": "0"
              },
              {
                "default": "4",
                "name": "tolerance_degrees",
                "type": "float",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "tessellate",
            "description": "Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.\n\t\t\t\tThis approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.\n\t\t\t\t[code]max_stages[/code] controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!\n\t\t\t\t[code]tolerance_degrees[/code] controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided."
          }
        ]
      },
      "name": "Curve2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Describes a Bézier curve in 2D space.",
      "description": "This class describes a Bézier curve in 2D space. It is mainly used to give a shape to a [Path2D], but can be manually sampled for other purposes.\n\t\tIt keeps a cache of precalculated points along the curve, to speed up further calculations."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0.2",
            "value": "The distance in meters between two adjacent cached points. Changing it forces the cache to be recomputed the next time the [method get_baked_points] or [method get_baked_length] function is called. The smaller the distance, the more points in the cache and the more memory it will consume, so use with care.",
            "setter": "set_bake_interval",
            "name": "bake_interval",
            "getter": "get_bake_interval",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the curve will bake up vectors used for orientation. This is used when [member PathFollow.rotation_mode] is set to [constant PathFollow.ROTATION_ORIENTED]. Changing it forces the cache to be recomputed.",
            "setter": "set_up_vector_enabled",
            "name": "up_vector_enabled",
            "getter": "is_up_vector_enabled",
            "type": "bool"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "position",
                "type": "Vector3",
                "index": "0"
              },
              {
                "default": "Vector3( 0, 0, 0 )",
                "name": "in",
                "type": "Vector3",
                "index": "1"
              },
              {
                "default": "Vector3( 0, 0, 0 )",
                "name": "out",
                "type": "Vector3",
                "index": "2"
              },
              {
                "default": "-1",
                "name": "at_position",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "add_point",
            "description": "Adds a point to a curve at [code]position[/code], with control points [code]in[/code] and [code]out[/code].\n\t\t\t\tIf [code]at_position[/code] is given, the point is inserted before the point number [code]at_position[/code], moving that point (and every point after) after the inserted point. If [code]at_position[/code] is not given, or is an illegal value ([code]at_position <0[/code] or [code]at_position >= [method get_point_count][/code]), the point will be appended at the end of the point list."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_points",
            "description": "Removes all points from the curve."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_baked_length",
            "description": "Returns the total length of the curve, based on the cached points. Given enough density (see [member bake_interval]), it should be approximate enough."
          },
          {
            "return": {
              "type": "PoolVector3Array"
            },
            "qualifiers": "const",
            "name": "get_baked_points",
            "description": "Returns the cache of points as a [PoolVector3Array]."
          },
          {
            "return": {
              "type": "PoolRealArray"
            },
            "qualifiers": "const",
            "name": "get_baked_tilts",
            "description": "Returns the cache of tilts as a [PoolRealArray]."
          },
          {
            "return": {
              "type": "PoolVector3Array"
            },
            "qualifiers": "const",
            "name": "get_baked_up_vectors",
            "description": "Returns the cache of up vectors as a [PoolVector3Array].\n\t\t\t\tIf [member up_vector_enabled] is [code]false[/code], the cache will be empty."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "to_point",
              "type": "Vector3",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_closest_offset",
            "description": "Returns the closest offset to [code]to_point[/code]. This offset is meant to be used in [method interpolate_baked] or [method interpolate_baked_up_vector].\n\t\t\t\t[code]to_point[/code] must be in this curve's local space."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "to_point",
              "type": "Vector3",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_closest_point",
            "description": "Returns the closest baked point (in curve's local space) to [code]to_point[/code].\n\t\t\t\t[code]to_point[/code] must be in this curve's local space."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_point_count",
            "description": "Returns the number of points describing the curve."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_point_in",
            "description": "Returns the position of the control point leading to the vertex [code]idx[/code]. The returned position is relative to the vertex [code]idx[/code]. If the index is out of bounds, the function sends an error to the console, and returns [code](0, 0, 0)[/code]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_point_out",
            "description": "Returns the position of the control point leading out of the vertex [code]idx[/code]. The returned position is relative to the vertex [code]idx[/code]. If the index is out of bounds, the function sends an error to the console, and returns [code](0, 0, 0)[/code]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_point_position",
            "description": "Returns the position of the vertex [code]idx[/code]. If the index is out of bounds, the function sends an error to the console, and returns [code](0, 0, 0)[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_point_tilt",
            "description": "Returns the tilt angle in radians for the point [code]idx[/code]. If the index is out of bounds, the function sends an error to the console, and returns [code]0[/code]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "t",
                "type": "float",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "interpolate",
            "description": "Returns the position between the vertex [code]idx[/code] and the vertex [code]idx + 1[/code], where [code]t[/code] controls if the point is the first vertex ([code]t = 0.0[/code]), the last vertex ([code]t = 1.0[/code]), or in between. Values of [code]t[/code] outside the range ([code]0.0 >= t <=1[/code]) give strange, but predictable results.\n\t\t\t\tIf [code]idx[/code] is out of bounds it is truncated to the first or last vertex, and [code]t[/code] is ignored. If the curve has no points, the function sends an error to the console, and returns [code](0, 0, 0)[/code]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": [
              {
                "name": "offset",
                "type": "float",
                "index": "0"
              },
              {
                "default": "false",
                "name": "cubic",
                "type": "bool",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "interpolate_baked",
            "description": "Returns a point within the curve at position [code]offset[/code], where [code]offset[/code] is measured as a distance in 3D units along the curve.\n\t\t\t\tTo do that, it finds the two cached points where the [code]offset[/code] lies between, then interpolates the values. This interpolation is cubic if [code]cubic[/code] is set to [code]true[/code], or linear if set to [code]false[/code].\n\t\t\t\tCubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough)."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": [
              {
                "name": "offset",
                "type": "float",
                "index": "0"
              },
              {
                "default": "false",
                "name": "apply_tilt",
                "type": "bool",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "interpolate_baked_up_vector",
            "description": "Returns an up vector within the curve at position [code]offset[/code], where [code]offset[/code] is measured as a distance in 3D units along the curve.\n\t\t\t\tTo do that, it finds the two cached up vectors where the [code]offset[/code] lies between, then interpolates the values. If [code]apply_tilt[/code] is [code]true[/code], an interpolated tilt is applied to the interpolated up vector.\n\t\t\t\tIf the curve has no up vectors, the function sends an error to the console, and returns [code](0, 1, 0)[/code]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "fofs",
              "type": "float",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "interpolatef",
            "description": "Returns the position at the vertex [code]fofs[/code]. It calls [method interpolate] using the integer part of [code]fofs[/code] as [code]idx[/code], and its fractional part as [code]t[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "remove_point",
            "description": "Deletes the point [code]idx[/code] from the curve. Sends an error to the console if [code]idx[/code] is out of bounds."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "set_point_in",
            "description": "Sets the position of the control point leading to the vertex [code]idx[/code]. If the index is out of bounds, the function sends an error to the console. The position is relative to the vertex."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "set_point_out",
            "description": "Sets the position of the control point leading out of the vertex [code]idx[/code]. If the index is out of bounds, the function sends an error to the console. The position is relative to the vertex."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "set_point_position",
            "description": "Sets the position for the vertex [code]idx[/code]. If the index is out of bounds, the function sends an error to the console."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "tilt",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_point_tilt",
            "description": "Sets the tilt angle in radians for the point [code]idx[/code]. If the index is out of bounds, the function sends an error to the console.\n\t\t\t\tThe tilt controls the rotation along the look-at axis an object traveling the path would have. In the case of a curve controlling a [PathFollow], this tilt is an offset over the natural tilt the [PathFollow] calculates."
          },
          {
            "return": {
              "type": "PoolVector3Array"
            },
            "argument": [
              {
                "default": "5",
                "name": "max_stages",
                "type": "int",
                "index": "0"
              },
              {
                "default": "4",
                "name": "tolerance_degrees",
                "type": "float",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "tessellate",
            "description": "Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.\n\t\t\t\tThis approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.\n\t\t\t\t[code]max_stages[/code] controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!\n\t\t\t\t[code]tolerance_degrees[/code] controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided."
          }
        ]
      },
      "name": "Curve3D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Describes a Bézier curve in 3D space.",
      "description": "This class describes a Bézier curve in 3D space. It is mainly used to give a shape to a [Path], but can be manually sampled for other purposes.\n\t\tIt keeps a cache of precalculated points along the curve, to speed up further calculations."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "value": "The [code]curve[/code] rendered onto the texture.",
            "setter": "set_curve",
            "name": "curve",
            "getter": "get_curve",
            "type": "Curve"
          },
          {
            "default": "2048",
            "value": "The width of the texture.",
            "setter": "set_width",
            "name": "width",
            "getter": "get_width",
            "type": "int"
          }
        ]
      },
      "inherits": "Texture",
      "methods": {},
      "name": "CurveTexture",
      "version": "3.3",
      "constants": {},
      "brief_description": "A texture that shows a curve.",
      "description": "Renders a given [Curve] provided to it. Simplifies the task of drawing curves and/or saving them as image files."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "100",
            "value": "The number of points to include in the baked (i.e. cached) curve data.",
            "setter": "set_bake_resolution",
            "name": "bake_resolution",
            "getter": "get_bake_resolution",
            "type": "int"
          },
          {
            "default": "1.0",
            "value": "The maximum value the curve can reach.",
            "setter": "set_max_value",
            "name": "max_value",
            "getter": "get_max_value",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The minimum value the curve can reach.",
            "setter": "set_min_value",
            "name": "min_value",
            "getter": "get_min_value",
            "type": "float"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "position",
                "type": "Vector2",
                "index": "0"
              },
              {
                "default": "0",
                "name": "left_tangent",
                "type": "float",
                "index": "1"
              },
              {
                "default": "0",
                "name": "right_tangent",
                "type": "float",
                "index": "2"
              },
              {
                "default": "0",
                "name": "left_mode",
                "type": "int",
                "enum": "Curve.TangentMode",
                "index": "3"
              },
              {
                "default": "0",
                "name": "right_mode",
                "type": "int",
                "enum": "Curve.TangentMode",
                "index": "4"
              }
            ],
            "name": "add_point",
            "description": "Adds a point to the curve. For each side, if the [code]*_mode[/code] is [constant TANGENT_LINEAR], the [code]*_tangent[/code] angle (in degrees) uses the slope of the curve halfway to the adjacent point. Allows custom assignments to the [code]*_tangent[/code] angle if [code]*_mode[/code] is set to [constant TANGENT_FREE]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "bake",
            "description": "Recomputes the baked cache of points for the curve."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clean_dupes",
            "description": "Removes points that are closer than [code]CMP_EPSILON[/code] (0.00001) units to their neighbor on the curve."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_points",
            "description": "Removes all points from the curve."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_point_count",
            "description": "Returns the number of points describing the curve."
          },
          {
            "return": {
              "type": "int",
              "enum": "Curve.TangentMode"
            },
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_point_left_mode",
            "description": "Returns the left [enum TangentMode] for the point at [code]index[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_point_left_tangent",
            "description": "Returns the left tangent angle (in degrees) for the point at [code]index[/code]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_point_position",
            "description": "Returns the curve coordinates for the point at [code]index[/code]."
          },
          {
            "return": {
              "type": "int",
              "enum": "Curve.TangentMode"
            },
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_point_right_mode",
            "description": "Returns the right [enum TangentMode] for the point at [code]index[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_point_right_tangent",
            "description": "Returns the right tangent angle (in degrees) for the point at [code]index[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "offset",
              "type": "float",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "interpolate",
            "description": "Returns the Y value for the point that would exist at the X position [code]offset[/code] along the curve."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "offset",
              "type": "float",
              "index": "0"
            },
            "name": "interpolate_baked",
            "description": "Returns the Y value for the point that would exist at the X position [code]offset[/code] along the curve using the baked cache. Bakes the curve's points if not already baked."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "name": "remove_point",
            "description": "Removes the point at [code]index[/code] from the curve."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "index",
                "type": "int",
                "index": "0"
              },
              {
                "name": "mode",
                "type": "int",
                "enum": "Curve.TangentMode",
                "index": "1"
              }
            ],
            "name": "set_point_left_mode",
            "description": "Sets the left [enum TangentMode] for the point at [code]index[/code] to [code]mode[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "index",
                "type": "int",
                "index": "0"
              },
              {
                "name": "tangent",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_point_left_tangent",
            "description": "Sets the left tangent angle for the point at [code]index[/code] to [code]tangent[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "index",
                "type": "int",
                "index": "0"
              },
              {
                "name": "offset",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_point_offset",
            "description": "Sets the offset from [code]0.5[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "index",
                "type": "int",
                "index": "0"
              },
              {
                "name": "mode",
                "type": "int",
                "enum": "Curve.TangentMode",
                "index": "1"
              }
            ],
            "name": "set_point_right_mode",
            "description": "Sets the right [enum TangentMode] for the point at [code]index[/code] to [code]mode[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "index",
                "type": "int",
                "index": "0"
              },
              {
                "name": "tangent",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_point_right_tangent",
            "description": "Sets the right tangent angle for the point at [code]index[/code] to [code]tangent[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "index",
                "type": "int",
                "index": "0"
              },
              {
                "name": "y",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_point_value",
            "description": "Assigns the vertical position [code]y[/code] to the point at [code]index[/code]."
          }
        ]
      },
      "name": "Curve",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "range_changed",
          "description": "Emitted when [member max_value] or [member min_value] is changed."
        }
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "TANGENT_FREE",
            "enum": "TangentMode"
          },
          {
            "value": "1",
            "name": "TANGENT_LINEAR",
            "enum": "TangentMode"
          },
          {
            "value": "2",
            "name": "TANGENT_MODE_COUNT",
            "enum": "TangentMode"
          }
        ]
      },
      "brief_description": "A mathematic curve.",
      "description": "A curve that can be saved and re-used for other objects. By default, it ranges between [code]0[/code] and [code]1[/code] on the Y axis and positions points relative to the [code]0.5[/code] Y position."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "1.0",
            "value": "Bottom radius of the cylinder.",
            "setter": "set_bottom_radius",
            "name": "bottom_radius",
            "getter": "get_bottom_radius",
            "type": "float"
          },
          {
            "default": "2.0",
            "value": "Full height of the cylinder.",
            "setter": "set_height",
            "name": "height",
            "getter": "get_height",
            "type": "float"
          },
          {
            "default": "64",
            "value": "Number of radial segments on the cylinder.",
            "setter": "set_radial_segments",
            "name": "radial_segments",
            "getter": "get_radial_segments",
            "type": "int"
          },
          {
            "default": "4",
            "value": "Number of edge rings along the height of the cylinder.",
            "setter": "set_rings",
            "name": "rings",
            "getter": "get_rings",
            "type": "int"
          },
          {
            "default": "1.0",
            "value": "Top radius of the cylinder.",
            "setter": "set_top_radius",
            "name": "top_radius",
            "getter": "get_top_radius",
            "type": "float"
          }
        ]
      },
      "inherits": "PrimitiveMesh",
      "methods": {},
      "name": "CylinderMesh",
      "version": "3.3",
      "constants": {},
      "brief_description": "Class representing a cylindrical [PrimitiveMesh].",
      "description": "Class representing a cylindrical [PrimitiveMesh]. This class can be used to create cones by setting either the [member top_radius] or [member bottom_radius] properties to 0.0."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/675",
            "title": "3D Physics Tests Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/676",
            "title": "3D Voxel Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "2.0",
            "value": "The cylinder's height.",
            "setter": "set_height",
            "name": "height",
            "getter": "get_height",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The cylinder's radius.",
            "setter": "set_radius",
            "name": "radius",
            "getter": "get_radius",
            "type": "float"
          }
        ]
      },
      "inherits": "Shape",
      "methods": {},
      "name": "CylinderShape",
      "version": "3.3",
      "constants": {},
      "brief_description": "Cylinder shape for collisions.",
      "description": "Cylinder shape for collisions."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "1.0",
            "value": "The spring joint's damping ratio. A value between [code]0[/code] and [code]1[/code]. When the two bodies move into different directions the system tries to align them to the spring axis again. A high [code]damping[/code] value forces the attached bodies to align faster.",
            "setter": "set_damping",
            "name": "damping",
            "getter": "get_damping",
            "type": "float"
          },
          {
            "default": "50.0",
            "value": "The spring joint's maximum length. The two attached bodies cannot stretch it past this value.",
            "setter": "set_length",
            "name": "length",
            "getter": "get_length",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "When the bodies attached to the spring joint move they stretch or squash it. The joint always tries to resize towards this length.",
            "setter": "set_rest_length",
            "name": "rest_length",
            "getter": "get_rest_length",
            "type": "float"
          },
          {
            "default": "20.0",
            "value": "The higher the value, the less the bodies attached to the joint will deform it. The joint applies an opposing force to the bodies, the product of the stiffness multiplied by the size difference from its resting length.",
            "setter": "set_stiffness",
            "name": "stiffness",
            "getter": "get_stiffness",
            "type": "float"
          }
        ]
      },
      "inherits": "Joint2D",
      "methods": {},
      "name": "DampedSpringJoint2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Damped spring constraint for 2D physics.",
      "description": "Damped spring constraint for 2D physics. This resembles a spring joint that always wants to go back to a given length."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/getting_started/scripting/gdscript/gdscript_basics.html#dictionary",
            "title": "GDScript basics: Dictionary"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/676",
            "title": "3D Voxel Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/677",
            "title": "OS Test Demo"
          }
        ]
      },
      "methods": {
        "method": [
          {
            "name": "clear",
            "description": "Clear the dictionary, removing all key/value pairs."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "argument": {
              "default": "false",
              "name": "deep",
              "type": "bool",
              "index": "0"
            },
            "name": "duplicate",
            "description": "Creates a copy of the dictionary, and returns it. The [code]deep[/code] parameter causes inner dictionaries and arrays to be copied recursively, but does not apply to objects."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "empty",
            "description": "Returns [code]true[/code] if the dictionary is empty."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "key",
              "type": "Variant",
              "index": "0"
            },
            "name": "erase",
            "description": "Erase a dictionary key/value pair by key. Returns [code]true[/code] if the given key was present in the dictionary, [code]false[/code] otherwise. Does not erase elements while iterating over the dictionary."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "key",
                "type": "Variant",
                "index": "0"
              },
              {
                "default": "null",
                "name": "default",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "get",
            "description": "Returns the current value for the specified key in the [Dictionary]. If the key does not exist, the method returns the value of the optional default argument, or [code]null[/code] if it is omitted."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "key",
              "type": "Variant",
              "index": "0"
            },
            "name": "has",
            "description": "Returns [code]true[/code] if the dictionary has a given key.\n\t\t\t\t[b]Note:[/b] This is equivalent to using the [code]in[/code] operator as follows:\n\t\t\t\t[codeblock]\n\t\t\t\t# Will evaluate to `true`.\n\t\t\t\tif \"godot\" in {\"godot\": \"engine\"}:\n\t\t\t\t    pass\n\t\t\t\t[/codeblock]\n\t\t\t\tThis method (like the [code]in[/code] operator) will evaluate to [code]true[/code] as long as the key exists, even if the associated value is [code]null[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "keys",
              "type": "Array",
              "index": "0"
            },
            "name": "has_all",
            "description": "Returns [code]true[/code] if the dictionary has all the keys in the given array."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "hash",
            "description": "Returns a hashed integer value representing the dictionary contents. This can be used to compare dictionaries by value:\n\t\t\t\t[codeblock]\n\t\t\t\tvar dict1 = {0: 10}\n\t\t\t\tvar dict2 = {0: 10}\n\t\t\t\t# The line below prints `true`, whereas it would have printed `false` if both variables were compared directly.\n\t\t\t\tprint(dict1.hash() == dict2.hash())\n\t\t\t\t[/codeblock]\n\t\t\t\t[b]Note:[/b] Dictionaries with the same keys/values but in a different order will have a different hash."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "keys",
            "description": "Returns the list of keys in the [Dictionary]."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "size",
            "description": "Returns the number of keys in the dictionary."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "values",
            "description": "Returns the list of values in the [Dictionary]."
          }
        ]
      },
      "name": "Dictionary",
      "version": "3.3",
      "constants": {},
      "brief_description": "Dictionary type.",
      "description": "Dictionary type. Associative container which contains values referenced by unique keys. Dictionaries are composed of pairs of keys (which must be unique) and values. Dictionaries will preserve the insertion order when adding elements, even though this may not be reflected when printing the dictionary. In other programming languages, this data structure is sometimes referred to as a hash map or associative array.\n\t\tYou can define a dictionary by placing a comma-separated list of [code]key: value[/code] pairs in curly braces [code]{}[/code].\n\t\tErasing elements while iterating over them [b]is not supported[/b] and will result in undefined behavior.\n\t\t[b]Note:[/b] Dictionaries are always passed by reference. To get a copy of a dictionary which can be modified independently of the original dictionary, use [method duplicate].\n\t\tCreating a dictionary:\n\t\t[codeblock]\n\t\tvar my_dict = {} # Creates an empty dictionary.\n\n\t\tvar dict_variable_key = \"Another key name\"\n\t\tvar dict_variable_value = \"value2\"\n\t\tvar another_dict = {\n\t\t    \"Some key name\": \"value1\",\n\t\t    dict_variable_key: dict_variable_value,\n\t\t}\n\n\t\tvar points_dict = {\"White\": 50, \"Yellow\": 75, \"Orange\": 100}\n\n\t\t# Alternative Lua-style syntax.\n\t\t# Doesn't require quotes around keys, but only string constants can be used as key names.\n\t\t# Additionally, key names must start with a letter or an underscore.\n\t\t# Here, `some_key` is a string literal, not a variable!\n\t\tanother_dict = {\n\t\t    some_key = 42,\n\t\t}\n\t\t[/codeblock]\n\t\tYou can access a dictionary's values by referencing the appropriate key. In the above example, [code]points_dir[\"White\"][/code] will return [code]50[/code]. You can also write [code]points_dir.White[/code], which is equivalent. However, you'll have to use the bracket syntax if the key you're accessing the dictionary with isn't a fixed string (such as a number or variable).\n\t\t[codeblock]\n\t\texport(string, \"White\", \"Yellow\", \"Orange\") var my_color\n\t\tvar points_dict = {\"White\": 50, \"Yellow\": 75, \"Orange\": 100}\n\t\tfunc _ready():\n\t\t    # We can't use dot syntax here as `my_color` is a variable.\n\t\t    var points = points_dict[my_color]\n\t\t[/codeblock]\n\t\tIn the above code, [code]points[/code] will be assigned the value that is paired with the appropriate color selected in [code]my_color[/code].\n\t\tDictionaries can contain more complex data:\n\t\t[codeblock]\n\t\tmy_dict = {\"First Array\": [1, 2, 3, 4]} # Assigns an Array to a String key.\n\t\t[/codeblock]\n\t\tTo add a key to an existing dictionary, access it like an existing key and assign to it:\n\t\t[codeblock]\n\t\tvar points_dict = {\"White\": 50, \"Yellow\": 75, \"Orange\": 100}\n\t\tpoints_dict[\"Blue\"] = 150 # Add \"Blue\" as a key and assign 150 as its value.\n\t\t[/codeblock]\n\t\tFinally, dictionaries can contain different types of keys and values in the same dictionary:\n\t\t[codeblock]\n\t\t# This is a valid dictionary.\n\t\t# To access the string \"Nested value\" below, use `my_dir.sub_dir.sub_key` or `my_dir[\"sub_dir\"][\"sub_key\"]`.\n\t\t# Indexing styles can be mixed and matched depending on your needs.\n\t\tvar my_dict = {\n\t\t    \"String Key\": 5,\n\t\t    4: [1, 2, 3],\n\t\t    7: \"Hello\",\n\t\t    \"sub_dict\": {\"sub_key\": \"Nested value\"},\n\t\t}\n\t\t[/codeblock]\n\t\t[b]Note:[/b] Unlike [Array]s, you can't compare dictionaries directly:\n\t\t[codeblock]\n\t\tarray1 = [1, 2, 3]\n\t\tarray2 = [1, 2, 3]\n\n\t\tfunc compare_arrays():\n\t\t    print(array1 == array2) # Will print true.\n\n\t\tvar dict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n\t\tvar dict2 = {\"a\": 1, \"b\": 2, \"c\": 3}\n\n\t\tfunc compare_dictionaries():\n\t\t    print(dict1 == dict2) # Will NOT print true.\n\t\t[/codeblock]\n\t\tYou need to first calculate the dictionary's hash with [method hash] before you can compare them:\n\t\t[codeblock]\n\t\tvar dict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n\t\tvar dict2 = {\"a\": 1, \"b\": 2, \"c\": 3}\n\n\t\tfunc compare_dictionaries():\n\t\t    print(dict1.hash() == dict2.hash()) # Will print true.\n\t\t[/codeblock]\n\t\t[b]Note:[/b] When declaring a dictionary with [code]const[/code], the dictionary itself can still be mutated by defining the values of individual keys. Using [code]const[/code] will only prevent assigning the constant with another value after it was initialized."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/3d/lights_and_shadows.html"
      },
      "members": {
        "member": [
          {
            "default": "0.25",
            "value": "Amount of extra bias for shadow splits that are far away. If self-shadowing occurs only on the splits far away, increasing this value can fix them.",
            "setter": "set_param",
            "name": "directional_shadow_bias_split_scale",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], shadow detail is sacrificed in exchange for smoother transitions between splits.",
            "setter": "set_blend_splits",
            "name": "directional_shadow_blend_splits",
            "getter": "is_blend_splits_enabled",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "Optimizes shadow rendering for detail versus movement. See [enum ShadowDepthRange].",
            "setter": "set_shadow_depth_range",
            "name": "directional_shadow_depth_range",
            "getter": "get_shadow_depth_range",
            "type": "int",
            "enum": "DirectionalLight.ShadowDepthRange"
          },
          {
            "default": "100.0",
            "value": "The maximum distance for shadow splits.",
            "setter": "set_param",
            "name": "directional_shadow_max_distance",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "2",
            "value": "The light's shadow rendering algorithm. See [enum ShadowMode].",
            "setter": "set_shadow_mode",
            "name": "directional_shadow_mode",
            "getter": "get_shadow_mode",
            "type": "int",
            "enum": "DirectionalLight.ShadowMode"
          },
          {
            "default": "0.8",
            "value": "Can be used to fix special cases of self shadowing when objects are perpendicular to the light.",
            "setter": "set_param",
            "name": "directional_shadow_normal_bias",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "0.1",
            "value": "The distance from camera to shadow split 1. Relative to [member directional_shadow_max_distance]. Only used when [member directional_shadow_mode] is [code]SHADOW_PARALLEL_2_SPLITS[/code] or [code]SHADOW_PARALLEL_4_SPLITS[/code].",
            "setter": "set_param",
            "name": "directional_shadow_split_1",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "0.2",
            "value": "The distance from shadow split 1 to split 2. Relative to [member directional_shadow_max_distance]. Only used when [member directional_shadow_mode] is [code]SHADOW_PARALLEL_2_SPLITS[/code] or [code]SHADOW_PARALLEL_4_SPLITS[/code].",
            "setter": "set_param",
            "name": "directional_shadow_split_2",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "0.5",
            "value": "The distance from shadow split 2 to split 3. Relative to [member directional_shadow_max_distance]. Only used when [member directional_shadow_mode] is [code]SHADOW_PARALLEL_4_SPLITS[/code].",
            "setter": "set_param",
            "name": "directional_shadow_split_3",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "0.1",
            "setter": "set_param",
            "override": "true",
            "name": "shadow_bias",
            "getter": "get_param",
            "type": "float"
          }
        ]
      },
      "inherits": "Light",
      "methods": {},
      "name": "DirectionalLight",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "SHADOW_ORTHOGONAL",
            "enum": "ShadowMode"
          },
          {
            "value": "1",
            "name": "SHADOW_PARALLEL_2_SPLITS",
            "enum": "ShadowMode"
          },
          {
            "value": "2",
            "name": "SHADOW_PARALLEL_4_SPLITS",
            "enum": "ShadowMode"
          },
          {
            "value": "0",
            "name": "SHADOW_DEPTH_RANGE_STABLE",
            "enum": "ShadowDepthRange"
          },
          {
            "value": "1",
            "name": "SHADOW_DEPTH_RANGE_OPTIMIZED",
            "enum": "ShadowDepthRange"
          }
        ]
      },
      "brief_description": "Directional light from a distance, as from the Sun.",
      "description": "A directional light is a type of [Light] node that models an infinite number of parallel rays covering the entire scene. It is used for lights with strong intensity that are located far away from the scene to model sunlight or moonlight. The worldspace location of the DirectionalLight transform (origin) is ignored. Only the basis is used to determine light direction."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/getting_started/step_by_step/filesystem.html"
      },
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "todir",
              "type": "String",
              "index": "0"
            },
            "name": "change_dir",
            "description": "Changes the currently opened directory to the one passed as an argument. The argument can be relative to the current directory (e.g. [code]newdir[/code] or [code]../newdir[/code]), or an absolute path (e.g. [code]/tmp/newdir[/code] or [code]res://somedir/newdir[/code]).\n\t\t\t\tReturns one of the [enum Error] code constants ([code]OK[/code] on success)."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "from",
                "type": "String",
                "index": "0"
              },
              {
                "name": "to",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "copy",
            "description": "Copies the [code]from[/code] file to the [code]to[/code] destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.\n\t\t\t\tReturns one of the [enum Error] code constants ([code]OK[/code] on success)."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "current_is_dir",
            "description": "Returns whether the current item processed with the last [method get_next] call is a directory ([code].[/code] and [code]..[/code] are considered directories)."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "dir_exists",
            "description": "Returns whether the target directory exists. The argument can be relative to the current directory, or an absolute path."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "file_exists",
            "description": "Returns whether the target file exists. The argument can be relative to the current directory, or an absolute path."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "get_current_dir",
            "description": "Returns the absolute path to the currently opened directory (e.g. [code]res://folder[/code] or [code]C:\\tmp\\folder[/code])."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_current_drive",
            "description": "Returns the currently opened directory's drive index. See [method get_drive] to convert returned index to the name of the drive."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "get_drive",
            "description": "On Windows, returns the name of the drive (partition) passed as an argument (e.g. [code]C:[/code]). On other platforms, or if the requested drive does not exist, the method returns an empty String."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_drive_count",
            "description": "On Windows, returns the number of drives (partitions) mounted on the current filesystem. On other platforms, the method returns 0."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "get_next",
            "description": "Returns the next element (file or directory) in the current directory (including [code].[/code] and [code]..[/code], unless [code]skip_navigational[/code] was given to [method list_dir_begin]).\n\t\t\t\tThe name of the file or directory is returned (and not its full path). Once the stream has been fully processed, the method returns an empty String and closes the stream automatically (i.e. [method list_dir_end] would not be mandatory in such a case)."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_space_left",
            "description": "On UNIX desktop systems, returns the available space on the current directory's disk. On other platforms, this information is not available and the method returns 0 or -1."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "default": "false",
                "name": "skip_navigational",
                "type": "bool",
                "index": "0"
              },
              {
                "default": "false",
                "name": "skip_hidden",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "list_dir_begin",
            "description": "Initializes the stream used to list all files and directories using the [method get_next] function, closing the currently opened stream if needed. Once the stream has been processed, it should typically be closed with [method list_dir_end].\n\t\t\t\tIf [code]skip_navigational[/code] is [code]true[/code], [code].[/code] and [code]..[/code] are filtered out.\n\t\t\t\tIf [code]skip_hidden[/code] is [code]true[/code], hidden files are filtered out."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "list_dir_end",
            "description": "Closes the current stream opened with [method list_dir_begin] (whether it has been fully processed with [method get_next] does not matter)."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "make_dir",
            "description": "Creates a directory. The argument can be relative to the current directory, or an absolute path. The target directory should be placed in an already existing directory (to create the full path recursively, see [method make_dir_recursive]).\n\t\t\t\tReturns one of the [enum Error] code constants ([code]OK[/code] on success)."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "make_dir_recursive",
            "description": "Creates a target directory and all necessary intermediate directories in its path, by calling [method make_dir] recursively. The argument can be relative to the current directory, or an absolute path.\n\t\t\t\tReturns one of the [enum Error] code constants ([code]OK[/code] on success)."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "open",
            "description": "Opens an existing directory of the filesystem. The [code]path[/code] argument can be within the project tree ([code]res://folder[/code]), the user directory ([code]user://folder[/code]) or an absolute path of the user filesystem (e.g. [code]/tmp/folder[/code] or [code]C:\\tmp\\folder[/code]).\n\t\t\t\tReturns one of the [enum Error] code constants ([code]OK[/code] on success)."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "remove",
            "description": "Deletes the target file or an empty directory. The argument can be relative to the current directory, or an absolute path. If the target directory is not empty, the operation will fail.\n\t\t\t\tReturns one of the [enum Error] code constants ([code]OK[/code] on success)."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "from",
                "type": "String",
                "index": "0"
              },
              {
                "name": "to",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "rename",
            "description": "Renames (move) the [code]from[/code] file or directory to the [code]to[/code] destination. Both arguments should be paths to files or directories, either relative or absolute. If the destination file or directory exists and is not access-protected, it will be overwritten.\n\t\t\t\tReturns one of the [enum Error] code constants ([code]OK[/code] on success)."
          }
        ]
      },
      "name": "Directory",
      "version": "3.3",
      "constants": {},
      "brief_description": "Type used to handle the filesystem.",
      "description": "Directory type. It is used to manage directories and their content (not restricted to the project folder).\n\t\tWhen creating a new [Directory], its default opened directory will be [code]res://[/code]. This may change in the future, so it is advised to always use [method open] to initialize your [Directory] where you want to operate, with explicit error checking.\n\t\t[b]Note:[/b] Many resources types are imported (e.g. textures or sound files), and their source asset will not be included in the exported game, as only the imported version is used. Use [ResourceLoader] to access imported resources.\n\t\tHere is an example on how to iterate through the files of a directory:\n\t\t[codeblock]\n\t\tfunc dir_contents(path):\n\t\t    var dir = Directory.new()\n\t\t    if dir.open(path) == OK:\n\t\t        dir.list_dir_begin()\n\t\t        var file_name = dir.get_next()\n\t\t        while file_name != \"\":\n\t\t            if dir.current_is_dir():\n\t\t                print(\"Found directory: \" + file_name)\n\t\t            else:\n\t\t                print(\"Found file: \" + file_name)\n\t\t            file_name = dir.get_next()\n\t\t    else:\n\t\t        print(\"An error occurred when trying to access the path.\")\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "key",
                "type": "CryptoKey",
                "index": "0"
              },
              {
                "name": "certificate",
                "type": "X509Certificate",
                "index": "1"
              },
              {
                "default": "null",
                "name": "chain",
                "type": "X509Certificate",
                "index": "2"
              }
            ],
            "name": "setup",
            "description": "Setup the DTLS server to use the given [code]private_key[/code] and provide the given [code]certificate[/code] to clients. You can pass the optional [code]chain[/code] parameter to provide additional CA chain information along with the certificate."
          },
          {
            "return": {
              "type": "PacketPeerDTLS"
            },
            "argument": {
              "name": "udp_peer",
              "type": "PacketPeerUDP",
              "index": "0"
            },
            "name": "take_connection",
            "description": "Try to initiate the DTLS handshake with the given [code]udp_peer[/code] which must be already connected (see [method PacketPeerUDP.connect_to_host]).\n\t\t\t\t[b]Note[/b]: You must check that the state of the return PacketPeerUDP is [constant PacketPeerDTLS.STATUS_HANDSHAKING], as it is normal that 50% of the new connections will be invalid due to cookie exchange."
          }
        ]
      },
      "name": "DTLSServer",
      "version": "3.3",
      "constants": {},
      "brief_description": "Helper class to implement a DTLS server.",
      "description": "This class is used to store the state of a DTLS server. Upon [method setup] it converts connected [PacketPeerUDP] to [PacketPeerDTLS] accepting them via [method take_connection] as DTLS clients. Under the hood, this class is used to store the DTLS state and cookies of the server. The reason of why the state and cookies are needed is outside of the scope of this documentation.\n\t\tBelow a small example of how to use it:\n\t\t[codeblock]\n\t\t# server.gd\n\t\textends Node\n\n\t\tvar dtls := DTLSServer.new()\n\t\tvar server := UDPServer.new()\n\t\tvar peers = []\n\n\t\tfunc _ready():\n\t\t    server.listen(4242)\n\t\t    var key = load(\"key.key\") # Your private key.\n\t\t    var cert = load(\"cert.crt\") # Your X509 certificate.\n\t\t    dtls.setup(key, cert)\n\n\t\tfunc _process(delta):\n\t\t    while server.is_connection_available():\n\t\t        var peer : PacketPeerUDP = server.take_connection()\n\t\t        var dtls_peer : PacketPeerDTLS = dtls.take_connection(peer)\n\t\t        if dtls_peer.get_status() != PacketPeerDTLS.STATUS_HANDSHAKING:\n\t\t            continue # It is normal that 50% of the connections fails due to cookie exchange.\n\t\t        print(\"Peer connected!\")\n\t\t        peers.append(dtls_peer)\n\t\t    for p in peers:\n\t\t        p.poll() # Must poll to update the state.\n\t\t        if p.get_status() == PacketPeerDTLS.STATUS_CONNECTED:\n\t\t            while p.get_available_packet_count() > 0:\n\t\t                print(\"Received message from client: %s\" % p.get_packet().get_string_from_utf8())\n\t\t                p.put_packet(\"Hello DTLS client\".to_utf8())\n\t\t[/codeblock]\n\t\t[codeblock]\n\t\t# client.gd\n\t\textends Node\n\n\t\tvar dtls := PacketPeerDTLS.new()\n\t\tvar udp := PacketPeerUDP.new()\n\t\tvar connected = false\n\n\t\tfunc _ready():\n\t\t    udp.connect_to_host(\"127.0.0.1\", 4242)\n\t\t    dtls.connect_to_peer(udp, false) # Use true in production for certificate validation!\n\n\t\tfunc _process(delta):\n\t\t    dtls.poll()\n\t\t    if dtls.get_status() == PacketPeerDTLS.STATUS_CONNECTED:\n\t\t        if !connected:\n\t\t            # Try to contact server\n\t\t            dtls.put_packet(\"The answer is... 42!\".to_utf8())\n\t\t        while dtls.get_available_packet_count() > 0:\n\t\t            print(\"Connected: %s\" % dtls.get_packet().get_string_from_utf8())\n\t\t            connected = true\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/676",
          "title": "3D Voxel Demo"
        }
      },
      "members": {
        "member": [
          {
            "default": "true",
            "value": "If [code]true[/code], the font is rendered with anti-aliasing. This property applies both to the main font and its outline (if it has one).",
            "setter": "set_antialiased",
            "name": "antialiased",
            "getter": "is_antialiased",
            "type": "bool"
          },
          {
            "default": "\"\"",
            "value": "The path to the vector font file.",
            "setter": "set_font_path",
            "name": "font_path",
            "getter": "get_font_path",
            "type": "String"
          },
          {
            "default": "2",
            "value": "The font hinting mode used by FreeType. See [enum Hinting] for options.",
            "setter": "set_hinting",
            "name": "hinting",
            "getter": "get_hinting",
            "type": "int",
            "enum": "DynamicFontData.Hinting"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {},
      "name": "DynamicFontData",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "HINTING_NONE",
            "enum": "Hinting"
          },
          {
            "value": "1",
            "name": "HINTING_LIGHT",
            "enum": "Hinting"
          },
          {
            "value": "2",
            "name": "HINTING_NORMAL",
            "enum": "Hinting"
          }
        ]
      },
      "brief_description": "Used with [DynamicFont] to describe the location of a font file.",
      "description": "Used with [DynamicFont] to describe the location of a vector font file for dynamic rendering at runtime."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/676",
          "title": "3D Voxel Demo"
        }
      },
      "members": {
        "member": [
          {
            "default": "0",
            "value": "Extra spacing at the bottom in pixels.",
            "setter": "set_spacing",
            "name": "extra_spacing_bottom",
            "getter": "get_spacing",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Extra spacing for each character in pixels.\n\t\t\tThis can be a negative number to make the distance between characters smaller.",
            "setter": "set_spacing",
            "name": "extra_spacing_char",
            "getter": "get_spacing",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Extra spacing for the space character (in addition to [member extra_spacing_char]) in pixels.\n\t\t\tThis can be a negative number to make the distance between words smaller.",
            "setter": "set_spacing",
            "name": "extra_spacing_space",
            "getter": "get_spacing",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Extra spacing at the top in pixels.",
            "setter": "set_spacing",
            "name": "extra_spacing_top",
            "getter": "get_spacing",
            "type": "int"
          },
          {
            "value": "The font data.",
            "setter": "set_font_data",
            "name": "font_data",
            "getter": "get_font_data",
            "type": "DynamicFontData"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "The font outline's color.\n\t\t\t[b]Note:[/b] It's recommended to leave this at the default value so that you can adjust it in individual controls. For example, if the outline is made black here, it won't be possible to change its color using a Label's font outline modulate theme item.",
            "setter": "set_outline_color",
            "name": "outline_color",
            "getter": "get_outline_color",
            "type": "Color"
          },
          {
            "default": "0",
            "value": "The font outline's thickness in pixels (not relative to the font size).",
            "setter": "set_outline_size",
            "name": "outline_size",
            "getter": "get_outline_size",
            "type": "int"
          },
          {
            "default": "16",
            "value": "The font size in pixels.",
            "setter": "set_size",
            "name": "size",
            "getter": "get_size",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], filtering is used. This makes the font blurry instead of pixelated when scaling it if font oversampling is disabled or ineffective. It's recommended to enable this when using the font in a control whose size changes over time, unless a pixel art aesthetic is desired.",
            "setter": "set_use_filter",
            "name": "use_filter",
            "getter": "get_use_filter",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], mipmapping is used. This improves the font's appearance when downscaling it if font oversampling is disabled or ineffective.",
            "setter": "set_use_mipmaps",
            "name": "use_mipmaps",
            "getter": "get_use_mipmaps",
            "type": "bool"
          }
        ]
      },
      "inherits": "Font",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "data",
              "type": "DynamicFontData",
              "index": "0"
            },
            "name": "add_fallback",
            "description": "Adds a fallback font."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_available_chars",
            "description": "Returns a string containing all the characters available in the main and all the fallback fonts.\n\t\t\t\tIf a given character is included in more than one font, it appears only once in the returned string."
          },
          {
            "return": {
              "type": "DynamicFontData"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_fallback",
            "description": "Returns the fallback font at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_fallback_count",
            "description": "Returns the number of fallback fonts."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "type",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_spacing",
            "description": "Returns the spacing for the given [code]type[/code] (see [enum SpacingType])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "remove_fallback",
            "description": "Removes the fallback font at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "data",
                "type": "DynamicFontData",
                "index": "1"
              }
            ],
            "name": "set_fallback",
            "description": "Sets the fallback font at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "type",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set_spacing",
            "description": "Sets the spacing for [code]type[/code] (see [enum SpacingType]) to [code]value[/code] in pixels (not relative to the font size)."
          }
        ]
      },
      "name": "DynamicFont",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "SPACING_TOP",
            "enum": "SpacingType"
          },
          {
            "value": "1",
            "name": "SPACING_BOTTOM",
            "enum": "SpacingType"
          },
          {
            "value": "2",
            "name": "SPACING_CHAR",
            "enum": "SpacingType"
          },
          {
            "value": "3",
            "name": "SPACING_SPACE",
            "enum": "SpacingType"
          }
        ]
      },
      "brief_description": "DynamicFont renders vector font files at runtime.",
      "description": "DynamicFont renders vector font files (such as TTF or OTF) dynamically at runtime instead of using a prerendered texture atlas like [BitmapFont]. This trades the faster loading time of [BitmapFont]s for the ability to change font parameters like size and spacing during runtime. [DynamicFontData] is used for referencing the font file paths. DynamicFont also supports defining one or more fallback fonts, which will be used when displaying a character not supported by the main font.\n\t\tDynamicFont uses the [url=https://www.freetype.org/]FreeType[/url] library for rasterization.\n\t\t[codeblock]\n\t\tvar dynamic_font = DynamicFont.new()\n\t\tdynamic_font.font_data = load(\"res://BarlowCondensed-Bold.ttf\")\n\t\tdynamic_font.size = 64\n\t\t$\"Label\".set(\"custom_fonts/font\", dynamic_font)\n\t\t[/codeblock]\n\t\t[b]Note:[/b] DynamicFont doesn't support features such as kerning, right-to-left typesetting, ligatures, text shaping, variable fonts and optional font features yet. If you wish to \"bake\" an optional font feature into a TTF font file, you can use [url=https://fontforge.org/]FontForge[/url] to do so. In FontForge, use [b]File > Generate Fonts[/b], click [b]Options[/b], choose the desired features then generate the font."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "features",
                "type": "PoolStringArray",
                "index": "0"
              },
              {
                "name": "is_debug",
                "type": "bool",
                "index": "1"
              },
              {
                "name": "path",
                "type": "String",
                "index": "2"
              },
              {
                "name": "flags",
                "type": "int",
                "index": "3"
              }
            ],
            "qualifiers": "virtual",
            "name": "_export_begin",
            "description": "Virtual method to be overridden by the user. It is called when the export starts and provides all information about the export. [code]features[/code] is the list of features for the export, [code]is_debug[/code] is [code]true[/code] for debug builds, [code]path[/code] is the target path for the exported project. [code]flags[/code] is only used when running a runnable profile, e.g. when using native run on Android."
          },
          {
            "return": {
              "type": "void"
            },
            "qualifiers": "virtual",
            "name": "_export_end",
            "description": "Virtual method to be overridden by the user. Called when the export is finished."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "type",
                "type": "String",
                "index": "1"
              },
              {
                "name": "features",
                "type": "PoolStringArray",
                "index": "2"
              }
            ],
            "qualifiers": "virtual",
            "name": "_export_file",
            "description": "Virtual method to be overridden by the user. Called for each exported file, providing arguments that can be used to identify the file. [code]path[/code] is the path of the file, [code]type[/code] is the [Resource] represented by the file (e.g. [PackedScene]) and [code]features[/code] is the list of features for the export.\n\t\t\t\tCalling [method skip] inside this callback will make the file not included in the export."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "file",
                "type": "PoolByteArray",
                "index": "1"
              },
              {
                "name": "remap",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "add_file",
            "description": "Adds a custom file to be exported. [code]path[/code] is the virtual path that can be used to load the file, [code]file[/code] is the binary data of the file. If [code]remap[/code] is [code]true[/code], file will not be exported, but instead remapped to the given [code]path[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "add_ios_bundle_file",
            "description": "Adds an iOS bundle file from the given [code]path[/code] to the exported project."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "code",
              "type": "String",
              "index": "0"
            },
            "name": "add_ios_cpp_code",
            "description": "Adds a C++ code to the iOS export. The final code is created from the code appended by each active export plugin."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "add_ios_embedded_framework",
            "description": "Adds a dynamic library (*.dylib, *.framework) to Linking Phase in iOS's Xcode project and embeds it into resulting binary.\n\t\t\t\t[b]Note:[/b] For static libraries (*.a) works in same way as [method add_ios_framework].\n\t\t\t\tThis method should not be used for System libraries as they are already present on the device."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "add_ios_framework",
            "description": "Adds a static library (*.a) or dynamic library (*.dylib, *.framework) to Linking Phase in iOS's Xcode project."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "flags",
              "type": "String",
              "index": "0"
            },
            "name": "add_ios_linker_flags",
            "description": "Adds linker flags for the iOS export."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "plist_content",
              "type": "String",
              "index": "0"
            },
            "name": "add_ios_plist_content",
            "description": "Adds content for iOS Property List files."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "add_ios_project_static_lib",
            "description": "Adds a static lib from the given [code]path[/code] to the iOS project."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "tags",
                "type": "PoolStringArray",
                "index": "1"
              }
            ],
            "name": "add_shared_object",
            "description": "Adds a shared object with the given [code]tags[/code] and destination [code]path[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "skip",
            "description": "To be called inside [method _export_file]. Skips the current file, so it's not included in the export."
          }
        ]
      },
      "name": "EditorExportPlugin",
      "version": "3.3",
      "constants": {},
      "brief_description": "A script that is executed when exporting the project.",
      "description": "Editor export plugins are automatically activated whenever the user exports the project. Their most common use is to determine what files are being included in the exported project. For each plugin, [method _export_begin] is called at the beginning of the export process and then [method _export_file] is called for each exported file."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "feature",
              "type": "int",
              "enum": "EditorFeatureProfile.Feature",
              "index": "0"
            },
            "name": "get_feature_name",
            "description": "Returns the specified [code]feature[/code]'s human-readable name."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "class_name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_class_disabled",
            "description": "Returns [code]true[/code] if the class specified by [code]class_name[/code] is disabled. When disabled, the class won't appear in the Create New Node dialog."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "class_name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_class_editor_disabled",
            "description": "Returns [code]true[/code] if editing for the class specified by [code]class_name[/code] is disabled. When disabled, the class will still appear in the Create New Node dialog but the inspector will be read-only when selecting a node that extends the class."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "class_name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "property",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "is_class_property_disabled",
            "description": "Returns [code]true[/code] if [code]property[/code] is disabled in the class specified by [code]class_name[/code]. When a property is disabled, it won't appear in the inspector when selecting a node that extends the class specified by [code]class_name[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "feature",
              "type": "int",
              "enum": "EditorFeatureProfile.Feature",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_feature_disabled",
            "description": "Returns [code]true[/code] if the [code]feature[/code] is disabled. When a feature is disabled, it will disappear from the editor entirely."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "load_from_file",
            "description": "Loads an editor feature profile from a file. The file must follow the JSON format obtained by using the feature profile manager's [b]Export[/b] button or the [method save_to_file] method."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "save_to_file",
            "description": "Saves the editor feature profile to a file in JSON format. It can then be imported using the feature profile manager's [b]Import[/b] button or the [method load_from_file] button."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "class_name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "disable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_disable_class",
            "description": "If [code]disable[/code] is [code]true[/code], disables the class specified by [code]class_name[/code]. When disabled, the class won't appear in the Create New Node dialog."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "class_name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "disable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_disable_class_editor",
            "description": "If [code]disable[/code] is [code]true[/code], disables editing for the class specified by [code]class_name[/code]. When disabled, the class will still appear in the Create New Node dialog but the inspector will be read-only when selecting a node that extends the class."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "class_name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "property",
                "type": "String",
                "index": "1"
              },
              {
                "name": "disable",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "set_disable_class_property",
            "description": "If [code]disable[/code] is [code]true[/code], disables editing for [code]property[/code] in the class specified by [code]class_name[/code]. When a property is disabled, it won't appear in the inspector when selecting a node that extends the class specified by [code]class_name[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "feature",
                "type": "int",
                "enum": "EditorFeatureProfile.Feature",
                "index": "0"
              },
              {
                "name": "disable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_disable_feature",
            "description": "If [code]disable[/code] is [code]true[/code], disables the editor feature specified in [code]feature[/code]. When a feature is disabled, it will disappear from the editor entirely."
          }
        ]
      },
      "name": "EditorFeatureProfile",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "FEATURE_3D",
            "enum": "Feature"
          },
          {
            "value": "1",
            "name": "FEATURE_SCRIPT",
            "enum": "Feature"
          },
          {
            "value": "2",
            "name": "FEATURE_ASSET_LIB",
            "enum": "Feature"
          },
          {
            "value": "3",
            "name": "FEATURE_SCENE_TREE",
            "enum": "Feature"
          },
          {
            "value": "4",
            "name": "FEATURE_NODE_DOCK",
            "enum": "Feature"
          },
          {
            "value": "5",
            "name": "FEATURE_FILESYSTEM_DOCK",
            "enum": "Feature"
          },
          {
            "value": "6",
            "name": "FEATURE_IMPORT_DOCK",
            "enum": "Feature"
          },
          {
            "value": "7",
            "name": "FEATURE_MAX",
            "enum": "Feature"
          }
        ]
      },
      "brief_description": "An editor feature profile which can be used to disable specific features.",
      "description": "An editor feature profile can be used to disable specific features of the Godot editor. When disabled, the features won't appear in the editor, which makes the editor less cluttered. This is useful in education settings to reduce confusion or when working in a team. For example, artists and level designers could use a feature profile that disables the script editor to avoid accidentally making changes to files they aren't supposed to edit.\n\t\tTo manage editor feature profiles visually, use [b]Editor > Manage Feature Profiles...[/b] at the top of the editor window."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0",
            "value": "The location from which the user may select a file, including [code]res://[/code], [code]user://[/code], and the local file system.",
            "setter": "set_access",
            "name": "access",
            "getter": "get_access",
            "type": "int",
            "enum": "EditorFileDialog.Access"
          },
          {
            "default": "\"res://\"",
            "value": "The currently occupied directory.",
            "setter": "set_current_dir",
            "name": "current_dir",
            "getter": "get_current_dir",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "The currently selected file.",
            "setter": "set_current_file",
            "name": "current_file",
            "getter": "get_current_file",
            "type": "String"
          },
          {
            "default": "\"res://\"",
            "value": "The file system path in the address bar.",
            "setter": "set_current_path",
            "name": "current_path",
            "getter": "get_current_path",
            "type": "String"
          },
          {
            "default": "false",
            "setter": "set_hide_on_ok",
            "override": "true",
            "name": "dialog_hide_on_ok",
            "getter": "get_hide_on_ok",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the [EditorFileDialog] will not warn the user before overwriting files.",
            "setter": "set_disable_overwrite_warning",
            "name": "disable_overwrite_warning",
            "getter": "is_overwrite_warning_disabled",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "The view format in which the [EditorFileDialog] displays resources to the user.",
            "setter": "set_display_mode",
            "name": "display_mode",
            "getter": "get_display_mode",
            "type": "int",
            "enum": "EditorFileDialog.DisplayMode"
          },
          {
            "default": "4",
            "value": "The purpose of the [EditorFileDialog], which defines the allowed behaviors.",
            "setter": "set_mode",
            "name": "mode",
            "getter": "get_mode",
            "type": "int",
            "enum": "EditorFileDialog.Mode"
          },
          {
            "default": "true",
            "setter": "set_resizable",
            "override": "true",
            "name": "resizable",
            "getter": "get_resizable",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], hidden files and directories will be visible in the [EditorFileDialog].",
            "setter": "set_show_hidden_files",
            "name": "show_hidden_files",
            "getter": "is_showing_hidden_files",
            "type": "bool"
          },
          {
            "default": "\"Save a File\"",
            "setter": "set_title",
            "override": "true",
            "name": "window_title",
            "getter": "get_title",
            "type": "String"
          }
        ]
      },
      "inherits": "ConfirmationDialog",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "filter",
              "type": "String",
              "index": "0"
            },
            "name": "add_filter",
            "description": "Adds a comma-delimited file extension filter option to the [EditorFileDialog] with an optional semi-colon-delimited label.\n\t\t\t\tFor example, [code]\"*.tscn, *.scn; Scenes\"[/code] results in filter text \"Scenes (*.tscn, *.scn)\"."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_filters",
            "description": "Removes all filters except for \"All Files (*)\"."
          },
          {
            "return": {
              "type": "VBoxContainer"
            },
            "name": "get_vbox",
            "description": "Returns the [code]VBoxContainer[/code] used to display the file system."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "invalidate",
            "description": "Notify the [EditorFileDialog] that its view of the data is no longer accurate. Updates the view contents on next view update."
          }
        ]
      },
      "name": "EditorFileDialog",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "dir",
              "type": "String",
              "index": "0"
            },
            "name": "dir_selected",
            "description": "Emitted when a directory is selected."
          },
          {
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "file_selected",
            "description": "Emitted when a file is selected."
          },
          {
            "argument": {
              "name": "paths",
              "type": "PoolStringArray",
              "index": "0"
            },
            "name": "files_selected",
            "description": "Emitted when multiple files are selected."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "MODE_OPEN_FILE",
            "enum": "Mode"
          },
          {
            "value": "1",
            "name": "MODE_OPEN_FILES",
            "enum": "Mode"
          },
          {
            "value": "2",
            "name": "MODE_OPEN_DIR",
            "enum": "Mode"
          },
          {
            "value": "3",
            "name": "MODE_OPEN_ANY",
            "enum": "Mode"
          },
          {
            "value": "4",
            "name": "MODE_SAVE_FILE",
            "enum": "Mode"
          },
          {
            "value": "0",
            "name": "ACCESS_RESOURCES",
            "enum": "Access"
          },
          {
            "value": "1",
            "name": "ACCESS_USERDATA",
            "enum": "Access"
          },
          {
            "value": "2",
            "name": "ACCESS_FILESYSTEM",
            "enum": "Access"
          },
          {
            "value": "0",
            "name": "DISPLAY_THUMBNAILS",
            "enum": "DisplayMode"
          },
          {
            "value": "1",
            "name": "DISPLAY_LIST",
            "enum": "DisplayMode"
          }
        ]
      },
      "brief_description": "A modified version of [FileDialog] used by the editor.",
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "find_dir_index",
            "description": "Returns the index of the directory with name [code]name[/code] or [code]-1[/code] if not found."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "find_file_index",
            "description": "Returns the index of the file with name [code]name[/code] or [code]-1[/code] if not found."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_file",
            "description": "Returns the name of the file at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_file_count",
            "description": "Returns the number of files in this directory."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_file_import_is_valid",
            "description": "Returns [code]true[/code] if the file at index [code]idx[/code] imported properly."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_file_path",
            "description": "Returns the path to the file at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_file_script_class_extends",
            "description": "Returns the base class of the script class defined in the file at index [code]idx[/code]. If the file doesn't define a script class using the [code]class_name[/code] syntax, this will return an empty string."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_file_script_class_name",
            "description": "Returns the name of the script class defined in the file at index [code]idx[/code]. If the file doesn't define a script class using the [code]class_name[/code] syntax, this will return an empty string."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_file_type",
            "description": "Returns the resource type of the file at index [code]idx[/code]. This returns a string such as [code]\"Resource\"[/code] or [code]\"GDScript\"[/code], [i]not[/i] a file extension such as [code]\".gd\"[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "get_name",
            "description": "Returns the name of this directory."
          },
          {
            "return": {
              "type": "EditorFileSystemDirectory"
            },
            "name": "get_parent",
            "description": "Returns the parent directory for this directory or [code]null[/code] if called on a directory at [code]res://[/code] or [code]user://[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_path",
            "description": "Returns the path to this directory."
          },
          {
            "return": {
              "type": "EditorFileSystemDirectory"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "get_subdir",
            "description": "Returns the subdirectory at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_subdir_count",
            "description": "Returns the number of subdirectories in this directory."
          }
        ]
      },
      "name": "EditorFileSystemDirectory",
      "version": "3.3",
      "constants": {},
      "brief_description": "A directory for the resource filesystem.",
      "description": "A more generalized, low-level variation of the directory concept."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Node",
      "methods": {
        "method": [
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_file_type",
            "description": "Returns the resource type of the file, given the full path. This returns a string such as [code]\"Resource\"[/code] or [code]\"GDScript\"[/code], [i]not[/i] a file extension such as [code]\".gd\"[/code]."
          },
          {
            "return": {
              "type": "EditorFileSystemDirectory"
            },
            "name": "get_filesystem",
            "description": "Gets the root directory object."
          },
          {
            "return": {
              "type": "EditorFileSystemDirectory"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "get_filesystem_path",
            "description": "Returns a view into the filesystem at [code]path[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_scanning_progress",
            "description": "Returns the scan progress for 0 to 1 if the FS is being scanned."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_scanning",
            "description": "Returns [code]true[/code] of the filesystem is being scanned."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "scan",
            "description": "Scan the filesystem for changes."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "scan_sources",
            "description": "Check if the source of any imported resource changed."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "update_file",
            "description": "Update a file information. Call this if an external program (not Godot) modified the file."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "update_script_classes",
            "description": "Scans the script files and updates the list of custom class names."
          }
        ]
      },
      "name": "EditorFileSystem",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "filesystem_changed",
            "description": "Emitted if the filesystem changed."
          },
          {
            "argument": {
              "name": "resources",
              "type": "PoolStringArray",
              "index": "0"
            },
            "name": "resources_reimported",
            "description": "Emitted if a resource is reimported."
          },
          {
            "argument": {
              "name": "resources",
              "type": "PoolStringArray",
              "index": "0"
            },
            "name": "resources_reload",
            "description": "Emitted if at least one resource is reloaded when the filesystem is scanned."
          },
          {
            "argument": {
              "name": "exist",
              "type": "bool",
              "index": "0"
            },
            "name": "sources_changed",
            "description": "Emitted if the source of any imported file changed."
          }
        ]
      },
      "constants": {},
      "brief_description": "Resource filesystem, as the editor sees it.",
      "description": "This object holds information of all resources in the filesystem, their types, etc.\n\t\t[b]Note:[/b] This class shouldn't be instantiated directly. Instead, access the singleton using [method EditorInterface.get_resource_filesystem]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/plugins/editor/import_plugins.html"
      },
      "inherits": "ResourceImporter",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "preset",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "get_import_options",
            "description": "Gets the options and default values for the preset at this index. Returns an Array of Dictionaries with the following keys: [code]name[/code], [code]default_value[/code], [code]property_hint[/code] (optional), [code]hint_string[/code] (optional), [code]usage[/code] (optional)."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "virtual",
            "name": "get_import_order",
            "description": "Gets the order of this importer to be run when importing resources. Higher values will be called later. Use this to ensure the importer runs after the dependencies are already imported."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "virtual",
            "name": "get_importer_name",
            "description": "Gets the unique name of the importer."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "option",
                "type": "String",
                "index": "0"
              },
              {
                "name": "options",
                "type": "Dictionary",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "get_option_visibility",
            "description": "This method can be overridden to hide specific import options if conditions are met. This is mainly useful for hiding options that depend on others if one of them is disabled. For example:\n\t\t\t\t[codeblock]\n\t\t\t\tfunc get_option_visibility(option, options):\n\t\t\t\t    # Only show the lossy quality setting if the compression mode is set to \"Lossy\".\n\t\t\t\t    if option == \"compress/lossy_quality\" and options.has(\"compress/mode\"):\n\t\t\t\t        return int(options[\"compress/mode\"]) == COMPRESS_LOSSY\n\n\t\t\t\t    return true\n\t\t\t\t[/codeblock]\n\t\t\t\tReturn [code]true[/code] to make all options always visible."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "virtual",
            "name": "get_preset_count",
            "description": "Gets the number of initial presets defined by the plugin. Use [method get_import_options] to get the default options for the preset and [method get_preset_name] to get the name of the preset."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "preset",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "get_preset_name",
            "description": "Gets the name of the options preset at this index."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "virtual",
            "name": "get_priority",
            "description": "Gets the priority of this plugin for the recognized extension. Higher priority plugins will be preferred. The default priority is [code]1.0[/code]."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "virtual",
            "name": "get_recognized_extensions",
            "description": "Gets the list of file extensions to associate with this loader (case-insensitive). e.g. [code][\"obj\"][/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "virtual",
            "name": "get_resource_type",
            "description": "Gets the Godot resource type associated with this loader. e.g. [code]\"Mesh\"[/code] or [code]\"Animation\"[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "virtual",
            "name": "get_save_extension",
            "description": "Gets the extension used to save this resource in the [code].import[/code] directory."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "virtual",
            "name": "get_visible_name",
            "description": "Gets the name to display in the import window. You should choose this name as a continuation to \"Import as\", e.g. \"Import as Special Mesh\"."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "source_file",
                "type": "String",
                "index": "0"
              },
              {
                "name": "save_path",
                "type": "String",
                "index": "1"
              },
              {
                "name": "options",
                "type": "Dictionary",
                "index": "2"
              },
              {
                "name": "platform_variants",
                "type": "Array",
                "index": "3"
              },
              {
                "name": "gen_files",
                "type": "Array",
                "index": "4"
              }
            ],
            "qualifiers": "virtual",
            "name": "import",
            "description": "Imports [code]source_file[/code] into [code]save_path[/code] with the import [code]options[/code] specified. The [code]platform_variants[/code] and [code]gen_files[/code] arrays will be modified by this function.\n\t\t\t\tThis method must be overridden to do the actual importing work. See this class' description for an example of overriding this method."
          }
        ]
      },
      "name": "EditorImportPlugin",
      "version": "3.3",
      "constants": {},
      "brief_description": "Registers a custom resource importer in the editor. Use the class to parse any file and import it as a new resource type.",
      "description": "EditorImportPlugins provide a way to extend the editor's resource import functionality. Use them to import resources from custom files or to provide alternatives to the editor's existing importers. Register your [EditorPlugin] with [method EditorPlugin.add_import_plugin].\n\t\tEditorImportPlugins work by associating with specific file extensions and a resource type. See [method get_recognized_extensions] and [method get_resource_type]. They may optionally specify some import presets that affect the import process. EditorImportPlugins are responsible for creating the resources and saving them in the [code].import[/code] directory.\n\t\tBelow is an example EditorImportPlugin that imports a [Mesh] from a file with the extension \".special\" or \".spec\":\n\t\t[codeblock]\n\t\ttool\n\t\textends EditorImportPlugin\n\n\t\tfunc get_importer_name():\n\t\t    return \"my.special.plugin\"\n\n\t\tfunc get_visible_name():\n\t\t    return \"Special Mesh\"\n\n\t\tfunc get_recognized_extensions():\n\t\t    return [\"special\", \"spec\"]\n\n\t\tfunc get_save_extension():\n\t\t    return \"mesh\"\n\n\t\tfunc get_resource_type():\n\t\t    return \"Mesh\"\n\n\t\tfunc get_preset_count():\n\t\t    return 1\n\n\t\tfunc get_preset_name(i):\n\t\t    return \"Default\"\n\n\t\tfunc get_import_options(i):\n\t\t    return [{\"name\": \"my_option\", \"default_value\": false}]\n\n\t\tfunc import(source_file, save_path, options, platform_variants, gen_files):\n\t\t    var file = File.new()\n\t\t    if file.open(source_file, File.READ) != OK:\n\t\t        return FAILED\n\n\t\t    var mesh = Mesh.new()\n\t\t    # Fill the Mesh with data read in \"file\", left as an exercise to the reader\n\n\t\t    var filename = save_path + \".\" + get_save_extension()\n\t\t    return ResourceSaver.save(filename, mesh)\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://docs.godotengine.org/en/3.3/tutorials/plugins/editor/inspector_plugins.html",
          "title": "Inspector plugins"
        }
      },
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "control",
              "type": "Control",
              "index": "0"
            },
            "name": "add_custom_control",
            "description": "Adds a custom control, which is not necessarily a property editor."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "property",
                "type": "String",
                "index": "0"
              },
              {
                "name": "editor",
                "type": "Control",
                "index": "1"
              }
            ],
            "name": "add_property_editor",
            "description": "Adds a property editor for an individual property. The [code]editor[/code] control must extend [EditorProperty]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "label",
                "type": "String",
                "index": "0"
              },
              {
                "name": "properties",
                "type": "PoolStringArray",
                "index": "1"
              },
              {
                "name": "editor",
                "type": "Control",
                "index": "2"
              }
            ],
            "name": "add_property_editor_for_multiple_properties",
            "description": "Adds an editor that allows modifying multiple properties. The [code]editor[/code] control must extend [EditorProperty]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "object",
              "type": "Object",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "can_handle",
            "description": "Returns [code]true[/code] if this object can be handled by this plugin."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "object",
              "type": "Object",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "parse_begin",
            "description": "Called to allow adding controls at the beginning of the list."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "category",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "parse_category",
            "description": "Called to allow adding controls at the beginning of the category."
          },
          {
            "return": {
              "type": "void"
            },
            "qualifiers": "virtual",
            "name": "parse_end",
            "description": "Called to allow adding controls at the end of the list."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "type",
                "type": "int",
                "index": "1"
              },
              {
                "name": "path",
                "type": "String",
                "index": "2"
              },
              {
                "name": "hint",
                "type": "int",
                "index": "3"
              },
              {
                "name": "hint_text",
                "type": "String",
                "index": "4"
              },
              {
                "name": "usage",
                "type": "int",
                "index": "5"
              }
            ],
            "qualifiers": "virtual",
            "name": "parse_property",
            "description": "Called to allow adding property specific editors to the inspector. Usually these inherit [EditorProperty]. Returning [code]true[/code] removes the built-in editor for this property, otherwise allows to insert a custom editor before the built-in one."
          }
        ]
      },
      "name": "EditorInspectorPlugin",
      "version": "3.3",
      "constants": {},
      "brief_description": "Plugin for adding custom property editors on inspector.",
      "description": "These plugins allow adding custom property editors to [EditorInspector].\n\t\tPlugins are registered via [method EditorPlugin.add_inspector_plugin].\n\t\tWhen an object is edited, the [method can_handle] function is called and must return [code]true[/code] if the object type is supported.\n\t\tIf supported, the function [method parse_begin] will be called, allowing to place custom controls at the beginning of the class.\n\t\tSubsequently, the [method parse_category] and [method parse_property] are called for every category and property. They offer the ability to add custom controls to the inspector too.\n\t\tFinally, [method parse_end] will be called.\n\t\tOn each of these calls, the \"add\" functions can be called."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "false",
          "setter": "set_enable_h_scroll",
          "override": "true",
          "name": "scroll_horizontal_enabled",
          "getter": "is_h_scroll_enabled",
          "type": "bool"
        }
      },
      "inherits": "ScrollContainer",
      "methods": {
        "method": {
          "return": {
            "type": "void"
          },
          "name": "refresh",
          "description": "Refreshes the inspector.\n\t\t\t\t[b]Note:[/b] To save on CPU resources, calling this method will do nothing if the time specified in [code]docks/property_editor/auto_refresh_interval[/code] editor setting hasn't passed yet since this method was last called. (By default, this interval is set to 0.3 seconds.)"
        }
      },
      "name": "EditorInspector",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "object_id_selected",
            "description": "Emitted when the Edit button of an [Object] has been pressed in the inspector. This is mainly used in the remote scene tree inspector."
          },
          {
            "argument": {
              "name": "property",
              "type": "String",
              "index": "0"
            },
            "name": "property_edited",
            "description": "Emitted when a property is edited in the inspector."
          },
          {
            "argument": {
              "name": "property",
              "type": "String",
              "index": "0"
            },
            "name": "property_keyed",
            "description": "Emitted when a property is keyed in the inspector. Properties can be keyed by clicking the \"key\" icon next to a property when the Animation panel is toggled."
          },
          {
            "argument": {
              "name": "property",
              "type": "String",
              "index": "0"
            },
            "name": "property_selected",
            "description": "Emitted when a property is selected in the inspector."
          },
          {
            "argument": [
              {
                "name": "property",
                "type": "String",
                "index": "0"
              },
              {
                "name": "checked",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "property_toggled",
            "description": "Emitted when a boolean property is toggled in the inspector.\n\t\t\t\t[b]Note:[/b] This signal is never emitted if the internal [code]autoclear[/code] property enabled. Since this property is always enabled in the editor inspector, this signal is never emitted by the editor itself."
          },
          {
            "argument": [
              {
                "name": "res",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "prop",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "resource_selected",
            "description": "Emitted when a resource is selected in the inspector."
          },
          {
            "name": "restart_requested",
            "description": "Emitted when a property that requires a restart to be applied is edited in the inspector. This is only used in the Project Settings and Editor Settings."
          }
        ]
      },
      "constants": {},
      "brief_description": "A tab used to edit properties of the selected node.",
      "description": "The editor inspector is by default located on the right-hand side of the editor. It's used to edit the properties of the selected node. For example, you can select a node such as [Sprite] then edit its transform through the inspector tool. The editor inspector is an essential tool in the game development workflow.\n\t\t[b]Note:[/b] This class shouldn't be instantiated directly. Instead, access the singleton using [method EditorInterface.get_inspector]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "value": "If [code]true[/code], enables distraction-free mode which hides side docks to increase the space available for the main view.",
          "setter": "set_distraction_free_mode",
          "name": "distraction_free_mode",
          "getter": "is_distraction_free_mode_enabled",
          "type": "bool"
        }
      },
      "inherits": "Node",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "node",
              "type": "Node",
              "index": "0"
            },
            "name": "edit_node",
            "description": "Edits the given [Node]. The node will be also selected if it's inside the scene tree."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "resource",
              "type": "Resource",
              "index": "0"
            },
            "name": "edit_resource",
            "description": "Edits the given [Resource]."
          },
          {
            "return": {
              "type": "Control"
            },
            "name": "get_base_control",
            "description": "Returns the main container of Godot editor's window. For example, you can use it to retrieve the size of the container and place your controls accordingly."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_current_path",
            "description": "Returns the current path being viewed in the [FileSystemDock]."
          },
          {
            "return": {
              "type": "Node"
            },
            "name": "get_edited_scene_root",
            "description": "Returns the edited (current) scene's root [Node]."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_editor_scale",
            "description": "Returns the actual scale of the editor UI ([code]1.0[/code] being 100% scale). This can be used to adjust position and dimensions of the UI added by plugins.\n\t\t\t\t[b]Note:[/b] This value is set via the [code]interface/editor/display_scale[/code] and [code]interface/editor/custom_display_scale[/code] editor settings. Editor must be restarted for changes to be properly applied."
          },
          {
            "return": {
              "type": "EditorSettings"
            },
            "name": "get_editor_settings",
            "description": "Returns the editor's [EditorSettings] instance."
          },
          {
            "return": {
              "type": "Control"
            },
            "name": "get_editor_viewport",
            "description": "Returns the main editor control. Use this as a parent for main screens.\n\t\t\t\t[b]Note:[/b] This returns the main editor control containing the whole editor, not the 2D or 3D viewports specifically."
          },
          {
            "return": {
              "type": "FileSystemDock"
            },
            "name": "get_file_system_dock",
            "description": "Returns the editor's [FileSystemDock] instance."
          },
          {
            "return": {
              "type": "EditorInspector"
            },
            "qualifiers": "const",
            "name": "get_inspector",
            "description": "Returns the editor's [EditorInspector] instance."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_open_scenes",
            "description": "Returns an [Array] with the file paths of the currently opened scenes."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_playing_scene",
            "description": "Returns the name of the scene that is being played. If no scene is currently being played, returns an empty string."
          },
          {
            "return": {
              "type": "EditorFileSystem"
            },
            "name": "get_resource_filesystem",
            "description": "Returns the editor's [EditorFileSystem] instance."
          },
          {
            "return": {
              "type": "EditorResourcePreview"
            },
            "name": "get_resource_previewer",
            "description": "Returns the editor's [EditorResourcePreview] instance."
          },
          {
            "return": {
              "type": "ScriptEditor"
            },
            "name": "get_script_editor",
            "description": "Returns the editor's [ScriptEditor] instance."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_selected_path",
            "description": "Returns the path of the directory currently selected in the [FileSystemDock]. If a file is selected, its base directory will be returned using [method String.get_base_dir] instead."
          },
          {
            "return": {
              "type": "EditorSelection"
            },
            "name": "get_selection",
            "description": "Returns the editor's [EditorSelection] instance."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "default": "\"\"",
                "name": "for_property",
                "type": "String",
                "index": "1"
              },
              {
                "default": "false",
                "name": "inspector_only",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "inspect_object",
            "description": "Shows the given property on the given [code]object[/code] in the editor's Inspector dock. If [code]inspector_only[/code] is [code]true[/code], plugins will not attempt to edit [code]object[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_playing_scene",
            "description": "Returns [code]true[/code] if a scene is currently being played, [code]false[/code] otherwise. Paused scenes are considered as being played."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "plugin",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_plugin_enabled",
            "description": "Returns [code]true[/code] if the specified [code]plugin[/code] is enabled. The plugin name is the same as its directory name."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "meshes",
                "type": "Array",
                "index": "0"
              },
              {
                "name": "preview_size",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "make_mesh_previews",
            "description": "Returns mesh previews rendered at the given size as an [Array] of [Texture]s."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "scene_filepath",
              "type": "String",
              "index": "0"
            },
            "name": "open_scene_from_path",
            "description": "Opens the scene at the given path."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "play_current_scene",
            "description": "Plays the currently active scene."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "scene_filepath",
              "type": "String",
              "index": "0"
            },
            "name": "play_custom_scene",
            "description": "Plays the scene specified by its filepath."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "play_main_scene",
            "description": "Plays the main scene."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "scene_filepath",
              "type": "String",
              "index": "0"
            },
            "name": "reload_scene_from_path",
            "description": "Reloads the scene at the given path."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "name": "save_scene",
            "description": "Saves the scene. Returns either [code]OK[/code] or [code]ERR_CANT_CREATE[/code] (see [@GlobalScope] constants)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "default": "true",
                "name": "with_preview",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "save_scene_as",
            "description": "Saves the scene as a file at [code]path[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "file",
              "type": "String",
              "index": "0"
            },
            "name": "select_file",
            "description": "Selects the file, with the path provided by [code]file[/code], in the FileSystem dock."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "set_main_screen_editor",
            "description": "Sets the editor's current main screen to the one specified in [code]name[/code]. [code]name[/code] must match the text of the tab in question exactly ([code]2D[/code], [code]3D[/code], [code]Script[/code], [code]AssetLib[/code])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "plugin",
                "type": "String",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_plugin_enabled",
            "description": "Sets the enabled status of a plugin. The plugin name is the same as its directory name."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "stop_playing_scene",
            "description": "Stops the scene that is currently playing."
          }
        ]
      },
      "name": "EditorInterface",
      "version": "3.3",
      "constants": {},
      "brief_description": "Godot editor's interface.",
      "description": "EditorInterface gives you control over Godot editor's window. It allows customizing the window, saving and (re-)loading scenes, rendering mesh previews, inspecting and editing resources and objects, and provides access to [EditorSettings], [EditorFileSystem], [EditorResourcePreview], [ScriptEditor], the editor viewport, and information about scenes.\n\t\t[b]Note:[/b] This class shouldn't be instantiated directly. Instead, access the singleton using [method EditorPlugin.get_editor_interface]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "nav_mesh",
                "type": "NavigationMesh",
                "index": "0"
              },
              {
                "name": "root_node",
                "type": "Node",
                "index": "1"
              }
            ],
            "name": "bake",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "nav_mesh",
              "type": "NavigationMesh",
              "index": "0"
            },
            "name": "clear",
            "description": {}
          }
        ]
      },
      "name": "EditorNavigationMeshGenerator",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/plugins/editor/index.html"
      },
      "inherits": "Node",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "path",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "add_autoload_singleton",
            "description": "Adds a script at [code]path[/code] to the Autoload list as [code]name[/code]."
          },
          {
            "return": {
              "type": "ToolButton"
            },
            "argument": [
              {
                "name": "control",
                "type": "Control",
                "index": "0"
              },
              {
                "name": "title",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "add_control_to_bottom_panel",
            "description": "Adds a control to the bottom panel (together with Output, Debug, Animation, etc). Returns a reference to the button added. It's up to you to hide/show the button when needed. When your plugin is deactivated, make sure to remove your custom control with [method remove_control_from_bottom_panel] and free it with [method Node.queue_free]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "container",
                "type": "int",
                "enum": "EditorPlugin.CustomControlContainer",
                "index": "0"
              },
              {
                "name": "control",
                "type": "Control",
                "index": "1"
              }
            ],
            "name": "add_control_to_container",
            "description": "Adds a custom control to a container (see [enum CustomControlContainer]). There are many locations where custom controls can be added in the editor UI.\n\t\t\t\tPlease remember that you have to manage the visibility of your custom controls yourself (and likely hide it after adding it).\n\t\t\t\tWhen your plugin is deactivated, make sure to remove your custom control with [method remove_control_from_container] and free it with [method Node.queue_free]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "slot",
                "type": "int",
                "enum": "EditorPlugin.DockSlot",
                "index": "0"
              },
              {
                "name": "control",
                "type": "Control",
                "index": "1"
              }
            ],
            "name": "add_control_to_dock",
            "description": "Adds the control to a specific dock slot (see [enum DockSlot] for options).\n\t\t\t\tIf the dock is repositioned and as long as the plugin is active, the editor will save the dock position on further sessions.\n\t\t\t\tWhen your plugin is deactivated, make sure to remove your custom control with [method remove_control_from_docks] and free it with [method Node.queue_free]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "type",
                "type": "String",
                "index": "0"
              },
              {
                "name": "base",
                "type": "String",
                "index": "1"
              },
              {
                "name": "script",
                "type": "Script",
                "index": "2"
              },
              {
                "name": "icon",
                "type": "Texture",
                "index": "3"
              }
            ],
            "name": "add_custom_type",
            "description": "Adds a custom type, which will appear in the list of nodes or resources. An icon can be optionally passed.\n\t\t\t\tWhen given node or resource is selected, the base type will be instanced (ie, \"Spatial\", \"Control\", \"Resource\"), then the script will be loaded and set to this object.\n\t\t\t\tYou can use the virtual method [method handles] to check if your custom object is being edited by checking the script or using the [code]is[/code] keyword.\n\t\t\t\tDuring run-time, this will be a simple object with a script so this function does not need to be called then."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "plugin",
              "type": "EditorExportPlugin",
              "index": "0"
            },
            "name": "add_export_plugin",
            "description": "Registers a new [EditorExportPlugin]. Export plugins are used to perform tasks when the project is being exported.\n\t\t\t\tSee [method add_inspector_plugin] for an example of how to register a plugin."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "importer",
              "type": "EditorImportPlugin",
              "index": "0"
            },
            "name": "add_import_plugin",
            "description": "Registers a new [EditorImportPlugin]. Import plugins are used to import custom and unsupported assets as a custom [Resource] type.\n\t\t\t\t[b]Note:[/b] If you want to import custom 3D asset formats use [method add_scene_import_plugin] instead.\n\t\t\t\tSee [method add_inspector_plugin] for an example of how to register a plugin."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "plugin",
              "type": "EditorInspectorPlugin",
              "index": "0"
            },
            "name": "add_inspector_plugin",
            "description": "Registers a new [EditorInspectorPlugin]. Inspector plugins are used to extend [EditorInspector] and provide custom configuration tools for your object's properties.\n\t\t\t\t[b]Note:[/b] Always use [method remove_inspector_plugin] to remove the registered [EditorInspectorPlugin] when your [EditorPlugin] is disabled to prevent leaks and an unexpected behavior.\n\t\t\t\t[codeblock]\n\t\t\t\tconst MyInspectorPlugin = preload(\"res://addons/your_addon/path/to/your/script.gd\")\n\t\t\t\tvar inspector_plugin = MyInspectorPlugin.new()\n\n\t\t\t\tfunc _enter_tree():\n\t\t\t\t    add_inspector_plugin(inspector_plugin)\n\n\t\t\t\tfunc _exit_tree():\n\t\t\t\t    remove_inspector_plugin(inspector_plugin)\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "scene_importer",
              "type": "EditorSceneImporter",
              "index": "0"
            },
            "name": "add_scene_import_plugin",
            "description": "Registers a new [EditorSceneImporter]. Scene importers are used to import custom 3D asset formats as scenes."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "plugin",
              "type": "EditorSpatialGizmoPlugin",
              "index": "0"
            },
            "name": "add_spatial_gizmo_plugin",
            "description": "Registers a new [EditorSpatialGizmoPlugin]. Gizmo plugins are used to add custom gizmos to the 3D preview viewport for a [Spatial].\n\t\t\t\tSee [method add_inspector_plugin] for an example of how to register a plugin."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "handler",
                "type": "Object",
                "index": "1"
              },
              {
                "name": "callback",
                "type": "String",
                "index": "2"
              },
              {
                "default": "null",
                "name": "ud",
                "type": "Variant",
                "index": "3"
              }
            ],
            "name": "add_tool_menu_item",
            "description": "Adds a custom menu item to [b]Project > Tools[/b] as [code]name[/code] that calls [code]callback[/code] on an instance of [code]handler[/code] with a parameter [code]ud[/code] when user activates it."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "submenu",
                "type": "Object",
                "index": "1"
              }
            ],
            "name": "add_tool_submenu_item",
            "description": "Adds a custom submenu under [b]Project > Tools >[/b] [code]name[/code]. [code]submenu[/code] should be an object of class [PopupMenu]. This submenu should be cleaned up using [code]remove_tool_menu_item(name)[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "qualifiers": "virtual",
            "name": "apply_changes",
            "description": "This method is called when the editor is about to save the project, switch to another tab, etc. It asks the plugin to apply any pending state changes to ensure consistency.\n\t\t\t\tThis is used, for example, in shader editors to let the plugin know that it must apply the shader code being written by the user to the object."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "virtual",
            "name": "build",
            "description": "This method is called when the editor is about to run the project. The plugin can then perform required operations before the project runs.\n\t\t\t\tThis method must return a boolean. If this method returns [code]false[/code], the project will not run. The run is aborted immediately, so this also prevents all other plugins' [method build] methods from running."
          },
          {
            "return": {
              "type": "void"
            },
            "qualifiers": "virtual",
            "name": "clear",
            "description": "Clear all the state and reset the object being edited to zero. This ensures your plugin does not keep editing a currently existing node, or a node from the wrong scene."
          },
          {
            "return": {
              "type": "void"
            },
            "qualifiers": "virtual",
            "name": "disable_plugin",
            "description": "Called by the engine when the user disables the [EditorPlugin] in the Plugin tab of the project settings window."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "object",
              "type": "Object",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "edit",
            "description": "This function is used for plugins that edit specific object types (nodes or resources). It requests the editor to edit the given object."
          },
          {
            "return": {
              "type": "void"
            },
            "qualifiers": "virtual",
            "name": "enable_plugin",
            "description": "Called by the engine when the user enables the [EditorPlugin] in the Plugin tab of the project settings window."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "overlay",
              "type": "Control",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "forward_canvas_draw_over_viewport",
            "description": "Called by the engine when the 2D editor's viewport is updated. Use the [code]overlay[/code] [Control] for drawing. You can update the viewport manually by calling [method update_overlays].\n\t\t\t\t[codeblock]\n\t\t\t\tfunc forward_canvas_draw_over_viewport(overlay):\n\t\t\t\t    # Draw a circle at cursor position.\n\t\t\t\t    overlay.draw_circle(overlay.get_local_mouse_position(), 64, Color.white)\n\n\t\t\t\tfunc forward_canvas_gui_input(event):\n\t\t\t\t    if event is InputEventMouseMotion:\n\t\t\t\t        # Redraw viewport when cursor is moved.\n\t\t\t\t        update_overlays()\n\t\t\t\t        return true\n\t\t\t\t    return false\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "overlay",
              "type": "Control",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "forward_canvas_force_draw_over_viewport",
            "description": "This method is the same as [method forward_canvas_draw_over_viewport], except it draws on top of everything. Useful when you need an extra layer that shows over anything else.\n\t\t\t\tYou need to enable calling of this method by using [method set_force_draw_over_forwarding_enabled]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "event",
              "type": "InputEvent",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "forward_canvas_gui_input",
            "description": "Called when there is a root node in the current edited scene, [method handles] is implemented and an [InputEvent] happens in the 2D viewport. Intercepts the [InputEvent], if [code]return true[/code] [EditorPlugin] consumes the [code]event[/code], otherwise forwards [code]event[/code] to other Editor classes. Example:\n\t\t\t\t[codeblock]\n\t\t\t\t# Prevents the InputEvent to reach other Editor classes\n\t\t\t\tfunc forward_canvas_gui_input(event):\n\t\t\t\t    var forward = true\n\t\t\t\t    return forward\n\t\t\t\t[/codeblock]\n\t\t\t\tMust [code]return false[/code] in order to forward the [InputEvent] to other Editor classes. Example:\n\t\t\t\t[codeblock]\n\t\t\t\t# Consumes InputEventMouseMotion and forwards other InputEvent types\n\t\t\t\tfunc forward_canvas_gui_input(event):\n\t\t\t\t    var forward = false\n\t\t\t\t    if event is InputEventMouseMotion:\n\t\t\t\t        forward = true\n\t\t\t\t    return forward\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "overlay",
              "type": "Control",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "forward_spatial_draw_over_viewport",
            "description": "Called by the engine when the 3D editor's viewport is updated. Use the [code]overlay[/code] [Control] for drawing. You can update the viewport manually by calling [method update_overlays].\n\t\t\t\t[codeblock]\n\t\t\t\tfunc forward_spatial_draw_over_viewport(overlay):\n\t\t\t\t    # Draw a circle at cursor position.\n\t\t\t\t    overlay.draw_circle(overlay.get_local_mouse_position(), 64)\n\n\t\t\t\tfunc forward_spatial_gui_input(camera, event):\n\t\t\t\t    if event is InputEventMouseMotion:\n\t\t\t\t        # Redraw viewport when cursor is moved.\n\t\t\t\t        update_overlays()\n\t\t\t\t        return true\n\t\t\t\t    return false\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "overlay",
              "type": "Control",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "forward_spatial_force_draw_over_viewport",
            "description": "This method is the same as [method forward_spatial_draw_over_viewport], except it draws on top of everything. Useful when you need an extra layer that shows over anything else.\n\t\t\t\tYou need to enable calling of this method by using [method set_force_draw_over_forwarding_enabled]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "camera",
                "type": "Camera",
                "index": "0"
              },
              {
                "name": "event",
                "type": "InputEvent",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "forward_spatial_gui_input",
            "description": "Called when there is a root node in the current edited scene, [method handles] is implemented and an [InputEvent] happens in the 3D viewport. Intercepts the [InputEvent], if [code]return true[/code] [EditorPlugin] consumes the [code]event[/code], otherwise forwards [code]event[/code] to other Editor classes. Example:\n\t\t\t\t[codeblock]\n\t\t\t\t# Prevents the InputEvent to reach other Editor classes\n\t\t\t\tfunc forward_spatial_gui_input(camera, event):\n\t\t\t\t    var forward = true\n\t\t\t\t    return forward\n\t\t\t\t[/codeblock]\n\t\t\t\tMust [code]return false[/code] in order to forward the [InputEvent] to other Editor classes. Example:\n\t\t\t\t[codeblock]\n\t\t\t\t# Consumes InputEventMouseMotion and forwards other InputEvent types\n\t\t\t\tfunc forward_spatial_gui_input(camera, event):\n\t\t\t\t    var forward = false\n\t\t\t\t    if event is InputEventMouseMotion:\n\t\t\t\t        forward = true\n\t\t\t\t    return forward\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "qualifiers": "virtual",
            "name": "get_breakpoints",
            "description": "This is for editors that edit script-based objects. You can return a list of breakpoints in the format ([code]script:line[/code]), for example: [code]res://path_to_script.gd:25[/code]."
          },
          {
            "return": {
              "type": "EditorInterface"
            },
            "name": "get_editor_interface",
            "description": "Returns the [EditorInterface] object that gives you control over Godot editor's window and its functionalities."
          },
          {
            "return": {
              "type": "Texture"
            },
            "qualifiers": "virtual",
            "name": "get_plugin_icon",
            "description": "Override this method in your plugin to return a [Texture] in order to give it an icon.\n\t\t\t\tFor main screen plugins, this appears at the top of the screen, to the right of the \"2D\", \"3D\", \"Script\", and \"AssetLib\" buttons.\n\t\t\t\tIdeally, the plugin icon should be white with a transparent background and 16x16 pixels in size.\n\t\t\t\t[codeblock]\n\t\t\t\tfunc get_plugin_icon():\n\t\t\t\t    # You can use a custom icon:\n\t\t\t\t    return preload(\"res://addons/my_plugin/my_plugin_icon.svg\")\n\t\t\t\t    # Or use a built-in icon:\n\t\t\t\t    return get_editor_interface().get_base_control().get_icon(\"Node\", \"EditorIcons\")\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "virtual",
            "name": "get_plugin_name",
            "description": "Override this method in your plugin to provide the name of the plugin when displayed in the Godot editor.\n\t\t\t\tFor main screen plugins, this appears at the top of the screen, to the right of the \"2D\", \"3D\", \"Script\", and \"AssetLib\" buttons."
          },
          {
            "return": {
              "type": "ScriptCreateDialog"
            },
            "name": "get_script_create_dialog",
            "description": "Gets the Editor's dialogue used for making scripts.\n\t\t\t\t[b]Note:[/b] Users can configure it before use."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "qualifiers": "virtual",
            "name": "get_state",
            "description": "Gets the state of your plugin editor. This is used when saving the scene (so state is kept when opening it again) and for switching tabs (so state can be restored when the tab returns)."
          },
          {
            "return": {
              "type": "UndoRedo"
            },
            "name": "get_undo_redo",
            "description": "Gets the undo/redo object. Most actions in the editor can be undoable, so use this object to make sure this happens when it's worth it."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "layout",
              "type": "ConfigFile",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "get_window_layout",
            "description": "Gets the GUI layout of the plugin. This is used to save the project's editor layout when [method queue_save_layout] is called or the editor layout was changed(For example changing the position of a dock)."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "object",
              "type": "Object",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "handles",
            "description": "Implement this function if your plugin edits a specific type of object (Resource or Node). If you return [code]true[/code], then you will get the functions [method edit] and [method make_visible] called when the editor requests them. If you have declared the methods [method forward_canvas_gui_input] and [method forward_spatial_gui_input] these will be called too."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "virtual",
            "name": "has_main_screen",
            "description": "Returns [code]true[/code] if this is a main screen editor plugin (it goes in the workspace selector together with [b]2D[/b], [b]3D[/b], [b]Script[/b] and [b]AssetLib[/b])."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "hide_bottom_panel",
            "description": "Minimizes the bottom panel."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "item",
              "type": "Control",
              "index": "0"
            },
            "name": "make_bottom_panel_item_visible",
            "description": "Makes a specific item in the bottom panel visible."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "visible",
              "type": "bool",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "make_visible",
            "description": "This function will be called when the editor is requested to become visible. It is used for plugins that edit a specific object type.\n\t\t\t\tRemember that you have to manage the visibility of all your editor controls manually."
          },
          {
            "return": {
              "type": "void"
            },
            "qualifiers": "const",
            "name": "queue_save_layout",
            "description": "Queue save the project's editor layout."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "remove_autoload_singleton",
            "description": "Removes an Autoload [code]name[/code] from the list."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "control",
              "type": "Control",
              "index": "0"
            },
            "name": "remove_control_from_bottom_panel",
            "description": "Removes the control from the bottom panel. You have to manually [method Node.queue_free] the control."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "container",
                "type": "int",
                "enum": "EditorPlugin.CustomControlContainer",
                "index": "0"
              },
              {
                "name": "control",
                "type": "Control",
                "index": "1"
              }
            ],
            "name": "remove_control_from_container",
            "description": "Removes the control from the specified container. You have to manually [method Node.queue_free] the control."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "control",
              "type": "Control",
              "index": "0"
            },
            "name": "remove_control_from_docks",
            "description": "Removes the control from the dock. You have to manually [method Node.queue_free] the control."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "type",
              "type": "String",
              "index": "0"
            },
            "name": "remove_custom_type",
            "description": "Removes a custom type added by [method add_custom_type]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "plugin",
              "type": "EditorExportPlugin",
              "index": "0"
            },
            "name": "remove_export_plugin",
            "description": "Removes an export plugin registered by [method add_export_plugin]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "importer",
              "type": "EditorImportPlugin",
              "index": "0"
            },
            "name": "remove_import_plugin",
            "description": "Removes an import plugin registered by [method add_import_plugin]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "plugin",
              "type": "EditorInspectorPlugin",
              "index": "0"
            },
            "name": "remove_inspector_plugin",
            "description": "Removes an inspector plugin registered by [method add_import_plugin]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "scene_importer",
              "type": "EditorSceneImporter",
              "index": "0"
            },
            "name": "remove_scene_import_plugin",
            "description": "Removes a scene importer registered by [method add_scene_import_plugin]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "plugin",
              "type": "EditorSpatialGizmoPlugin",
              "index": "0"
            },
            "name": "remove_spatial_gizmo_plugin",
            "description": "Removes a gizmo plugin registered by [method add_spatial_gizmo_plugin]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "remove_tool_menu_item",
            "description": "Removes a menu [code]name[/code] from [b]Project > Tools[/b]."
          },
          {
            "return": {
              "type": "void"
            },
            "qualifiers": "virtual",
            "name": "save_external_data",
            "description": "This method is called after the editor saves the project or when it's closed. It asks the plugin to save edited external scenes/resources."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "set_force_draw_over_forwarding_enabled",
            "description": "Enables calling of [method forward_canvas_force_draw_over_viewport] for the 2D editor and [method forward_spatial_force_draw_over_viewport] for the 3D editor when their viewports are updated. You need to call this method only once and it will work permanently for this plugin."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "set_input_event_forwarding_always_enabled",
            "description": "Use this method if you always want to receive inputs from 3D view screen inside [method forward_spatial_gui_input]. It might be especially usable if your plugin will want to use raycast in the scene."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "state",
              "type": "Dictionary",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "set_state",
            "description": "Restore the state saved by [method get_state]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "layout",
              "type": "ConfigFile",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "set_window_layout",
            "description": "Restore the plugin GUI layout saved by [method get_window_layout]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "update_overlays",
            "description": "Updates the overlays of the 2D and 3D editor viewport. Causes methods [method forward_canvas_draw_over_viewport], [method forward_canvas_force_draw_over_viewport], [method forward_spatial_draw_over_viewport] and [method forward_spatial_force_draw_over_viewport] to be called."
          }
        ]
      },
      "name": "EditorPlugin",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "screen_name",
              "type": "String",
              "index": "0"
            },
            "name": "main_screen_changed",
            "description": "Emitted when user changes the workspace ([b]2D[/b], [b]3D[/b], [b]Script[/b], [b]AssetLib[/b]). Also works with custom screens defined by plugins."
          },
          {
            "argument": {
              "name": "resource",
              "type": "Resource",
              "index": "0"
            },
            "name": "resource_saved",
            "description": {}
          },
          {
            "argument": {
              "name": "scene_root",
              "type": "Node",
              "index": "0"
            },
            "name": "scene_changed",
            "description": "Emitted when the scene is changed in the editor. The argument will return the root node of the scene that has just become active. If this scene is new and empty, the argument will be [code]null[/code]."
          },
          {
            "argument": {
              "name": "filepath",
              "type": "String",
              "index": "0"
            },
            "name": "scene_closed",
            "description": "Emitted when user closes a scene. The argument is file path to a closed scene."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "CONTAINER_TOOLBAR",
            "enum": "CustomControlContainer"
          },
          {
            "value": "1",
            "name": "CONTAINER_SPATIAL_EDITOR_MENU",
            "enum": "CustomControlContainer"
          },
          {
            "value": "2",
            "name": "CONTAINER_SPATIAL_EDITOR_SIDE_LEFT",
            "enum": "CustomControlContainer"
          },
          {
            "value": "3",
            "name": "CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT",
            "enum": "CustomControlContainer"
          },
          {
            "value": "4",
            "name": "CONTAINER_SPATIAL_EDITOR_BOTTOM",
            "enum": "CustomControlContainer"
          },
          {
            "value": "5",
            "name": "CONTAINER_CANVAS_EDITOR_MENU",
            "enum": "CustomControlContainer"
          },
          {
            "value": "6",
            "name": "CONTAINER_CANVAS_EDITOR_SIDE_LEFT",
            "enum": "CustomControlContainer"
          },
          {
            "value": "7",
            "name": "CONTAINER_CANVAS_EDITOR_SIDE_RIGHT",
            "enum": "CustomControlContainer"
          },
          {
            "value": "8",
            "name": "CONTAINER_CANVAS_EDITOR_BOTTOM",
            "enum": "CustomControlContainer"
          },
          {
            "value": "9",
            "name": "CONTAINER_PROPERTY_EDITOR_BOTTOM",
            "enum": "CustomControlContainer"
          },
          {
            "value": "10",
            "name": "CONTAINER_PROJECT_SETTING_TAB_LEFT",
            "enum": "CustomControlContainer"
          },
          {
            "value": "11",
            "name": "CONTAINER_PROJECT_SETTING_TAB_RIGHT",
            "enum": "CustomControlContainer"
          },
          {
            "value": "0",
            "name": "DOCK_SLOT_LEFT_UL",
            "enum": "DockSlot"
          },
          {
            "value": "1",
            "name": "DOCK_SLOT_LEFT_BL",
            "enum": "DockSlot"
          },
          {
            "value": "2",
            "name": "DOCK_SLOT_LEFT_UR",
            "enum": "DockSlot"
          },
          {
            "value": "3",
            "name": "DOCK_SLOT_LEFT_BR",
            "enum": "DockSlot"
          },
          {
            "value": "4",
            "name": "DOCK_SLOT_RIGHT_UL",
            "enum": "DockSlot"
          },
          {
            "value": "5",
            "name": "DOCK_SLOT_RIGHT_BL",
            "enum": "DockSlot"
          },
          {
            "value": "6",
            "name": "DOCK_SLOT_RIGHT_UR",
            "enum": "DockSlot"
          },
          {
            "value": "7",
            "name": "DOCK_SLOT_RIGHT_BR",
            "enum": "DockSlot"
          },
          {
            "value": "8",
            "name": "DOCK_SLOT_MAX",
            "enum": "DockSlot"
          }
        ]
      },
      "brief_description": "Used by the editor to extend its functionality.",
      "description": "Plugins are used by the editor to extend functionality. The most common types of plugins are those which edit a given node or resource type, import plugins and export plugins. See also [EditorScript] to add functions to the editor."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "false",
            "value": "Used by the inspector, set to [code]true[/code] when the property is checkable.",
            "setter": "set_checkable",
            "name": "checkable",
            "getter": "is_checkable",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Used by the inspector, set to [code]true[/code] when the property is checked.",
            "setter": "set_checked",
            "name": "checked",
            "getter": "is_checked",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Used by the inspector, set to [code]true[/code] when the property must draw with error color. This is used for editable children's properties.",
            "setter": "set_draw_red",
            "name": "draw_red",
            "getter": "is_draw_red",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Used by the inspector, set to [code]true[/code] when the property can add keys for animation.",
            "setter": "set_keying",
            "name": "keying",
            "getter": "is_keying",
            "type": "bool"
          },
          {
            "default": "\"\"",
            "value": "Set this property to change the label (if you want to show one).",
            "setter": "set_label",
            "name": "label",
            "getter": "get_label",
            "type": "String"
          },
          {
            "default": "false",
            "value": "Used by the inspector, set to [code]true[/code] when the property is read-only.",
            "setter": "set_read_only",
            "name": "read_only",
            "getter": "is_read_only",
            "type": "bool"
          }
        ]
      },
      "inherits": "Container",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "control",
              "type": "Control",
              "index": "0"
            },
            "name": "add_focusable",
            "description": "If any of the controls added can gain keyboard focus, add it here. This ensures that focus will be restored if the inspector is refreshed."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "property",
                "type": "String",
                "index": "0"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "1"
              },
              {
                "default": "\"\"",
                "name": "field",
                "type": "String",
                "index": "2"
              },
              {
                "default": "false",
                "name": "changing",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "emit_changed",
            "description": "If one or several properties have changed, this must be called. [code]field[/code] is used in case your editor can modify fields separately (as an example, Vector3.x). The [code]changing[/code] argument avoids the editor requesting this property to be refreshed (leave as [code]false[/code] if unsure)."
          },
          {
            "return": {
              "type": "Object"
            },
            "name": "get_edited_object",
            "description": "Gets the edited object."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "get_edited_property",
            "description": "Gets the edited property. If your editor is for a single property (added via [method EditorInspectorPlugin.parse_property]), then this will return the property."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_tooltip_text",
            "description": "Must be implemented to provide a custom tooltip to the property editor."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "editor",
              "type": "Control",
              "index": "0"
            },
            "name": "set_bottom_editor",
            "description": "Puts the [code]editor[/code] control below the property label. The control must be previously added using [method Node.add_child]."
          },
          {
            "return": {
              "type": "void"
            },
            "qualifiers": "virtual",
            "name": "update_property",
            "description": "When this virtual function is called, you must update your editor."
          }
        ]
      },
      "name": "EditorProperty",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": [
              {
                "name": "properties",
                "type": "PoolStringArray",
                "index": "0"
              },
              {
                "name": "value",
                "type": "Array",
                "index": "1"
              }
            ],
            "name": "multiple_properties_changed",
            "description": "Emit it if you want multiple properties modified at the same time. Do not use if added via [method EditorInspectorPlugin.parse_property]."
          },
          {
            "argument": [
              {
                "name": "property",
                "type": "String",
                "index": "0"
              },
              {
                "name": "id",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "object_id_selected",
            "description": "Used by sub-inspectors. Emit it if what was selected was an Object ID."
          },
          {
            "argument": [
              {
                "name": "property",
                "type": "String",
                "index": "0"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "property_changed",
            "description": "Do not emit this manually, use the [method emit_changed] method instead."
          },
          {
            "argument": [
              {
                "name": "property",
                "type": "String",
                "index": "0"
              },
              {
                "name": "bool",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "property_checked",
            "description": "Emitted when a property was checked. Used internally."
          },
          {
            "argument": {
              "name": "property",
              "type": "String",
              "index": "0"
            },
            "name": "property_keyed",
            "description": "Emit it if you want to add this value as an animation key (check for keying being enabled first)."
          },
          {
            "argument": [
              {
                "name": "property",
                "type": "String",
                "index": "0"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "property_keyed_with_value",
            "description": "Emit it if you want to key a property with a single value."
          },
          {
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "resource",
                "type": "Resource",
                "index": "1"
              }
            ],
            "name": "resource_selected",
            "description": "If you want a sub-resource to be edited, emit this signal with the resource."
          },
          {
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "focusable_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "selected",
            "description": "Emitted when selected. Used internally."
          }
        ]
      },
      "constants": {},
      "brief_description": "Custom control to edit properties for adding into the inspector.",
      "description": "This control allows property editing for one or multiple properties into [EditorInspector]. It is added via [EditorInspectorPlugin]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Resource"
            },
            "argument": {
              "name": "resource",
              "type": "Resource",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_convert",
            "description": {}
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "virtual",
            "name": "_converts_to",
            "description": {}
          }
        ]
      },
      "name": "EditorResourceConversionPlugin",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "virtual",
            "name": "can_generate_small_preview",
            "description": "If this function returns [code]true[/code], the generator will call [method generate] or [method generate_from_path] for small previews as well.\n\t\t\t\tBy default, it returns [code]false[/code]."
          },
          {
            "return": {
              "type": "Texture"
            },
            "argument": [
              {
                "name": "from",
                "type": "Resource",
                "index": "0"
              },
              {
                "name": "size",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "generate",
            "description": "Generate a preview from a given resource with the specified size. This must always be implemented.\n\t\t\t\tReturning an empty texture is an OK way to fail and let another generator take care.\n\t\t\t\tCare must be taken because this function is always called from a thread (not the main thread)."
          },
          {
            "return": {
              "type": "Texture"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "size",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "generate_from_path",
            "description": "Generate a preview directly from a path with the specified size. Implementing this is optional, as default code will load and call [method generate].\n\t\t\t\tReturning an empty texture is an OK way to fail and let another generator take care.\n\t\t\t\tCare must be taken because this function is always called from a thread (not the main thread)."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "virtual",
            "name": "generate_small_preview_automatically",
            "description": "If this function returns [code]true[/code], the generator will automatically generate the small previews from the normal preview texture generated by the methods [method generate] or [method generate_from_path].\n\t\t\t\tBy default, it returns [code]false[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "type",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "handles",
            "description": "Returns [code]true[/code] if your generator supports the resource of type [code]type[/code]."
          }
        ]
      },
      "name": "EditorResourcePreviewGenerator",
      "version": "3.3",
      "constants": {},
      "brief_description": "Custom generator of previews.",
      "description": "Custom code to generate previews. Please check [code]file_dialog/thumbnail_size[/code] in [EditorSettings] to find out the right size to do previews at."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Node",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "generator",
              "type": "EditorResourcePreviewGenerator",
              "index": "0"
            },
            "name": "add_preview_generator",
            "description": "Create an own, custom preview generator."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "check_for_invalidation",
            "description": "Check if the resource changed, if so, it will be invalidated and the corresponding signal emitted."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "resource",
                "type": "Resource",
                "index": "0"
              },
              {
                "name": "receiver",
                "type": "Object",
                "index": "1"
              },
              {
                "name": "receiver_func",
                "type": "String",
                "index": "2"
              },
              {
                "name": "userdata",
                "type": "Variant",
                "index": "3"
              }
            ],
            "name": "queue_edited_resource_preview",
            "description": "Queue the [code]resource[/code] being edited for preview. Once the preview is ready, the [code]receiver[/code]'s [code]receiver_func[/code] will be called. The [code]receiver_func[/code] must take the following four arguments: [String] path, [Texture] preview, [Texture] thumbnail_preview, [Variant] userdata. [code]userdata[/code] can be anything, and will be returned when [code]receiver_func[/code] is called.\n\t\t\t\t[b]Note[/b]: If it was not possible to create the preview the [code]receiver_func[/code] will still be called, but the preview will be null."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "receiver",
                "type": "Object",
                "index": "1"
              },
              {
                "name": "receiver_func",
                "type": "String",
                "index": "2"
              },
              {
                "name": "userdata",
                "type": "Variant",
                "index": "3"
              }
            ],
            "name": "queue_resource_preview",
            "description": "Queue a resource file located at [code]path[/code] for preview. Once the preview is ready, the [code]receiver[/code]'s [code]receiver_func[/code] will be called. The [code]receiver_func[/code] must take the following four arguments: [String] path, [Texture] preview, [Texture] thumbnail_preview, [Variant] userdata. [code]userdata[/code] can be anything, and will be returned when [code]receiver_func[/code] is called.\n\t\t\t\t[b]Note[/b]: If it was not possible to create the preview the [code]receiver_func[/code] will still be called, but the preview will be null."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "generator",
              "type": "EditorResourcePreviewGenerator",
              "index": "0"
            },
            "name": "remove_preview_generator",
            "description": "Removes a custom preview generator."
          }
        ]
      },
      "name": "EditorResourcePreview",
      "version": "3.3",
      "signals": {
        "signal": {
          "argument": {
            "name": "path",
            "type": "String",
            "index": "0"
          },
          "name": "preview_invalidated",
          "description": "Emitted if a preview was invalidated (changed). [code]path[/code] corresponds to the path of the preview."
        }
      },
      "constants": {},
      "brief_description": "Helper to generate previews of resources or files.",
      "description": "This object is used to generate previews for resources of files.\n\t\t[b]Note:[/b] This class shouldn't be instantiated directly. Instead, access the singleton using [method EditorInterface.get_resource_previewer]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "virtual",
            "name": "_get_extensions",
            "description": {}
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "virtual",
            "name": "_get_import_flags",
            "description": {}
          },
          {
            "return": {
              "type": "Animation"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "flags",
                "type": "int",
                "index": "1"
              },
              {
                "name": "bake_fps",
                "type": "int",
                "index": "2"
              }
            ],
            "qualifiers": "virtual",
            "name": "_import_animation",
            "description": {}
          },
          {
            "return": {
              "type": "Node"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "flags",
                "type": "int",
                "index": "1"
              },
              {
                "name": "bake_fps",
                "type": "int",
                "index": "2"
              }
            ],
            "qualifiers": "virtual",
            "name": "_import_scene",
            "description": {}
          },
          {
            "return": {
              "type": "Animation"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "flags",
                "type": "int",
                "index": "1"
              },
              {
                "name": "bake_fps",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "import_animation_from_other_importer",
            "description": {}
          },
          {
            "return": {
              "type": "Node"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "flags",
                "type": "int",
                "index": "1"
              },
              {
                "name": "bake_fps",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "import_scene_from_other_importer",
            "description": {}
          }
        ]
      },
      "name": "EditorSceneImporter",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "1",
            "name": "IMPORT_SCENE"
          },
          {
            "value": "2",
            "name": "IMPORT_ANIMATION"
          },
          {
            "value": "4",
            "name": "IMPORT_ANIMATION_DETECT_LOOP"
          },
          {
            "value": "8",
            "name": "IMPORT_ANIMATION_OPTIMIZE"
          },
          {
            "value": "16",
            "name": "IMPORT_ANIMATION_FORCE_ALL_TRACKS_IN_ALL_CLIPS"
          },
          {
            "value": "32",
            "name": "IMPORT_ANIMATION_KEEP_VALUE_TRACKS"
          },
          {
            "value": "256",
            "name": "IMPORT_GENERATE_TANGENT_ARRAYS"
          },
          {
            "value": "512",
            "name": "IMPORT_FAIL_ON_MISSING_DEPENDENCIES"
          },
          {
            "value": "1024",
            "name": "IMPORT_MATERIALS_IN_INSTANCES"
          },
          {
            "value": "2048",
            "name": "IMPORT_USE_COMPRESSION"
          }
        ]
      },
      "brief_description": "Imports scenes from third-parties' 3D files.",
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/getting_started/workflow/assets/importing_scenes.html#custom-script"
      },
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_source_file",
            "description": "Returns the source file path which got imported (e.g. [code]res://scene.dae[/code])."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_source_folder",
            "description": "Returns the resource folder the imported scene file is located in."
          },
          {
            "return": {
              "type": "Object"
            },
            "argument": {
              "name": "scene",
              "type": "Object",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "post_import",
            "description": "Called after the scene was imported. This method must return the modified version of the scene."
          }
        ]
      },
      "name": "EditorScenePostImport",
      "version": "3.3",
      "constants": {},
      "brief_description": "Post-processes scenes after import.",
      "description": "Imported scenes can be automatically modified right after import by setting their [b]Custom Script[/b] Import property to a [code]tool[/code] script that inherits from this class.\n\t\tThe [method post_import] callback receives the imported scene's root node and returns the modified version of the scene. Usage example:\n\t\t[codeblock]\n\t\ttool # Needed so it runs in editor\n\t\textends EditorScenePostImport\n\n\t\t# This sample changes all node names\n\n\t\t# Called right after the scene is imported and gets the root node\n\t\tfunc post_import(scene):\n\t\t    # Change all node names to \"modified_[oldnodename]\"\n\t\t    iterate(scene)\n\t\t    return scene # Remember to return the imported scene\n\n\t\tfunc iterate(node):\n\t\t    if node != null:\n\t\t        node.name = \"modified_\" + node.name\n\t\t        for child in node.get_children():\n\t\t            iterate(child)\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "qualifiers": "virtual",
            "name": "_run",
            "description": "This method is executed by the Editor when [b]File > Run[/b] is used."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "node",
              "type": "Node",
              "index": "0"
            },
            "name": "add_root_node",
            "description": "Adds [code]node[/code] as a child of the root node in the editor context.\n\t\t\t\t[b]Warning:[/b] The implementation of this method is currently disabled."
          },
          {
            "return": {
              "type": "EditorInterface"
            },
            "name": "get_editor_interface",
            "description": "Returns the [EditorInterface] singleton instance."
          },
          {
            "return": {
              "type": "Node"
            },
            "name": "get_scene",
            "description": "Returns the Editor's currently active scene."
          }
        ]
      },
      "name": "EditorScript",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base script that can be used to add extension functions to the editor.",
      "description": "Scripts extending this class and implementing its [method _run] method can be executed from the Script Editor's [b]File > Run[/b] menu option (or by pressing [code]Ctrl+Shift+X[/code]) while the editor is running. This is useful for adding custom in-editor functionality to Godot. For more complex additions, consider using [EditorPlugin]s instead.\n\t\t[b]Note:[/b] Extending scripts need to have [code]tool[/code] mode enabled.\n\t\t[b]Example script:[/b]\n\t\t[codeblock]\n\t\ttool\n\t\textends EditorScript\n\n\t\tfunc _run():\n\t\t    print(\"Hello from the Godot Editor!\")\n\t\t[/codeblock]\n\t\t[b]Note:[/b] The script is run in the Editor context, which means the output is visible in the console window started with the Editor (stdout) instead of the usual Godot [b]Output[/b] dock."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "node",
              "type": "Node",
              "index": "0"
            },
            "name": "add_node",
            "description": "Adds a node to the selection.\n\t\t\t\t[b]Note:[/b] The newly selected node will not be automatically edited in the inspector. If you want to edit a node, use [method EditorInterface.edit_node]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Clear the selection."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "get_selected_nodes",
            "description": "Gets the list of selected nodes."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "get_transformable_selected_nodes",
            "description": "Gets the list of selected nodes, optimized for transform operations (i.e. moving them, rotating, etc). This list avoids situations where a node is selected and also child/grandchild."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "node",
              "type": "Node",
              "index": "0"
            },
            "name": "remove_node",
            "description": "Removes a node from the selection."
          }
        ]
      },
      "name": "EditorSelection",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "selection_changed",
          "description": "Emitted when the selection changes."
        }
      },
      "constants": {},
      "brief_description": "Manages the SceneTree selection in the editor.",
      "description": "This object manages the SceneTree selection in the editor.\n\t\t[b]Note:[/b] This class shouldn't be instantiated directly. Instead, access the singleton using [method EditorInterface.get_selection]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "info",
              "type": "Dictionary",
              "index": "0"
            },
            "name": "add_property_info",
            "description": "Adds a custom property info to a property. The dictionary must contain:\n\t\t\t\t- [code]name[/code]: [String] (the name of the property)\n\t\t\t\t- [code]type[/code]: [int] (see [enum Variant.Type])\n\t\t\t\t- optionally [code]hint[/code]: [int] (see [enum PropertyHint]) and [code]hint_string[/code]: [String]\n\t\t\t\t[b]Example:[/b]\n\t\t\t\t[codeblock]\n\t\t\t\teditor_settings.set(\"category/property_name\", 0)\n\n\t\t\t\tvar property_info = {\n\t\t\t\t    \"name\": \"category/property_name\",\n\t\t\t\t    \"type\": TYPE_INT,\n\t\t\t\t    \"hint\": PROPERTY_HINT_ENUM,\n\t\t\t\t    \"hint_string\": \"one,two,three\"\n\t\t\t\t}\n\n\t\t\t\teditor_settings.add_property_info(property_info)\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "property",
              "type": "String",
              "index": "0"
            },
            "name": "erase",
            "description": "Erases the setting whose name is specified by [code]property[/code]."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "qualifiers": "const",
            "name": "get_favorites",
            "description": "Returns the list of favorite files and directories for this project."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "section",
                "type": "String",
                "index": "0"
              },
              {
                "name": "key",
                "type": "String",
                "index": "1"
              },
              {
                "default": "null",
                "name": "default",
                "type": "Variant",
                "index": "2"
              }
            ],
            "qualifiers": "const",
            "name": "get_project_metadata",
            "description": "Returns project-specific metadata for the [code]section[/code] and [code]key[/code] specified. If the metadata doesn't exist, [code]default[/code] will be returned instead. See also [method set_project_metadata]."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_project_settings_dir",
            "description": "Returns the project-specific settings path. Projects all have a unique subdirectory inside the settings path where project-specific settings are saved."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "qualifiers": "const",
            "name": "get_recent_dirs",
            "description": "Returns the list of recently visited folders in the file dialog for this project."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_setting",
            "description": "Returns the value of the setting specified by [code]name[/code]. This is equivalent to using [method Object.get] on the EditorSettings instance."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_settings_dir",
            "description": "Gets the global settings path for the engine. Inside this path, you can find some standard paths such as:\n\t\t\t\t[code]settings/tmp[/code] - Used for temporary storage of files\n\t\t\t\t[code]settings/templates[/code] - Where export templates are located"
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_setting",
            "description": "Returns [code]true[/code] if the setting specified by [code]name[/code] exists, [code]false[/code] otherwise."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "property_can_revert",
            "description": "Returns [code]true[/code] if the setting specified by [code]name[/code] can have its value reverted to the default value, [code]false[/code] otherwise. When this method returns [code]true[/code], a Revert button will display next to the setting in the Editor Settings."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "property_get_revert",
            "description": "Returns the default value of the setting specified by [code]name[/code]. This is the value that would be applied when clicking the Revert button in the Editor Settings."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "dirs",
              "type": "PoolStringArray",
              "index": "0"
            },
            "name": "set_favorites",
            "description": "Sets the list of favorite files and directories for this project."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "1"
              },
              {
                "name": "update_current",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "set_initial_value",
            "description": "Sets the initial value of the setting specified by [code]name[/code] to [code]value[/code]. This is used to provide a value for the Revert button in the Editor Settings. If [code]update_current[/code] is true, the current value of the setting will be set to [code]value[/code] as well."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "section",
                "type": "String",
                "index": "0"
              },
              {
                "name": "key",
                "type": "String",
                "index": "1"
              },
              {
                "name": "data",
                "type": "Variant",
                "index": "2"
              }
            ],
            "name": "set_project_metadata",
            "description": "Sets project-specific metadata with the [code]section[/code], [code]key[/code] and [code]data[/code] specified. This metadata is stored outside the project folder and therefore won't be checked into version control. See also [method get_project_metadata]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "dirs",
              "type": "PoolStringArray",
              "index": "0"
            },
            "name": "set_recent_dirs",
            "description": "Sets the list of recently visited folders in the file dialog for this project."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "set_setting",
            "description": "Sets the [code]value[/code] of the setting specified by [code]name[/code]. This is equivalent to using [method Object.set] on the EditorSettings instance."
          }
        ]
      },
      "name": "EditorSettings",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "settings_changed",
          "description": "Emitted after any editor setting has changed."
        }
      },
      "constants": {
        "constant": {
          "value": "10000",
          "name": "NOTIFICATION_EDITOR_SETTINGS_CHANGED"
        }
      },
      "brief_description": "Object that holds the project-independent editor settings.",
      "description": "Object that holds the project-independent editor settings. These settings are generally visible in the [b]Editor > Editor Settings[/b] menu.\n\t\tProperty names use slash delimiters to distinguish sections. Setting values can be of any [Variant] type. It's recommended to use [code]snake_case[/code] for editor settings to be consistent with the Godot editor itself.\n\t\tAccessing the settings can be done using the following methods, such as:\n\t\t[codeblock]\n\t\t# `settings.set(\"some/property\", value)` also works as this class overrides `_set()` internally.\n\t\tsettings.set_setting(\"some/property\",value)\n\n\t\t# `settings.get(\"some/property\", value)` also works as this class overrides `_get()` internally.\n\t\tsettings.get_setting(\"some/property\")\n\n\t\tvar list_of_settings = settings.get_property_list()\n\t\t[/codeblock]\n\t\t[b]Note:[/b] This class shouldn't be instantiated directly. Instead, access the singleton using [method EditorInterface.get_editor_settings]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/plugins/editor/spatial_gizmos.html"
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "material",
                "type": "SpatialMaterial",
                "index": "1"
              }
            ],
            "name": "add_material",
            "description": "Adds a new material to the internal material list for the plugin. It can then be accessed with [method get_material]. Should not be overridden."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "virtual",
            "name": "can_be_hidden",
            "description": "Override this method to define whether the gizmo can be hidden or not. Returns [code]true[/code] if not overridden."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "gizmo",
                "type": "EditorSpatialGizmo",
                "index": "0"
              },
              {
                "name": "index",
                "type": "int",
                "index": "1"
              },
              {
                "name": "restore",
                "type": "Variant",
                "index": "2"
              },
              {
                "default": "false",
                "name": "cancel",
                "type": "bool",
                "index": "3"
              }
            ],
            "qualifiers": "virtual",
            "name": "commit_handle",
            "description": "Override this method to commit gizmo handles. Called for this plugin's active gizmos."
          },
          {
            "return": {
              "type": "EditorSpatialGizmo"
            },
            "argument": {
              "name": "spatial",
              "type": "Spatial",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "create_gizmo",
            "description": "Override this method to return a custom [EditorSpatialGizmo] for the spatial nodes of your choice, return [code]null[/code] for the rest of nodes. See also [method has_gizmo]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "default": "false",
                "name": "billboard",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "create_handle_material",
            "description": "Creates a handle material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with [method get_material] and used in [method EditorSpatialGizmo.add_handles]. Should not be overridden."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "texture",
                "type": "Texture",
                "index": "1"
              },
              {
                "default": "false",
                "name": "on_top",
                "type": "bool",
                "index": "2"
              },
              {
                "default": "Color( 1, 1, 1, 1 )",
                "name": "color",
                "type": "Color",
                "index": "3"
              }
            ],
            "name": "create_icon_material",
            "description": "Creates an icon material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with [method get_material] and used in [method EditorSpatialGizmo.add_unscaled_billboard]. Should not be overridden."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              },
              {
                "default": "false",
                "name": "billboard",
                "type": "bool",
                "index": "2"
              },
              {
                "default": "false",
                "name": "on_top",
                "type": "bool",
                "index": "3"
              },
              {
                "default": "false",
                "name": "use_vertex_color",
                "type": "bool",
                "index": "4"
              }
            ],
            "name": "create_material",
            "description": "Creates an unshaded material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with [method get_material] and used in [method EditorSpatialGizmo.add_mesh] and [method EditorSpatialGizmo.add_lines]. Should not be overridden."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": [
              {
                "name": "gizmo",
                "type": "EditorSpatialGizmo",
                "index": "0"
              },
              {
                "name": "index",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "get_handle_name",
            "description": "Override this method to provide gizmo's handle names. Called for this plugin's active gizmos."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "gizmo",
                "type": "EditorSpatialGizmo",
                "index": "0"
              },
              {
                "name": "index",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "get_handle_value",
            "description": "Gets actual value of a handle from gizmo. Called for this plugin's active gizmos."
          },
          {
            "return": {
              "type": "SpatialMaterial"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "default": "null",
                "name": "gizmo",
                "type": "EditorSpatialGizmo",
                "index": "1"
              }
            ],
            "name": "get_material",
            "description": "Gets material from the internal list of materials. If an [EditorSpatialGizmo] is provided, it will try to get the corresponding variant (selected and/or editable)."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "virtual",
            "name": "get_name",
            "description": "Override this method to provide the name that will appear in the gizmo visibility menu."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "virtual",
            "name": "get_priority",
            "description": "Override this method to set the gizmo's priority. Higher values correspond to higher priority. If a gizmo with higher priority conflicts with another gizmo, only the gizmo with higher priority will be used.\n\t\t\t\tAll built-in editor gizmos return a priority of [code]-1[/code]. If not overridden, this method will return [code]0[/code], which means custom gizmos will automatically override built-in gizmos."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "spatial",
              "type": "Spatial",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "has_gizmo",
            "description": "Override this method to define which Spatial nodes have a gizmo from this plugin. Whenever a [Spatial] node is added to a scene this method is called, if it returns [code]true[/code] the node gets a generic [EditorSpatialGizmo] assigned and is added to this plugin's list of active gizmos."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "gizmo",
                "type": "EditorSpatialGizmo",
                "index": "0"
              },
              {
                "name": "index",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "is_handle_highlighted",
            "description": "Gets whether a handle is highlighted or not. Called for this plugin's active gizmos."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "virtual",
            "name": "is_selectable_when_hidden",
            "description": "Override this method to define whether a Spatial with this gizmo should be selectable even when the gizmo is hidden."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "gizmo",
              "type": "EditorSpatialGizmo",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "redraw",
            "description": "Callback to redraw the provided gizmo. Called for this plugin's active gizmos."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "gizmo",
                "type": "EditorSpatialGizmo",
                "index": "0"
              },
              {
                "name": "index",
                "type": "int",
                "index": "1"
              },
              {
                "name": "camera",
                "type": "Camera",
                "index": "2"
              },
              {
                "name": "point",
                "type": "Vector2",
                "index": "3"
              }
            ],
            "qualifiers": "virtual",
            "name": "set_handle",
            "description": "Update the value of a handle after it has been updated. Called for this plugin's active gizmos."
          }
        ]
      },
      "name": "EditorSpatialGizmoPlugin",
      "version": "3.3",
      "constants": {},
      "brief_description": "Used by the editor to define Spatial gizmo types.",
      "description": "EditorSpatialGizmoPlugin allows you to define a new type of Gizmo. There are two main ways to do so: extending [EditorSpatialGizmoPlugin] for the simpler gizmos, or creating a new [EditorSpatialGizmo] type. See the tutorial in the documentation for more info."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "SpatialGizmo",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "segments",
              "type": "PoolVector3Array",
              "index": "0"
            },
            "name": "add_collision_segments",
            "description": "Adds the specified [code]segments[/code] to the gizmo's collision shape for picking. Call this function during [method redraw]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "triangles",
              "type": "TriangleMesh",
              "index": "0"
            },
            "name": "add_collision_triangles",
            "description": "Adds collision triangles to the gizmo for picking. A [TriangleMesh] can be generated from a regular [Mesh] too. Call this function during [method redraw]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "handles",
                "type": "PoolVector3Array",
                "index": "0"
              },
              {
                "name": "material",
                "type": "Material",
                "index": "1"
              },
              {
                "default": "false",
                "name": "billboard",
                "type": "bool",
                "index": "2"
              },
              {
                "default": "false",
                "name": "secondary",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "add_handles",
            "description": "Adds a list of handles (points) which can be used to deform the object being edited.\n\t\t\t\tThere are virtual functions which will be called upon editing of these handles. Call this function during [method redraw]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "lines",
                "type": "PoolVector3Array",
                "index": "0"
              },
              {
                "name": "material",
                "type": "Material",
                "index": "1"
              },
              {
                "default": "false",
                "name": "billboard",
                "type": "bool",
                "index": "2"
              },
              {
                "default": "Color( 1, 1, 1, 1 )",
                "name": "modulate",
                "type": "Color",
                "index": "3"
              }
            ],
            "name": "add_lines",
            "description": "Adds lines to the gizmo (as sets of 2 points), with a given material. The lines are used for visualizing the gizmo. Call this function during [method redraw]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "ArrayMesh",
                "index": "0"
              },
              {
                "default": "false",
                "name": "billboard",
                "type": "bool",
                "index": "1"
              },
              {
                "default": "null",
                "name": "skeleton",
                "type": "SkinReference",
                "index": "2"
              },
              {
                "default": "null",
                "name": "material",
                "type": "Material",
                "index": "3"
              }
            ],
            "name": "add_mesh",
            "description": "Adds a mesh to the gizmo with the specified [code]billboard[/code] state, [code]skeleton[/code] and [code]material[/code]. If [code]billboard[/code] is [code]true[/code], the mesh will rotate to always face the camera. Call this function during [method redraw]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "material",
                "type": "Material",
                "index": "0"
              },
              {
                "default": "1",
                "name": "default_scale",
                "type": "float",
                "index": "1"
              },
              {
                "default": "Color( 1, 1, 1, 1 )",
                "name": "modulate",
                "type": "Color",
                "index": "2"
              }
            ],
            "name": "add_unscaled_billboard",
            "description": "Adds an unscaled billboard for visualization. Call this function during [method redraw]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Removes everything in the gizmo including meshes, collisions and handles."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "index",
                "type": "int",
                "index": "0"
              },
              {
                "name": "restore",
                "type": "Variant",
                "index": "1"
              },
              {
                "default": "false",
                "name": "cancel",
                "type": "bool",
                "index": "2"
              }
            ],
            "qualifiers": "virtual",
            "name": "commit_handle",
            "description": "Commit a handle being edited (handles must have been previously added by [method add_handles]).\n\t\t\t\tIf the [code]cancel[/code] parameter is [code]true[/code], an option to restore the edited value to the original is provided."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "get_handle_name",
            "description": "Gets the name of an edited handle (handles must have been previously added by [method add_handles]).\n\t\t\t\tHandles can be named for reference to the user when editing."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "get_handle_value",
            "description": "Gets actual value of a handle. This value can be anything and used for eventually undoing the motion when calling [method commit_handle]."
          },
          {
            "return": {
              "type": "EditorSpatialGizmoPlugin"
            },
            "qualifiers": "const",
            "name": "get_plugin",
            "description": "Returns the [EditorSpatialGizmoPlugin] that owns this gizmo. It's useful to retrieve materials using [method EditorSpatialGizmoPlugin.get_material]."
          },
          {
            "return": {
              "type": "Spatial"
            },
            "qualifiers": "const",
            "name": "get_spatial_node",
            "description": "Returns the Spatial node associated with this gizmo."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "is_handle_highlighted",
            "description": "Returns [code]true[/code] if the handle at index [code]index[/code] is highlighted by being hovered with the mouse."
          },
          {
            "return": {
              "type": "void"
            },
            "qualifiers": "virtual",
            "name": "redraw",
            "description": "This function is called when the [Spatial] this gizmo refers to changes (the [method Spatial.update_gizmo] is called)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "index",
                "type": "int",
                "index": "0"
              },
              {
                "name": "camera",
                "type": "Camera",
                "index": "1"
              },
              {
                "name": "point",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "qualifiers": "virtual",
            "name": "set_handle",
            "description": "This function is used when the user drags a gizmo handle (previously added with [method add_handles]) in screen coordinates.\n\t\t\t\tThe [Camera] is also provided so screen coordinates can be converted to raycasts."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "hidden",
              "type": "bool",
              "index": "0"
            },
            "name": "set_hidden",
            "description": "Sets the gizmo's hidden state. If [code]true[/code], the gizmo will be hidden. If [code]false[/code], it will be shown."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "node",
              "type": "Node",
              "index": "0"
            },
            "name": "set_spatial_node",
            "description": "Sets the reference [Spatial] node for the gizmo. [code]node[/code] must inherit from [Spatial]."
          }
        ]
      },
      "name": "EditorSpatialGizmo",
      "version": "3.3",
      "constants": {},
      "brief_description": "Custom gizmo for editing Spatial objects.",
      "description": "Custom gizmo that is used for providing custom visualization and editing (handles) for 3D Spatial objects. See [EditorSpatialGizmoPlugin] for more information."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "false",
            "setter": "set_flat",
            "name": "flat",
            "getter": "is_flat",
            "type": "bool"
          },
          {
            "default": "2",
            "setter": "set_focus_mode",
            "override": "true",
            "name": "focus_mode",
            "getter": "get_focus_mode",
            "type": "int",
            "enum": "Control.FocusMode"
          },
          {
            "default": "\"\"",
            "setter": "set_label",
            "name": "label",
            "getter": "get_label",
            "type": "String"
          },
          {
            "default": "false",
            "setter": "set_read_only",
            "name": "read_only",
            "getter": "is_read_only",
            "type": "bool"
          }
        ]
      },
      "inherits": "Range",
      "methods": {},
      "name": "EditorSpinSlider",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "msg",
              "type": "String",
              "index": "0"
            },
            "name": "commit",
            "description": "Creates a version commit if the addon is initialized, else returns without doing anything. Uses the files which have been staged previously, with the commit message set to a value as provided as in the argument."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "file_path",
              "type": "String",
              "index": "0"
            },
            "name": "get_file_diff",
            "description": "Returns an [Array] of [Dictionary] objects containing the diff output from the VCS in use, if a VCS addon is initialized, else returns an empty [Array] object. The diff contents also consist of some contextual lines which provide context to the observed line change in the file.\n\t\t\t\tEach [Dictionary] object has the line diff contents under the keys:\n\t\t\t\t- [code]\"content\"[/code] to store a [String] containing the line contents\n\t\t\t\t- [code]\"status\"[/code] to store a [String] which contains [code]\"+\"[/code] in case the content is a line addition but it stores a [code]\"-\"[/code] in case of deletion and an empty string in the case the line content is neither an addition nor a deletion.\n\t\t\t\t- [code]\"new_line_number\"[/code] to store an integer containing the new line number of the line content.\n\t\t\t\t- [code]\"line_count\"[/code] to store an integer containing the number of lines in the line content.\n\t\t\t\t- [code]\"old_line_number\"[/code] to store an integer containing the old line number of the line content.\n\t\t\t\t- [code]\"offset\"[/code] to store the offset of the line change since the first contextual line content."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "name": "get_modified_files_data",
            "description": "Returns a [Dictionary] containing the path of the detected file change mapped to an integer signifying what kind of change the corresponding file has experienced.\n\t\t\t\tThe following integer values are being used to signify that the detected file is:\n\t\t\t\t- [code]0[/code]: New to the VCS working directory\n\t\t\t\t- [code]1[/code]: Modified\n\t\t\t\t- [code]2[/code]: Renamed\n\t\t\t\t- [code]3[/code]: Deleted\n\t\t\t\t- [code]4[/code]: Typechanged"
          },
          {
            "return": {
              "type": "String"
            },
            "name": "get_project_name",
            "description": "Returns the project name of the VCS working directory."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "get_vcs_name",
            "description": "Returns the name of the VCS if the VCS has been initialized, else return an empty string."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "project_root_path",
              "type": "String",
              "index": "0"
            },
            "name": "initialize",
            "description": "Initializes the VCS addon if not already. Uses the argument value as the path to the working directory of the project. Creates the initial commit if required. Returns [code]true[/code] if no failure occurs, else returns [code]false[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_addon_ready",
            "description": "Returns [code]true[/code] if the addon is ready to respond to function calls, else returns [code]false[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_vcs_initialized",
            "description": "Returns [code]true[/code] if the VCS addon has been initialized, else returns [code]false[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "shut_down",
            "description": "Shuts down the VCS addon to allow cleanup code to run on call. Returns [code]true[/code] is no failure occurs, else returns [code]false[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "file_path",
              "type": "String",
              "index": "0"
            },
            "name": "stage_file",
            "description": "Stages the file which should be committed when [method EditorVCSInterface.commit] is called. Argument should contain the absolute path."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "file_path",
              "type": "String",
              "index": "0"
            },
            "name": "unstage_file",
            "description": "Unstages the file which was staged previously to be committed, so that it is no longer committed when [method EditorVCSInterface.commit] is called. Argument should contain the absolute path."
          }
        ]
      },
      "name": "EditorVCSInterface",
      "version": "3.3",
      "constants": {},
      "brief_description": "Version Control System (VCS) interface which reads and writes to the local VCS in use.",
      "description": "Used by the editor to display VCS extracted information in the editor. The implementation of this API is included in VCS addons, which are essentially GDNative plugins that need to be put into the project folder. These VCS addons are scripts which are attached (on demand) to the object instance of [code]EditorVCSInterface[/code]. All the functions listed below, instead of performing the task themselves, they call the internally defined functions in the VCS addons to provide a plug-n-play experience."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "0",
          "value": "The [Object] identifier stored in this [EncodedObjectAsID] instance. The object instance can be retrieved with [method @GDScript.instance_from_id].",
          "setter": "set_object_id",
          "name": "object_id",
          "getter": "get_object_id",
          "type": "int"
        }
      },
      "inherits": "Reference",
      "methods": {},
      "name": "EncodedObjectAsID",
      "version": "3.3",
      "constants": {},
      "brief_description": "Holds a reference to an [Object]'s instance ID.",
      "description": "Utility class which holds a reference to the internal identifier of an [Object] instance, as given by [method Object.get_instance_id]. This ID can then be used to retrieve the object instance with [method @GDScript.instance_from_id].\n\t\tThis class is used internally by the editor inspector and script debugger, but can also be used in plugins to pass and display objects as their IDs."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "true",
            "value": "If [code]true[/code], the script is currently running inside the editor. This is useful for [code]tool[/code] scripts to conditionally draw editor helpers, or prevent accidentally running \"game\" code that would affect the scene state while in the editor:\n\t\t\t[codeblock]\n\t\t\tif Engine.editor_hint:\n\t\t\t    draw_gizmos()\n\t\t\telse:\n\t\t\t    simulate_physics()\n\t\t\t[/codeblock]\n\t\t\tSee [url=https://docs.godotengine.org/en/3.3/tutorials/misc/running_code_in_the_editor.html]Running code in the editor[/url] in the documentation for more information.\n\t\t\t[b]Note:[/b] To detect whether the script is run from an editor [i]build[/i] (e.g. when pressing [code]F5[/code]), use [method OS.has_feature] with the [code]\"editor\"[/code] argument instead. [code]OS.has_feature(\"editor\")[/code] will evaluate to [code]true[/code] both when the code is running in the editor and when running the project from the editor, but it will evaluate to [code]false[/code] when the code is run from an exported project.",
            "setter": "set_editor_hint",
            "name": "editor_hint",
            "getter": "is_editor_hint",
            "type": "bool"
          },
          {
            "default": "60",
            "value": "The number of fixed iterations per second. This controls how often physics simulation and [method Node._physics_process] methods are run. This value should generally always be set to [code]60[/code] or above, as Godot doesn't interpolate the physics step. As a result, values lower than [code]60[/code] will look stuttery. This value can be increased to make input more reactive or work around tunneling issues, but keep in mind doing so will increase CPU usage.",
            "setter": "set_iterations_per_second",
            "name": "iterations_per_second",
            "getter": "get_iterations_per_second",
            "type": "int"
          },
          {
            "default": "0.5",
            "value": "Controls how much physics ticks are synchronized with real time. For 0 or less, the ticks are synchronized. Such values are recommended for network games, where clock synchronization matters. Higher values cause higher deviation of the in-game clock and real clock but smooth out framerate jitters. The default value of 0.5 should be fine for most; values above 2 could cause the game to react to dropped frames with a noticeable delay and are not recommended.\n\t\t\t[b]Note:[/b] For best results, when using a custom physics interpolation solution, the physics jitter fix should be disabled by setting [member physics_jitter_fix] to [code]0[/code].",
            "setter": "set_physics_jitter_fix",
            "name": "physics_jitter_fix",
            "getter": "get_physics_jitter_fix",
            "type": "float"
          },
          {
            "default": "0",
            "value": "The desired frames per second. If the hardware cannot keep up, this setting may not be respected. A value of 0 means no limit.",
            "setter": "set_target_fps",
            "name": "target_fps",
            "getter": "get_target_fps",
            "type": "int"
          },
          {
            "default": "1.0",
            "value": "Controls how fast or slow the in-game clock ticks versus the real life one. It defaults to 1.0. A value of 2.0 means the game moves twice as fast as real life, whilst a value of 0.5 means the game moves at half the regular speed.",
            "setter": "set_time_scale",
            "name": "time_scale",
            "getter": "get_time_scale",
            "type": "float"
          }
        ]
      },
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Dictionary"
            },
            "qualifiers": "const",
            "name": "get_author_info",
            "description": "Returns engine author information in a Dictionary.\n\t\t\t\t[code]lead_developers[/code]    - Array of Strings, lead developer names\n\t\t\t\t[code]founders[/code]           - Array of Strings, founder names\n\t\t\t\t[code]project_managers[/code]   - Array of Strings, project manager names\n\t\t\t\t[code]developers[/code]         - Array of Strings, developer names"
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_copyright_info",
            "description": "Returns an Array of copyright information Dictionaries.\n\t\t\t\t[code]name[/code]    - String, component name\n\t\t\t\t[code]parts[/code]   - Array of Dictionaries {[code]files[/code], [code]copyright[/code], [code]license[/code]} describing subsections of the component"
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "qualifiers": "const",
            "name": "get_donor_info",
            "description": "Returns a Dictionary of Arrays of donor names.\n\t\t\t\t{[code]platinum_sponsors[/code], [code]gold_sponsors[/code], [code]silver_sponsors[/code], [code]bronze_sponsors[/code], [code]mini_sponsors[/code], [code]gold_donors[/code], [code]silver_donors[/code], [code]bronze_donors[/code]}"
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_frames_drawn",
            "description": "Returns the total number of frames drawn. If the render loop is disabled with [code]--disable-render-loop[/code] via command line, this returns [code]0[/code]. See also [method get_idle_frames]."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_frames_per_second",
            "description": "Returns the frames per second of the running game."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_idle_frames",
            "description": "Returns the total number of frames passed since engine initialization which is advanced on each [b]idle frame[/b], regardless of whether the render loop is enabled. See also [method get_frames_drawn]."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "qualifiers": "const",
            "name": "get_license_info",
            "description": "Returns Dictionary of licenses used by Godot and included third party components."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_license_text",
            "description": "Returns Godot license text."
          },
          {
            "return": {
              "type": "MainLoop"
            },
            "qualifiers": "const",
            "name": "get_main_loop",
            "description": "Returns the main loop object (see [MainLoop] and [SceneTree])."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_physics_frames",
            "description": "Returns the total number of frames passed since engine initialization which is advanced on each [b]physics frame[/b]."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_physics_interpolation_fraction",
            "description": "Returns the fraction through the current physics tick we are at the time of rendering the frame. This can be used to implement fixed timestep interpolation."
          },
          {
            "return": {
              "type": "Object"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_singleton",
            "description": "Returns a global singleton with given [code]name[/code]. Often used for plugins, e.g. [code]GodotPayment[/code] on Android."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "qualifiers": "const",
            "name": "get_version_info",
            "description": "Returns the current engine version information in a Dictionary.\n\t\t\t\t[code]major[/code]    - Holds the major version number as an int\n\t\t\t\t[code]minor[/code]    - Holds the minor version number as an int\n\t\t\t\t[code]patch[/code]    - Holds the patch version number as an int\n\t\t\t\t[code]hex[/code]      - Holds the full version number encoded as a hexadecimal int with one byte (2 places) per number (see example below)\n\t\t\t\t[code]status[/code]   - Holds the status (e.g. \"beta\", \"rc1\", \"rc2\", ... \"stable\") as a String\n\t\t\t\t[code]build[/code]    - Holds the build name (e.g. \"custom_build\") as a String\n\t\t\t\t[code]hash[/code]     - Holds the full Git commit hash as a String\n\t\t\t\t[code]year[/code]     - Holds the year the version was released in as an int\n\t\t\t\t[code]string[/code]   - [code]major[/code] + [code]minor[/code] + [code]patch[/code] + [code]status[/code] + [code]build[/code] in a single String\n\t\t\t\tThe [code]hex[/code] value is encoded as follows, from left to right: one byte for the major, one byte for the minor, one byte for the patch version. For example, \"3.1.12\" would be [code]0x03010C[/code]. [b]Note:[/b] It's still an int internally, and printing it will give you its decimal representation, which is not particularly meaningful. Use hexadecimal literals for easy version comparisons from code:\n\t\t\t\t[codeblock]\n\t\t\t\tif Engine.get_version_info().hex >= 0x030200:\n\t\t\t\t    # Do things specific to version 3.2 or later\n\t\t\t\telse:\n\t\t\t\t    # Do things specific to versions before 3.2\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_singleton",
            "description": "Returns [code]true[/code] if a singleton with given [code]name[/code] exists in global scope."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_in_physics_frame",
            "description": "Returns [code]true[/code] if the game is inside the fixed process and physics phase of the game loop."
          }
        ]
      },
      "name": "Engine",
      "version": "3.3",
      "constants": {},
      "brief_description": "Access to engine properties.",
      "description": "The [Engine] singleton allows you to query and modify the project's run-time parameters, such as frames per second, time scale, and others."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/3d/environment_and_post_processing.html",
            "title": "Environment and post-processing"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/3d/high_dynamic_range.html",
            "title": "Light transport in game engines"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/123",
            "title": "3D Material Testers Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/110",
            "title": "2D HDR Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "1.0",
            "value": "The global brightness value of the rendered scene. Effective only if [code]adjustment_enabled[/code] is [code]true[/code].",
            "setter": "set_adjustment_brightness",
            "name": "adjustment_brightness",
            "getter": "get_adjustment_brightness",
            "type": "float"
          },
          {
            "value": "Applies the provided [Texture] resource to affect the global color aspect of the rendered scene. Effective only if [code]adjustment_enabled[/code] is [code]true[/code].",
            "setter": "set_adjustment_color_correction",
            "name": "adjustment_color_correction",
            "getter": "get_adjustment_color_correction",
            "type": "Texture"
          },
          {
            "default": "1.0",
            "value": "The global contrast value of the rendered scene (default value is 1). Effective only if [code]adjustment_enabled[/code] is [code]true[/code].",
            "setter": "set_adjustment_contrast",
            "name": "adjustment_contrast",
            "getter": "get_adjustment_contrast",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], enables the [code]adjustment_*[/code] properties provided by this resource. If [code]false[/code], modifications to the [code]adjustment_*[/code] properties will have no effect on the rendered scene.",
            "setter": "set_adjustment_enable",
            "name": "adjustment_enabled",
            "getter": "is_adjustment_enabled",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "The global color saturation value of the rendered scene (default value is 1). Effective only if [code]adjustment_enabled[/code] is [code]true[/code].",
            "setter": "set_adjustment_saturation",
            "name": "adjustment_saturation",
            "getter": "get_adjustment_saturation",
            "type": "float"
          },
          {
            "default": "Color( 0, 0, 0, 1 )",
            "value": "The ambient light's [Color].",
            "setter": "set_ambient_light_color",
            "name": "ambient_light_color",
            "getter": "get_ambient_light_color",
            "type": "Color"
          },
          {
            "default": "1.0",
            "value": "The ambient light's energy. The higher the value, the stronger the light.",
            "setter": "set_ambient_light_energy",
            "name": "ambient_light_energy",
            "getter": "get_ambient_light_energy",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Defines the amount of light that the sky brings on the scene. A value of 0 means that the sky's light emission has no effect on the scene illumination, thus all ambient illumination is provided by the ambient light. On the contrary, a value of 1 means that all the light that affects the scene is provided by the sky, thus the ambient light parameter has no effect on the scene.",
            "setter": "set_ambient_light_sky_contribution",
            "name": "ambient_light_sky_contribution",
            "getter": "get_ambient_light_sky_contribution",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], enables the tonemapping auto exposure mode of the scene renderer. If [code]true[/code], the renderer will automatically determine the exposure setting to adapt to the scene's illumination and the observed light.",
            "setter": "set_tonemap_auto_exposure",
            "name": "auto_exposure_enabled",
            "getter": "get_tonemap_auto_exposure",
            "type": "bool"
          },
          {
            "default": "8.0",
            "value": "The maximum luminance value for the auto exposure.",
            "setter": "set_tonemap_auto_exposure_max",
            "name": "auto_exposure_max_luma",
            "getter": "get_tonemap_auto_exposure_max",
            "type": "float"
          },
          {
            "default": "0.05",
            "value": "The minimum luminance value for the auto exposure.",
            "setter": "set_tonemap_auto_exposure_min",
            "name": "auto_exposure_min_luma",
            "getter": "get_tonemap_auto_exposure_min",
            "type": "float"
          },
          {
            "default": "0.4",
            "value": "The scale of the auto exposure effect. Affects the intensity of auto exposure.",
            "setter": "set_tonemap_auto_exposure_grey",
            "name": "auto_exposure_scale",
            "getter": "get_tonemap_auto_exposure_grey",
            "type": "float"
          },
          {
            "default": "0.5",
            "value": "The speed of the auto exposure effect. Affects the time needed for the camera to perform auto exposure.",
            "setter": "set_tonemap_auto_exposure_speed",
            "name": "auto_exposure_speed",
            "getter": "get_tonemap_auto_exposure_speed",
            "type": "float"
          },
          {
            "default": "1",
            "value": "The ID of the camera feed to show in the background.",
            "setter": "set_camera_feed_id",
            "name": "background_camera_feed_id",
            "getter": "get_camera_feed_id",
            "type": "int"
          },
          {
            "default": "0",
            "value": "The maximum layer ID to display. Only effective when using the [constant BG_CANVAS] background mode.",
            "setter": "set_canvas_max_layer",
            "name": "background_canvas_max_layer",
            "getter": "get_canvas_max_layer",
            "type": "int"
          },
          {
            "default": "Color( 0, 0, 0, 1 )",
            "value": "The [Color] displayed for clear areas of the scene. Only effective when using the [constant BG_COLOR] or [constant BG_COLOR_SKY] background modes).",
            "setter": "set_bg_color",
            "name": "background_color",
            "getter": "get_bg_color",
            "type": "Color"
          },
          {
            "default": "1.0",
            "value": "The power of the light emitted by the background.",
            "setter": "set_bg_energy",
            "name": "background_energy",
            "getter": "get_bg_energy",
            "type": "float"
          },
          {
            "default": "0",
            "value": "The background mode. See [enum BGMode] for possible values.",
            "setter": "set_background",
            "name": "background_mode",
            "getter": "get_background",
            "type": "int",
            "enum": "Environment.BGMode"
          },
          {
            "value": "The [Sky] resource defined as background.",
            "setter": "set_sky",
            "name": "background_sky",
            "getter": "get_sky",
            "type": "Sky"
          },
          {
            "default": "0.0",
            "value": "The [Sky] resource's custom field of view.",
            "setter": "set_sky_custom_fov",
            "name": "background_sky_custom_fov",
            "getter": "get_sky_custom_fov",
            "type": "float"
          },
          {
            "default": "Basis( 1, 0, 0, 0, 1, 0, 0, 0, 1 )",
            "value": "The [Sky] resource's rotation expressed as a [Basis].",
            "setter": "set_sky_orientation",
            "name": "background_sky_orientation",
            "getter": "get_sky_orientation",
            "type": "Basis"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "The [Sky] resource's rotation expressed as Euler angles in radians.",
            "setter": "set_sky_rotation",
            "name": "background_sky_rotation",
            "getter": "get_sky_rotation",
            "type": "Vector3"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "The [Sky] resource's rotation expressed as Euler angles in degrees.",
            "setter": "set_sky_rotation_degrees",
            "name": "background_sky_rotation_degrees",
            "getter": "get_sky_rotation_degrees",
            "type": "Vector3"
          },
          {
            "default": "0.1",
            "value": "The amount of far blur for the depth-of-field effect.",
            "setter": "set_dof_blur_far_amount",
            "name": "dof_blur_far_amount",
            "getter": "get_dof_blur_far_amount",
            "type": "float"
          },
          {
            "default": "10.0",
            "value": "The distance from the camera where the far blur effect affects the rendering.",
            "setter": "set_dof_blur_far_distance",
            "name": "dof_blur_far_distance",
            "getter": "get_dof_blur_far_distance",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], enables the depth-of-field far blur effect.",
            "setter": "set_dof_blur_far_enabled",
            "name": "dof_blur_far_enabled",
            "getter": "is_dof_blur_far_enabled",
            "type": "bool"
          },
          {
            "default": "1",
            "value": "The depth-of-field far blur's quality. Higher values can mitigate the visible banding effect seen at higher strengths, but are much slower.",
            "setter": "set_dof_blur_far_quality",
            "name": "dof_blur_far_quality",
            "getter": "get_dof_blur_far_quality",
            "type": "int",
            "enum": "Environment.DOFBlurQuality"
          },
          {
            "default": "5.0",
            "value": "The length of the transition between the no-blur area and far blur.",
            "setter": "set_dof_blur_far_transition",
            "name": "dof_blur_far_transition",
            "getter": "get_dof_blur_far_transition",
            "type": "float"
          },
          {
            "default": "0.1",
            "value": "The amount of near blur for the depth-of-field effect.",
            "setter": "set_dof_blur_near_amount",
            "name": "dof_blur_near_amount",
            "getter": "get_dof_blur_near_amount",
            "type": "float"
          },
          {
            "default": "2.0",
            "value": "Distance from the camera where the near blur effect affects the rendering.",
            "setter": "set_dof_blur_near_distance",
            "name": "dof_blur_near_distance",
            "getter": "get_dof_blur_near_distance",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], enables the depth-of-field near blur effect.",
            "setter": "set_dof_blur_near_enabled",
            "name": "dof_blur_near_enabled",
            "getter": "is_dof_blur_near_enabled",
            "type": "bool"
          },
          {
            "default": "1",
            "value": "The depth-of-field near blur's quality. Higher values can mitigate the visible banding effect seen at higher strengths, but are much slower.",
            "setter": "set_dof_blur_near_quality",
            "name": "dof_blur_near_quality",
            "getter": "get_dof_blur_near_quality",
            "type": "int",
            "enum": "Environment.DOFBlurQuality"
          },
          {
            "default": "1.0",
            "value": "The length of the transition between the near blur and no-blur area.",
            "setter": "set_dof_blur_near_transition",
            "name": "dof_blur_near_transition",
            "getter": "get_dof_blur_near_transition",
            "type": "float"
          },
          {
            "default": "Color( 0.5, 0.6, 0.7, 1 )",
            "value": "The fog's [Color].",
            "setter": "set_fog_color",
            "name": "fog_color",
            "getter": "get_fog_color",
            "type": "Color"
          },
          {
            "default": "10.0",
            "value": "The fog's depth starting distance from the camera.",
            "setter": "set_fog_depth_begin",
            "name": "fog_depth_begin",
            "getter": "get_fog_depth_begin",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The fog depth's intensity curve. A number of presets are available in the [b]Inspector[/b] by right-clicking the curve.",
            "setter": "set_fog_depth_curve",
            "name": "fog_depth_curve",
            "getter": "get_fog_depth_curve",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the depth fog effect is enabled. When enabled, fog will appear in the distance (relative to the camera).",
            "setter": "set_fog_depth_enabled",
            "name": "fog_depth_enabled",
            "getter": "is_fog_depth_enabled",
            "type": "bool"
          },
          {
            "default": "100.0",
            "value": "The fog's depth end distance from the camera. If this value is set to 0, it will be equal to the current camera's [member Camera.far] value.",
            "setter": "set_fog_depth_end",
            "name": "fog_depth_end",
            "getter": "get_fog_depth_end",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], fog effects are enabled. [member fog_height_enabled] and/or [member fog_depth_enabled] must be set to [code]true[/code] to actually display fog.",
            "setter": "set_fog_enabled",
            "name": "fog_enabled",
            "getter": "is_fog_enabled",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "The height fog's intensity. A number of presets are available in the [b]Inspector[/b] by right-clicking the curve.",
            "setter": "set_fog_height_curve",
            "name": "fog_height_curve",
            "getter": "get_fog_height_curve",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the height fog effect is enabled. When enabled, fog will appear in a defined height range, regardless of the distance from the camera. This can be used to simulate \"deep water\" effects with a lower performance cost compared to a dedicated shader.",
            "setter": "set_fog_height_enabled",
            "name": "fog_height_enabled",
            "getter": "is_fog_height_enabled",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "The Y coordinate where the height fog will be the most intense. If this value is greater than [member fog_height_min], fog will be displayed from bottom to top. Otherwise, it will be displayed from top to bottom.",
            "setter": "set_fog_height_max",
            "name": "fog_height_max",
            "getter": "get_fog_height_max",
            "type": "float"
          },
          {
            "default": "10.0",
            "value": "The Y coordinate where the height fog will be the least intense. If this value is greater than [member fog_height_max], fog will be displayed from top to bottom. Otherwise, it will be displayed from bottom to top.",
            "setter": "set_fog_height_min",
            "name": "fog_height_min",
            "getter": "get_fog_height_min",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The intensity of the depth fog color transition when looking towards the sun. The sun's direction is determined automatically using the DirectionalLight node in the scene.",
            "setter": "set_fog_sun_amount",
            "name": "fog_sun_amount",
            "getter": "get_fog_sun_amount",
            "type": "float"
          },
          {
            "default": "Color( 1, 0.9, 0.7, 1 )",
            "value": "The depth fog's [Color] when looking towards the sun.",
            "setter": "set_fog_sun_color",
            "name": "fog_sun_color",
            "getter": "get_fog_sun_color",
            "type": "Color"
          },
          {
            "default": "1.0",
            "value": "The intensity of the fog light transmittance effect. Amount of light that the fog transmits.",
            "setter": "set_fog_transmit_curve",
            "name": "fog_transmit_curve",
            "getter": "get_fog_transmit_curve",
            "type": "float"
          },
          {
            "default": "false",
            "value": "Enables fog's light transmission effect. If [code]true[/code], light will be more visible in the fog to simulate light scattering as in real life.",
            "setter": "set_fog_transmit_enabled",
            "name": "fog_transmit_enabled",
            "getter": "is_fog_transmit_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Smooths out the blockiness created by sampling higher levels, at the cost of performance.\n\t\t\t[b]Note:[/b] When using the GLES2 renderer, this is only available if the GPU supports the [code]GL_EXT_gpu_shader4[/code] extension.",
            "setter": "set_glow_bicubic_upscale",
            "name": "glow_bicubic_upscale",
            "getter": "is_glow_bicubic_upscale_enabled",
            "type": "bool"
          },
          {
            "default": "2",
            "value": "The glow blending mode.",
            "setter": "set_glow_blend_mode",
            "name": "glow_blend_mode",
            "getter": "get_glow_blend_mode",
            "type": "int",
            "enum": "Environment.GlowBlendMode"
          },
          {
            "default": "0.0",
            "value": "The bloom's intensity. If set to a value higher than [code]0[/code], this will make glow visible in areas darker than the [member glow_hdr_threshold].",
            "setter": "set_glow_bloom",
            "name": "glow_bloom",
            "getter": "get_glow_bloom",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the glow effect is enabled.",
            "setter": "set_glow_enabled",
            "name": "glow_enabled",
            "getter": "is_glow_enabled",
            "type": "bool"
          },
          {
            "default": "12.0",
            "value": "The higher threshold of the HDR glow. Areas brighter than this threshold will be clamped for the purposes of the glow effect.",
            "setter": "set_glow_hdr_luminance_cap",
            "name": "glow_hdr_luminance_cap",
            "getter": "get_glow_hdr_luminance_cap",
            "type": "float"
          },
          {
            "default": "2.0",
            "value": "The bleed scale of the HDR glow.",
            "setter": "set_glow_hdr_bleed_scale",
            "name": "glow_hdr_scale",
            "getter": "get_glow_hdr_bleed_scale",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The lower threshold of the HDR glow. When using the GLES2 renderer (which doesn't support HDR), this needs to be below [code]1.0[/code] for glow to be visible. A value of [code]0.9[/code] works well in this case.",
            "setter": "set_glow_hdr_bleed_threshold",
            "name": "glow_hdr_threshold",
            "getter": "get_glow_hdr_bleed_threshold",
            "type": "float"
          },
          {
            "default": "0.8",
            "value": "The glow intensity. When using the GLES2 renderer, this should be increased to 1.5 to compensate for the lack of HDR rendering.",
            "setter": "set_glow_intensity",
            "name": "glow_intensity",
            "getter": "get_glow_intensity",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the 1st level of glow is enabled. This is the most \"local\" level (least blurry).",
            "setter": "set_glow_level",
            "name": "glow_levels/1",
            "getter": "is_glow_level_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the 2th level of glow is enabled.",
            "setter": "set_glow_level",
            "name": "glow_levels/2",
            "getter": "is_glow_level_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the 3th level of glow is enabled.",
            "setter": "set_glow_level",
            "name": "glow_levels/3",
            "getter": "is_glow_level_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the 4th level of glow is enabled.",
            "setter": "set_glow_level",
            "name": "glow_levels/4",
            "getter": "is_glow_level_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the 5th level of glow is enabled.",
            "setter": "set_glow_level",
            "name": "glow_levels/5",
            "getter": "is_glow_level_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the 6th level of glow is enabled.",
            "setter": "set_glow_level",
            "name": "glow_levels/6",
            "getter": "is_glow_level_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the 7th level of glow is enabled. This is the most \"global\" level (blurriest).",
            "setter": "set_glow_level",
            "name": "glow_levels/7",
            "getter": "is_glow_level_enabled",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "The glow strength. When using the GLES2 renderer, this should be increased to 1.3 to compensate for the lack of HDR rendering.",
            "setter": "set_glow_strength",
            "name": "glow_strength",
            "getter": "get_glow_strength",
            "type": "float"
          },
          {
            "default": "0.2",
            "value": "The depth tolerance for screen-space reflections.",
            "setter": "set_ssr_depth_tolerance",
            "name": "ss_reflections_depth_tolerance",
            "getter": "get_ssr_depth_tolerance",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], screen-space reflections are enabled. Screen-space reflections are more accurate than reflections from [GIProbe]s or [ReflectionProbe]s, but are slower and can't reflect surfaces occluded by others.",
            "setter": "set_ssr_enabled",
            "name": "ss_reflections_enabled",
            "getter": "is_ssr_enabled",
            "type": "bool"
          },
          {
            "default": "0.15",
            "value": "The fade-in distance for screen-space reflections. Affects the area from the reflected material to the screen-space reflection).",
            "setter": "set_ssr_fade_in",
            "name": "ss_reflections_fade_in",
            "getter": "get_ssr_fade_in",
            "type": "float"
          },
          {
            "default": "2.0",
            "value": "The fade-out distance for screen-space reflections. Affects the area from the screen-space reflection to the \"global\" reflection.",
            "setter": "set_ssr_fade_out",
            "name": "ss_reflections_fade_out",
            "getter": "get_ssr_fade_out",
            "type": "float"
          },
          {
            "default": "64",
            "value": "The maximum number of steps for screen-space reflections. Higher values are slower.",
            "setter": "set_ssr_max_steps",
            "name": "ss_reflections_max_steps",
            "getter": "get_ssr_max_steps",
            "type": "int"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], screen-space reflections will take the material roughness into account.",
            "setter": "set_ssr_rough",
            "name": "ss_reflections_roughness",
            "getter": "is_ssr_rough",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "The screen-space ambient occlusion intensity on materials that have an AO texture defined. Values higher than [code]0[/code] will make the SSAO effect visible in areas darkened by AO textures.",
            "setter": "set_ssao_ao_channel_affect",
            "name": "ssao_ao_channel_affect",
            "getter": "get_ssao_ao_channel_affect",
            "type": "float"
          },
          {
            "default": "0.01",
            "value": "The screen-space ambient occlusion bias. This should be kept high enough to prevent \"smooth\" curves from being affected by ambient occlusion.",
            "setter": "set_ssao_bias",
            "name": "ssao_bias",
            "getter": "get_ssao_bias",
            "type": "float"
          },
          {
            "default": "3",
            "value": "The screen-space ambient occlusion blur quality. See [enum SSAOBlur] for possible values.",
            "setter": "set_ssao_blur",
            "name": "ssao_blur",
            "getter": "get_ssao_blur",
            "type": "int",
            "enum": "Environment.SSAOBlur"
          },
          {
            "default": "Color( 0, 0, 0, 1 )",
            "value": "The screen-space ambient occlusion color.",
            "setter": "set_ssao_color",
            "name": "ssao_color",
            "getter": "get_ssao_color",
            "type": "Color"
          },
          {
            "default": "4.0",
            "value": "The screen-space ambient occlusion edge sharpness.",
            "setter": "set_ssao_edge_sharpness",
            "name": "ssao_edge_sharpness",
            "getter": "get_ssao_edge_sharpness",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the screen-space ambient occlusion effect is enabled. This darkens objects' corners and cavities to simulate ambient light not reaching the entire object as in real life. This works well for small, dynamic objects, but baked lighting or ambient occlusion textures will do a better job at displaying ambient occlusion on large static objects. This is a costly effect and should be disabled first when running into performance issues.",
            "setter": "set_ssao_enabled",
            "name": "ssao_enabled",
            "getter": "is_ssao_enabled",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "The primary screen-space ambient occlusion intensity. See also [member ssao_radius].",
            "setter": "set_ssao_intensity",
            "name": "ssao_intensity",
            "getter": "get_ssao_intensity",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The secondary screen-space ambient occlusion intensity. See also [member ssao_radius2].",
            "setter": "set_ssao_intensity2",
            "name": "ssao_intensity2",
            "getter": "get_ssao_intensity2",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The screen-space ambient occlusion intensity in direct light. In real life, ambient occlusion only applies to indirect light, which means its effects can't be seen in direct light. Values higher than [code]0[/code] will make the SSAO effect visible in direct light.",
            "setter": "set_ssao_direct_light_affect",
            "name": "ssao_light_affect",
            "getter": "get_ssao_direct_light_affect",
            "type": "float"
          },
          {
            "default": "1",
            "value": "The screen-space ambient occlusion quality. Higher qualities will make better use of small objects for ambient occlusion, but are slower.",
            "setter": "set_ssao_quality",
            "name": "ssao_quality",
            "getter": "get_ssao_quality",
            "type": "int",
            "enum": "Environment.SSAOQuality"
          },
          {
            "default": "1.0",
            "value": "The primary screen-space ambient occlusion radius.",
            "setter": "set_ssao_radius",
            "name": "ssao_radius",
            "getter": "get_ssao_radius",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The secondary screen-space ambient occlusion radius. If set to a value higher than [code]0[/code], enables the secondary screen-space ambient occlusion effect which can be used to improve the effect's appearance (at the cost of performance).",
            "setter": "set_ssao_radius2",
            "name": "ssao_radius2",
            "getter": "get_ssao_radius2",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The default exposure used for tonemapping.",
            "setter": "set_tonemap_exposure",
            "name": "tonemap_exposure",
            "getter": "get_tonemap_exposure",
            "type": "float"
          },
          {
            "default": "0",
            "value": "The tonemapping mode to use. Tonemapping is the process that \"converts\" HDR values to be suitable for rendering on a LDR display. (Godot doesn't support rendering on HDR displays yet.)",
            "setter": "set_tonemapper",
            "name": "tonemap_mode",
            "getter": "get_tonemapper",
            "type": "int",
            "enum": "Environment.ToneMapper"
          },
          {
            "default": "1.0",
            "value": "The white reference value for tonemapping. Only effective if the [member tonemap_mode] isn't set to [constant TONE_MAPPER_LINEAR].",
            "setter": "set_tonemap_white",
            "name": "tonemap_white",
            "getter": "get_tonemap_white",
            "type": "float"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_glow_level_enabled",
            "description": "Returns [code]true[/code] if the glow level [code]idx[/code] is specified, [code]false[/code] otherwise."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_glow_level",
            "description": "Enables or disables the glow level at index [code]idx[/code]. Each level relies on the previous level. This means that enabling higher glow levels will slow down the glow effect rendering, even if previous levels aren't enabled."
          }
        ]
      },
      "name": "Environment",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "5",
            "name": "BG_KEEP",
            "enum": "BGMode"
          },
          {
            "value": "0",
            "name": "BG_CLEAR_COLOR",
            "enum": "BGMode"
          },
          {
            "value": "1",
            "name": "BG_COLOR",
            "enum": "BGMode"
          },
          {
            "value": "2",
            "name": "BG_SKY",
            "enum": "BGMode"
          },
          {
            "value": "3",
            "name": "BG_COLOR_SKY",
            "enum": "BGMode"
          },
          {
            "value": "4",
            "name": "BG_CANVAS",
            "enum": "BGMode"
          },
          {
            "value": "6",
            "name": "BG_CAMERA_FEED",
            "enum": "BGMode"
          },
          {
            "value": "7",
            "name": "BG_MAX",
            "enum": "BGMode"
          },
          {
            "value": "0",
            "name": "GLOW_BLEND_MODE_ADDITIVE",
            "enum": "GlowBlendMode"
          },
          {
            "value": "1",
            "name": "GLOW_BLEND_MODE_SCREEN",
            "enum": "GlowBlendMode"
          },
          {
            "value": "2",
            "name": "GLOW_BLEND_MODE_SOFTLIGHT",
            "enum": "GlowBlendMode"
          },
          {
            "value": "3",
            "name": "GLOW_BLEND_MODE_REPLACE",
            "enum": "GlowBlendMode"
          },
          {
            "value": "0",
            "name": "TONE_MAPPER_LINEAR",
            "enum": "ToneMapper"
          },
          {
            "value": "1",
            "name": "TONE_MAPPER_REINHARDT",
            "enum": "ToneMapper"
          },
          {
            "value": "2",
            "name": "TONE_MAPPER_FILMIC",
            "enum": "ToneMapper"
          },
          {
            "value": "3",
            "name": "TONE_MAPPER_ACES",
            "enum": "ToneMapper"
          },
          {
            "value": "0",
            "name": "DOF_BLUR_QUALITY_LOW",
            "enum": "DOFBlurQuality"
          },
          {
            "value": "1",
            "name": "DOF_BLUR_QUALITY_MEDIUM",
            "enum": "DOFBlurQuality"
          },
          {
            "value": "2",
            "name": "DOF_BLUR_QUALITY_HIGH",
            "enum": "DOFBlurQuality"
          },
          {
            "value": "0",
            "name": "SSAO_BLUR_DISABLED",
            "enum": "SSAOBlur"
          },
          {
            "value": "1",
            "name": "SSAO_BLUR_1x1",
            "enum": "SSAOBlur"
          },
          {
            "value": "2",
            "name": "SSAO_BLUR_2x2",
            "enum": "SSAOBlur"
          },
          {
            "value": "3",
            "name": "SSAO_BLUR_3x3",
            "enum": "SSAOBlur"
          },
          {
            "value": "0",
            "name": "SSAO_QUALITY_LOW",
            "enum": "SSAOQuality"
          },
          {
            "value": "1",
            "name": "SSAO_QUALITY_MEDIUM",
            "enum": "SSAOQuality"
          },
          {
            "value": "2",
            "name": "SSAO_QUALITY_HIGH",
            "enum": "SSAOQuality"
          }
        ]
      },
      "brief_description": "Resource for environment nodes (like [WorldEnvironment]) that define multiple rendering options.",
      "description": "Resource for environment nodes (like [WorldEnvironment]) that define multiple environment operations (such as background [Sky] or [Color], ambient light, fog, depth-of-field...). These parameters affect the final render of the scene. The order of these operations is:\n\t\t- Depth of Field Blur\n\t\t- Glow\n\t\t- Tonemap (Auto Exposure)\n\t\t- Adjustments\n\t\tThese effects will only apply when the [Viewport]'s intended usage is \"3D\" or \"3D Without Effects\". This can be configured for the root Viewport with [member ProjectSettings.rendering/quality/intended_usage/framebuffer_allocation], or for specific Viewports via the [member Viewport.usage] property."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "default": "[  ]",
                "name": "inputs",
                "type": "Array",
                "index": "0"
              },
              {
                "default": "null",
                "name": "base_instance",
                "type": "Object",
                "index": "1"
              },
              {
                "default": "true",
                "name": "show_error",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "execute",
            "description": "Executes the expression that was previously parsed by [method parse] and returns the result. Before you use the returned object, you should check if the method failed by calling [method has_execute_failed].\n\t\t\t\tIf you defined input variables in [method parse], you can specify their values in the inputs array, in the same order."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_error_text",
            "description": "Returns the error text if [method parse] has failed."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "has_execute_failed",
            "description": "Returns [code]true[/code] if [method execute] has failed."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "expression",
                "type": "String",
                "index": "0"
              },
              {
                "default": "PoolStringArray(  )",
                "name": "input_names",
                "type": "PoolStringArray",
                "index": "1"
              }
            ],
            "name": "parse",
            "description": "Parses the expression and returns an [enum Error] code.\n\t\t\t\tYou can optionally specify names of variables that may appear in the expression with [code]input_names[/code], so that you can bind them when it gets executed."
          }
        ]
      },
      "name": "Expression",
      "version": "3.3",
      "constants": {},
      "brief_description": "A class that stores an expression you can execute.",
      "description": "An expression can be made of any arithmetic operation, built-in math function call, method call of a passed instance, or built-in type construction call.\n\t\tAn example expression text using the built-in math functions could be [code]sqrt(pow(3,2) + pow(4,2))[/code].\n\t\tIn the following example we use a [LineEdit] node to write our expression and show the result.\n\t\t[codeblock]\n\t\tonready var expression = Expression.new()\n\n\t\tfunc _ready():\n\t\t    $LineEdit.connect(\"text_entered\", self, \"_on_text_entered\")\n\n\t\tfunc _on_text_entered(command):\n\t\t    var error = expression.parse(command, [])\n\t\t    if error != OK:\n\t\t        print(expression.get_error_text())\n\t\t        return\n\t\t    var result = expression.execute([], null, true)\n\t\t    if not expression.has_execute_failed():\n\t\t        $LineEdit.text = str(result)\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "2048",
            "setter": "set_flags",
            "override": "true",
            "name": "flags",
            "getter": "get_flags",
            "type": "int"
          },
          {
            "default": "Vector2( 1, 1 )",
            "value": "External texture size.",
            "setter": "set_size",
            "name": "size",
            "getter": "get_size",
            "type": "Vector2"
          }
        ]
      },
      "inherits": "Texture",
      "methods": {
        "method": {
          "return": {
            "type": "int"
          },
          "name": "get_external_texture_id",
          "description": "Returns the external texture name."
        }
      },
      "name": "ExternalTexture",
      "version": "3.3",
      "constants": {},
      "brief_description": "Enable OpenGL ES external texture extension.",
      "description": "Enable support for the OpenGL ES external texture extension as defined by [url=https://www.khronos.org/registry/OpenGL/extensions/OES/OES_EGL_image_external.txt]OES_EGL_image_external[/url].\n\t\t[b]Note:[/b] This is only supported for Android platforms."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "value": "Custom icon for files.",
            "name": "file",
            "type": "Texture"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "The color modulation applied to the file icon.",
            "name": "file_icon_modulate",
            "type": "Color"
          },
          {
            "default": "Color( 0, 0, 0, 0.7 )",
            "value": "The color tint for disabled files (when the [FileDialog] is used in open folder mode).",
            "name": "files_disabled",
            "type": "Color"
          },
          {
            "value": "Custom icon for folders.",
            "name": "folder",
            "type": "Texture"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "The color modulation applied to the folder icon.",
            "name": "folder_icon_modulate",
            "type": "Color"
          },
          {
            "value": "Custom icon for the parent folder arrow.",
            "name": "parent_folder",
            "type": "Texture"
          },
          {
            "value": "Custom icon for the reload button.",
            "name": "reload",
            "type": "Texture"
          },
          {
            "value": "Custom icon for the toggle hidden button.",
            "name": "toggle_hidden",
            "type": "Texture"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "0",
            "value": "The file system access scope. See enum [code]Access[/code] constants.\n\t\t\t[b]Warning:[/b] Currently, in sandboxed environments such as HTML5 builds or sandboxed macOS apps, FileDialog cannot access the host file system. See [url=https://github.com/godotengine/godot-proposals/issues/1123]godot-proposals#1123[/url].",
            "setter": "set_access",
            "name": "access",
            "getter": "get_access",
            "type": "int",
            "enum": "FileDialog.Access"
          },
          {
            "default": "\"res://\"",
            "value": "The current working directory of the file dialog.",
            "setter": "set_current_dir",
            "name": "current_dir",
            "getter": "get_current_dir",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "The currently selected file of the file dialog.",
            "setter": "set_current_file",
            "name": "current_file",
            "getter": "get_current_file",
            "type": "String"
          },
          {
            "default": "\"res://\"",
            "value": "The currently selected file path of the file dialog.",
            "setter": "set_current_path",
            "name": "current_path",
            "getter": "get_current_path",
            "type": "String"
          },
          {
            "default": "false",
            "setter": "set_hide_on_ok",
            "override": "true",
            "name": "dialog_hide_on_ok",
            "getter": "get_hide_on_ok",
            "type": "bool"
          },
          {
            "default": "PoolStringArray(  )",
            "value": "The available file type filters. For example, this shows only [code].png[/code] and [code].gd[/code] files: [code]set_filters(PoolStringArray([\"*.png ; PNG Images\",\"*.gd ; GDScript Files\"]))[/code].",
            "setter": "set_filters",
            "name": "filters",
            "getter": "get_filters",
            "type": "PoolStringArray"
          },
          {
            "default": "4",
            "value": "The dialog's open or save mode, which affects the selection behavior. See enum [code]Mode[/code] constants.",
            "setter": "set_mode",
            "name": "mode",
            "getter": "get_mode",
            "type": "int",
            "enum": "FileDialog.Mode"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], changing the [code]Mode[/code] property will set the window title accordingly (e.g. setting mode to [constant MODE_OPEN_FILE] will change the window title to \"Open a File\").",
            "setter": "set_mode_overrides_title",
            "name": "mode_overrides_title",
            "getter": "is_mode_overriding_title",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the dialog will show hidden files.",
            "setter": "set_show_hidden_files",
            "name": "show_hidden_files",
            "getter": "is_showing_hidden_files",
            "type": "bool"
          },
          {
            "default": "\"Save a File\"",
            "setter": "set_title",
            "override": "true",
            "name": "window_title",
            "getter": "get_title",
            "type": "String"
          }
        ]
      },
      "inherits": "ConfirmationDialog",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "filter",
              "type": "String",
              "index": "0"
            },
            "name": "add_filter",
            "description": "Adds [code]filter[/code] as a custom filter; [code]filter[/code] should be of the form [code]\"filename.extension ; Description\"[/code]. For example, [code]\"*.png ; PNG Images\"[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_filters",
            "description": "Clear all the added filters in the dialog."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "deselect_items",
            "description": "Clear currently selected items in the dialog."
          },
          {
            "return": {
              "type": "LineEdit"
            },
            "name": "get_line_edit",
            "description": "Returns the LineEdit for the selected file."
          },
          {
            "return": {
              "type": "VBoxContainer"
            },
            "name": "get_vbox",
            "description": "Returns the vertical box container of the dialog, custom controls can be added to it."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "invalidate",
            "description": "Invalidate and update the current dialog content list."
          }
        ]
      },
      "name": "FileDialog",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "dir",
              "type": "String",
              "index": "0"
            },
            "name": "dir_selected",
            "description": "Emitted when the user selects a directory."
          },
          {
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "file_selected",
            "description": "Emitted when the user selects a file by double-clicking it or pressing the [b]OK[/b] button."
          },
          {
            "argument": {
              "name": "paths",
              "type": "PoolStringArray",
              "index": "0"
            },
            "name": "files_selected",
            "description": "Emitted when the user selects multiple files."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "MODE_OPEN_FILE",
            "enum": "Mode"
          },
          {
            "value": "1",
            "name": "MODE_OPEN_FILES",
            "enum": "Mode"
          },
          {
            "value": "2",
            "name": "MODE_OPEN_DIR",
            "enum": "Mode"
          },
          {
            "value": "3",
            "name": "MODE_OPEN_ANY",
            "enum": "Mode"
          },
          {
            "value": "4",
            "name": "MODE_SAVE_FILE",
            "enum": "Mode"
          },
          {
            "value": "0",
            "name": "ACCESS_RESOURCES",
            "enum": "Access"
          },
          {
            "value": "1",
            "name": "ACCESS_USERDATA",
            "enum": "Access"
          },
          {
            "value": "2",
            "name": "ACCESS_FILESYSTEM",
            "enum": "Access"
          }
        ]
      },
      "brief_description": "Dialog for selecting files or directories in the filesystem.",
      "description": "FileDialog is a preset dialog used to choose files and directories in the filesystem. It supports filter masks. The FileDialog automatically sets its window title according to the [member mode]. If you want to use a custom title, disable this by setting [member mode_overrides_title] to [code]false[/code]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VBoxContainer",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "arg0",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "arg1",
                "type": "Variant",
                "index": "1"
              },
              {
                "name": "arg2",
                "type": "Control",
                "index": "2"
              }
            ],
            "qualifiers": "const",
            "name": "can_drop_data_fw",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "arg0",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "arg1",
                "type": "Variant",
                "index": "1"
              },
              {
                "name": "arg2",
                "type": "Control",
                "index": "2"
              }
            ],
            "name": "drop_data_fw",
            "description": {}
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "arg0",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "arg1",
                "type": "Control",
                "index": "1"
              }
            ],
            "name": "get_drag_data_fw",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "arg0",
              "type": "String",
              "index": "0"
            },
            "name": "navigate_to_path",
            "description": {}
          }
        ]
      },
      "name": "FileSystemDock",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "display_mode_changed",
            "description": {}
          },
          {
            "argument": {
              "name": "file",
              "type": "String",
              "index": "0"
            },
            "name": "file_removed",
            "description": {}
          },
          {
            "argument": [
              {
                "name": "old_file",
                "type": "String",
                "index": "0"
              },
              {
                "name": "new_file",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "files_moved",
            "description": {}
          },
          {
            "argument": [
              {
                "name": "old_folder",
                "type": "String",
                "index": "0"
              },
              {
                "name": "new_file",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "folder_moved",
            "description": {}
          },
          {
            "argument": {
              "name": "folder",
              "type": "String",
              "index": "0"
            },
            "name": "folder_removed",
            "description": {}
          },
          {
            "argument": {
              "name": "file",
              "type": "String",
              "index": "0"
            },
            "name": "inherit",
            "description": {}
          },
          {
            "argument": {
              "name": "files",
              "type": "PoolStringArray",
              "index": "0"
            },
            "name": "instance",
            "description": {}
          }
        ]
      },
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/getting_started/step_by_step/filesystem.html",
            "title": "File system"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/676",
            "title": "3D Voxel Demo"
          }
        ]
      },
      "members": {
        "member": {
          "default": "false",
          "value": "If [code]true[/code], the file is read with big-endian [url=https://en.wikipedia.org/wiki/Endianness]endianness[/url]. If [code]false[/code], the file is read with little-endian endianness. If in doubt, leave this to [code]false[/code] as most files are written with little-endian endianness.\n\t\t\t[b]Note:[/b] [member endian_swap] is only about the file format, not the CPU type. The CPU endianness doesn't affect the default endianness for files written.\n\t\t\t[b]Note:[/b] This is always reset to [code]false[/code] whenever you open the file. Therefore, you must set [member endian_swap] [i]after[/i] opening the file, not before.",
          "setter": "set_endian_swap",
          "name": "endian_swap",
          "getter": "get_endian_swap",
          "type": "bool"
        }
      },
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "name": "close",
            "description": "Closes the currently opened file and prevents subsequent read/write operations. Use [method flush] to persist the data to disk without closing the file."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "eof_reached",
            "description": "Returns [code]true[/code] if the file cursor has read past the end of the file.\n\t\t\t\t[b]Note:[/b] This function will still return [code]false[/code] while at the end of the file and only activates when reading past it. This can be confusing but it conforms to how low-level file access works in all operating systems. There is always [method get_len] and [method get_position] to implement a custom logic."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "file_exists",
            "description": "Returns [code]true[/code] if the file exists in the given path.\n\t\t\t\t[b]Note:[/b] Many resources types are imported (e.g. textures or sound files), and their source asset will not be included in the exported game, as only the imported version is used. See [method ResourceLoader.exists] for an alternative approach that takes resource remapping into account."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "flush",
            "description": "Writes the file's buffer to disk. Flushing is automatically performed when the file is closed. This means you don't need to call [method flush] manually before closing a file using [method close]. Still, calling [method flush] can be used to ensure the data is safe even if the project crashes instead of being closed gracefully.\n\t\t\t\t[b]Note:[/b] Only call [method flush] when you actually need it. Otherwise, it will decrease performance due to constant disk writes."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_16",
            "description": "Returns the next 16 bits from the file as an integer. See [method store_16] for details on what values can be stored and retrieved this way."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_32",
            "description": "Returns the next 32 bits from the file as an integer. See [method store_32] for details on what values can be stored and retrieved this way."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_64",
            "description": "Returns the next 64 bits from the file as an integer. See [method store_64] for details on what values can be stored and retrieved this way."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_8",
            "description": "Returns the next 8 bits from the file as an integer. See [method store_8] for details on what values can be stored and retrieved this way."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_as_text",
            "description": "Returns the whole file as a [String].\n\t\t\t\tText is interpreted as being UTF-8 encoded."
          },
          {
            "return": {
              "type": "PoolByteArray"
            },
            "argument": {
              "name": "len",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_buffer",
            "description": "Returns next [code]len[/code] bytes of the file as a [PoolByteArray]."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "argument": {
              "default": "\",\"",
              "name": "delim",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_csv_line",
            "description": "Returns the next value of the file in CSV (Comma-Separated Values) format. You can pass a different delimiter [code]delim[/code] to use other than the default [code]\",\"[/code] (comma). This delimiter must be one-character long.\n\t\t\t\tText is interpreted as being UTF-8 encoded."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_double",
            "description": "Returns the next 64 bits from the file as a floating-point number."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "qualifiers": "const",
            "name": "get_error",
            "description": "Returns the last error that happened when trying to perform operations. Compare with the [code]ERR_FILE_*[/code] constants from [enum Error]."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_float",
            "description": "Returns the next 32 bits from the file as a floating-point number."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_len",
            "description": "Returns the size of the file in bytes."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_line",
            "description": "Returns the next line of the file as a [String].\n\t\t\t\tText is interpreted as being UTF-8 encoded."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_md5",
            "description": "Returns an MD5 String representing the file at the given path or an empty [String] on failure."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "file",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_modified_time",
            "description": "Returns the last time the [code]file[/code] was modified in unix timestamp format or returns a [String] \"ERROR IN [code]file[/code]\". This unix timestamp can be converted to datetime by using [method OS.get_datetime_from_unix_time]."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "get_pascal_string",
            "description": "Returns a [String] saved in Pascal format from the file.\n\t\t\t\tText is interpreted as being UTF-8 encoded."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_path",
            "description": "Returns the path as a [String] for the current open file."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_path_absolute",
            "description": "Returns the absolute path as a [String] for the current open file."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_position",
            "description": "Returns the file cursor's position."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_real",
            "description": "Returns the next bits from the file as a floating-point number."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_sha256",
            "description": "Returns a SHA-256 [String] representing the file at the given path or an empty [String] on failure."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "default": "false",
              "name": "allow_objects",
              "type": "bool",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_var",
            "description": "Returns the next [Variant] value from the file. If [code]allow_objects[/code] is [code]true[/code], decoding objects is allowed.\n\t\t\t\t[b]Warning:[/b] Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_open",
            "description": "Returns [code]true[/code] if the file is currently opened."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "flags",
                "type": "int",
                "enum": "File.ModeFlags",
                "index": "1"
              }
            ],
            "name": "open",
            "description": "Opens the file for writing or reading, depending on the flags."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "mode_flags",
                "type": "int",
                "enum": "File.ModeFlags",
                "index": "1"
              },
              {
                "default": "0",
                "name": "compression_mode",
                "type": "int",
                "enum": "File.CompressionMode",
                "index": "2"
              }
            ],
            "name": "open_compressed",
            "description": "Opens a compressed file for reading or writing.\n\t\t\t\t[b]Note:[/b] [method open_compressed] can only read files that were saved by Godot, not third-party compression formats. See [url=https://github.com/godotengine/godot/issues/28999]GitHub issue #28999[/url] for a workaround."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "mode_flags",
                "type": "int",
                "enum": "File.ModeFlags",
                "index": "1"
              },
              {
                "name": "key",
                "type": "PoolByteArray",
                "index": "2"
              }
            ],
            "name": "open_encrypted",
            "description": "Opens an encrypted file in write or read mode. You need to pass a binary key to encrypt/decrypt it.\n\t\t\t\t[b]Note:[/b] The provided key must be 32 bytes long."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "mode_flags",
                "type": "int",
                "enum": "File.ModeFlags",
                "index": "1"
              },
              {
                "name": "pass",
                "type": "String",
                "index": "2"
              }
            ],
            "name": "open_encrypted_with_pass",
            "description": "Opens an encrypted file in write or read mode. You need to pass a password to encrypt/decrypt it."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "position",
              "type": "int",
              "index": "0"
            },
            "name": "seek",
            "description": "Changes the file reading/writing cursor to the specified position (in bytes from the beginning of the file)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "0",
              "name": "position",
              "type": "int",
              "index": "0"
            },
            "name": "seek_end",
            "description": "Changes the file reading/writing cursor to the specified position (in bytes from the end of the file).\n\t\t\t\t[b]Note:[/b] This is an offset, so you should use negative numbers or the cursor will be at the end of the file."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "value",
              "type": "int",
              "index": "0"
            },
            "name": "store_16",
            "description": "Stores an integer as 16 bits in the file.\n\t\t\t\t[b]Note:[/b] The [code]value[/code] should lie in the interval [code][0, 2^16 - 1][/code]. Any other value will overflow and wrap around.\n\t\t\t\tTo store a signed integer, use [method store_64] or store a signed integer from the interval [code][-2^15, 2^15 - 1][/code] (i.e. keeping one bit for the signedness) and compute its sign manually when reading. For example:\n\t\t\t\t[codeblock]\n\t\t\t\tconst MAX_15B = 1 << 15\n\t\t\t\tconst MAX_16B = 1 << 16\n\n\t\t\t\tfunc unsigned16_to_signed(unsigned):\n\t\t\t\t    return (unsigned + MAX_15B) % MAX_16B - MAX_15B\n\n\t\t\t\tfunc _ready():\n\t\t\t\t    var f = File.new()\n\t\t\t\t    f.open(\"user://file.dat\", File.WRITE_READ)\n\t\t\t\t    f.store_16(-42) # This wraps around and stores 65494 (2^16 - 42).\n\t\t\t\t    f.store_16(121) # In bounds, will store 121.\n\t\t\t\t    f.seek(0) # Go back to start to read the stored value.\n\t\t\t\t    var read1 = f.get_16() # 65494\n\t\t\t\t    var read2 = f.get_16() # 121\n\t\t\t\t    var converted1 = unsigned16_to_signed(read1) # -42\n\t\t\t\t    var converted2 = unsigned16_to_signed(read2) # 121\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "value",
              "type": "int",
              "index": "0"
            },
            "name": "store_32",
            "description": "Stores an integer as 32 bits in the file.\n\t\t\t\t[b]Note:[/b] The [code]value[/code] should lie in the interval [code][0, 2^32 - 1][/code]. Any other value will overflow and wrap around.\n\t\t\t\tTo store a signed integer, use [method store_64], or convert it manually (see [method store_16] for an example)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "value",
              "type": "int",
              "index": "0"
            },
            "name": "store_64",
            "description": "Stores an integer as 64 bits in the file.\n\t\t\t\t[b]Note:[/b] The [code]value[/code] must lie in the interval [code][-2^63, 2^63 - 1][/code] (i.e. be a valid [int] value)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "value",
              "type": "int",
              "index": "0"
            },
            "name": "store_8",
            "description": "Stores an integer as 8 bits in the file.\n\t\t\t\t[b]Note:[/b] The [code]value[/code] should lie in the interval [code][0, 255][/code]. Any other value will overflow and wrap around.\n\t\t\t\tTo store a signed integer, use [method store_64], or convert it manually (see [method store_16] for an example)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "buffer",
              "type": "PoolByteArray",
              "index": "0"
            },
            "name": "store_buffer",
            "description": "Stores the given array of bytes in the file."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "values",
                "type": "PoolStringArray",
                "index": "0"
              },
              {
                "default": "\",\"",
                "name": "delim",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "store_csv_line",
            "description": "Store the given [PoolStringArray] in the file as a line formatted in the CSV (Comma-Separated Values) format. You can pass a different delimiter [code]delim[/code] to use other than the default [code]\",\"[/code] (comma). This delimiter must be one-character long.\n\t\t\t\tText will be encoded as UTF-8."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "value",
              "type": "float",
              "index": "0"
            },
            "name": "store_double",
            "description": "Stores a floating-point number as 64 bits in the file."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "value",
              "type": "float",
              "index": "0"
            },
            "name": "store_float",
            "description": "Stores a floating-point number as 32 bits in the file."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "line",
              "type": "String",
              "index": "0"
            },
            "name": "store_line",
            "description": "Appends [code]line[/code] to the file followed by a line return character ([code]\\n[/code]), encoding the text as UTF-8."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "string",
              "type": "String",
              "index": "0"
            },
            "name": "store_pascal_string",
            "description": "Stores the given [String] as a line in the file in Pascal format (i.e. also store the length of the string).\n\t\t\t\tText will be encoded as UTF-8."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "value",
              "type": "float",
              "index": "0"
            },
            "name": "store_real",
            "description": "Stores a floating-point number in the file."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "string",
              "type": "String",
              "index": "0"
            },
            "name": "store_string",
            "description": "Appends [code]string[/code] to the file without a line return, encoding the text as UTF-8."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "value",
                "type": "Variant",
                "index": "0"
              },
              {
                "default": "false",
                "name": "full_objects",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "store_var",
            "description": "Stores any Variant value in the file. If [code]full_objects[/code] is [code]true[/code], encoding objects is allowed (and can potentially include code).\n\t\t\t\t[b]Note:[/b] Not all properties are included. Only properties that are configured with the [constant PROPERTY_USAGE_STORAGE] flag set will be serialized. You can add a new usage flag to a property by overriding the [method Object._get_property_list] method in your class. You can also check how property usage is configured by calling [method Object._get_property_list]. See [enum PropertyUsageFlags] for the possible usage flags."
          }
        ]
      },
      "name": "File",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "1",
            "name": "READ",
            "enum": "ModeFlags"
          },
          {
            "value": "2",
            "name": "WRITE",
            "enum": "ModeFlags"
          },
          {
            "value": "3",
            "name": "READ_WRITE",
            "enum": "ModeFlags"
          },
          {
            "value": "7",
            "name": "WRITE_READ",
            "enum": "ModeFlags"
          },
          {
            "value": "0",
            "name": "COMPRESSION_FASTLZ",
            "enum": "CompressionMode"
          },
          {
            "value": "1",
            "name": "COMPRESSION_DEFLATE",
            "enum": "CompressionMode"
          },
          {
            "value": "2",
            "name": "COMPRESSION_ZSTD",
            "enum": "CompressionMode"
          },
          {
            "value": "3",
            "name": "COMPRESSION_GZIP",
            "enum": "CompressionMode"
          }
        ]
      },
      "brief_description": "Type to handle file reading and writing operations.",
      "description": "File type. This is used to permanently store data into the user device's file system and to read from it. This can be used to store game save data or player configuration files, for example.\n\t\tHere's a sample on how to write and read from a file:\n\t\t[codeblock]\n\t\tfunc save(content):\n\t\t    var file = File.new()\n\t\t    file.open(\"user://save_game.dat\", File.WRITE)\n\t\t    file.store_string(content)\n\t\t    file.close()\n\n\t\tfunc load():\n\t\t    var file = File.new()\n\t\t    file.open(\"user://save_game.dat\", File.READ)\n\t\t    var content = file.get_as_text()\n\t\t    file.close()\n\t\t    return content\n\t\t[/codeblock]\n\t\tIn the example above, the file will be saved in the user data folder as specified in the [url=https://docs.godotengine.org/en/3.3/tutorials/io/data_paths.html]Data paths[/url] documentation.\n\t\t[b]Note:[/b] To access project resources once exported, it is recommended to use [ResourceLoader] instead of the [File] API, as some files are converted to engine-specific formats and their original source files might not be present in the exported PCK package.\n\t\t[b]Note:[/b] Files are automatically closed only if the process exits \"normally\" (such as by clicking the window manager's close button or pressing [b]Alt + F4[/b]). If you stop the project execution by pressing [b]F8[/b] while the project is running, the file won't be closed as the game process will be killed. You can work around this by calling [method flush] at regular intervals."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://en.wikipedia.org/wiki/Double-precision_floating-point_format",
            "title": "Wikipedia: Double-precision floating-point format"
          },
          {
            "value": "https://en.wikipedia.org/wiki/Single-precision_floating-point_format",
            "title": "Wikipedia: Single-precision floating-point format"
          }
        ]
      },
      "methods": {
        "method": [
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "from",
              "type": "bool",
              "index": "0"
            },
            "name": "float",
            "description": "Cast a [bool] value to a floating-point value, [code]float(true)[/code] will be equal to 1.0 and [code]float(false)[/code] will be equal to 0.0."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "from",
              "type": "int",
              "index": "0"
            },
            "name": "float",
            "description": "Cast an [int] value to a floating-point value, [code]float(1)[/code] will be equal to 1.0."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "from",
              "type": "String",
              "index": "0"
            },
            "name": "float",
            "description": "Cast a [String] value to a floating-point value. This method accepts float value strings like [code]\"1.23\"[/code] and exponential notation strings for its parameter so calling [code]float(\"1e3\")[/code] will return 1000.0 and calling [code]float(\"1e-3\")[/code] will return 0.001. Calling this method with an invalid float string will return 0. This method stops parsing at the first invalid character and will return the parsed result so far, so calling [code]float(\"1a3\")[/code] will return 1 while calling [code]float(\"1e3a2\")[/code] will return 1000.0."
          }
        ]
      },
      "name": "float",
      "version": "3.3",
      "constants": {},
      "brief_description": "Float built-in type.",
      "description": "The [float] built-in type is a 64-bit double-precision floating-point number, equivalent to [code]double[/code] in C++. This type has 14 reliable decimal digits of precision. The [float] type can be stored in [Variant], which is the generic type used by the engine. The maximum value of [float] is approximately [code]1.79769e308[/code], and the minimum is approximately [code]-1.79769e308[/code].\n\t\tMost methods and properties in the engine use 32-bit single-precision floating-point numbers instead, equivalent to [code]float[/code] in C++, which have 6 reliable decimal digits of precision. For data structures such as [Vector2] and [Vector3], Godot uses 32-bit floating-point numbers.\n\t\tMath done using the [float] type is not guaranteed to be exact or deterministic, and will often result in small errors. You should usually use the [method @GDScript.is_equal_approx] and [method @GDScript.is_zero_approx] methods instead of [code]==[/code] to compare [float] values for equality."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "canvas_item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "string",
                "type": "String",
                "index": "2"
              },
              {
                "default": "Color( 1, 1, 1, 1 )",
                "name": "modulate",
                "type": "Color",
                "index": "3"
              },
              {
                "default": "-1",
                "name": "clip_w",
                "type": "int",
                "index": "4"
              },
              {
                "default": "Color( 1, 1, 1, 1 )",
                "name": "outline_modulate",
                "type": "Color",
                "index": "5"
              }
            ],
            "qualifiers": "const",
            "name": "draw",
            "description": "Draw [code]string[/code] into a canvas item using the font at a given position, with [code]modulate[/code] color, and optionally clipping the width. [code]position[/code] specifies the baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis.\n\t\t\t\tSee also [method CanvasItem.draw_string]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "canvas_item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "char",
                "type": "int",
                "index": "2"
              },
              {
                "default": "-1",
                "name": "next",
                "type": "int",
                "index": "3"
              },
              {
                "default": "Color( 1, 1, 1, 1 )",
                "name": "modulate",
                "type": "Color",
                "index": "4"
              },
              {
                "default": "false",
                "name": "outline",
                "type": "bool",
                "index": "5"
              }
            ],
            "qualifiers": "const",
            "name": "draw_char",
            "description": "Draw character [code]char[/code] into a canvas item using the font at a given position, with [code]modulate[/code] color, and optionally kerning if [code]next[/code] is passed. clipping the width. [code]position[/code] specifies the baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis. The width used by the character is returned, making this function useful for drawing strings character by character."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_ascent",
            "description": "Returns the font ascent (number of pixels above the baseline)."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "char",
                "type": "int",
                "index": "0"
              },
              {
                "default": "0",
                "name": "next",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_char_size",
            "description": "Returns the size of a character, optionally taking kerning into account if the next character is provided. Note that the height returned is the font height (see [method get_height]) and has no relation to the glyph height."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_descent",
            "description": "Returns the font descent (number of pixels below the baseline)."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_height",
            "description": "Returns the total font height (ascent plus descent) in pixels."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "string",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_string_size",
            "description": "Returns the size of a string, taking kerning and advance into account. Note that the height returned is the font height (see [method get_height]) and has no relation to the string."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "string",
                "type": "String",
                "index": "0"
              },
              {
                "name": "width",
                "type": "float",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_wordwrap_string_size",
            "description": "Returns the size that the string would have with word wrapping enabled with a fixed [code]width[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "has_outline",
            "description": "Returns [code]true[/code] if the font has an outline."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_distance_field_hint",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "name": "update_changes",
            "description": "After editing a font (changing size, ascent, char rects, etc.). Call this function to propagate changes to controls that might use it."
          }
        ]
      },
      "name": "Font",
      "version": "3.3",
      "constants": {},
      "brief_description": "Internationalized font and text drawing support.",
      "description": "Font contains a Unicode-compatible character set, as well as the ability to draw it with variable width, ascent, descent and kerning. For creating fonts from TTF files (or other font formats), see the editor support for fonts.\n\t\t[b]Note:[/b] If a DynamicFont doesn't contain a character used in a string, the character in question will be replaced with codepoint [code]0xfffd[/code] if it's available in the DynamicFont. If this replacement character isn't available in the DynamicFont, the character will be hidden without displaying any replacement character in the string.\n\t\t[b]Note:[/b] If a BitmapFont doesn't contain a character used in a string, the character in question will be hidden without displaying any replacement character in the string."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "\"\"",
          "value": "The name of the referenced function.",
          "setter": "set_function",
          "name": "function",
          "getter": "get_function",
          "type": "String"
        }
      },
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Variant"
            },
            "qualifiers": "vararg",
            "name": "call_func",
            "description": "Calls the referenced function previously set in [member function] or [method @GDScript.funcref]."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "arg_array",
              "type": "Array",
              "index": "0"
            },
            "name": "call_funcv",
            "description": "Calls the referenced function previously set in [member function] or [method @GDScript.funcref]. Contrarily to [method call_func], this method does not support a variable number of arguments but expects all parameters to be passed via a single [Array]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_valid",
            "description": "Returns whether the object still exists and has the function assigned."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "instance",
              "type": "Object",
              "index": "0"
            },
            "name": "set_instance",
            "description": "The object containing the referenced function. This object must be of a type actually inheriting from [Object], not a built-in type such as [int], [Vector2] or [Dictionary]."
          }
        ]
      },
      "name": "FuncRef",
      "version": "3.3",
      "constants": {},
      "brief_description": "Reference to a function in an object.",
      "description": "In GDScript, functions are not [i]first-class objects[/i]. This means it is impossible to store them directly as variables, return them from another function, or pass them as arguments.\n\t\tHowever, by creating a [FuncRef] using the [method @GDScript.funcref] function, a reference to a function in a given object can be created, passed around and called."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "1.0",
            "value": "The amount of rotational damping across the X axis.\n\t\t\tThe lower, the longer an impulse from one side takes to travel to the other side.",
            "setter": "set_param_x",
            "name": "angular_limit_x/damping",
            "getter": "get_param_x",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], rotation across the X axis is limited.",
            "setter": "set_flag_x",
            "name": "angular_limit_x/enabled",
            "getter": "get_flag_x",
            "type": "bool"
          },
          {
            "default": "0.5",
            "value": "When rotating across the X axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.",
            "setter": "set_param_x",
            "name": "angular_limit_x/erp",
            "getter": "get_param_x",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The maximum amount of force that can occur, when rotating around the X axis.",
            "setter": "set_param_x",
            "name": "angular_limit_x/force_limit",
            "getter": "get_param_x",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The minimum rotation in negative direction to break loose and rotate around the X axis.",
            "setter": "_set_angular_lo_limit_x",
            "name": "angular_limit_x/lower_angle",
            "getter": "_get_angular_lo_limit_x",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The amount of rotational restitution across the X axis. The lower, the more restitution occurs.",
            "setter": "set_param_x",
            "name": "angular_limit_x/restitution",
            "getter": "get_param_x",
            "type": "float"
          },
          {
            "default": "0.5",
            "value": "The speed of all rotations across the X axis.",
            "setter": "set_param_x",
            "name": "angular_limit_x/softness",
            "getter": "get_param_x",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The minimum rotation in positive direction to break loose and rotate around the X axis.",
            "setter": "_set_angular_hi_limit_x",
            "name": "angular_limit_x/upper_angle",
            "getter": "_get_angular_hi_limit_x",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The amount of rotational damping across the Y axis. The lower, the more dampening occurs.",
            "setter": "set_param_y",
            "name": "angular_limit_y/damping",
            "getter": "get_param_y",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], rotation across the Y axis is limited.",
            "setter": "set_flag_y",
            "name": "angular_limit_y/enabled",
            "getter": "get_flag_y",
            "type": "bool"
          },
          {
            "default": "0.5",
            "value": "When rotating across the Y axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.",
            "setter": "set_param_y",
            "name": "angular_limit_y/erp",
            "getter": "get_param_y",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The maximum amount of force that can occur, when rotating around the Y axis.",
            "setter": "set_param_y",
            "name": "angular_limit_y/force_limit",
            "getter": "get_param_y",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The minimum rotation in negative direction to break loose and rotate around the Y axis.",
            "setter": "_set_angular_lo_limit_y",
            "name": "angular_limit_y/lower_angle",
            "getter": "_get_angular_lo_limit_y",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The amount of rotational restitution across the Y axis. The lower, the more restitution occurs.",
            "setter": "set_param_y",
            "name": "angular_limit_y/restitution",
            "getter": "get_param_y",
            "type": "float"
          },
          {
            "default": "0.5",
            "value": "The speed of all rotations across the Y axis.",
            "setter": "set_param_y",
            "name": "angular_limit_y/softness",
            "getter": "get_param_y",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The minimum rotation in positive direction to break loose and rotate around the Y axis.",
            "setter": "_set_angular_hi_limit_y",
            "name": "angular_limit_y/upper_angle",
            "getter": "_get_angular_hi_limit_y",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The amount of rotational damping across the Z axis. The lower, the more dampening occurs.",
            "setter": "set_param_z",
            "name": "angular_limit_z/damping",
            "getter": "get_param_z",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], rotation across the Z axis is limited.",
            "setter": "set_flag_z",
            "name": "angular_limit_z/enabled",
            "getter": "get_flag_z",
            "type": "bool"
          },
          {
            "default": "0.5",
            "value": "When rotating across the Z axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.",
            "setter": "set_param_z",
            "name": "angular_limit_z/erp",
            "getter": "get_param_z",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The maximum amount of force that can occur, when rotating around the Z axis.",
            "setter": "set_param_z",
            "name": "angular_limit_z/force_limit",
            "getter": "get_param_z",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The minimum rotation in negative direction to break loose and rotate around the Z axis.",
            "setter": "_set_angular_lo_limit_z",
            "name": "angular_limit_z/lower_angle",
            "getter": "_get_angular_lo_limit_z",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The amount of rotational restitution across the Z axis. The lower, the more restitution occurs.",
            "setter": "set_param_z",
            "name": "angular_limit_z/restitution",
            "getter": "get_param_z",
            "type": "float"
          },
          {
            "default": "0.5",
            "value": "The speed of all rotations across the Z axis.",
            "setter": "set_param_z",
            "name": "angular_limit_z/softness",
            "getter": "get_param_z",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The minimum rotation in positive direction to break loose and rotate around the Z axis.",
            "setter": "_set_angular_hi_limit_z",
            "name": "angular_limit_z/upper_angle",
            "getter": "_get_angular_hi_limit_z",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], a rotating motor at the X axis is enabled.",
            "setter": "set_flag_x",
            "name": "angular_motor_x/enabled",
            "getter": "get_flag_x",
            "type": "bool"
          },
          {
            "default": "300.0",
            "value": "Maximum acceleration for the motor at the X axis.",
            "setter": "set_param_x",
            "name": "angular_motor_x/force_limit",
            "getter": "get_param_x",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Target speed for the motor at the X axis.",
            "setter": "set_param_x",
            "name": "angular_motor_x/target_velocity",
            "getter": "get_param_x",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], a rotating motor at the Y axis is enabled.",
            "setter": "set_flag_y",
            "name": "angular_motor_y/enabled",
            "getter": "get_flag_y",
            "type": "bool"
          },
          {
            "default": "300.0",
            "value": "Maximum acceleration for the motor at the Y axis.",
            "setter": "set_param_y",
            "name": "angular_motor_y/force_limit",
            "getter": "get_param_y",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Target speed for the motor at the Y axis.",
            "setter": "set_param_y",
            "name": "angular_motor_y/target_velocity",
            "getter": "get_param_y",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], a rotating motor at the Z axis is enabled.",
            "setter": "set_flag_z",
            "name": "angular_motor_z/enabled",
            "getter": "get_flag_z",
            "type": "bool"
          },
          {
            "default": "300.0",
            "value": "Maximum acceleration for the motor at the Z axis.",
            "setter": "set_param_z",
            "name": "angular_motor_z/force_limit",
            "getter": "get_param_z",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Target speed for the motor at the Z axis.",
            "setter": "set_param_z",
            "name": "angular_motor_z/target_velocity",
            "getter": "get_param_z",
            "type": "float"
          },
          {
            "default": "0.0",
            "setter": "set_param_x",
            "name": "angular_spring_x/damping",
            "getter": "get_param_x",
            "type": "float"
          },
          {
            "default": "false",
            "setter": "set_flag_x",
            "name": "angular_spring_x/enabled",
            "getter": "get_flag_x",
            "type": "bool"
          },
          {
            "default": "0.0",
            "setter": "set_param_x",
            "name": "angular_spring_x/equilibrium_point",
            "getter": "get_param_x",
            "type": "float"
          },
          {
            "default": "0.0",
            "setter": "set_param_x",
            "name": "angular_spring_x/stiffness",
            "getter": "get_param_x",
            "type": "float"
          },
          {
            "default": "0.0",
            "setter": "set_param_y",
            "name": "angular_spring_y/damping",
            "getter": "get_param_y",
            "type": "float"
          },
          {
            "default": "false",
            "setter": "set_flag_y",
            "name": "angular_spring_y/enabled",
            "getter": "get_flag_y",
            "type": "bool"
          },
          {
            "default": "0.0",
            "setter": "set_param_y",
            "name": "angular_spring_y/equilibrium_point",
            "getter": "get_param_y",
            "type": "float"
          },
          {
            "default": "0.0",
            "setter": "set_param_y",
            "name": "angular_spring_y/stiffness",
            "getter": "get_param_y",
            "type": "float"
          },
          {
            "default": "0.0",
            "setter": "set_param_z",
            "name": "angular_spring_z/damping",
            "getter": "get_param_z",
            "type": "float"
          },
          {
            "default": "false",
            "setter": "set_flag_z",
            "name": "angular_spring_z/enabled",
            "getter": "get_flag_z",
            "type": "bool"
          },
          {
            "default": "0.0",
            "setter": "set_param_z",
            "name": "angular_spring_z/equilibrium_point",
            "getter": "get_param_z",
            "type": "float"
          },
          {
            "default": "0.0",
            "setter": "set_param_z",
            "name": "angular_spring_z/stiffness",
            "getter": "get_param_z",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The amount of damping that happens at the X motion.",
            "setter": "set_param_x",
            "name": "linear_limit_x/damping",
            "getter": "get_param_x",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the linear motion across the X axis is limited.",
            "setter": "set_flag_x",
            "name": "linear_limit_x/enabled",
            "getter": "get_flag_x",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "The minimum difference between the pivot points' X axis.",
            "setter": "set_param_x",
            "name": "linear_limit_x/lower_distance",
            "getter": "get_param_x",
            "type": "float"
          },
          {
            "default": "0.5",
            "value": "The amount of restitution on the X axis movement. The lower, the more momentum gets lost.",
            "setter": "set_param_x",
            "name": "linear_limit_x/restitution",
            "getter": "get_param_x",
            "type": "float"
          },
          {
            "default": "0.7",
            "value": "A factor applied to the movement across the X axis. The lower, the slower the movement.",
            "setter": "set_param_x",
            "name": "linear_limit_x/softness",
            "getter": "get_param_x",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The maximum difference between the pivot points' X axis.",
            "setter": "set_param_x",
            "name": "linear_limit_x/upper_distance",
            "getter": "get_param_x",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The amount of damping that happens at the Y motion.",
            "setter": "set_param_y",
            "name": "linear_limit_y/damping",
            "getter": "get_param_y",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the linear motion across the Y axis is limited.",
            "setter": "set_flag_y",
            "name": "linear_limit_y/enabled",
            "getter": "get_flag_y",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "The minimum difference between the pivot points' Y axis.",
            "setter": "set_param_y",
            "name": "linear_limit_y/lower_distance",
            "getter": "get_param_y",
            "type": "float"
          },
          {
            "default": "0.5",
            "value": "The amount of restitution on the Y axis movement. The lower, the more momentum gets lost.",
            "setter": "set_param_y",
            "name": "linear_limit_y/restitution",
            "getter": "get_param_y",
            "type": "float"
          },
          {
            "default": "0.7",
            "value": "A factor applied to the movement across the Y axis. The lower, the slower the movement.",
            "setter": "set_param_y",
            "name": "linear_limit_y/softness",
            "getter": "get_param_y",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The maximum difference between the pivot points' Y axis.",
            "setter": "set_param_y",
            "name": "linear_limit_y/upper_distance",
            "getter": "get_param_y",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The amount of damping that happens at the Z motion.",
            "setter": "set_param_z",
            "name": "linear_limit_z/damping",
            "getter": "get_param_z",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the linear motion across the Z axis is limited.",
            "setter": "set_flag_z",
            "name": "linear_limit_z/enabled",
            "getter": "get_flag_z",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "The minimum difference between the pivot points' Z axis.",
            "setter": "set_param_z",
            "name": "linear_limit_z/lower_distance",
            "getter": "get_param_z",
            "type": "float"
          },
          {
            "default": "0.5",
            "value": "The amount of restitution on the Z axis movement. The lower, the more momentum gets lost.",
            "setter": "set_param_z",
            "name": "linear_limit_z/restitution",
            "getter": "get_param_z",
            "type": "float"
          },
          {
            "default": "0.7",
            "value": "A factor applied to the movement across the Z axis. The lower, the slower the movement.",
            "setter": "set_param_z",
            "name": "linear_limit_z/softness",
            "getter": "get_param_z",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The maximum difference between the pivot points' Z axis.",
            "setter": "set_param_z",
            "name": "linear_limit_z/upper_distance",
            "getter": "get_param_z",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], then there is a linear motor on the X axis. It will attempt to reach the target velocity while staying within the force limits.",
            "setter": "set_flag_x",
            "name": "linear_motor_x/enabled",
            "getter": "get_flag_x",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "The maximum force the linear motor can apply on the X axis while trying to reach the target velocity.",
            "setter": "set_param_x",
            "name": "linear_motor_x/force_limit",
            "getter": "get_param_x",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The speed that the linear motor will attempt to reach on the X axis.",
            "setter": "set_param_x",
            "name": "linear_motor_x/target_velocity",
            "getter": "get_param_x",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], then there is a linear motor on the Y axis. It will attempt to reach the target velocity while staying within the force limits.",
            "setter": "set_flag_y",
            "name": "linear_motor_y/enabled",
            "getter": "get_flag_y",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "The maximum force the linear motor can apply on the Y axis while trying to reach the target velocity.",
            "setter": "set_param_y",
            "name": "linear_motor_y/force_limit",
            "getter": "get_param_y",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The speed that the linear motor will attempt to reach on the Y axis.",
            "setter": "set_param_y",
            "name": "linear_motor_y/target_velocity",
            "getter": "get_param_y",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], then there is a linear motor on the Z axis. It will attempt to reach the target velocity while staying within the force limits.",
            "setter": "set_flag_z",
            "name": "linear_motor_z/enabled",
            "getter": "get_flag_z",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "The maximum force the linear motor can apply on the Z axis while trying to reach the target velocity.",
            "setter": "set_param_z",
            "name": "linear_motor_z/force_limit",
            "getter": "get_param_z",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The speed that the linear motor will attempt to reach on the Z axis.",
            "setter": "set_param_z",
            "name": "linear_motor_z/target_velocity",
            "getter": "get_param_z",
            "type": "float"
          },
          {
            "default": "0.01",
            "setter": "set_param_x",
            "name": "linear_spring_x/damping",
            "getter": "get_param_x",
            "type": "float"
          },
          {
            "default": "false",
            "setter": "set_flag_x",
            "name": "linear_spring_x/enabled",
            "getter": "get_flag_x",
            "type": "bool"
          },
          {
            "default": "0.0",
            "setter": "set_param_x",
            "name": "linear_spring_x/equilibrium_point",
            "getter": "get_param_x",
            "type": "float"
          },
          {
            "default": "0.01",
            "setter": "set_param_x",
            "name": "linear_spring_x/stiffness",
            "getter": "get_param_x",
            "type": "float"
          },
          {
            "default": "0.01",
            "setter": "set_param_y",
            "name": "linear_spring_y/damping",
            "getter": "get_param_y",
            "type": "float"
          },
          {
            "default": "false",
            "setter": "set_flag_y",
            "name": "linear_spring_y/enabled",
            "getter": "get_flag_y",
            "type": "bool"
          },
          {
            "default": "0.0",
            "setter": "set_param_y",
            "name": "linear_spring_y/equilibrium_point",
            "getter": "get_param_y",
            "type": "float"
          },
          {
            "default": "0.01",
            "setter": "set_param_y",
            "name": "linear_spring_y/stiffness",
            "getter": "get_param_y",
            "type": "float"
          },
          {
            "default": "0.01",
            "setter": "set_param_z",
            "name": "linear_spring_z/damping",
            "getter": "get_param_z",
            "type": "float"
          },
          {
            "default": "false",
            "setter": "set_flag_z",
            "name": "linear_spring_z/enabled",
            "getter": "get_flag_z",
            "type": "bool"
          },
          {
            "default": "0.0",
            "setter": "set_param_z",
            "name": "linear_spring_z/equilibrium_point",
            "getter": "get_param_z",
            "type": "float"
          },
          {
            "default": "0.01",
            "setter": "set_param_z",
            "name": "linear_spring_z/stiffness",
            "getter": "get_param_z",
            "type": "float"
          }
        ]
      },
      "inherits": "Joint",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "flag",
              "type": "int",
              "enum": "Generic6DOFJoint.Flag",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_flag_x",
            "description": {}
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "flag",
              "type": "int",
              "enum": "Generic6DOFJoint.Flag",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_flag_y",
            "description": {}
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "flag",
              "type": "int",
              "enum": "Generic6DOFJoint.Flag",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_flag_z",
            "description": {}
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "param",
              "type": "int",
              "enum": "Generic6DOFJoint.Param",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_param_x",
            "description": {}
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "param",
              "type": "int",
              "enum": "Generic6DOFJoint.Param",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_param_y",
            "description": {}
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "param",
              "type": "int",
              "enum": "Generic6DOFJoint.Param",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_param_z",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "flag",
                "type": "int",
                "enum": "Generic6DOFJoint.Flag",
                "index": "0"
              },
              {
                "name": "value",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_flag_x",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "flag",
                "type": "int",
                "enum": "Generic6DOFJoint.Flag",
                "index": "0"
              },
              {
                "name": "value",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_flag_y",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "flag",
                "type": "int",
                "enum": "Generic6DOFJoint.Flag",
                "index": "0"
              },
              {
                "name": "value",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_flag_z",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "param",
                "type": "int",
                "enum": "Generic6DOFJoint.Param",
                "index": "0"
              },
              {
                "name": "value",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_param_x",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "param",
                "type": "int",
                "enum": "Generic6DOFJoint.Param",
                "index": "0"
              },
              {
                "name": "value",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_param_y",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "param",
                "type": "int",
                "enum": "Generic6DOFJoint.Param",
                "index": "0"
              },
              {
                "name": "value",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_param_z",
            "description": {}
          }
        ]
      },
      "name": "Generic6DOFJoint",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "PARAM_LINEAR_LOWER_LIMIT",
            "enum": "Param"
          },
          {
            "value": "1",
            "name": "PARAM_LINEAR_UPPER_LIMIT",
            "enum": "Param"
          },
          {
            "value": "2",
            "name": "PARAM_LINEAR_LIMIT_SOFTNESS",
            "enum": "Param"
          },
          {
            "value": "3",
            "name": "PARAM_LINEAR_RESTITUTION",
            "enum": "Param"
          },
          {
            "value": "4",
            "name": "PARAM_LINEAR_DAMPING",
            "enum": "Param"
          },
          {
            "value": "5",
            "name": "PARAM_LINEAR_MOTOR_TARGET_VELOCITY",
            "enum": "Param"
          },
          {
            "value": "6",
            "name": "PARAM_LINEAR_MOTOR_FORCE_LIMIT",
            "enum": "Param"
          },
          {
            "value": "7",
            "name": "PARAM_LINEAR_SPRING_STIFFNESS",
            "enum": "Param"
          },
          {
            "value": "8",
            "name": "PARAM_LINEAR_SPRING_DAMPING",
            "enum": "Param"
          },
          {
            "value": "9",
            "name": "PARAM_LINEAR_SPRING_EQUILIBRIUM_POINT",
            "enum": "Param"
          },
          {
            "value": "10",
            "name": "PARAM_ANGULAR_LOWER_LIMIT",
            "enum": "Param"
          },
          {
            "value": "11",
            "name": "PARAM_ANGULAR_UPPER_LIMIT",
            "enum": "Param"
          },
          {
            "value": "12",
            "name": "PARAM_ANGULAR_LIMIT_SOFTNESS",
            "enum": "Param"
          },
          {
            "value": "13",
            "name": "PARAM_ANGULAR_DAMPING",
            "enum": "Param"
          },
          {
            "value": "14",
            "name": "PARAM_ANGULAR_RESTITUTION",
            "enum": "Param"
          },
          {
            "value": "15",
            "name": "PARAM_ANGULAR_FORCE_LIMIT",
            "enum": "Param"
          },
          {
            "value": "16",
            "name": "PARAM_ANGULAR_ERP",
            "enum": "Param"
          },
          {
            "value": "17",
            "name": "PARAM_ANGULAR_MOTOR_TARGET_VELOCITY",
            "enum": "Param"
          },
          {
            "value": "18",
            "name": "PARAM_ANGULAR_MOTOR_FORCE_LIMIT",
            "enum": "Param"
          },
          {
            "value": "19",
            "name": "PARAM_ANGULAR_SPRING_STIFFNESS",
            "enum": "Param"
          },
          {
            "value": "20",
            "name": "PARAM_ANGULAR_SPRING_DAMPING",
            "enum": "Param"
          },
          {
            "value": "21",
            "name": "PARAM_ANGULAR_SPRING_EQUILIBRIUM_POINT",
            "enum": "Param"
          },
          {
            "value": "22",
            "name": "PARAM_MAX",
            "enum": "Param"
          },
          {
            "value": "0",
            "name": "FLAG_ENABLE_LINEAR_LIMIT",
            "enum": "Flag"
          },
          {
            "value": "1",
            "name": "FLAG_ENABLE_ANGULAR_LIMIT",
            "enum": "Flag"
          },
          {
            "value": "3",
            "name": "FLAG_ENABLE_LINEAR_SPRING",
            "enum": "Flag"
          },
          {
            "value": "2",
            "name": "FLAG_ENABLE_ANGULAR_SPRING",
            "enum": "Flag"
          },
          {
            "value": "4",
            "name": "FLAG_ENABLE_MOTOR",
            "enum": "Flag"
          },
          {
            "value": "5",
            "name": "FLAG_ENABLE_LINEAR_MOTOR",
            "enum": "Flag"
          },
          {
            "value": "6",
            "name": "FLAG_MAX",
            "enum": "Flag"
          }
        ]
      },
      "brief_description": "The generic 6-degrees-of-freedom joint can implement a variety of joint types by locking certain axes' rotation or translation.",
      "description": "The first 3 DOF axes are linear axes, which represent translation of Bodies, and the latter 3 DOF axes represent the angular motion. Each axis can be either locked, or limited."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "1",
            "value": "The selected shadow casting flag. See [enum ShadowCastingSetting] for possible values.",
            "setter": "set_cast_shadows_setting",
            "name": "cast_shadow",
            "getter": "get_cast_shadows_setting",
            "type": "int",
            "enum": "GeometryInstance.ShadowCastingSetting"
          },
          {
            "default": "0.0",
            "value": "The extra distance added to the GeometryInstance's bounding box ([AABB]) to increase its cull box.",
            "setter": "set_extra_cull_margin",
            "name": "extra_cull_margin",
            "getter": "get_extra_cull_margin",
            "type": "float"
          },
          {
            "default": "true",
            "value": "When disabled, the mesh will be taken into account when computing indirect lighting, but the resulting lightmap will not be saved. Useful for emissive only materials or shadow casters.",
            "setter": "set_generate_lightmap",
            "name": "generate_lightmap",
            "getter": "get_generate_lightmap",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "Scale factor for the generated baked lightmap. Useful for adding detail to certain mesh instances.",
            "setter": "set_lightmap_scale",
            "name": "lightmap_scale",
            "getter": "get_lightmap_scale",
            "type": "int",
            "enum": "GeometryInstance.LightmapScale"
          },
          {
            "default": "0.0",
            "value": "The GeometryInstance's max LOD distance.\n\t\t\t[b]Note:[/b] This property currently has no effect.",
            "setter": "set_lod_max_distance",
            "name": "lod_max_distance",
            "getter": "get_lod_max_distance",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The GeometryInstance's max LOD margin.\n\t\t\t[b]Note:[/b] This property currently has no effect.",
            "setter": "set_lod_max_hysteresis",
            "name": "lod_max_hysteresis",
            "getter": "get_lod_max_hysteresis",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The GeometryInstance's min LOD distance.\n\t\t\t[b]Note:[/b] This property currently has no effect.",
            "setter": "set_lod_min_distance",
            "name": "lod_min_distance",
            "getter": "get_lod_min_distance",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The GeometryInstance's min LOD margin.\n\t\t\t[b]Note:[/b] This property currently has no effect.",
            "setter": "set_lod_min_hysteresis",
            "name": "lod_min_hysteresis",
            "getter": "get_lod_min_hysteresis",
            "type": "float"
          },
          {
            "value": "The material override for the whole geometry.\n\t\t\tIf a material is assigned to this property, it will be used instead of any material set in any material slot of the mesh.",
            "setter": "set_material_override",
            "name": "material_override",
            "getter": "get_material_override",
            "type": "Material"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], this GeometryInstance will be used when baking lights using a [GIProbe] or [BakedLightmap].",
            "setter": "set_flag",
            "name": "use_in_baked_light",
            "getter": "get_flag",
            "type": "bool"
          }
        ]
      },
      "inherits": "VisualInstance",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "flag",
              "type": "int",
              "enum": "GeometryInstance.Flags",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_flag",
            "description": "Returns the [enum GeometryInstance.Flags] that have been set for this object."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "aabb",
              "type": "AABB",
              "index": "0"
            },
            "name": "set_custom_aabb",
            "description": "Overrides the bounding box of this node with a custom one. To remove it, set an [AABB] with all fields set to zero."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "flag",
                "type": "int",
                "enum": "GeometryInstance.Flags",
                "index": "0"
              },
              {
                "name": "value",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_flag",
            "description": "Sets the [enum GeometryInstance.Flags] specified. See [enum GeometryInstance.Flags] for options."
          }
        ]
      },
      "name": "GeometryInstance",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "LIGHTMAP_SCALE_1X",
            "enum": "LightmapScale"
          },
          {
            "value": "1",
            "name": "LIGHTMAP_SCALE_2X",
            "enum": "LightmapScale"
          },
          {
            "value": "2",
            "name": "LIGHTMAP_SCALE_4X",
            "enum": "LightmapScale"
          },
          {
            "value": "3",
            "name": "LIGHTMAP_SCALE_8X",
            "enum": "LightmapScale"
          },
          {
            "value": "4",
            "name": "LIGHTMAP_SCALE_MAX",
            "enum": "LightmapScale"
          },
          {
            "value": "0",
            "name": "SHADOW_CASTING_SETTING_OFF",
            "enum": "ShadowCastingSetting"
          },
          {
            "value": "1",
            "name": "SHADOW_CASTING_SETTING_ON",
            "enum": "ShadowCastingSetting"
          },
          {
            "value": "2",
            "name": "SHADOW_CASTING_SETTING_DOUBLE_SIDED",
            "enum": "ShadowCastingSetting"
          },
          {
            "value": "3",
            "name": "SHADOW_CASTING_SETTING_SHADOWS_ONLY",
            "enum": "ShadowCastingSetting"
          },
          {
            "value": "0",
            "name": "FLAG_USE_BAKED_LIGHT",
            "enum": "Flags"
          },
          {
            "value": "1",
            "name": "FLAG_DRAW_NEXT_FRAME_IF_VISIBLE",
            "enum": "Flags"
          },
          {
            "value": "2",
            "name": "FLAG_MAX",
            "enum": "Flags"
          }
        ]
      },
      "brief_description": "Base node for geometry-based visual instances.",
      "description": "Base node for geometry-based visual instances. Shares some common functionality like visibility and custom materials."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "extents",
              "type": "Vector3",
              "index": "0"
            },
            "name": "build_box_planes",
            "description": "Returns an array with 6 [Plane]s that describe the sides of a box centered at the origin. The box size is defined by [code]extents[/code], which represents one (positive) corner of the box (i.e. half its actual size)."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "radius",
                "type": "float",
                "index": "0"
              },
              {
                "name": "height",
                "type": "float",
                "index": "1"
              },
              {
                "name": "sides",
                "type": "int",
                "index": "2"
              },
              {
                "name": "lats",
                "type": "int",
                "index": "3"
              },
              {
                "default": "2",
                "name": "axis",
                "type": "int",
                "enum": "Vector3.Axis",
                "index": "4"
              }
            ],
            "name": "build_capsule_planes",
            "description": "Returns an array of [Plane]s closely bounding a faceted capsule centered at the origin with radius [code]radius[/code] and height [code]height[/code]. The parameter [code]sides[/code] defines how many planes will be generated for the side part of the capsule, whereas [code]lats[/code] gives the number of latitudinal steps at the bottom and top of the capsule. The parameter [code]axis[/code] describes the axis along which the capsule is oriented (0 for X, 1 for Y, 2 for Z)."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "radius",
                "type": "float",
                "index": "0"
              },
              {
                "name": "height",
                "type": "float",
                "index": "1"
              },
              {
                "name": "sides",
                "type": "int",
                "index": "2"
              },
              {
                "default": "2",
                "name": "axis",
                "type": "int",
                "enum": "Vector3.Axis",
                "index": "3"
              }
            ],
            "name": "build_cylinder_planes",
            "description": "Returns an array of [Plane]s closely bounding a faceted cylinder centered at the origin with radius [code]radius[/code] and height [code]height[/code]. The parameter [code]sides[/code] defines how many planes will be generated for the round part of the cylinder. The parameter [code]axis[/code] describes the axis along which the cylinder is oriented (0 for X, 1 for Y, 2 for Z)."
          },
          {
            "return": {
              "type": "PoolVector3Array"
            },
            "argument": [
              {
                "name": "points",
                "type": "PoolVector3Array",
                "index": "0"
              },
              {
                "name": "plane",
                "type": "Plane",
                "index": "1"
              }
            ],
            "name": "clip_polygon",
            "description": "Clips the polygon defined by the points in [code]points[/code] against the [code]plane[/code] and returns the points of the clipped polygon."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "polygon_a",
                "type": "PoolVector2Array",
                "index": "0"
              },
              {
                "name": "polygon_b",
                "type": "PoolVector2Array",
                "index": "1"
              }
            ],
            "name": "clip_polygons_2d",
            "description": "Clips [code]polygon_a[/code] against [code]polygon_b[/code] and returns an array of clipped polygons. This performs [constant OPERATION_DIFFERENCE] between polygons. Returns an empty array if [code]polygon_b[/code] completely overlaps [code]polygon_a[/code].\n\t\t\t\tIf [code]polygon_b[/code] is enclosed by [code]polygon_a[/code], returns an outer polygon (boundary) and inner polygon (hole) which could be distinguished by calling [method is_polygon_clockwise]."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "polyline",
                "type": "PoolVector2Array",
                "index": "0"
              },
              {
                "name": "polygon",
                "type": "PoolVector2Array",
                "index": "1"
              }
            ],
            "name": "clip_polyline_with_polygon_2d",
            "description": "Clips [code]polyline[/code] against [code]polygon[/code] and returns an array of clipped polylines. This performs [constant OPERATION_DIFFERENCE] between the polyline and the polygon. This operation can be thought of as cutting a line with a closed shape."
          },
          {
            "return": {
              "type": "PoolVector2Array"
            },
            "argument": {
              "name": "points",
              "type": "PoolVector2Array",
              "index": "0"
            },
            "name": "convex_hull_2d",
            "description": "Given an array of [Vector2]s, returns the convex hull as a list of points in counterclockwise order. The last point is the same as the first one."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "polygon_a",
                "type": "PoolVector2Array",
                "index": "0"
              },
              {
                "name": "polygon_b",
                "type": "PoolVector2Array",
                "index": "1"
              }
            ],
            "name": "exclude_polygons_2d",
            "description": "Mutually excludes common area defined by intersection of [code]polygon_a[/code] and [code]polygon_b[/code] (see [method intersect_polygons_2d]) and returns an array of excluded polygons. This performs [constant OPERATION_XOR] between polygons. In other words, returns all but common area between polygons.\n\t\t\t\tThe operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distinguished by calling [method is_polygon_clockwise]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": [
              {
                "name": "point",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "s1",
                "type": "Vector3",
                "index": "1"
              },
              {
                "name": "s2",
                "type": "Vector3",
                "index": "2"
              }
            ],
            "name": "get_closest_point_to_segment",
            "description": "Returns the 3D point on the 3D segment ([code]s1[/code], [code]s2[/code]) that is closest to [code]point[/code]. The returned point will always be inside the specified segment."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "point",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "s1",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "s2",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "get_closest_point_to_segment_2d",
            "description": "Returns the 2D point on the 2D segment ([code]s1[/code], [code]s2[/code]) that is closest to [code]point[/code]. The returned point will always be inside the specified segment."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": [
              {
                "name": "point",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "s1",
                "type": "Vector3",
                "index": "1"
              },
              {
                "name": "s2",
                "type": "Vector3",
                "index": "2"
              }
            ],
            "name": "get_closest_point_to_segment_uncapped",
            "description": "Returns the 3D point on the 3D line defined by ([code]s1[/code], [code]s2[/code]) that is closest to [code]point[/code]. The returned point can be inside the segment ([code]s1[/code], [code]s2[/code]) or outside of it, i.e. somewhere on the line extending from the segment."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "point",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "s1",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "s2",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "get_closest_point_to_segment_uncapped_2d",
            "description": "Returns the 2D point on the 2D line defined by ([code]s1[/code], [code]s2[/code]) that is closest to [code]point[/code]. The returned point can be inside the segment ([code]s1[/code], [code]s2[/code]) or outside of it, i.e. somewhere on the line extending from the segment."
          },
          {
            "return": {
              "type": "PoolVector3Array"
            },
            "argument": [
              {
                "name": "p1",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "p2",
                "type": "Vector3",
                "index": "1"
              },
              {
                "name": "q1",
                "type": "Vector3",
                "index": "2"
              },
              {
                "name": "q2",
                "type": "Vector3",
                "index": "3"
              }
            ],
            "name": "get_closest_points_between_segments",
            "description": "Given the two 3D segments ([code]p1[/code], [code]p2[/code]) and ([code]q1[/code], [code]q2[/code]), finds those two points on the two segments that are closest to each other. Returns a [PoolVector3Array] that contains this point on ([code]p1[/code], [code]p2[/code]) as well the accompanying point on ([code]q1[/code], [code]q2[/code])."
          },
          {
            "return": {
              "type": "PoolVector2Array"
            },
            "argument": [
              {
                "name": "p1",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "q1",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "p2",
                "type": "Vector2",
                "index": "2"
              },
              {
                "name": "q2",
                "type": "Vector2",
                "index": "3"
              }
            ],
            "name": "get_closest_points_between_segments_2d",
            "description": "Given the two 2D segments ([code]p1[/code], [code]q1[/code]) and ([code]p2[/code], [code]q2[/code]), finds those two points on the two segments that are closest to each other. Returns a [PoolVector2Array] that contains this point on ([code]p1[/code], [code]q1[/code]) as well the accompanying point on ([code]p2[/code], [code]q2[/code])."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "normal",
              "type": "Vector3",
              "index": "0"
            },
            "name": "get_uv84_normal_bit",
            "description": "Used internally by the engine."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "polygon_a",
                "type": "PoolVector2Array",
                "index": "0"
              },
              {
                "name": "polygon_b",
                "type": "PoolVector2Array",
                "index": "1"
              }
            ],
            "name": "intersect_polygons_2d",
            "description": "Intersects [code]polygon_a[/code] with [code]polygon_b[/code] and returns an array of intersected polygons. This performs [constant OPERATION_INTERSECTION] between polygons. In other words, returns common area shared by polygons. Returns an empty array if no intersection occurs.\n\t\t\t\tThe operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distinguished by calling [method is_polygon_clockwise]."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "polyline",
                "type": "PoolVector2Array",
                "index": "0"
              },
              {
                "name": "polygon",
                "type": "PoolVector2Array",
                "index": "1"
              }
            ],
            "name": "intersect_polyline_with_polygon_2d",
            "description": "Intersects [code]polyline[/code] with [code]polygon[/code] and returns an array of intersected polylines. This performs [constant OPERATION_INTERSECTION] between the polyline and the polygon. This operation can be thought of as chopping a line with a closed shape."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "point",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "circle_position",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "circle_radius",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "is_point_in_circle",
            "description": "Returns [code]true[/code] if [code]point[/code] is inside the circle or if it's located exactly [i]on[/i] the circle's boundary, otherwise returns [code]false[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "point",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "polygon",
                "type": "PoolVector2Array",
                "index": "1"
              }
            ],
            "name": "is_point_in_polygon",
            "description": "Returns [code]true[/code] if [code]point[/code] is inside [code]polygon[/code] or if it's located exactly [i]on[/i] polygon's boundary, otherwise returns [code]false[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "polygon",
              "type": "PoolVector2Array",
              "index": "0"
            },
            "name": "is_polygon_clockwise",
            "description": "Returns [code]true[/code] if [code]polygon[/code]'s vertices are ordered in clockwise order, otherwise returns [code]false[/code]."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "from_a",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "dir_a",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "from_b",
                "type": "Vector2",
                "index": "2"
              },
              {
                "name": "dir_b",
                "type": "Vector2",
                "index": "3"
              }
            ],
            "name": "line_intersects_line_2d",
            "description": "Checks if the two lines ([code]from_a[/code], [code]dir_a[/code]) and ([code]from_b[/code], [code]dir_b[/code]) intersect. If yes, return the point of intersection as [Vector2]. If no intersection takes place, returns an empty [Variant].\n\t\t\t\t[b]Note:[/b] The lines are specified using direction vectors, not end points."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "argument": {
              "name": "sizes",
              "type": "PoolVector2Array",
              "index": "0"
            },
            "name": "make_atlas",
            "description": "Given an array of [Vector2]s representing tiles, builds an atlas. The returned dictionary has two keys: [code]points[/code] is a vector of [Vector2] that specifies the positions of each tile, [code]size[/code] contains the overall size of the whole atlas as [Vector2]."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "polygon_a",
                "type": "PoolVector2Array",
                "index": "0"
              },
              {
                "name": "polygon_b",
                "type": "PoolVector2Array",
                "index": "1"
              }
            ],
            "name": "merge_polygons_2d",
            "description": "Merges (combines) [code]polygon_a[/code] and [code]polygon_b[/code] and returns an array of merged polygons. This performs [constant OPERATION_UNION] between polygons.\n\t\t\t\tThe operation may result in an outer polygon (boundary) and multiple inner polygons (holes) produced which could be distinguished by calling [method is_polygon_clockwise]."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "polygon",
                "type": "PoolVector2Array",
                "index": "0"
              },
              {
                "name": "delta",
                "type": "float",
                "index": "1"
              },
              {
                "default": "0",
                "name": "join_type",
                "type": "int",
                "enum": "Geometry.PolyJoinType",
                "index": "2"
              }
            ],
            "name": "offset_polygon_2d",
            "description": "Inflates or deflates [code]polygon[/code] by [code]delta[/code] units (pixels). If [code]delta[/code] is positive, makes the polygon grow outward. If [code]delta[/code] is negative, shrinks the polygon inward. Returns an array of polygons because inflating/deflating may result in multiple discrete polygons. Returns an empty array if [code]delta[/code] is negative and the absolute value of it approximately exceeds the minimum bounding rectangle dimensions of the polygon.\n\t\t\t\tEach polygon's vertices will be rounded as determined by [code]join_type[/code], see [enum PolyJoinType].\n\t\t\t\tThe operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distinguished by calling [method is_polygon_clockwise].\n\t\t\t\t[b]Note:[/b] To translate the polygon's vertices specifically, use the [method Transform2D.xform] method:\n\t\t\t\t[codeblock]\n\t\t\t\tvar polygon = PoolVector2Array([Vector2(0, 0), Vector2(100, 0), Vector2(100, 100), Vector2(0, 100)])\n\t\t\t\tvar offset = Vector2(50, 50)\n\t\t\t\tpolygon = Transform2D(0, offset).xform(polygon)\n\t\t\t\tprint(polygon) # prints [Vector2(50, 50), Vector2(150, 50), Vector2(150, 150), Vector2(50, 150)]\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "polyline",
                "type": "PoolVector2Array",
                "index": "0"
              },
              {
                "name": "delta",
                "type": "float",
                "index": "1"
              },
              {
                "default": "0",
                "name": "join_type",
                "type": "int",
                "enum": "Geometry.PolyJoinType",
                "index": "2"
              },
              {
                "default": "3",
                "name": "end_type",
                "type": "int",
                "enum": "Geometry.PolyEndType",
                "index": "3"
              }
            ],
            "name": "offset_polyline_2d",
            "description": "Inflates or deflates [code]polyline[/code] by [code]delta[/code] units (pixels), producing polygons. If [code]delta[/code] is positive, makes the polyline grow outward. Returns an array of polygons because inflating/deflating may result in multiple discrete polygons. If [code]delta[/code] is negative, returns an empty array.\n\t\t\t\tEach polygon's vertices will be rounded as determined by [code]join_type[/code], see [enum PolyJoinType].\n\t\t\t\tEach polygon's endpoints will be rounded as determined by [code]end_type[/code], see [enum PolyEndType].\n\t\t\t\tThe operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distinguished by calling [method is_polygon_clockwise]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "point",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "a",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "b",
                "type": "Vector2",
                "index": "2"
              },
              {
                "name": "c",
                "type": "Vector2",
                "index": "3"
              }
            ],
            "qualifiers": "const",
            "name": "point_is_inside_triangle",
            "description": "Returns if [code]point[/code] is inside the triangle specified by [code]a[/code], [code]b[/code] and [code]c[/code]."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "from",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "dir",
                "type": "Vector3",
                "index": "1"
              },
              {
                "name": "a",
                "type": "Vector3",
                "index": "2"
              },
              {
                "name": "b",
                "type": "Vector3",
                "index": "3"
              },
              {
                "name": "c",
                "type": "Vector3",
                "index": "4"
              }
            ],
            "name": "ray_intersects_triangle",
            "description": "Tests if the 3D ray starting at [code]from[/code] with the direction of [code]dir[/code] intersects the triangle specified by [code]a[/code], [code]b[/code] and [code]c[/code]. If yes, returns the point of intersection as [Vector3]. If no intersection takes place, an empty [Variant] is returned."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "segment_from",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "segment_to",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "circle_position",
                "type": "Vector2",
                "index": "2"
              },
              {
                "name": "circle_radius",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "segment_intersects_circle",
            "description": "Given the 2D segment ([code]segment_from[/code], [code]segment_to[/code]), returns the position on the segment (as a number between 0 and 1) at which the segment hits the circle that is located at position [code]circle_position[/code] and has radius [code]circle_radius[/code]. If the segment does not intersect the circle, -1 is returned (this is also the case if the line extending the segment would intersect the circle, but the segment does not)."
          },
          {
            "return": {
              "type": "PoolVector3Array"
            },
            "argument": [
              {
                "name": "from",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "to",
                "type": "Vector3",
                "index": "1"
              },
              {
                "name": "planes",
                "type": "Array",
                "index": "2"
              }
            ],
            "name": "segment_intersects_convex",
            "description": "Given a convex hull defined though the [Plane]s in the array [code]planes[/code], tests if the segment ([code]from[/code], [code]to[/code]) intersects with that hull. If an intersection is found, returns a [PoolVector3Array] containing the point the intersection and the hull's normal. If no intersecion is found, an the returned array is empty."
          },
          {
            "return": {
              "type": "PoolVector3Array"
            },
            "argument": [
              {
                "name": "from",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "to",
                "type": "Vector3",
                "index": "1"
              },
              {
                "name": "height",
                "type": "float",
                "index": "2"
              },
              {
                "name": "radius",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "segment_intersects_cylinder",
            "description": "Checks if the segment ([code]from[/code], [code]to[/code]) intersects the cylinder with height [code]height[/code] that is centered at the origin and has radius [code]radius[/code]. If no, returns an empty [PoolVector3Array]. If an intersection takes place, the returned array contains the point of intersection and the cylinder's normal at the point of intersection."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "from_a",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "to_a",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "from_b",
                "type": "Vector2",
                "index": "2"
              },
              {
                "name": "to_b",
                "type": "Vector2",
                "index": "3"
              }
            ],
            "name": "segment_intersects_segment_2d",
            "description": "Checks if the two segments ([code]from_a[/code], [code]to_a[/code]) and ([code]from_b[/code], [code]to_b[/code]) intersect. If yes, return the point of intersection as [Vector2]. If no intersection takes place, returns an empty [Variant]."
          },
          {
            "return": {
              "type": "PoolVector3Array"
            },
            "argument": [
              {
                "name": "from",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "to",
                "type": "Vector3",
                "index": "1"
              },
              {
                "name": "sphere_position",
                "type": "Vector3",
                "index": "2"
              },
              {
                "name": "sphere_radius",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "segment_intersects_sphere",
            "description": "Checks if the segment ([code]from[/code], [code]to[/code]) intersects the sphere that is located at [code]sphere_position[/code] and has radius [code]sphere_radius[/code]. If no, returns an empty [PoolVector3Array]. If yes, returns a [PoolVector3Array] containing the point of intersection and the sphere's normal at the point of intersection."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "from",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "to",
                "type": "Vector3",
                "index": "1"
              },
              {
                "name": "a",
                "type": "Vector3",
                "index": "2"
              },
              {
                "name": "b",
                "type": "Vector3",
                "index": "3"
              },
              {
                "name": "c",
                "type": "Vector3",
                "index": "4"
              }
            ],
            "name": "segment_intersects_triangle",
            "description": "Tests if the segment ([code]from[/code], [code]to[/code]) intersects the triangle [code]a[/code], [code]b[/code], [code]c[/code]. If yes, returns the point of intersection as [Vector3]. If no intersection takes place, an empty [Variant] is returned."
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "argument": {
              "name": "points",
              "type": "PoolVector2Array",
              "index": "0"
            },
            "name": "triangulate_delaunay_2d",
            "description": "Triangulates the area specified by discrete set of [code]points[/code] such that no point is inside the circumcircle of any resulting triangle. Returns a [PoolIntArray] where each triangle consists of three consecutive point indices into [code]points[/code] (i.e. the returned array will have [code]n * 3[/code] elements, with [code]n[/code] being the number of found triangles). If the triangulation did not succeed, an empty [PoolIntArray] is returned."
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "argument": {
              "name": "polygon",
              "type": "PoolVector2Array",
              "index": "0"
            },
            "name": "triangulate_polygon",
            "description": "Triangulates the polygon specified by the points in [code]polygon[/code]. Returns a [PoolIntArray] where each triangle consists of three consecutive point indices into [code]polygon[/code] (i.e. the returned array will have [code]n * 3[/code] elements, with [code]n[/code] being the number of found triangles). If the triangulation did not succeed, an empty [PoolIntArray] is returned."
          }
        ]
      },
      "name": "Geometry",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "OPERATION_UNION",
            "enum": "PolyBooleanOperation"
          },
          {
            "value": "1",
            "name": "OPERATION_DIFFERENCE",
            "enum": "PolyBooleanOperation"
          },
          {
            "value": "2",
            "name": "OPERATION_INTERSECTION",
            "enum": "PolyBooleanOperation"
          },
          {
            "value": "3",
            "name": "OPERATION_XOR",
            "enum": "PolyBooleanOperation"
          },
          {
            "value": "0",
            "name": "JOIN_SQUARE",
            "enum": "PolyJoinType"
          },
          {
            "value": "1",
            "name": "JOIN_ROUND",
            "enum": "PolyJoinType"
          },
          {
            "value": "2",
            "name": "JOIN_MITER",
            "enum": "PolyJoinType"
          },
          {
            "value": "0",
            "name": "END_POLYGON",
            "enum": "PolyEndType"
          },
          {
            "value": "1",
            "name": "END_JOINED",
            "enum": "PolyEndType"
          },
          {
            "value": "2",
            "name": "END_BUTT",
            "enum": "PolyEndType"
          },
          {
            "value": "3",
            "name": "END_SQUARE",
            "enum": "PolyEndType"
          },
          {
            "value": "4",
            "name": "END_ROUND",
            "enum": "PolyEndType"
          }
        ]
      },
      "brief_description": "Helper node to calculate generic geometry operations.",
      "description": "Geometry provides users with a set of helper functions to create geometric shapes, compute intersections between shapes, and process various other geometric operations."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/678",
          "title": "Third Person Shooter Demo"
        }
      },
      "members": {
        "member": [
          {
            "default": "0.4",
            "setter": "set_bias",
            "name": "bias",
            "getter": "get_bias",
            "type": "float"
          },
          {
            "default": "AABB( 0, 0, 0, 1, 1, 1 )",
            "setter": "set_bounds",
            "name": "bounds",
            "getter": "get_bounds",
            "type": "AABB"
          },
          {
            "default": "1.0",
            "setter": "set_cell_size",
            "name": "cell_size",
            "getter": "get_cell_size",
            "type": "float"
          },
          {
            "default": "false",
            "setter": "set_compress",
            "name": "compress",
            "getter": "is_compressed",
            "type": "bool"
          },
          {
            "default": "PoolIntArray(  )",
            "setter": "set_dynamic_data",
            "name": "dynamic_data",
            "getter": "get_dynamic_data",
            "type": "PoolIntArray"
          },
          {
            "default": "1",
            "setter": "set_dynamic_range",
            "name": "dynamic_range",
            "getter": "get_dynamic_range",
            "type": "int"
          },
          {
            "default": "1.0",
            "setter": "set_energy",
            "name": "energy",
            "getter": "get_energy",
            "type": "float"
          },
          {
            "default": "false",
            "setter": "set_interior",
            "name": "interior",
            "getter": "is_interior",
            "type": "bool"
          },
          {
            "default": "0.4",
            "setter": "set_normal_bias",
            "name": "normal_bias",
            "getter": "get_normal_bias",
            "type": "float"
          },
          {
            "default": "1.0",
            "setter": "set_propagation",
            "name": "propagation",
            "getter": "get_propagation",
            "type": "float"
          },
          {
            "default": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )",
            "setter": "set_to_cell_xform",
            "name": "to_cell_xform",
            "getter": "get_to_cell_xform",
            "type": "Transform"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {},
      "name": "GIProbeData",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/3d/gi_probes.html",
            "title": "GI probes"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "1.5",
            "value": "Offsets the lookup of the light contribution from the [GIProbe]. This can be used to avoid self-shadowing, but may introduce light leaking at higher values. This and [member normal_bias] should be played around with to minimize self-shadowing and light leaking.\n\t\t\t[b]Note:[/b] [code]bias[/code] should usually be above 1.0 as that is the size of the voxels.",
            "setter": "set_bias",
            "name": "bias",
            "getter": "get_bias",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the data for this [GIProbe] will be compressed. Compression saves space, but results in far worse visual quality.",
            "setter": "set_compress",
            "name": "compress",
            "getter": "is_compressed",
            "type": "bool"
          },
          {
            "value": "The [GIProbeData] resource that holds the data for this [GIProbe].",
            "setter": "set_probe_data",
            "name": "data",
            "getter": "get_probe_data",
            "type": "GIProbeData"
          },
          {
            "default": "4",
            "value": "The maximum brightness that the [GIProbe] will recognize. Brightness will be scaled within this range.",
            "setter": "set_dynamic_range",
            "name": "dynamic_range",
            "getter": "get_dynamic_range",
            "type": "int"
          },
          {
            "default": "1.0",
            "value": "Energy multiplier. Makes the lighting contribution from the [GIProbe] brighter.",
            "setter": "set_energy",
            "name": "energy",
            "getter": "get_energy",
            "type": "float"
          },
          {
            "default": "Vector3( 10, 10, 10 )",
            "value": "The size of the area covered by the [GIProbe]. If you make the extents larger without increasing the subdivisions with [member subdiv], the size of each cell will increase and result in lower detailed lighting.",
            "setter": "set_extents",
            "name": "extents",
            "getter": "get_extents",
            "type": "Vector3"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], ignores the sky contribution when calculating lighting.",
            "setter": "set_interior",
            "name": "interior",
            "getter": "is_interior",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "Offsets the lookup into the [GIProbe] based on the object's normal direction. Can be used to reduce some self-shadowing artifacts.",
            "setter": "set_normal_bias",
            "name": "normal_bias",
            "getter": "get_normal_bias",
            "type": "float"
          },
          {
            "default": "0.7",
            "value": "How much light propagates through the probe internally. A higher value allows light to spread further.",
            "setter": "set_propagation",
            "name": "propagation",
            "getter": "get_propagation",
            "type": "float"
          },
          {
            "default": "1",
            "value": "Number of times to subdivide the grid that the [GIProbe] operates on. A higher number results in finer detail and thus higher visual quality, while lower numbers result in better performance.",
            "setter": "set_subdiv",
            "name": "subdiv",
            "getter": "get_subdiv",
            "type": "int",
            "enum": "GIProbe.Subdiv"
          }
        ]
      },
      "inherits": "VisualInstance",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "default": "null",
                "name": "from_node",
                "type": "Node",
                "index": "0"
              },
              {
                "default": "false",
                "name": "create_visual_debug",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "bake",
            "description": "Bakes the effect from all [GeometryInstance]s marked with [member GeometryInstance.use_in_baked_light] and [Light]s marked with either [constant Light.BAKE_INDIRECT] or [constant Light.BAKE_ALL]. If [code]create_visual_debug[/code] is [code]true[/code], after baking the light, this will generate a [MultiMesh] that has a cube representing each solid cell with each cube colored to the cell's albedo color. This can be used to visualize the [GIProbe]'s data and debug any issues that may be occurring."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "debug_bake",
            "description": "Calls [method bake] with [code]create_visual_debug[/code] enabled."
          }
        ]
      },
      "name": "GIProbe",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "SUBDIV_64",
            "enum": "Subdiv"
          },
          {
            "value": "1",
            "name": "SUBDIV_128",
            "enum": "Subdiv"
          },
          {
            "value": "2",
            "name": "SUBDIV_256",
            "enum": "Subdiv"
          },
          {
            "value": "3",
            "name": "SUBDIV_512",
            "enum": "Subdiv"
          },
          {
            "value": "4",
            "name": "SUBDIV_MAX",
            "enum": "Subdiv"
          }
        ]
      },
      "brief_description": "Real-time global illumination (GI) probe.",
      "description": "[GIProbe]s are used to provide high-quality real-time indirect light to scenes. They precompute the effect of objects that emit light and the effect of static geometry to simulate the behavior of complex light in real-time. [GIProbe]s need to be baked before using, however, once baked, dynamic objects will receive light from them. Further, lights can be fully dynamic or baked.\n\t\tHaving [GIProbe]s in a scene can be expensive, the quality of the probe can be turned down in exchange for better performance in the [ProjectSettings] using [member ProjectSettings.rendering/quality/voxel_cone_tracing/high_quality].\n\t\t[b]Note:[/b] Meshes should have sufficiently thick walls to avoid light leaks (avoid one-sided walls). For interior levels, enclose your level geometry in a sufficiently large box and bridge the loops to close the mesh.\n\t\t[b]Note:[/b] Due to a renderer limitation, emissive [ShaderMaterial]s cannot emit light when used in a [GIProbe]. Only emissive [SpatialMaterial]s can emit light in a [GIProbe]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "value": "The [ARVRServer] singleton.",
            "setter": "",
            "name": "ARVRServer",
            "getter": "",
            "type": "ARVRServer"
          },
          {
            "value": "The [AudioServer] singleton.",
            "setter": "",
            "name": "AudioServer",
            "getter": "",
            "type": "AudioServer"
          },
          {
            "value": "The [CameraServer] singleton.",
            "setter": "",
            "name": "CameraServer",
            "getter": "",
            "type": "CameraServer"
          },
          {
            "value": "The [ClassDB] singleton.",
            "setter": "",
            "name": "ClassDB",
            "getter": "",
            "type": "ClassDB"
          },
          {
            "value": "The [Engine] singleton.",
            "setter": "",
            "name": "Engine",
            "getter": "",
            "type": "Engine"
          },
          {
            "value": "The [Geometry] singleton.",
            "setter": "",
            "name": "Geometry",
            "getter": "",
            "type": "Geometry"
          },
          {
            "value": "The [IP] singleton.",
            "setter": "",
            "name": "IP",
            "getter": "",
            "type": "IP"
          },
          {
            "value": "The [Input] singleton.",
            "setter": "",
            "name": "Input",
            "getter": "",
            "type": "Input"
          },
          {
            "value": "The [InputMap] singleton.",
            "setter": "",
            "name": "InputMap",
            "getter": "",
            "type": "InputMap"
          },
          {
            "value": "The [JSON] singleton.",
            "setter": "",
            "name": "JSON",
            "getter": "",
            "type": "JSON"
          },
          {
            "value": "The [JavaClassWrapper] singleton.\n\t\t\t[b]Note:[/b] Only implemented on Android.",
            "setter": "",
            "name": "JavaClassWrapper",
            "getter": "",
            "type": "JavaClassWrapper"
          },
          {
            "value": "The [JavaScript] singleton.\n\t\t\t[b]Note:[/b] Only implemented on HTML5.",
            "setter": "",
            "name": "JavaScript",
            "getter": "",
            "type": "JavaScript"
          },
          {
            "value": "The [Marshalls] singleton.",
            "setter": "",
            "name": "Marshalls",
            "getter": "",
            "type": "Marshalls"
          },
          {
            "value": "The [EditorNavigationMeshGenerator] singleton.",
            "setter": "",
            "name": "NavigationMeshGenerator",
            "getter": "",
            "type": "EditorNavigationMeshGenerator"
          },
          {
            "value": "The [OS] singleton.",
            "setter": "",
            "name": "OS",
            "getter": "",
            "type": "OS"
          },
          {
            "value": "The [Performance] singleton.",
            "setter": "",
            "name": "Performance",
            "getter": "",
            "type": "Performance"
          },
          {
            "value": "The [Physics2DServer] singleton.",
            "setter": "",
            "name": "Physics2DServer",
            "getter": "",
            "type": "Physics2DServer"
          },
          {
            "value": "The [PhysicsServer] singleton.",
            "setter": "",
            "name": "PhysicsServer",
            "getter": "",
            "type": "PhysicsServer"
          },
          {
            "value": "The [ProjectSettings] singleton.",
            "setter": "",
            "name": "ProjectSettings",
            "getter": "",
            "type": "ProjectSettings"
          },
          {
            "value": "The [ResourceLoader] singleton.",
            "setter": "",
            "name": "ResourceLoader",
            "getter": "",
            "type": "ResourceLoader"
          },
          {
            "value": "The [ResourceSaver] singleton.",
            "setter": "",
            "name": "ResourceSaver",
            "getter": "",
            "type": "ResourceSaver"
          },
          {
            "value": "The [TranslationServer] singleton.",
            "setter": "",
            "name": "TranslationServer",
            "getter": "",
            "type": "TranslationServer"
          },
          {
            "value": "The [VisualScriptEditor] singleton.",
            "setter": "",
            "name": "VisualScriptEditor",
            "getter": "",
            "type": "VisualScriptEditor"
          },
          {
            "value": "The [VisualServer] singleton.",
            "setter": "",
            "name": "VisualServer",
            "getter": "",
            "type": "VisualServer"
          }
        ]
      },
      "methods": {},
      "name": "@GlobalScope",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "MARGIN_LEFT",
            "enum": "Margin"
          },
          {
            "value": "1",
            "name": "MARGIN_TOP",
            "enum": "Margin"
          },
          {
            "value": "2",
            "name": "MARGIN_RIGHT",
            "enum": "Margin"
          },
          {
            "value": "3",
            "name": "MARGIN_BOTTOM",
            "enum": "Margin"
          },
          {
            "value": "0",
            "name": "CORNER_TOP_LEFT",
            "enum": "Corner"
          },
          {
            "value": "1",
            "name": "CORNER_TOP_RIGHT",
            "enum": "Corner"
          },
          {
            "value": "2",
            "name": "CORNER_BOTTOM_RIGHT",
            "enum": "Corner"
          },
          {
            "value": "3",
            "name": "CORNER_BOTTOM_LEFT",
            "enum": "Corner"
          },
          {
            "value": "1",
            "name": "VERTICAL",
            "enum": "Orientation"
          },
          {
            "value": "0",
            "name": "HORIZONTAL",
            "enum": "Orientation"
          },
          {
            "value": "0",
            "name": "HALIGN_LEFT",
            "enum": "HAlign"
          },
          {
            "value": "1",
            "name": "HALIGN_CENTER",
            "enum": "HAlign"
          },
          {
            "value": "2",
            "name": "HALIGN_RIGHT",
            "enum": "HAlign"
          },
          {
            "value": "0",
            "name": "VALIGN_TOP",
            "enum": "VAlign"
          },
          {
            "value": "1",
            "name": "VALIGN_CENTER",
            "enum": "VAlign"
          },
          {
            "value": "2",
            "name": "VALIGN_BOTTOM",
            "enum": "VAlign"
          },
          {
            "value": "16777216",
            "name": "SPKEY"
          },
          {
            "value": "16777217",
            "name": "KEY_ESCAPE",
            "enum": "KeyList"
          },
          {
            "value": "16777218",
            "name": "KEY_TAB",
            "enum": "KeyList"
          },
          {
            "value": "16777219",
            "name": "KEY_BACKTAB",
            "enum": "KeyList"
          },
          {
            "value": "16777220",
            "name": "KEY_BACKSPACE",
            "enum": "KeyList"
          },
          {
            "value": "16777221",
            "name": "KEY_ENTER",
            "enum": "KeyList"
          },
          {
            "value": "16777222",
            "name": "KEY_KP_ENTER",
            "enum": "KeyList"
          },
          {
            "value": "16777223",
            "name": "KEY_INSERT",
            "enum": "KeyList"
          },
          {
            "value": "16777224",
            "name": "KEY_DELETE",
            "enum": "KeyList"
          },
          {
            "value": "16777225",
            "name": "KEY_PAUSE",
            "enum": "KeyList"
          },
          {
            "value": "16777226",
            "name": "KEY_PRINT",
            "enum": "KeyList"
          },
          {
            "value": "16777227",
            "name": "KEY_SYSREQ",
            "enum": "KeyList"
          },
          {
            "value": "16777228",
            "name": "KEY_CLEAR",
            "enum": "KeyList"
          },
          {
            "value": "16777229",
            "name": "KEY_HOME",
            "enum": "KeyList"
          },
          {
            "value": "16777230",
            "name": "KEY_END",
            "enum": "KeyList"
          },
          {
            "value": "16777231",
            "name": "KEY_LEFT",
            "enum": "KeyList"
          },
          {
            "value": "16777232",
            "name": "KEY_UP",
            "enum": "KeyList"
          },
          {
            "value": "16777233",
            "name": "KEY_RIGHT",
            "enum": "KeyList"
          },
          {
            "value": "16777234",
            "name": "KEY_DOWN",
            "enum": "KeyList"
          },
          {
            "value": "16777235",
            "name": "KEY_PAGEUP",
            "enum": "KeyList"
          },
          {
            "value": "16777236",
            "name": "KEY_PAGEDOWN",
            "enum": "KeyList"
          },
          {
            "value": "16777237",
            "name": "KEY_SHIFT",
            "enum": "KeyList"
          },
          {
            "value": "16777238",
            "name": "KEY_CONTROL",
            "enum": "KeyList"
          },
          {
            "value": "16777239",
            "name": "KEY_META",
            "enum": "KeyList"
          },
          {
            "value": "16777240",
            "name": "KEY_ALT",
            "enum": "KeyList"
          },
          {
            "value": "16777241",
            "name": "KEY_CAPSLOCK",
            "enum": "KeyList"
          },
          {
            "value": "16777242",
            "name": "KEY_NUMLOCK",
            "enum": "KeyList"
          },
          {
            "value": "16777243",
            "name": "KEY_SCROLLLOCK",
            "enum": "KeyList"
          },
          {
            "value": "16777244",
            "name": "KEY_F1",
            "enum": "KeyList"
          },
          {
            "value": "16777245",
            "name": "KEY_F2",
            "enum": "KeyList"
          },
          {
            "value": "16777246",
            "name": "KEY_F3",
            "enum": "KeyList"
          },
          {
            "value": "16777247",
            "name": "KEY_F4",
            "enum": "KeyList"
          },
          {
            "value": "16777248",
            "name": "KEY_F5",
            "enum": "KeyList"
          },
          {
            "value": "16777249",
            "name": "KEY_F6",
            "enum": "KeyList"
          },
          {
            "value": "16777250",
            "name": "KEY_F7",
            "enum": "KeyList"
          },
          {
            "value": "16777251",
            "name": "KEY_F8",
            "enum": "KeyList"
          },
          {
            "value": "16777252",
            "name": "KEY_F9",
            "enum": "KeyList"
          },
          {
            "value": "16777253",
            "name": "KEY_F10",
            "enum": "KeyList"
          },
          {
            "value": "16777254",
            "name": "KEY_F11",
            "enum": "KeyList"
          },
          {
            "value": "16777255",
            "name": "KEY_F12",
            "enum": "KeyList"
          },
          {
            "value": "16777256",
            "name": "KEY_F13",
            "enum": "KeyList"
          },
          {
            "value": "16777257",
            "name": "KEY_F14",
            "enum": "KeyList"
          },
          {
            "value": "16777258",
            "name": "KEY_F15",
            "enum": "KeyList"
          },
          {
            "value": "16777259",
            "name": "KEY_F16",
            "enum": "KeyList"
          },
          {
            "value": "16777345",
            "name": "KEY_KP_MULTIPLY",
            "enum": "KeyList"
          },
          {
            "value": "16777346",
            "name": "KEY_KP_DIVIDE",
            "enum": "KeyList"
          },
          {
            "value": "16777347",
            "name": "KEY_KP_SUBTRACT",
            "enum": "KeyList"
          },
          {
            "value": "16777348",
            "name": "KEY_KP_PERIOD",
            "enum": "KeyList"
          },
          {
            "value": "16777349",
            "name": "KEY_KP_ADD",
            "enum": "KeyList"
          },
          {
            "value": "16777350",
            "name": "KEY_KP_0",
            "enum": "KeyList"
          },
          {
            "value": "16777351",
            "name": "KEY_KP_1",
            "enum": "KeyList"
          },
          {
            "value": "16777352",
            "name": "KEY_KP_2",
            "enum": "KeyList"
          },
          {
            "value": "16777353",
            "name": "KEY_KP_3",
            "enum": "KeyList"
          },
          {
            "value": "16777354",
            "name": "KEY_KP_4",
            "enum": "KeyList"
          },
          {
            "value": "16777355",
            "name": "KEY_KP_5",
            "enum": "KeyList"
          },
          {
            "value": "16777356",
            "name": "KEY_KP_6",
            "enum": "KeyList"
          },
          {
            "value": "16777357",
            "name": "KEY_KP_7",
            "enum": "KeyList"
          },
          {
            "value": "16777358",
            "name": "KEY_KP_8",
            "enum": "KeyList"
          },
          {
            "value": "16777359",
            "name": "KEY_KP_9",
            "enum": "KeyList"
          },
          {
            "value": "16777260",
            "name": "KEY_SUPER_L",
            "enum": "KeyList"
          },
          {
            "value": "16777261",
            "name": "KEY_SUPER_R",
            "enum": "KeyList"
          },
          {
            "value": "16777262",
            "name": "KEY_MENU",
            "enum": "KeyList"
          },
          {
            "value": "16777263",
            "name": "KEY_HYPER_L",
            "enum": "KeyList"
          },
          {
            "value": "16777264",
            "name": "KEY_HYPER_R",
            "enum": "KeyList"
          },
          {
            "value": "16777265",
            "name": "KEY_HELP",
            "enum": "KeyList"
          },
          {
            "value": "16777266",
            "name": "KEY_DIRECTION_L",
            "enum": "KeyList"
          },
          {
            "value": "16777267",
            "name": "KEY_DIRECTION_R",
            "enum": "KeyList"
          },
          {
            "value": "16777280",
            "name": "KEY_BACK",
            "enum": "KeyList"
          },
          {
            "value": "16777281",
            "name": "KEY_FORWARD",
            "enum": "KeyList"
          },
          {
            "value": "16777282",
            "name": "KEY_STOP",
            "enum": "KeyList"
          },
          {
            "value": "16777283",
            "name": "KEY_REFRESH",
            "enum": "KeyList"
          },
          {
            "value": "16777284",
            "name": "KEY_VOLUMEDOWN",
            "enum": "KeyList"
          },
          {
            "value": "16777285",
            "name": "KEY_VOLUMEMUTE",
            "enum": "KeyList"
          },
          {
            "value": "16777286",
            "name": "KEY_VOLUMEUP",
            "enum": "KeyList"
          },
          {
            "value": "16777287",
            "name": "KEY_BASSBOOST",
            "enum": "KeyList"
          },
          {
            "value": "16777288",
            "name": "KEY_BASSUP",
            "enum": "KeyList"
          },
          {
            "value": "16777289",
            "name": "KEY_BASSDOWN",
            "enum": "KeyList"
          },
          {
            "value": "16777290",
            "name": "KEY_TREBLEUP",
            "enum": "KeyList"
          },
          {
            "value": "16777291",
            "name": "KEY_TREBLEDOWN",
            "enum": "KeyList"
          },
          {
            "value": "16777292",
            "name": "KEY_MEDIAPLAY",
            "enum": "KeyList"
          },
          {
            "value": "16777293",
            "name": "KEY_MEDIASTOP",
            "enum": "KeyList"
          },
          {
            "value": "16777294",
            "name": "KEY_MEDIAPREVIOUS",
            "enum": "KeyList"
          },
          {
            "value": "16777295",
            "name": "KEY_MEDIANEXT",
            "enum": "KeyList"
          },
          {
            "value": "16777296",
            "name": "KEY_MEDIARECORD",
            "enum": "KeyList"
          },
          {
            "value": "16777297",
            "name": "KEY_HOMEPAGE",
            "enum": "KeyList"
          },
          {
            "value": "16777298",
            "name": "KEY_FAVORITES",
            "enum": "KeyList"
          },
          {
            "value": "16777299",
            "name": "KEY_SEARCH",
            "enum": "KeyList"
          },
          {
            "value": "16777300",
            "name": "KEY_STANDBY",
            "enum": "KeyList"
          },
          {
            "value": "16777301",
            "name": "KEY_OPENURL",
            "enum": "KeyList"
          },
          {
            "value": "16777302",
            "name": "KEY_LAUNCHMAIL",
            "enum": "KeyList"
          },
          {
            "value": "16777303",
            "name": "KEY_LAUNCHMEDIA",
            "enum": "KeyList"
          },
          {
            "value": "16777304",
            "name": "KEY_LAUNCH0",
            "enum": "KeyList"
          },
          {
            "value": "16777305",
            "name": "KEY_LAUNCH1",
            "enum": "KeyList"
          },
          {
            "value": "16777306",
            "name": "KEY_LAUNCH2",
            "enum": "KeyList"
          },
          {
            "value": "16777307",
            "name": "KEY_LAUNCH3",
            "enum": "KeyList"
          },
          {
            "value": "16777308",
            "name": "KEY_LAUNCH4",
            "enum": "KeyList"
          },
          {
            "value": "16777309",
            "name": "KEY_LAUNCH5",
            "enum": "KeyList"
          },
          {
            "value": "16777310",
            "name": "KEY_LAUNCH6",
            "enum": "KeyList"
          },
          {
            "value": "16777311",
            "name": "KEY_LAUNCH7",
            "enum": "KeyList"
          },
          {
            "value": "16777312",
            "name": "KEY_LAUNCH8",
            "enum": "KeyList"
          },
          {
            "value": "16777313",
            "name": "KEY_LAUNCH9",
            "enum": "KeyList"
          },
          {
            "value": "16777314",
            "name": "KEY_LAUNCHA",
            "enum": "KeyList"
          },
          {
            "value": "16777315",
            "name": "KEY_LAUNCHB",
            "enum": "KeyList"
          },
          {
            "value": "16777316",
            "name": "KEY_LAUNCHC",
            "enum": "KeyList"
          },
          {
            "value": "16777317",
            "name": "KEY_LAUNCHD",
            "enum": "KeyList"
          },
          {
            "value": "16777318",
            "name": "KEY_LAUNCHE",
            "enum": "KeyList"
          },
          {
            "value": "16777319",
            "name": "KEY_LAUNCHF",
            "enum": "KeyList"
          },
          {
            "value": "33554431",
            "name": "KEY_UNKNOWN",
            "enum": "KeyList"
          },
          {
            "value": "32",
            "name": "KEY_SPACE",
            "enum": "KeyList"
          },
          {
            "value": "33",
            "name": "KEY_EXCLAM",
            "enum": "KeyList"
          },
          {
            "value": "34",
            "name": "KEY_QUOTEDBL",
            "enum": "KeyList"
          },
          {
            "value": "35",
            "name": "KEY_NUMBERSIGN",
            "enum": "KeyList"
          },
          {
            "value": "36",
            "name": "KEY_DOLLAR",
            "enum": "KeyList"
          },
          {
            "value": "37",
            "name": "KEY_PERCENT",
            "enum": "KeyList"
          },
          {
            "value": "38",
            "name": "KEY_AMPERSAND",
            "enum": "KeyList"
          },
          {
            "value": "39",
            "name": "KEY_APOSTROPHE",
            "enum": "KeyList"
          },
          {
            "value": "40",
            "name": "KEY_PARENLEFT",
            "enum": "KeyList"
          },
          {
            "value": "41",
            "name": "KEY_PARENRIGHT",
            "enum": "KeyList"
          },
          {
            "value": "42",
            "name": "KEY_ASTERISK",
            "enum": "KeyList"
          },
          {
            "value": "43",
            "name": "KEY_PLUS",
            "enum": "KeyList"
          },
          {
            "value": "44",
            "name": "KEY_COMMA",
            "enum": "KeyList"
          },
          {
            "value": "45",
            "name": "KEY_MINUS",
            "enum": "KeyList"
          },
          {
            "value": "46",
            "name": "KEY_PERIOD",
            "enum": "KeyList"
          },
          {
            "value": "47",
            "name": "KEY_SLASH",
            "enum": "KeyList"
          },
          {
            "value": "48",
            "name": "KEY_0",
            "enum": "KeyList"
          },
          {
            "value": "49",
            "name": "KEY_1",
            "enum": "KeyList"
          },
          {
            "value": "50",
            "name": "KEY_2",
            "enum": "KeyList"
          },
          {
            "value": "51",
            "name": "KEY_3",
            "enum": "KeyList"
          },
          {
            "value": "52",
            "name": "KEY_4",
            "enum": "KeyList"
          },
          {
            "value": "53",
            "name": "KEY_5",
            "enum": "KeyList"
          },
          {
            "value": "54",
            "name": "KEY_6",
            "enum": "KeyList"
          },
          {
            "value": "55",
            "name": "KEY_7",
            "enum": "KeyList"
          },
          {
            "value": "56",
            "name": "KEY_8",
            "enum": "KeyList"
          },
          {
            "value": "57",
            "name": "KEY_9",
            "enum": "KeyList"
          },
          {
            "value": "58",
            "name": "KEY_COLON",
            "enum": "KeyList"
          },
          {
            "value": "59",
            "name": "KEY_SEMICOLON",
            "enum": "KeyList"
          },
          {
            "value": "60",
            "name": "KEY_LESS",
            "enum": "KeyList"
          },
          {
            "value": "61",
            "name": "KEY_EQUAL",
            "enum": "KeyList"
          },
          {
            "value": "62",
            "name": "KEY_GREATER",
            "enum": "KeyList"
          },
          {
            "value": "63",
            "name": "KEY_QUESTION",
            "enum": "KeyList"
          },
          {
            "value": "64",
            "name": "KEY_AT",
            "enum": "KeyList"
          },
          {
            "value": "65",
            "name": "KEY_A",
            "enum": "KeyList"
          },
          {
            "value": "66",
            "name": "KEY_B",
            "enum": "KeyList"
          },
          {
            "value": "67",
            "name": "KEY_C",
            "enum": "KeyList"
          },
          {
            "value": "68",
            "name": "KEY_D",
            "enum": "KeyList"
          },
          {
            "value": "69",
            "name": "KEY_E",
            "enum": "KeyList"
          },
          {
            "value": "70",
            "name": "KEY_F",
            "enum": "KeyList"
          },
          {
            "value": "71",
            "name": "KEY_G",
            "enum": "KeyList"
          },
          {
            "value": "72",
            "name": "KEY_H",
            "enum": "KeyList"
          },
          {
            "value": "73",
            "name": "KEY_I",
            "enum": "KeyList"
          },
          {
            "value": "74",
            "name": "KEY_J",
            "enum": "KeyList"
          },
          {
            "value": "75",
            "name": "KEY_K",
            "enum": "KeyList"
          },
          {
            "value": "76",
            "name": "KEY_L",
            "enum": "KeyList"
          },
          {
            "value": "77",
            "name": "KEY_M",
            "enum": "KeyList"
          },
          {
            "value": "78",
            "name": "KEY_N",
            "enum": "KeyList"
          },
          {
            "value": "79",
            "name": "KEY_O",
            "enum": "KeyList"
          },
          {
            "value": "80",
            "name": "KEY_P",
            "enum": "KeyList"
          },
          {
            "value": "81",
            "name": "KEY_Q",
            "enum": "KeyList"
          },
          {
            "value": "82",
            "name": "KEY_R",
            "enum": "KeyList"
          },
          {
            "value": "83",
            "name": "KEY_S",
            "enum": "KeyList"
          },
          {
            "value": "84",
            "name": "KEY_T",
            "enum": "KeyList"
          },
          {
            "value": "85",
            "name": "KEY_U",
            "enum": "KeyList"
          },
          {
            "value": "86",
            "name": "KEY_V",
            "enum": "KeyList"
          },
          {
            "value": "87",
            "name": "KEY_W",
            "enum": "KeyList"
          },
          {
            "value": "88",
            "name": "KEY_X",
            "enum": "KeyList"
          },
          {
            "value": "89",
            "name": "KEY_Y",
            "enum": "KeyList"
          },
          {
            "value": "90",
            "name": "KEY_Z",
            "enum": "KeyList"
          },
          {
            "value": "91",
            "name": "KEY_BRACKETLEFT",
            "enum": "KeyList"
          },
          {
            "value": "92",
            "name": "KEY_BACKSLASH",
            "enum": "KeyList"
          },
          {
            "value": "93",
            "name": "KEY_BRACKETRIGHT",
            "enum": "KeyList"
          },
          {
            "value": "94",
            "name": "KEY_ASCIICIRCUM",
            "enum": "KeyList"
          },
          {
            "value": "95",
            "name": "KEY_UNDERSCORE",
            "enum": "KeyList"
          },
          {
            "value": "96",
            "name": "KEY_QUOTELEFT",
            "enum": "KeyList"
          },
          {
            "value": "123",
            "name": "KEY_BRACELEFT",
            "enum": "KeyList"
          },
          {
            "value": "124",
            "name": "KEY_BAR",
            "enum": "KeyList"
          },
          {
            "value": "125",
            "name": "KEY_BRACERIGHT",
            "enum": "KeyList"
          },
          {
            "value": "126",
            "name": "KEY_ASCIITILDE",
            "enum": "KeyList"
          },
          {
            "value": "160",
            "name": "KEY_NOBREAKSPACE",
            "enum": "KeyList"
          },
          {
            "value": "161",
            "name": "KEY_EXCLAMDOWN",
            "enum": "KeyList"
          },
          {
            "value": "162",
            "name": "KEY_CENT",
            "enum": "KeyList"
          },
          {
            "value": "163",
            "name": "KEY_STERLING",
            "enum": "KeyList"
          },
          {
            "value": "164",
            "name": "KEY_CURRENCY",
            "enum": "KeyList"
          },
          {
            "value": "165",
            "name": "KEY_YEN",
            "enum": "KeyList"
          },
          {
            "value": "166",
            "name": "KEY_BROKENBAR",
            "enum": "KeyList"
          },
          {
            "value": "167",
            "name": "KEY_SECTION",
            "enum": "KeyList"
          },
          {
            "value": "168",
            "name": "KEY_DIAERESIS",
            "enum": "KeyList"
          },
          {
            "value": "169",
            "name": "KEY_COPYRIGHT",
            "enum": "KeyList"
          },
          {
            "value": "170",
            "name": "KEY_ORDFEMININE",
            "enum": "KeyList"
          },
          {
            "value": "171",
            "name": "KEY_GUILLEMOTLEFT",
            "enum": "KeyList"
          },
          {
            "value": "172",
            "name": "KEY_NOTSIGN",
            "enum": "KeyList"
          },
          {
            "value": "173",
            "name": "KEY_HYPHEN",
            "enum": "KeyList"
          },
          {
            "value": "174",
            "name": "KEY_REGISTERED",
            "enum": "KeyList"
          },
          {
            "value": "175",
            "name": "KEY_MACRON",
            "enum": "KeyList"
          },
          {
            "value": "176",
            "name": "KEY_DEGREE",
            "enum": "KeyList"
          },
          {
            "value": "177",
            "name": "KEY_PLUSMINUS",
            "enum": "KeyList"
          },
          {
            "value": "178",
            "name": "KEY_TWOSUPERIOR",
            "enum": "KeyList"
          },
          {
            "value": "179",
            "name": "KEY_THREESUPERIOR",
            "enum": "KeyList"
          },
          {
            "value": "180",
            "name": "KEY_ACUTE",
            "enum": "KeyList"
          },
          {
            "value": "181",
            "name": "KEY_MU",
            "enum": "KeyList"
          },
          {
            "value": "182",
            "name": "KEY_PARAGRAPH",
            "enum": "KeyList"
          },
          {
            "value": "183",
            "name": "KEY_PERIODCENTERED",
            "enum": "KeyList"
          },
          {
            "value": "184",
            "name": "KEY_CEDILLA",
            "enum": "KeyList"
          },
          {
            "value": "185",
            "name": "KEY_ONESUPERIOR",
            "enum": "KeyList"
          },
          {
            "value": "186",
            "name": "KEY_MASCULINE",
            "enum": "KeyList"
          },
          {
            "value": "187",
            "name": "KEY_GUILLEMOTRIGHT",
            "enum": "KeyList"
          },
          {
            "value": "188",
            "name": "KEY_ONEQUARTER",
            "enum": "KeyList"
          },
          {
            "value": "189",
            "name": "KEY_ONEHALF",
            "enum": "KeyList"
          },
          {
            "value": "190",
            "name": "KEY_THREEQUARTERS",
            "enum": "KeyList"
          },
          {
            "value": "191",
            "name": "KEY_QUESTIONDOWN",
            "enum": "KeyList"
          },
          {
            "value": "192",
            "name": "KEY_AGRAVE",
            "enum": "KeyList"
          },
          {
            "value": "193",
            "name": "KEY_AACUTE",
            "enum": "KeyList"
          },
          {
            "value": "194",
            "name": "KEY_ACIRCUMFLEX",
            "enum": "KeyList"
          },
          {
            "value": "195",
            "name": "KEY_ATILDE",
            "enum": "KeyList"
          },
          {
            "value": "196",
            "name": "KEY_ADIAERESIS",
            "enum": "KeyList"
          },
          {
            "value": "197",
            "name": "KEY_ARING",
            "enum": "KeyList"
          },
          {
            "value": "198",
            "name": "KEY_AE",
            "enum": "KeyList"
          },
          {
            "value": "199",
            "name": "KEY_CCEDILLA",
            "enum": "KeyList"
          },
          {
            "value": "200",
            "name": "KEY_EGRAVE",
            "enum": "KeyList"
          },
          {
            "value": "201",
            "name": "KEY_EACUTE",
            "enum": "KeyList"
          },
          {
            "value": "202",
            "name": "KEY_ECIRCUMFLEX",
            "enum": "KeyList"
          },
          {
            "value": "203",
            "name": "KEY_EDIAERESIS",
            "enum": "KeyList"
          },
          {
            "value": "204",
            "name": "KEY_IGRAVE",
            "enum": "KeyList"
          },
          {
            "value": "205",
            "name": "KEY_IACUTE",
            "enum": "KeyList"
          },
          {
            "value": "206",
            "name": "KEY_ICIRCUMFLEX",
            "enum": "KeyList"
          },
          {
            "value": "207",
            "name": "KEY_IDIAERESIS",
            "enum": "KeyList"
          },
          {
            "value": "208",
            "name": "KEY_ETH",
            "enum": "KeyList"
          },
          {
            "value": "209",
            "name": "KEY_NTILDE",
            "enum": "KeyList"
          },
          {
            "value": "210",
            "name": "KEY_OGRAVE",
            "enum": "KeyList"
          },
          {
            "value": "211",
            "name": "KEY_OACUTE",
            "enum": "KeyList"
          },
          {
            "value": "212",
            "name": "KEY_OCIRCUMFLEX",
            "enum": "KeyList"
          },
          {
            "value": "213",
            "name": "KEY_OTILDE",
            "enum": "KeyList"
          },
          {
            "value": "214",
            "name": "KEY_ODIAERESIS",
            "enum": "KeyList"
          },
          {
            "value": "215",
            "name": "KEY_MULTIPLY",
            "enum": "KeyList"
          },
          {
            "value": "216",
            "name": "KEY_OOBLIQUE",
            "enum": "KeyList"
          },
          {
            "value": "217",
            "name": "KEY_UGRAVE",
            "enum": "KeyList"
          },
          {
            "value": "218",
            "name": "KEY_UACUTE",
            "enum": "KeyList"
          },
          {
            "value": "219",
            "name": "KEY_UCIRCUMFLEX",
            "enum": "KeyList"
          },
          {
            "value": "220",
            "name": "KEY_UDIAERESIS",
            "enum": "KeyList"
          },
          {
            "value": "221",
            "name": "KEY_YACUTE",
            "enum": "KeyList"
          },
          {
            "value": "222",
            "name": "KEY_THORN",
            "enum": "KeyList"
          },
          {
            "value": "223",
            "name": "KEY_SSHARP",
            "enum": "KeyList"
          },
          {
            "value": "247",
            "name": "KEY_DIVISION",
            "enum": "KeyList"
          },
          {
            "value": "255",
            "name": "KEY_YDIAERESIS",
            "enum": "KeyList"
          },
          {
            "value": "33554431",
            "name": "KEY_CODE_MASK",
            "enum": "KeyModifierMask"
          },
          {
            "value": "-16777216",
            "name": "KEY_MODIFIER_MASK",
            "enum": "KeyModifierMask"
          },
          {
            "value": "33554432",
            "name": "KEY_MASK_SHIFT",
            "enum": "KeyModifierMask"
          },
          {
            "value": "67108864",
            "name": "KEY_MASK_ALT",
            "enum": "KeyModifierMask"
          },
          {
            "value": "134217728",
            "name": "KEY_MASK_META",
            "enum": "KeyModifierMask"
          },
          {
            "value": "268435456",
            "name": "KEY_MASK_CTRL",
            "enum": "KeyModifierMask"
          },
          {
            "value": "268435456",
            "name": "KEY_MASK_CMD",
            "enum": "KeyModifierMask"
          },
          {
            "value": "536870912",
            "name": "KEY_MASK_KPAD",
            "enum": "KeyModifierMask"
          },
          {
            "value": "1073741824",
            "name": "KEY_MASK_GROUP_SWITCH",
            "enum": "KeyModifierMask"
          },
          {
            "value": "1",
            "name": "BUTTON_LEFT",
            "enum": "ButtonList"
          },
          {
            "value": "2",
            "name": "BUTTON_RIGHT",
            "enum": "ButtonList"
          },
          {
            "value": "3",
            "name": "BUTTON_MIDDLE",
            "enum": "ButtonList"
          },
          {
            "value": "8",
            "name": "BUTTON_XBUTTON1",
            "enum": "ButtonList"
          },
          {
            "value": "9",
            "name": "BUTTON_XBUTTON2",
            "enum": "ButtonList"
          },
          {
            "value": "4",
            "name": "BUTTON_WHEEL_UP",
            "enum": "ButtonList"
          },
          {
            "value": "5",
            "name": "BUTTON_WHEEL_DOWN",
            "enum": "ButtonList"
          },
          {
            "value": "6",
            "name": "BUTTON_WHEEL_LEFT",
            "enum": "ButtonList"
          },
          {
            "value": "7",
            "name": "BUTTON_WHEEL_RIGHT",
            "enum": "ButtonList"
          },
          {
            "value": "1",
            "name": "BUTTON_MASK_LEFT",
            "enum": "ButtonList"
          },
          {
            "value": "2",
            "name": "BUTTON_MASK_RIGHT",
            "enum": "ButtonList"
          },
          {
            "value": "4",
            "name": "BUTTON_MASK_MIDDLE",
            "enum": "ButtonList"
          },
          {
            "value": "128",
            "name": "BUTTON_MASK_XBUTTON1",
            "enum": "ButtonList"
          },
          {
            "value": "256",
            "name": "BUTTON_MASK_XBUTTON2",
            "enum": "ButtonList"
          },
          {
            "value": "-1",
            "name": "JOY_INVALID_OPTION",
            "enum": "JoystickList"
          },
          {
            "value": "0",
            "name": "JOY_BUTTON_0",
            "enum": "JoystickList"
          },
          {
            "value": "1",
            "name": "JOY_BUTTON_1",
            "enum": "JoystickList"
          },
          {
            "value": "2",
            "name": "JOY_BUTTON_2",
            "enum": "JoystickList"
          },
          {
            "value": "3",
            "name": "JOY_BUTTON_3",
            "enum": "JoystickList"
          },
          {
            "value": "4",
            "name": "JOY_BUTTON_4",
            "enum": "JoystickList"
          },
          {
            "value": "5",
            "name": "JOY_BUTTON_5",
            "enum": "JoystickList"
          },
          {
            "value": "6",
            "name": "JOY_BUTTON_6",
            "enum": "JoystickList"
          },
          {
            "value": "7",
            "name": "JOY_BUTTON_7",
            "enum": "JoystickList"
          },
          {
            "value": "8",
            "name": "JOY_BUTTON_8",
            "enum": "JoystickList"
          },
          {
            "value": "9",
            "name": "JOY_BUTTON_9",
            "enum": "JoystickList"
          },
          {
            "value": "10",
            "name": "JOY_BUTTON_10",
            "enum": "JoystickList"
          },
          {
            "value": "11",
            "name": "JOY_BUTTON_11",
            "enum": "JoystickList"
          },
          {
            "value": "12",
            "name": "JOY_BUTTON_12",
            "enum": "JoystickList"
          },
          {
            "value": "13",
            "name": "JOY_BUTTON_13",
            "enum": "JoystickList"
          },
          {
            "value": "14",
            "name": "JOY_BUTTON_14",
            "enum": "JoystickList"
          },
          {
            "value": "15",
            "name": "JOY_BUTTON_15",
            "enum": "JoystickList"
          },
          {
            "value": "16",
            "name": "JOY_BUTTON_16",
            "enum": "JoystickList"
          },
          {
            "value": "17",
            "name": "JOY_BUTTON_17",
            "enum": "JoystickList"
          },
          {
            "value": "18",
            "name": "JOY_BUTTON_18",
            "enum": "JoystickList"
          },
          {
            "value": "19",
            "name": "JOY_BUTTON_19",
            "enum": "JoystickList"
          },
          {
            "value": "20",
            "name": "JOY_BUTTON_20",
            "enum": "JoystickList"
          },
          {
            "value": "21",
            "name": "JOY_BUTTON_21",
            "enum": "JoystickList"
          },
          {
            "value": "22",
            "name": "JOY_BUTTON_22",
            "enum": "JoystickList"
          },
          {
            "value": "23",
            "name": "JOY_BUTTON_MAX",
            "enum": "JoystickList"
          },
          {
            "value": "1",
            "name": "JOY_SONY_CIRCLE",
            "enum": "JoystickList"
          },
          {
            "value": "0",
            "name": "JOY_SONY_X",
            "enum": "JoystickList"
          },
          {
            "value": "2",
            "name": "JOY_SONY_SQUARE",
            "enum": "JoystickList"
          },
          {
            "value": "3",
            "name": "JOY_SONY_TRIANGLE",
            "enum": "JoystickList"
          },
          {
            "value": "1",
            "name": "JOY_XBOX_B",
            "enum": "JoystickList"
          },
          {
            "value": "0",
            "name": "JOY_XBOX_A",
            "enum": "JoystickList"
          },
          {
            "value": "2",
            "name": "JOY_XBOX_X",
            "enum": "JoystickList"
          },
          {
            "value": "3",
            "name": "JOY_XBOX_Y",
            "enum": "JoystickList"
          },
          {
            "value": "1",
            "name": "JOY_DS_A",
            "enum": "JoystickList"
          },
          {
            "value": "0",
            "name": "JOY_DS_B",
            "enum": "JoystickList"
          },
          {
            "value": "3",
            "name": "JOY_DS_X",
            "enum": "JoystickList"
          },
          {
            "value": "2",
            "name": "JOY_DS_Y",
            "enum": "JoystickList"
          },
          {
            "value": "2",
            "name": "JOY_VR_GRIP",
            "enum": "JoystickList"
          },
          {
            "value": "14",
            "name": "JOY_VR_PAD",
            "enum": "JoystickList"
          },
          {
            "value": "15",
            "name": "JOY_VR_TRIGGER",
            "enum": "JoystickList"
          },
          {
            "value": "7",
            "name": "JOY_OCULUS_AX",
            "enum": "JoystickList"
          },
          {
            "value": "1",
            "name": "JOY_OCULUS_BY",
            "enum": "JoystickList"
          },
          {
            "value": "3",
            "name": "JOY_OCULUS_MENU",
            "enum": "JoystickList"
          },
          {
            "value": "1",
            "name": "JOY_OPENVR_MENU",
            "enum": "JoystickList"
          },
          {
            "value": "10",
            "name": "JOY_SELECT",
            "enum": "JoystickList"
          },
          {
            "value": "11",
            "name": "JOY_START",
            "enum": "JoystickList"
          },
          {
            "value": "12",
            "name": "JOY_DPAD_UP",
            "enum": "JoystickList"
          },
          {
            "value": "13",
            "name": "JOY_DPAD_DOWN",
            "enum": "JoystickList"
          },
          {
            "value": "14",
            "name": "JOY_DPAD_LEFT",
            "enum": "JoystickList"
          },
          {
            "value": "15",
            "name": "JOY_DPAD_RIGHT",
            "enum": "JoystickList"
          },
          {
            "value": "16",
            "name": "JOY_GUIDE",
            "enum": "JoystickList"
          },
          {
            "value": "17",
            "name": "JOY_MISC1",
            "enum": "JoystickList"
          },
          {
            "value": "18",
            "name": "JOY_PADDLE1",
            "enum": "JoystickList"
          },
          {
            "value": "19",
            "name": "JOY_PADDLE2",
            "enum": "JoystickList"
          },
          {
            "value": "20",
            "name": "JOY_PADDLE3",
            "enum": "JoystickList"
          },
          {
            "value": "21",
            "name": "JOY_PADDLE4",
            "enum": "JoystickList"
          },
          {
            "value": "22",
            "name": "JOY_TOUCHPAD",
            "enum": "JoystickList"
          },
          {
            "value": "4",
            "name": "JOY_L",
            "enum": "JoystickList"
          },
          {
            "value": "6",
            "name": "JOY_L2",
            "enum": "JoystickList"
          },
          {
            "value": "8",
            "name": "JOY_L3",
            "enum": "JoystickList"
          },
          {
            "value": "5",
            "name": "JOY_R",
            "enum": "JoystickList"
          },
          {
            "value": "7",
            "name": "JOY_R2",
            "enum": "JoystickList"
          },
          {
            "value": "9",
            "name": "JOY_R3",
            "enum": "JoystickList"
          },
          {
            "value": "0",
            "name": "JOY_AXIS_0",
            "enum": "JoystickList"
          },
          {
            "value": "1",
            "name": "JOY_AXIS_1",
            "enum": "JoystickList"
          },
          {
            "value": "2",
            "name": "JOY_AXIS_2",
            "enum": "JoystickList"
          },
          {
            "value": "3",
            "name": "JOY_AXIS_3",
            "enum": "JoystickList"
          },
          {
            "value": "4",
            "name": "JOY_AXIS_4",
            "enum": "JoystickList"
          },
          {
            "value": "5",
            "name": "JOY_AXIS_5",
            "enum": "JoystickList"
          },
          {
            "value": "6",
            "name": "JOY_AXIS_6",
            "enum": "JoystickList"
          },
          {
            "value": "7",
            "name": "JOY_AXIS_7",
            "enum": "JoystickList"
          },
          {
            "value": "8",
            "name": "JOY_AXIS_8",
            "enum": "JoystickList"
          },
          {
            "value": "9",
            "name": "JOY_AXIS_9",
            "enum": "JoystickList"
          },
          {
            "value": "10",
            "name": "JOY_AXIS_MAX",
            "enum": "JoystickList"
          },
          {
            "value": "0",
            "name": "JOY_ANALOG_LX",
            "enum": "JoystickList"
          },
          {
            "value": "1",
            "name": "JOY_ANALOG_LY",
            "enum": "JoystickList"
          },
          {
            "value": "2",
            "name": "JOY_ANALOG_RX",
            "enum": "JoystickList"
          },
          {
            "value": "3",
            "name": "JOY_ANALOG_RY",
            "enum": "JoystickList"
          },
          {
            "value": "6",
            "name": "JOY_ANALOG_L2",
            "enum": "JoystickList"
          },
          {
            "value": "7",
            "name": "JOY_ANALOG_R2",
            "enum": "JoystickList"
          },
          {
            "value": "2",
            "name": "JOY_VR_ANALOG_TRIGGER",
            "enum": "JoystickList"
          },
          {
            "value": "4",
            "name": "JOY_VR_ANALOG_GRIP",
            "enum": "JoystickList"
          },
          {
            "value": "0",
            "name": "JOY_OPENVR_TOUCHPADX",
            "enum": "JoystickList"
          },
          {
            "value": "1",
            "name": "JOY_OPENVR_TOUCHPADY",
            "enum": "JoystickList"
          },
          {
            "value": "8",
            "name": "MIDI_MESSAGE_NOTE_OFF",
            "enum": "MidiMessageList"
          },
          {
            "value": "9",
            "name": "MIDI_MESSAGE_NOTE_ON",
            "enum": "MidiMessageList"
          },
          {
            "value": "10",
            "name": "MIDI_MESSAGE_AFTERTOUCH",
            "enum": "MidiMessageList"
          },
          {
            "value": "11",
            "name": "MIDI_MESSAGE_CONTROL_CHANGE",
            "enum": "MidiMessageList"
          },
          {
            "value": "12",
            "name": "MIDI_MESSAGE_PROGRAM_CHANGE",
            "enum": "MidiMessageList"
          },
          {
            "value": "13",
            "name": "MIDI_MESSAGE_CHANNEL_PRESSURE",
            "enum": "MidiMessageList"
          },
          {
            "value": "14",
            "name": "MIDI_MESSAGE_PITCH_BEND",
            "enum": "MidiMessageList"
          },
          {
            "value": "0",
            "name": "OK",
            "enum": "Error"
          },
          {
            "value": "1",
            "name": "FAILED",
            "enum": "Error"
          },
          {
            "value": "2",
            "name": "ERR_UNAVAILABLE",
            "enum": "Error"
          },
          {
            "value": "3",
            "name": "ERR_UNCONFIGURED",
            "enum": "Error"
          },
          {
            "value": "4",
            "name": "ERR_UNAUTHORIZED",
            "enum": "Error"
          },
          {
            "value": "5",
            "name": "ERR_PARAMETER_RANGE_ERROR",
            "enum": "Error"
          },
          {
            "value": "6",
            "name": "ERR_OUT_OF_MEMORY",
            "enum": "Error"
          },
          {
            "value": "7",
            "name": "ERR_FILE_NOT_FOUND",
            "enum": "Error"
          },
          {
            "value": "8",
            "name": "ERR_FILE_BAD_DRIVE",
            "enum": "Error"
          },
          {
            "value": "9",
            "name": "ERR_FILE_BAD_PATH",
            "enum": "Error"
          },
          {
            "value": "10",
            "name": "ERR_FILE_NO_PERMISSION",
            "enum": "Error"
          },
          {
            "value": "11",
            "name": "ERR_FILE_ALREADY_IN_USE",
            "enum": "Error"
          },
          {
            "value": "12",
            "name": "ERR_FILE_CANT_OPEN",
            "enum": "Error"
          },
          {
            "value": "13",
            "name": "ERR_FILE_CANT_WRITE",
            "enum": "Error"
          },
          {
            "value": "14",
            "name": "ERR_FILE_CANT_READ",
            "enum": "Error"
          },
          {
            "value": "15",
            "name": "ERR_FILE_UNRECOGNIZED",
            "enum": "Error"
          },
          {
            "value": "16",
            "name": "ERR_FILE_CORRUPT",
            "enum": "Error"
          },
          {
            "value": "17",
            "name": "ERR_FILE_MISSING_DEPENDENCIES",
            "enum": "Error"
          },
          {
            "value": "18",
            "name": "ERR_FILE_EOF",
            "enum": "Error"
          },
          {
            "value": "19",
            "name": "ERR_CANT_OPEN",
            "enum": "Error"
          },
          {
            "value": "20",
            "name": "ERR_CANT_CREATE",
            "enum": "Error"
          },
          {
            "value": "21",
            "name": "ERR_QUERY_FAILED",
            "enum": "Error"
          },
          {
            "value": "22",
            "name": "ERR_ALREADY_IN_USE",
            "enum": "Error"
          },
          {
            "value": "23",
            "name": "ERR_LOCKED",
            "enum": "Error"
          },
          {
            "value": "24",
            "name": "ERR_TIMEOUT",
            "enum": "Error"
          },
          {
            "value": "25",
            "name": "ERR_CANT_CONNECT",
            "enum": "Error"
          },
          {
            "value": "26",
            "name": "ERR_CANT_RESOLVE",
            "enum": "Error"
          },
          {
            "value": "27",
            "name": "ERR_CONNECTION_ERROR",
            "enum": "Error"
          },
          {
            "value": "28",
            "name": "ERR_CANT_ACQUIRE_RESOURCE",
            "enum": "Error"
          },
          {
            "value": "29",
            "name": "ERR_CANT_FORK",
            "enum": "Error"
          },
          {
            "value": "30",
            "name": "ERR_INVALID_DATA",
            "enum": "Error"
          },
          {
            "value": "31",
            "name": "ERR_INVALID_PARAMETER",
            "enum": "Error"
          },
          {
            "value": "32",
            "name": "ERR_ALREADY_EXISTS",
            "enum": "Error"
          },
          {
            "value": "33",
            "name": "ERR_DOES_NOT_EXIST",
            "enum": "Error"
          },
          {
            "value": "34",
            "name": "ERR_DATABASE_CANT_READ",
            "enum": "Error"
          },
          {
            "value": "35",
            "name": "ERR_DATABASE_CANT_WRITE",
            "enum": "Error"
          },
          {
            "value": "36",
            "name": "ERR_COMPILATION_FAILED",
            "enum": "Error"
          },
          {
            "value": "37",
            "name": "ERR_METHOD_NOT_FOUND",
            "enum": "Error"
          },
          {
            "value": "38",
            "name": "ERR_LINK_FAILED",
            "enum": "Error"
          },
          {
            "value": "39",
            "name": "ERR_SCRIPT_FAILED",
            "enum": "Error"
          },
          {
            "value": "40",
            "name": "ERR_CYCLIC_LINK",
            "enum": "Error"
          },
          {
            "value": "41",
            "name": "ERR_INVALID_DECLARATION",
            "enum": "Error"
          },
          {
            "value": "42",
            "name": "ERR_DUPLICATE_SYMBOL",
            "enum": "Error"
          },
          {
            "value": "43",
            "name": "ERR_PARSE_ERROR",
            "enum": "Error"
          },
          {
            "value": "44",
            "name": "ERR_BUSY",
            "enum": "Error"
          },
          {
            "value": "45",
            "name": "ERR_SKIP",
            "enum": "Error"
          },
          {
            "value": "46",
            "name": "ERR_HELP",
            "enum": "Error"
          },
          {
            "value": "47",
            "name": "ERR_BUG",
            "enum": "Error"
          },
          {
            "value": "48",
            "name": "ERR_PRINTER_ON_FIRE",
            "enum": "Error"
          },
          {
            "value": "0",
            "name": "PROPERTY_HINT_NONE",
            "enum": "PropertyHint"
          },
          {
            "value": "1",
            "name": "PROPERTY_HINT_RANGE",
            "enum": "PropertyHint"
          },
          {
            "value": "2",
            "name": "PROPERTY_HINT_EXP_RANGE",
            "enum": "PropertyHint"
          },
          {
            "value": "3",
            "name": "PROPERTY_HINT_ENUM",
            "enum": "PropertyHint"
          },
          {
            "value": "4",
            "name": "PROPERTY_HINT_EXP_EASING",
            "enum": "PropertyHint"
          },
          {
            "value": "5",
            "name": "PROPERTY_HINT_LENGTH",
            "enum": "PropertyHint"
          },
          {
            "value": "7",
            "name": "PROPERTY_HINT_KEY_ACCEL",
            "enum": "PropertyHint"
          },
          {
            "value": "8",
            "name": "PROPERTY_HINT_FLAGS",
            "enum": "PropertyHint"
          },
          {
            "value": "9",
            "name": "PROPERTY_HINT_LAYERS_2D_RENDER",
            "enum": "PropertyHint"
          },
          {
            "value": "10",
            "name": "PROPERTY_HINT_LAYERS_2D_PHYSICS",
            "enum": "PropertyHint"
          },
          {
            "value": "11",
            "name": "PROPERTY_HINT_LAYERS_3D_RENDER",
            "enum": "PropertyHint"
          },
          {
            "value": "12",
            "name": "PROPERTY_HINT_LAYERS_3D_PHYSICS",
            "enum": "PropertyHint"
          },
          {
            "value": "13",
            "name": "PROPERTY_HINT_FILE",
            "enum": "PropertyHint"
          },
          {
            "value": "14",
            "name": "PROPERTY_HINT_DIR",
            "enum": "PropertyHint"
          },
          {
            "value": "15",
            "name": "PROPERTY_HINT_GLOBAL_FILE",
            "enum": "PropertyHint"
          },
          {
            "value": "16",
            "name": "PROPERTY_HINT_GLOBAL_DIR",
            "enum": "PropertyHint"
          },
          {
            "value": "17",
            "name": "PROPERTY_HINT_RESOURCE_TYPE",
            "enum": "PropertyHint"
          },
          {
            "value": "18",
            "name": "PROPERTY_HINT_MULTILINE_TEXT",
            "enum": "PropertyHint"
          },
          {
            "value": "19",
            "name": "PROPERTY_HINT_PLACEHOLDER_TEXT",
            "enum": "PropertyHint"
          },
          {
            "value": "20",
            "name": "PROPERTY_HINT_COLOR_NO_ALPHA",
            "enum": "PropertyHint"
          },
          {
            "value": "21",
            "name": "PROPERTY_HINT_IMAGE_COMPRESS_LOSSY",
            "enum": "PropertyHint"
          },
          {
            "value": "22",
            "name": "PROPERTY_HINT_IMAGE_COMPRESS_LOSSLESS",
            "enum": "PropertyHint"
          },
          {
            "value": "1",
            "name": "PROPERTY_USAGE_STORAGE",
            "enum": "PropertyUsageFlags"
          },
          {
            "value": "2",
            "name": "PROPERTY_USAGE_EDITOR",
            "enum": "PropertyUsageFlags"
          },
          {
            "value": "4",
            "name": "PROPERTY_USAGE_NETWORK",
            "enum": "PropertyUsageFlags"
          },
          {
            "value": "8",
            "name": "PROPERTY_USAGE_EDITOR_HELPER",
            "enum": "PropertyUsageFlags"
          },
          {
            "value": "16",
            "name": "PROPERTY_USAGE_CHECKABLE",
            "enum": "PropertyUsageFlags"
          },
          {
            "value": "32",
            "name": "PROPERTY_USAGE_CHECKED",
            "enum": "PropertyUsageFlags"
          },
          {
            "value": "64",
            "name": "PROPERTY_USAGE_INTERNATIONALIZED",
            "enum": "PropertyUsageFlags"
          },
          {
            "value": "128",
            "name": "PROPERTY_USAGE_GROUP",
            "enum": "PropertyUsageFlags"
          },
          {
            "value": "256",
            "name": "PROPERTY_USAGE_CATEGORY",
            "enum": "PropertyUsageFlags"
          },
          {
            "value": "2048",
            "name": "PROPERTY_USAGE_NO_INSTANCE_STATE",
            "enum": "PropertyUsageFlags"
          },
          {
            "value": "4096",
            "name": "PROPERTY_USAGE_RESTART_IF_CHANGED",
            "enum": "PropertyUsageFlags"
          },
          {
            "value": "8192",
            "name": "PROPERTY_USAGE_SCRIPT_VARIABLE",
            "enum": "PropertyUsageFlags"
          },
          {
            "value": "7",
            "name": "PROPERTY_USAGE_DEFAULT",
            "enum": "PropertyUsageFlags"
          },
          {
            "value": "71",
            "name": "PROPERTY_USAGE_DEFAULT_INTL",
            "enum": "PropertyUsageFlags"
          },
          {
            "value": "5",
            "name": "PROPERTY_USAGE_NOEDITOR",
            "enum": "PropertyUsageFlags"
          },
          {
            "value": "1",
            "name": "METHOD_FLAG_NORMAL",
            "enum": "MethodFlags"
          },
          {
            "value": "2",
            "name": "METHOD_FLAG_EDITOR",
            "enum": "MethodFlags"
          },
          {
            "value": "4",
            "name": "METHOD_FLAG_NOSCRIPT",
            "enum": "MethodFlags"
          },
          {
            "value": "8",
            "name": "METHOD_FLAG_CONST",
            "enum": "MethodFlags"
          },
          {
            "value": "16",
            "name": "METHOD_FLAG_REVERSE",
            "enum": "MethodFlags"
          },
          {
            "value": "32",
            "name": "METHOD_FLAG_VIRTUAL",
            "enum": "MethodFlags"
          },
          {
            "value": "64",
            "name": "METHOD_FLAG_FROM_SCRIPT",
            "enum": "MethodFlags"
          },
          {
            "value": "1",
            "name": "METHOD_FLAGS_DEFAULT",
            "enum": "MethodFlags"
          },
          {
            "value": "0",
            "name": "TYPE_NIL",
            "enum": "Variant.Type"
          },
          {
            "value": "1",
            "name": "TYPE_BOOL",
            "enum": "Variant.Type"
          },
          {
            "value": "2",
            "name": "TYPE_INT",
            "enum": "Variant.Type"
          },
          {
            "value": "3",
            "name": "TYPE_REAL",
            "enum": "Variant.Type"
          },
          {
            "value": "4",
            "name": "TYPE_STRING",
            "enum": "Variant.Type"
          },
          {
            "value": "5",
            "name": "TYPE_VECTOR2",
            "enum": "Variant.Type"
          },
          {
            "value": "6",
            "name": "TYPE_RECT2",
            "enum": "Variant.Type"
          },
          {
            "value": "7",
            "name": "TYPE_VECTOR3",
            "enum": "Variant.Type"
          },
          {
            "value": "8",
            "name": "TYPE_TRANSFORM2D",
            "enum": "Variant.Type"
          },
          {
            "value": "9",
            "name": "TYPE_PLANE",
            "enum": "Variant.Type"
          },
          {
            "value": "10",
            "name": "TYPE_QUAT",
            "enum": "Variant.Type"
          },
          {
            "value": "11",
            "name": "TYPE_AABB",
            "enum": "Variant.Type"
          },
          {
            "value": "12",
            "name": "TYPE_BASIS",
            "enum": "Variant.Type"
          },
          {
            "value": "13",
            "name": "TYPE_TRANSFORM",
            "enum": "Variant.Type"
          },
          {
            "value": "14",
            "name": "TYPE_COLOR",
            "enum": "Variant.Type"
          },
          {
            "value": "15",
            "name": "TYPE_NODE_PATH",
            "enum": "Variant.Type"
          },
          {
            "value": "16",
            "name": "TYPE_RID",
            "enum": "Variant.Type"
          },
          {
            "value": "17",
            "name": "TYPE_OBJECT",
            "enum": "Variant.Type"
          },
          {
            "value": "18",
            "name": "TYPE_DICTIONARY",
            "enum": "Variant.Type"
          },
          {
            "value": "19",
            "name": "TYPE_ARRAY",
            "enum": "Variant.Type"
          },
          {
            "value": "20",
            "name": "TYPE_RAW_ARRAY",
            "enum": "Variant.Type"
          },
          {
            "value": "21",
            "name": "TYPE_INT_ARRAY",
            "enum": "Variant.Type"
          },
          {
            "value": "22",
            "name": "TYPE_REAL_ARRAY",
            "enum": "Variant.Type"
          },
          {
            "value": "23",
            "name": "TYPE_STRING_ARRAY",
            "enum": "Variant.Type"
          },
          {
            "value": "24",
            "name": "TYPE_VECTOR2_ARRAY",
            "enum": "Variant.Type"
          },
          {
            "value": "25",
            "name": "TYPE_VECTOR3_ARRAY",
            "enum": "Variant.Type"
          },
          {
            "value": "26",
            "name": "TYPE_COLOR_ARRAY",
            "enum": "Variant.Type"
          },
          {
            "value": "27",
            "name": "TYPE_MAX",
            "enum": "Variant.Type"
          },
          {
            "value": "0",
            "name": "OP_EQUAL",
            "enum": "Variant.Operator"
          },
          {
            "value": "1",
            "name": "OP_NOT_EQUAL",
            "enum": "Variant.Operator"
          },
          {
            "value": "2",
            "name": "OP_LESS",
            "enum": "Variant.Operator"
          },
          {
            "value": "3",
            "name": "OP_LESS_EQUAL",
            "enum": "Variant.Operator"
          },
          {
            "value": "4",
            "name": "OP_GREATER",
            "enum": "Variant.Operator"
          },
          {
            "value": "5",
            "name": "OP_GREATER_EQUAL",
            "enum": "Variant.Operator"
          },
          {
            "value": "6",
            "name": "OP_ADD",
            "enum": "Variant.Operator"
          },
          {
            "value": "7",
            "name": "OP_SUBTRACT",
            "enum": "Variant.Operator"
          },
          {
            "value": "8",
            "name": "OP_MULTIPLY",
            "enum": "Variant.Operator"
          },
          {
            "value": "9",
            "name": "OP_DIVIDE",
            "enum": "Variant.Operator"
          },
          {
            "value": "10",
            "name": "OP_NEGATE",
            "enum": "Variant.Operator"
          },
          {
            "value": "11",
            "name": "OP_POSITIVE",
            "enum": "Variant.Operator"
          },
          {
            "value": "12",
            "name": "OP_MODULE",
            "enum": "Variant.Operator"
          },
          {
            "value": "13",
            "name": "OP_STRING_CONCAT",
            "enum": "Variant.Operator"
          },
          {
            "value": "14",
            "name": "OP_SHIFT_LEFT",
            "enum": "Variant.Operator"
          },
          {
            "value": "15",
            "name": "OP_SHIFT_RIGHT",
            "enum": "Variant.Operator"
          },
          {
            "value": "16",
            "name": "OP_BIT_AND",
            "enum": "Variant.Operator"
          },
          {
            "value": "17",
            "name": "OP_BIT_OR",
            "enum": "Variant.Operator"
          },
          {
            "value": "18",
            "name": "OP_BIT_XOR",
            "enum": "Variant.Operator"
          },
          {
            "value": "19",
            "name": "OP_BIT_NEGATE",
            "enum": "Variant.Operator"
          },
          {
            "value": "20",
            "name": "OP_AND",
            "enum": "Variant.Operator"
          },
          {
            "value": "21",
            "name": "OP_OR",
            "enum": "Variant.Operator"
          },
          {
            "value": "22",
            "name": "OP_XOR",
            "enum": "Variant.Operator"
          },
          {
            "value": "23",
            "name": "OP_NOT",
            "enum": "Variant.Operator"
          },
          {
            "value": "24",
            "name": "OP_IN",
            "enum": "Variant.Operator"
          },
          {
            "value": "25",
            "name": "OP_MAX",
            "enum": "Variant.Operator"
          }
        ]
      },
      "brief_description": "Global scope constants and variables.",
      "description": "Global scope constants and variables. This is all that resides in the globals, constants regarding error codes, scancodes, property hints, etc.\n\t\tSingletons are also documented here, since they can be accessed from anywhere."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "value": "The [Gradient] that will be used to fill the texture.",
            "setter": "set_gradient",
            "name": "gradient",
            "getter": "get_gradient",
            "type": "Gradient"
          },
          {
            "default": "2048",
            "value": "The number of color samples that will be obtained from the [Gradient].",
            "setter": "set_width",
            "name": "width",
            "getter": "get_width",
            "type": "int"
          }
        ]
      },
      "inherits": "Texture",
      "methods": {},
      "name": "GradientTexture",
      "version": "3.3",
      "constants": {},
      "brief_description": "Gradient-filled texture.",
      "description": "GradientTexture uses a [Gradient] to fill the texture data. The gradient will be filled from left to right using colors obtained from the gradient. This means the texture does not necessarily represent an exact copy of the gradient, but instead an interpolation of samples obtained from the gradient at fixed steps (see [member width])."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "PoolColorArray( 0, 0, 0, 1, 1, 1, 1, 1 )",
            "value": "Gradient's colors returned as a [PoolColorArray].",
            "setter": "set_colors",
            "name": "colors",
            "getter": "get_colors",
            "type": "PoolColorArray"
          },
          {
            "default": "PoolRealArray( 0, 1 )",
            "value": "Gradient's offsets returned as a [PoolRealArray].",
            "setter": "set_offsets",
            "name": "offsets",
            "getter": "get_offsets",
            "type": "PoolRealArray"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "offset",
                "type": "float",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "add_point",
            "description": "Adds the specified color to the end of the ramp, with the specified offset."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "point",
              "type": "int",
              "index": "0"
            },
            "name": "get_color",
            "description": "Returns the color of the ramp color at index [code]point[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "point",
              "type": "int",
              "index": "0"
            },
            "name": "get_offset",
            "description": "Returns the offset of the ramp color at index [code]point[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_point_count",
            "description": "Returns the number of colors in the ramp."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "offset",
              "type": "float",
              "index": "0"
            },
            "name": "interpolate",
            "description": "Returns the interpolated color specified by [code]offset[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "point",
              "type": "int",
              "index": "0"
            },
            "name": "remove_point",
            "description": "Removes the color at the index [code]point[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "point",
                "type": "int",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "set_color",
            "description": "Sets the color of the ramp color at index [code]point[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "point",
                "type": "int",
                "index": "0"
              },
              {
                "name": "offset",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_offset",
            "description": "Sets the offset for the ramp color at index [code]point[/code]."
          }
        ]
      },
      "name": "Gradient",
      "version": "3.3",
      "constants": {},
      "brief_description": "A color interpolator resource which can be used to generate colors between user-defined color points.",
      "description": "Given a set of colors, this resource will interpolate them in order. This means that if you have color 1, color 2 and color 3, the ramp will interpolate from color 1 to color 2 and from color 2 to color 3. The ramp will initially have 2 colors (black and white), one (black) at ramp lower offset 0 and the other (white) at the ramp higher offset 1."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "default": "Color( 1, 1, 1, 1 )",
            "name": "activity",
            "type": "Color"
          },
          {
            "default": "160",
            "name": "bezier_len_neg",
            "type": "int"
          },
          {
            "default": "80",
            "name": "bezier_len_pos",
            "type": "int"
          },
          {
            "value": "The background drawn under the grid.",
            "name": "bg",
            "type": "StyleBox"
          },
          {
            "default": "Color( 1, 1, 1, 0.2 )",
            "value": "Color of major grid lines.",
            "name": "grid_major",
            "type": "Color"
          },
          {
            "default": "Color( 1, 1, 1, 0.05 )",
            "value": "Color of minor grid lines.",
            "name": "grid_minor",
            "type": "Color"
          },
          {
            "name": "minimap",
            "type": "Texture"
          },
          {
            "value": "The icon for the zoom out button.",
            "name": "minus",
            "type": "Texture"
          },
          {
            "value": "The icon for the zoom in button.",
            "name": "more",
            "type": "Texture"
          },
          {
            "default": "48",
            "value": "The horizontal range within which a port can be grabbed (on both sides).",
            "name": "port_grab_distance_horizontal",
            "type": "int"
          },
          {
            "default": "6",
            "value": "The vertical range within which a port can be grabbed (on both sides).",
            "name": "port_grab_distance_vertical",
            "type": "int"
          },
          {
            "value": "The icon for the zoom reset button.",
            "name": "reset",
            "type": "Texture"
          },
          {
            "default": "Color( 1, 1, 1, 0.3 )",
            "value": "The fill color of the selection rectangle.",
            "name": "selection_fill",
            "type": "Color"
          },
          {
            "default": "Color( 1, 1, 1, 0.8 )",
            "value": "The outline color of the selection rectangle.",
            "name": "selection_stroke",
            "type": "Color"
          },
          {
            "value": "The icon for the snap toggle button.",
            "name": "snap",
            "type": "Texture"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "2",
            "setter": "set_focus_mode",
            "override": "true",
            "name": "focus_mode",
            "getter": "get_focus_mode",
            "type": "int",
            "enum": "Control.FocusMode"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the minimap is visible.",
            "setter": "set_minimap_enabled",
            "name": "minimap_enabled",
            "getter": "is_minimap_enabled",
            "type": "bool"
          },
          {
            "default": "0.65",
            "value": "The opacity of the minimap rectangle.",
            "setter": "set_minimap_opacity",
            "name": "minimap_opacity",
            "getter": "get_minimap_opacity",
            "type": "float"
          },
          {
            "default": "Vector2( 240, 160 )",
            "value": "The size of the minimap rectangle. The map itself is based on the size of the grid area and is scaled to fit this rectangle.",
            "setter": "set_minimap_size",
            "name": "minimap_size",
            "getter": "get_minimap_size",
            "type": "Vector2"
          },
          {
            "default": "true",
            "setter": "set_clip_contents",
            "override": "true",
            "name": "rect_clip_content",
            "getter": "is_clipping_contents",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], enables disconnection of existing connections in the GraphEdit by dragging the right end.",
            "setter": "set_right_disconnects",
            "name": "right_disconnects",
            "getter": "is_right_disconnects_enabled",
            "type": "bool"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The scroll offset.",
            "setter": "set_scroll_ofs",
            "name": "scroll_offset",
            "getter": "get_scroll_ofs",
            "type": "Vector2"
          },
          {
            "default": "20",
            "value": "The snapping distance in pixels.",
            "setter": "set_snap",
            "name": "snap_distance",
            "getter": "get_snap",
            "type": "int"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables snapping.",
            "setter": "set_use_snap",
            "name": "use_snap",
            "getter": "is_using_snap",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "The current zoom value.",
            "setter": "set_zoom",
            "name": "zoom",
            "getter": "get_zoom",
            "type": "float"
          }
        ]
      },
      "inherits": "Control",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "from_type",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_type",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "add_valid_connection_type",
            "description": "Makes possible the connection between two different slot types. The type is defined with the [method GraphNode.set_slot] method."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "type",
              "type": "int",
              "index": "0"
            },
            "name": "add_valid_left_disconnect_type",
            "description": "Makes possible to disconnect nodes when dragging from the slot at the left if it has the specified type."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "type",
              "type": "int",
              "index": "0"
            },
            "name": "add_valid_right_disconnect_type",
            "description": "Makes possible to disconnect nodes when dragging from the slot at the right if it has the specified type."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_connections",
            "description": "Removes all connections between nodes."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "from",
                "type": "String",
                "index": "0"
              },
              {
                "name": "from_port",
                "type": "int",
                "index": "1"
              },
              {
                "name": "to",
                "type": "String",
                "index": "2"
              },
              {
                "name": "to_port",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "connect_node",
            "description": "Create a connection between the [code]from_port[/code] slot of the [code]from[/code] GraphNode and the [code]to_port[/code] slot of the [code]to[/code] GraphNode. If the connection already exists, no connection is created."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "from",
                "type": "String",
                "index": "0"
              },
              {
                "name": "from_port",
                "type": "int",
                "index": "1"
              },
              {
                "name": "to",
                "type": "String",
                "index": "2"
              },
              {
                "name": "to_port",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "disconnect_node",
            "description": "Removes the connection between the [code]from_port[/code] slot of the [code]from[/code] GraphNode and the [code]to_port[/code] slot of the [code]to[/code] GraphNode. If the connection does not exist, no connection is removed."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_connection_list",
            "description": "Returns an Array containing the list of connections. A connection consists in a structure of the form [code]{ from_port: 0, from: \"GraphNode name 0\", to_port: 1, to: \"GraphNode name 1\" }[/code]."
          },
          {
            "return": {
              "type": "HBoxContainer"
            },
            "name": "get_zoom_hbox",
            "description": "Gets the [HBoxContainer] that contains the zooming and grid snap controls in the top left of the graph.\n\t\t\t\tWarning: The intended usage of this function is to allow you to reposition or add your own custom controls to the container. This is an internal control and as such should not be freed. If you wish to hide this or any of its children, use their [member CanvasItem.visible] property instead."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "from",
                "type": "String",
                "index": "0"
              },
              {
                "name": "from_port",
                "type": "int",
                "index": "1"
              },
              {
                "name": "to",
                "type": "String",
                "index": "2"
              },
              {
                "name": "to_port",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "is_node_connected",
            "description": "Returns [code]true[/code] if the [code]from_port[/code] slot of the [code]from[/code] GraphNode is connected to the [code]to_port[/code] slot of the [code]to[/code] GraphNode."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "from_type",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_type",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "is_valid_connection_type",
            "description": "Returns whether it's possible to connect slots of the specified types."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "from_type",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_type",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "remove_valid_connection_type",
            "description": "Makes it not possible to connect between two different slot types. The type is defined with the [method GraphNode.set_slot] method."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "type",
              "type": "int",
              "index": "0"
            },
            "name": "remove_valid_left_disconnect_type",
            "description": "Removes the possibility to disconnect nodes when dragging from the slot at the left if it has the specified type."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "type",
              "type": "int",
              "index": "0"
            },
            "name": "remove_valid_right_disconnect_type",
            "description": "Removes the possibility to disconnect nodes when dragging from the slot at the right if it has the specified type."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "from",
                "type": "String",
                "index": "0"
              },
              {
                "name": "from_port",
                "type": "int",
                "index": "1"
              },
              {
                "name": "to",
                "type": "String",
                "index": "2"
              },
              {
                "name": "to_port",
                "type": "int",
                "index": "3"
              },
              {
                "name": "amount",
                "type": "float",
                "index": "4"
              }
            ],
            "name": "set_connection_activity",
            "description": "Sets the coloration of the connection between [code]from[/code]'s [code]from_port[/code] and [code]to[/code]'s [code]to_port[/code] with the color provided in the [code]activity[/code] theme property."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "node",
              "type": "Node",
              "index": "0"
            },
            "name": "set_selected",
            "description": "Sets the specified [code]node[/code] as the one selected."
          }
        ]
      },
      "name": "GraphEdit",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "_begin_node_move",
            "description": "Emitted at the beginning of a GraphNode movement."
          },
          {
            "name": "_end_node_move",
            "description": "Emitted at the end of a GraphNode movement."
          },
          {
            "argument": [
              {
                "name": "to",
                "type": "String",
                "index": "0"
              },
              {
                "name": "to_slot",
                "type": "int",
                "index": "1"
              },
              {
                "name": "release_position",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "connection_from_empty",
            "description": "Emitted when user dragging connection from input port into empty space of the graph."
          },
          {
            "argument": [
              {
                "name": "from",
                "type": "String",
                "index": "0"
              },
              {
                "name": "from_slot",
                "type": "int",
                "index": "1"
              },
              {
                "name": "to",
                "type": "String",
                "index": "2"
              },
              {
                "name": "to_slot",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "connection_request",
            "description": "Emitted to the GraphEdit when the connection between the [code]from_slot[/code] slot of the [code]from[/code] GraphNode and the [code]to_slot[/code] slot of the [code]to[/code] GraphNode is attempted to be created."
          },
          {
            "argument": [
              {
                "name": "from",
                "type": "String",
                "index": "0"
              },
              {
                "name": "from_slot",
                "type": "int",
                "index": "1"
              },
              {
                "name": "release_position",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "connection_to_empty",
            "description": "Emitted when user dragging connection from output port into empty space of the graph."
          },
          {
            "name": "copy_nodes_request",
            "description": "Emitted when the user presses [code]Ctrl + C[/code]."
          },
          {
            "name": "delete_nodes_request",
            "description": "Emitted when a GraphNode is attempted to be removed from the GraphEdit."
          },
          {
            "argument": [
              {
                "name": "from",
                "type": "String",
                "index": "0"
              },
              {
                "name": "from_slot",
                "type": "int",
                "index": "1"
              },
              {
                "name": "to",
                "type": "String",
                "index": "2"
              },
              {
                "name": "to_slot",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "disconnection_request",
            "description": "Emitted to the GraphEdit when the connection between [code]from_slot[/code] slot of [code]from[/code] GraphNode and [code]to_slot[/code] slot of [code]to[/code] GraphNode is attempted to be removed."
          },
          {
            "name": "duplicate_nodes_request",
            "description": "Emitted when a GraphNode is attempted to be duplicated in the GraphEdit."
          },
          {
            "argument": {
              "name": "node",
              "type": "Node",
              "index": "0"
            },
            "name": "node_selected",
            "description": "Emitted when a GraphNode is selected."
          },
          {
            "argument": {
              "name": "node",
              "type": "Node",
              "index": "0"
            },
            "name": "node_unselected",
            "description": {}
          },
          {
            "name": "paste_nodes_request",
            "description": "Emitted when the user presses [code]Ctrl + V[/code]."
          },
          {
            "argument": {
              "name": "position",
              "type": "Vector2",
              "index": "0"
            },
            "name": "popup_request",
            "description": "Emitted when a popup is requested. Happens on right-clicking in the GraphEdit. [code]position[/code] is the position of the mouse pointer when the signal is sent."
          },
          {
            "argument": {
              "name": "ofs",
              "type": "Vector2",
              "index": "0"
            },
            "name": "scroll_offset_changed",
            "description": "Emitted when the scroll offset is changed by the user. It will not be emitted when changed in code."
          }
        ]
      },
      "constants": {},
      "brief_description": "GraphEdit is an area capable of showing various GraphNodes. It manages connection events between them.",
      "description": "GraphEdit manages the showing of GraphNodes it contains, as well as connections and disconnections between them. Signals are sent for each of these two events. Disconnection between GraphNode slots is disabled by default.\n\t\tIt is greatly advised to enable low-processor usage mode (see [member OS.low_processor_usage_mode]) when using GraphEdits."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "value": "The background used when [member overlay] is set to [constant OVERLAY_BREAKPOINT].",
            "name": "breakpoint",
            "type": "StyleBox"
          },
          {
            "value": "The icon for the close button, visible when [member show_close] is enabled.",
            "name": "close",
            "type": "Texture"
          },
          {
            "default": "Color( 0, 0, 0, 1 )",
            "value": "The color modulation applied to the close button icon.",
            "name": "close_color",
            "type": "Color"
          },
          {
            "default": "18",
            "value": "The vertical offset of the close button.",
            "name": "close_offset",
            "type": "int"
          },
          {
            "value": "The [StyleBox] used when [member comment] is enabled.",
            "name": "comment",
            "type": "StyleBox"
          },
          {
            "value": "The [StyleBox] used when [member comment] is enabled and the [GraphNode] is focused.",
            "name": "commentfocus",
            "type": "StyleBox"
          },
          {
            "name": "defaultfocus",
            "type": "StyleBox"
          },
          {
            "name": "defaultframe",
            "type": "StyleBox"
          },
          {
            "value": "The default background for [GraphNode].",
            "name": "frame",
            "type": "StyleBox"
          },
          {
            "value": "The icon used for representing ports.",
            "name": "port",
            "type": "Texture"
          },
          {
            "default": "3",
            "value": "Horizontal offset for the ports.",
            "name": "port_offset",
            "type": "int"
          },
          {
            "value": "The background used when [member overlay] is set to [constant OVERLAY_POSITION].",
            "name": "position",
            "type": "StyleBox"
          },
          {
            "value": "The icon used for resizer, visible when [member resizable] is enabled.",
            "name": "resizer",
            "type": "Texture"
          },
          {
            "default": "Color( 0, 0, 0, 1 )",
            "value": "The color modulation applied to the resizer icon.",
            "name": "resizer_color",
            "type": "Color"
          },
          {
            "value": "The background used when the [GraphNode] is selected.",
            "name": "selectedframe",
            "type": "StyleBox"
          },
          {
            "default": "1",
            "value": "The vertical distance between ports.",
            "name": "separation",
            "type": "int"
          },
          {
            "default": "Color( 0, 0, 0, 1 )",
            "value": "Color of the title text.",
            "name": "title_color",
            "type": "Color"
          },
          {
            "value": "Font used for the title text.",
            "name": "title_font",
            "type": "Font"
          },
          {
            "default": "20",
            "value": "Vertical offset of the title text.",
            "name": "title_offset",
            "type": "int"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the GraphNode is a comment node.",
            "setter": "set_comment",
            "name": "comment",
            "getter": "is_comment",
            "type": "bool"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The offset of the GraphNode, relative to the scroll offset of the [GraphEdit].\n\t\t\t[b]Note:[/b] You cannot use position directly, as [GraphEdit] is a [Container].",
            "setter": "set_offset",
            "name": "offset",
            "getter": "get_offset",
            "type": "Vector2"
          },
          {
            "default": "0",
            "value": "Sets the overlay shown above the GraphNode. See [enum Overlay].",
            "setter": "set_overlay",
            "name": "overlay",
            "getter": "get_overlay",
            "type": "int",
            "enum": "GraphNode.Overlay"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the user can resize the GraphNode.\n\t\t\t[b]Note:[/b] Dragging the handle will only emit the [signal resize_request] signal, the GraphNode needs to be resized manually.",
            "setter": "set_resizable",
            "name": "resizable",
            "getter": "is_resizable",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the GraphNode is selected.",
            "setter": "set_selected",
            "name": "selected",
            "getter": "is_selected",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the close button will be visible.\n\t\t\t[b]Note:[/b] Pressing it will only emit the [signal close_request] signal, the GraphNode needs to be removed manually.",
            "setter": "set_show_close_button",
            "name": "show_close",
            "getter": "is_close_button_visible",
            "type": "bool"
          },
          {
            "default": "\"\"",
            "value": "The text displayed in the GraphNode's title bar.",
            "setter": "set_title",
            "name": "title",
            "getter": "get_title",
            "type": "String"
          }
        ]
      },
      "inherits": "Container",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "name": "clear_all_slots",
            "description": "Disables all input and output slots of the GraphNode."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "clear_slot",
            "description": "Disables input and output slot whose index is [code]idx[/code]."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "get_connection_input_color",
            "description": "Returns the color of the input connection [code]idx[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_connection_input_count",
            "description": "Returns the number of enabled input slots (connections) to the GraphNode."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "get_connection_input_position",
            "description": "Returns the position of the input connection [code]idx[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "get_connection_input_type",
            "description": "Returns the type of the input connection [code]idx[/code]."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "get_connection_output_color",
            "description": "Returns the color of the output connection [code]idx[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_connection_output_count",
            "description": "Returns the number of enabled output slots (connections) of the GraphNode."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "get_connection_output_position",
            "description": "Returns the position of the output connection [code]idx[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "get_connection_output_type",
            "description": "Returns the type of the output connection [code]idx[/code]."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_slot_color_left",
            "description": "Returns the color set to [code]idx[/code] left (input) slot."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_slot_color_right",
            "description": "Returns the color set to [code]idx[/code] right (output) slot."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_slot_type_left",
            "description": "Returns the (integer) type of left (input) [code]idx[/code] slot."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_slot_type_right",
            "description": "Returns the (integer) type of right (output) [code]idx[/code] slot."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_slot_enabled_left",
            "description": "Returns [code]true[/code] if left (input) slot [code]idx[/code] is enabled, [code]false[/code] otherwise."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_slot_enabled_right",
            "description": "Returns [code]true[/code] if right (output) slot [code]idx[/code] is enabled, [code]false[/code] otherwise."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "enable_left",
                "type": "bool",
                "index": "1"
              },
              {
                "name": "type_left",
                "type": "int",
                "index": "2"
              },
              {
                "name": "color_left",
                "type": "Color",
                "index": "3"
              },
              {
                "name": "enable_right",
                "type": "bool",
                "index": "4"
              },
              {
                "name": "type_right",
                "type": "int",
                "index": "5"
              },
              {
                "name": "color_right",
                "type": "Color",
                "index": "6"
              },
              {
                "default": "null",
                "name": "custom_left",
                "type": "Texture",
                "index": "7"
              },
              {
                "default": "null",
                "name": "custom_right",
                "type": "Texture",
                "index": "8"
              }
            ],
            "name": "set_slot",
            "description": "Sets properties of the slot with ID [code]idx[/code].\n\t\t\t\tIf [code]enable_left[/code]/[code]right[/code], a port will appear and the slot will be able to be connected from this side.\n\t\t\t\t[code]type_left[/code]/[code]right[/code] is an arbitrary type of the port. Only ports with the same type values can be connected.\n\t\t\t\t[code]color_left[/code]/[code]right[/code] is the tint of the port's icon on this side.\n\t\t\t\t[code]custom_left[/code]/[code]right[/code] is a custom texture for this side's port.\n\t\t\t\t[b]Note:[/b] This method only sets properties of the slot. To create the slot, add a [Control]-derived child to the GraphNode."
          }
        ]
      },
      "name": "GraphNode",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "close_request",
            "description": "Emitted when the GraphNode is requested to be closed. Happens on clicking the close button (see [member show_close])."
          },
          {
            "argument": [
              {
                "name": "from",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "to",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "dragged",
            "description": "Emitted when the GraphNode is dragged."
          },
          {
            "name": "offset_changed",
            "description": "Emitted when the GraphNode is moved."
          },
          {
            "name": "raise_request",
            "description": "Emitted when the GraphNode is requested to be displayed over other ones. Happens on focusing (clicking into) the GraphNode."
          },
          {
            "argument": {
              "name": "new_minsize",
              "type": "Vector2",
              "index": "0"
            },
            "name": "resize_request",
            "description": "Emitted when the GraphNode is requested to be resized. Happens on dragging the resizer handle (see [member resizable])."
          },
          {
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "slot_updated",
            "description": "Emitted when any GraphNode's slot is updated."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "OVERLAY_DISABLED",
            "enum": "Overlay"
          },
          {
            "value": "1",
            "name": "OVERLAY_BREAKPOINT",
            "enum": "Overlay"
          },
          {
            "value": "2",
            "name": "OVERLAY_POSITION",
            "enum": "Overlay"
          }
        ]
      },
      "brief_description": "A GraphNode is a container with potentially several input and output slots allowing connections between GraphNodes. Slots can have different, incompatible types.",
      "description": "A GraphNode is a container. Each GraphNode can have several input and output slots, sometimes referred to as ports, allowing connections between GraphNodes. To add a slot to GraphNode, add any [Control]-derived child node to it.\n\t\tAfter adding at least one child to GraphNode new sections will be automatically created in the Inspector called 'Slot'. When 'Slot' is expanded you will see list with index number for each slot. You can click on each of them to expand further.\n\t\tIn the Inspector you can enable (show) or disable (hide) slots. By default, all slots are disabled so you may not see any slots on your GraphNode initially. You can assign a type to each slot. Only slots of the same type will be able to connect to each other. You can also assign colors to slots. A tuple of input and output slots is defined for each GUI element included in the GraphNode. Input connections are on the left and output connections are on the right side of GraphNode. Only enabled slots are counted as connections."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/677",
          "title": "OS Test Demo"
        }
      },
      "theme_items": {
        "theme_item": [
          {
            "default": "4",
            "value": "The horizontal separation of children nodes.",
            "name": "hseparation",
            "type": "int"
          },
          {
            "default": "4",
            "value": "The vertical separation of children nodes.",
            "name": "vseparation",
            "type": "int"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "1",
            "value": "The number of columns in the [GridContainer]. If modified, [GridContainer] reorders its Control-derived children to accommodate the new layout.",
            "setter": "set_columns",
            "name": "columns",
            "getter": "get_columns",
            "type": "int"
          },
          {
            "default": "1",
            "setter": "set_mouse_filter",
            "override": "true",
            "name": "mouse_filter",
            "getter": "get_mouse_filter",
            "type": "int",
            "enum": "Control.MouseFilter"
          }
        ]
      },
      "inherits": "Container",
      "methods": {},
      "name": "GridContainer",
      "version": "3.3",
      "constants": {},
      "brief_description": "Grid container used to arrange Control-derived children in a grid like layout.",
      "description": "GridContainer will arrange its Control-derived children in a grid like structure, the grid columns are specified using the [member columns] property and the number of rows will be equal to the number of children in the container divided by the number of columns. For example, if the container has 5 children, and 2 columns, there will be 3 rows in the container.\n\t\tNotice that grid layout will preserve the columns and rows for every size of the container, and that empty columns will be expanded automatically.\n\t\t[b]Note:[/b] GridContainer only works with child nodes inheriting from Control. It won't rearrange child nodes inheriting from Node2D."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "25.0",
            "value": "The body B's initial anchor position defined by the joint's origin and a local offset [member initial_offset] along the joint's Y axis (along the groove).",
            "setter": "set_initial_offset",
            "name": "initial_offset",
            "getter": "get_initial_offset",
            "type": "float"
          },
          {
            "default": "50.0",
            "value": "The groove's length. The groove is from the joint's origin towards [member length] along the joint's local Y axis.",
            "setter": "set_length",
            "name": "length",
            "getter": "get_length",
            "type": "float"
          }
        ]
      },
      "inherits": "Joint2D",
      "methods": {},
      "name": "GrooveJoint2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Groove constraint for 2D physics.",
      "description": "Groove constraint for 2D physics. This is useful for making a body \"slide\" through a segment placed in another."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "PoolByteArray"
            },
            "name": "finish",
            "description": "Closes the current context, and return the computed hash."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "type",
              "type": "int",
              "enum": "HashingContext.HashType",
              "index": "0"
            },
            "name": "start",
            "description": "Starts a new hash computation of the given [code]type[/code] (e.g. [constant HASH_SHA256] to start computation of a SHA-256)."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "chunk",
              "type": "PoolByteArray",
              "index": "0"
            },
            "name": "update",
            "description": "Updates the computation with the given [code]chunk[/code] of data."
          }
        ]
      },
      "name": "HashingContext",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "HASH_MD5",
            "enum": "HashType"
          },
          {
            "value": "1",
            "name": "HASH_SHA1",
            "enum": "HashType"
          },
          {
            "value": "2",
            "name": "HASH_SHA256",
            "enum": "HashType"
          }
        ]
      },
      "brief_description": "Context to compute cryptographic hashes over multiple iterations.",
      "description": "The HashingContext class provides an interface for computing cryptographic hashes over multiple iterations. This is useful for example when computing hashes of big files (so you don't have to load them all in memory), network streams, and data streams in general (so you don't have to hold buffers).\n\t\tThe [enum HashType] enum shows the supported hashing algorithms.\n\t\t[codeblock]\n\t\tconst CHUNK_SIZE = 1024\n\n\t\tfunc hash_file(path):\n\t\t    var ctx = HashingContext.new()\n\t\t    var file = File.new()\n\t\t    # Start a SHA-256 context.\n\t\t    ctx.start(HashingContext.HASH_SHA256)\n\t\t    # Check that file exists.\n\t\t    if not file.file_exists(path):\n\t\t        return\n\t\t    # Open the file to hash.\n\t\t    file.open(path, File.READ)\n\t\t    # Update the context after reading each chunk.\n\t\t    while not file.eof_reached():\n\t\t        ctx.update(file.get_buffer(CHUNK_SIZE))\n\t\t    # Get the computed hash.\n\t\t    var res = ctx.finish()\n\t\t    # Print the result as hex string and array.\n\t\t    printt(res.hex_encode(), Array(res))\n\t\t[/codeblock]\n\t\t[b]Note:[/b] Not available in HTML5 exports."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": {
          "default": "4",
          "value": "The horizontal space between the [HBoxContainer]'s elements.",
          "name": "separation",
          "type": "int"
        }
      },
      "inherits": "BoxContainer",
      "methods": {},
      "name": "HBoxContainer",
      "version": "3.3",
      "constants": {},
      "brief_description": "Horizontal box container.",
      "description": "Horizontal box container. See [BoxContainer]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "PoolRealArray( 0, 0, 0, 0 )",
            "value": "Height map data, pool array must be of [member map_width] * [member map_depth] size.",
            "setter": "set_map_data",
            "name": "map_data",
            "getter": "get_map_data",
            "type": "PoolRealArray"
          },
          {
            "default": "2",
            "value": "Depth of the height map data. Changing this will resize the [member map_data].",
            "setter": "set_map_depth",
            "name": "map_depth",
            "getter": "get_map_depth",
            "type": "int"
          },
          {
            "default": "2",
            "value": "Width of the height map data. Changing this will resize the [member map_data].",
            "setter": "set_map_width",
            "name": "map_width",
            "getter": "get_map_width",
            "type": "int"
          }
        ]
      },
      "inherits": "Shape",
      "methods": {},
      "name": "HeightMapShape",
      "version": "3.3",
      "constants": {},
      "brief_description": "Height map shape for 3D physics (Bullet only).",
      "description": "Height map shape resource, which can be added to a [PhysicsBody] or [Area]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0.3",
            "value": "The speed with which the rotation across the axis perpendicular to the hinge gets corrected.",
            "setter": "set_param",
            "name": "angular_limit/bias",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the hinges maximum and minimum rotation, defined by [member angular_limit/lower] and [member angular_limit/upper] has effects.",
            "setter": "set_flag",
            "name": "angular_limit/enable",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "default": "-90.0",
            "value": "The minimum rotation. Only active if [member angular_limit/enable] is [code]true[/code].",
            "setter": "_set_lower_limit",
            "name": "angular_limit/lower",
            "getter": "_get_lower_limit",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The lower this value, the more the rotation gets slowed down.",
            "setter": "set_param",
            "name": "angular_limit/relaxation",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "0.9",
            "setter": "set_param",
            "name": "angular_limit/softness",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "90.0",
            "value": "The maximum rotation. Only active if [member angular_limit/enable] is [code]true[/code].",
            "setter": "_set_upper_limit",
            "name": "angular_limit/upper",
            "getter": "_get_upper_limit",
            "type": "float"
          },
          {
            "default": "false",
            "value": "When activated, a motor turns the hinge.",
            "setter": "set_flag",
            "name": "motor/enable",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "Maximum acceleration for the motor.",
            "setter": "set_param",
            "name": "motor/max_impulse",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Target speed for the motor.",
            "setter": "set_param",
            "name": "motor/target_velocity",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "0.3",
            "value": "The speed with which the two bodies get pulled together when they move in different directions.",
            "setter": "set_param",
            "name": "params/bias",
            "getter": "get_param",
            "type": "float"
          }
        ]
      },
      "inherits": "Joint",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "flag",
              "type": "int",
              "enum": "HingeJoint.Flag",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_flag",
            "description": "Returns the value of the specified flag."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "param",
              "type": "int",
              "enum": "HingeJoint.Param",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_param",
            "description": "Returns the value of the specified parameter."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "flag",
                "type": "int",
                "enum": "HingeJoint.Flag",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_flag",
            "description": "If [code]true[/code], enables the specified flag."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "param",
                "type": "int",
                "enum": "HingeJoint.Param",
                "index": "0"
              },
              {
                "name": "value",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_param",
            "description": "Sets the value of the specified parameter."
          }
        ]
      },
      "name": "HingeJoint",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "PARAM_BIAS",
            "enum": "Param"
          },
          {
            "value": "1",
            "name": "PARAM_LIMIT_UPPER",
            "enum": "Param"
          },
          {
            "value": "2",
            "name": "PARAM_LIMIT_LOWER",
            "enum": "Param"
          },
          {
            "value": "3",
            "name": "PARAM_LIMIT_BIAS",
            "enum": "Param"
          },
          {
            "value": "4",
            "name": "PARAM_LIMIT_SOFTNESS",
            "enum": "Param"
          },
          {
            "value": "5",
            "name": "PARAM_LIMIT_RELAXATION",
            "enum": "Param"
          },
          {
            "value": "6",
            "name": "PARAM_MOTOR_TARGET_VELOCITY",
            "enum": "Param"
          },
          {
            "value": "7",
            "name": "PARAM_MOTOR_MAX_IMPULSE",
            "enum": "Param"
          },
          {
            "value": "8",
            "name": "PARAM_MAX",
            "enum": "Param"
          },
          {
            "value": "0",
            "name": "FLAG_USE_LIMIT",
            "enum": "Flag"
          },
          {
            "value": "1",
            "name": "FLAG_ENABLE_MOTOR",
            "enum": "Flag"
          },
          {
            "value": "2",
            "name": "FLAG_MAX",
            "enum": "Flag"
          }
        ]
      },
      "brief_description": "A hinge between two 3D PhysicsBodies.",
      "description": "A HingeJoint normally uses the Z axis of body A as the hinge axis, another axis can be specified when adding it manually though. See also [Generic6DOFJoint]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "value": "Icon used as a button to scroll the [ScrollBar] left. Supports custom step using the [member ScrollBar.custom_step] property.",
            "name": "decrement",
            "type": "Texture"
          },
          {
            "value": "Displayed when the mouse cursor hovers over the decrement button.",
            "name": "decrement_highlight",
            "type": "Texture"
          },
          {
            "value": "Used as texture for the grabber, the draggable element representing current scroll.",
            "name": "grabber",
            "type": "StyleBox"
          },
          {
            "value": "Used when the mouse hovers over the grabber.",
            "name": "grabber_highlight",
            "type": "StyleBox"
          },
          {
            "value": "Used when the grabber is being dragged.",
            "name": "grabber_pressed",
            "type": "StyleBox"
          },
          {
            "value": "Icon used as a button to scroll the [ScrollBar] right. Supports custom step using the [member ScrollBar.custom_step] property.",
            "name": "increment",
            "type": "Texture"
          },
          {
            "value": "Displayed when the mouse cursor hovers over the increment button.",
            "name": "increment_highlight",
            "type": "Texture"
          },
          {
            "value": "Used as background of this [ScrollBar].",
            "name": "scroll",
            "type": "StyleBox"
          },
          {
            "value": "Used as background when the [ScrollBar] has the GUI focus.",
            "name": "scroll_focus",
            "type": "StyleBox"
          }
        ]
      },
      "inherits": "ScrollBar",
      "methods": {},
      "name": "HScrollBar",
      "version": "3.3",
      "constants": {},
      "brief_description": "Horizontal scroll bar.",
      "description": "Horizontal version of [ScrollBar], which goes from left (min) to right (max)."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "default": "4",
            "value": "The height of the area covered by the separator. Effectively works like a minimum height.",
            "name": "separation",
            "type": "int"
          },
          {
            "value": "The style for the separator line. Works best with [StyleBoxLine].",
            "name": "separator",
            "type": "StyleBox"
          }
        ]
      },
      "inherits": "Separator",
      "methods": {},
      "name": "HSeparator",
      "version": "3.3",
      "constants": {},
      "brief_description": "Horizontal separator.",
      "description": "Horizontal separator. See [Separator]. Even though it looks horizontal, it is used to separate objects vertically."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "value": "The texture for the grabber (the draggable element).",
            "name": "grabber",
            "type": "Texture"
          },
          {
            "value": "The background of the area to the left of the grabber.",
            "name": "grabber_area",
            "type": "StyleBox"
          },
          {
            "name": "grabber_area_highlight",
            "type": "StyleBox"
          },
          {
            "value": "The texture for the grabber when it's disabled.",
            "name": "grabber_disabled",
            "type": "Texture"
          },
          {
            "value": "The texture for the grabber when it's focused.",
            "name": "grabber_highlight",
            "type": "Texture"
          },
          {
            "value": "The background for the whole slider. Determines the height of the [code]grabber_area[/code].",
            "name": "slider",
            "type": "StyleBox"
          },
          {
            "value": "The texture for the ticks, visible when [member Slider.tick_count] is greater than 0.",
            "name": "tick",
            "type": "Texture"
          }
        ]
      },
      "inherits": "Slider",
      "methods": {},
      "name": "HSlider",
      "version": "3.3",
      "constants": {},
      "brief_description": "Horizontal slider.",
      "description": "Horizontal slider. See [Slider]. This one goes from left (min) to right (max).\n\t\t[b]Note:[/b] The [signal Range.changed] and [signal Range.value_changed] signals are part of the [Range] class which this class inherits from."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "default": "1",
            "value": "Boolean value. If 1 ([code]true[/code]), the grabber will hide automatically when it isn't under the cursor. If 0 ([code]false[/code]), it's always visible.",
            "name": "autohide",
            "type": "int"
          },
          {
            "name": "bg",
            "type": "StyleBox"
          },
          {
            "value": "The icon used for the grabber drawn in the middle area.",
            "name": "grabber",
            "type": "Texture"
          },
          {
            "default": "12",
            "value": "The space between sides of the container.",
            "name": "separation",
            "type": "int"
          }
        ]
      },
      "inherits": "SplitContainer",
      "methods": {},
      "name": "HSplitContainer",
      "version": "3.3",
      "constants": {},
      "brief_description": "Horizontal split container.",
      "description": "Horizontal split container. See [SplitContainer]. This goes from left to right."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          "https://docs.godotengine.org/en/3.3/tutorials/networking/http_client_class.html",
          "https://docs.godotengine.org/en/3.3/tutorials/networking/ssl_certificates.html"
        ]
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], execution will block until all data is read from the response.",
            "setter": "set_blocking_mode",
            "name": "blocking_mode_enabled",
            "getter": "is_blocking_mode_enabled",
            "type": "bool"
          },
          {
            "value": "The connection to use for this client.",
            "setter": "set_connection",
            "name": "connection",
            "getter": "get_connection",
            "type": "StreamPeer"
          },
          {
            "default": "65536",
            "value": "The size of the buffer used and maximum bytes to read per iteration. See [method read_response_body_chunk].",
            "setter": "set_read_chunk_size",
            "name": "read_chunk_size",
            "getter": "get_read_chunk_size",
            "type": "int"
          }
        ]
      },
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "name": "close",
            "description": "Closes the current connection, allowing reuse of this [HTTPClient]."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "host",
                "type": "String",
                "index": "0"
              },
              {
                "default": "-1",
                "name": "port",
                "type": "int",
                "index": "1"
              },
              {
                "default": "false",
                "name": "use_ssl",
                "type": "bool",
                "index": "2"
              },
              {
                "default": "true",
                "name": "verify_host",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "connect_to_host",
            "description": "Connects to a host. This needs to be done before any requests are sent.\n\t\t\t\tThe host should not have http:// prepended but will strip the protocol identifier if provided.\n\t\t\t\tIf no [code]port[/code] is specified (or [code]-1[/code] is used), it is automatically set to 80 for HTTP and 443 for HTTPS (if [code]use_ssl[/code] is enabled).\n\t\t\t\t[code]verify_host[/code] will check the SSL identity of the host if set to [code]true[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_response_body_length",
            "description": "Returns the response's body length.\n\t\t\t\t[b]Note:[/b] Some Web servers may not send a body length. In this case, the value returned will be [code]-1[/code]. If using chunked transfer encoding, the body length will also be [code]-1[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_response_code",
            "description": "Returns the response's HTTP status code."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "name": "get_response_headers",
            "description": "Returns the response headers."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "name": "get_response_headers_as_dictionary",
            "description": "Returns all response headers as a Dictionary of structure [code]{ \"key\": \"value1; value2\" }[/code] where the case-sensitivity of the keys and values is kept like the server delivers it. A value is a simple String, this string can have more than one value where \"; \" is used as separator.\n\t\t\t\t[b]Example:[/b]\n\t\t\t\t[codeblock]\n\t\t\t\t{\n\t\t\t\t    \"content-length\": 12,\n\t\t\t\t    \"Content-Type\": \"application/json; charset=UTF-8\",\n\t\t\t\t}\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "int",
              "enum": "HTTPClient.Status"
            },
            "qualifiers": "const",
            "name": "get_status",
            "description": "Returns a [enum Status] constant. Need to call [method poll] in order to get status updates."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "has_response",
            "description": "If [code]true[/code], this [HTTPClient] has a response available."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_response_chunked",
            "description": "If [code]true[/code], this [HTTPClient] has a response that is chunked."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "name": "poll",
            "description": "This needs to be called in order to have any request processed. Check results with [method get_status]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "fields",
              "type": "Dictionary",
              "index": "0"
            },
            "name": "query_string_from_dict",
            "description": "Generates a GET/POST application/x-www-form-urlencoded style query string from a provided dictionary, e.g.:\n\t\t\t\t[codeblock]\n\t\t\t\tvar fields = {\"username\": \"user\", \"password\": \"pass\"}\n\t\t\t\tvar query_string = http_client.query_string_from_dict(fields)\n\t\t\t\t# Returns \"username=user&password=pass\"\n\t\t\t\t[/codeblock]\n\t\t\t\tFurthermore, if a key has a [code]null[/code] value, only the key itself is added, without equal sign and value. If the value is an array, for each value in it a pair with the same key is added.\n\t\t\t\t[codeblock]\n\t\t\t\tvar fields = {\"single\": 123, \"not_valued\": null, \"multiple\": [22, 33, 44]}\n\t\t\t\tvar query_string = http_client.query_string_from_dict(fields)\n\t\t\t\t# Returns \"single=123&not_valued&multiple=22&multiple=33&multiple=44\"\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "PoolByteArray"
            },
            "name": "read_response_body_chunk",
            "description": "Reads one chunk from the response."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "method",
                "type": "int",
                "enum": "HTTPClient.Method",
                "index": "0"
              },
              {
                "name": "url",
                "type": "String",
                "index": "1"
              },
              {
                "name": "headers",
                "type": "PoolStringArray",
                "index": "2"
              },
              {
                "default": "\"\"",
                "name": "body",
                "type": "String",
                "index": "3"
              }
            ],
            "name": "request",
            "description": "Sends a request to the connected host.\n\t\t\t\tThe URL parameter is usually just the part after the host, so for [code]http://somehost.com/index.php[/code], it is [code]/index.php[/code]. When sending requests to an HTTP proxy server, it should be an absolute URL. For [constant HTTPClient.METHOD_OPTIONS] requests, [code]*[/code] is also allowed. For [constant HTTPClient.METHOD_CONNECT] requests, it should be the authority component ([code]host:port[/code]).\n\t\t\t\tHeaders are HTTP request headers. For available HTTP methods, see [enum Method].\n\t\t\t\tTo create a POST request with query strings to push to the server, do:\n\t\t\t\t[codeblock]\n\t\t\t\tvar fields = {\"username\" : \"user\", \"password\" : \"pass\"}\n\t\t\t\tvar query_string = http_client.query_string_from_dict(fields)\n\t\t\t\tvar headers = [\"Content-Type: application/x-www-form-urlencoded\", \"Content-Length: \" + str(query_string.length())]\n\t\t\t\tvar result = http_client.request(http_client.METHOD_POST, \"/index.php\", headers, query_string)\n\t\t\t\t[/codeblock]\n\t\t\t\t[b]Note:[/b] The [code]request_data[/code] parameter is ignored if [code]method[/code] is [constant HTTPClient.METHOD_GET]. This is because GET methods can't contain request data. As a workaround, you can pass request data as a query string in the URL. See [method String.http_escape] for an example."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "method",
                "type": "int",
                "enum": "HTTPClient.Method",
                "index": "0"
              },
              {
                "name": "url",
                "type": "String",
                "index": "1"
              },
              {
                "name": "headers",
                "type": "PoolStringArray",
                "index": "2"
              },
              {
                "name": "body",
                "type": "PoolByteArray",
                "index": "3"
              }
            ],
            "name": "request_raw",
            "description": "Sends a raw request to the connected host.\n\t\t\t\tThe URL parameter is usually just the part after the host, so for [code]http://somehost.com/index.php[/code], it is [code]/index.php[/code]. When sending requests to an HTTP proxy server, it should be an absolute URL. For [constant HTTPClient.METHOD_OPTIONS] requests, [code]*[/code] is also allowed. For [constant HTTPClient.METHOD_CONNECT] requests, it should be the authority component ([code]host:port[/code]).\n\t\t\t\tHeaders are HTTP request headers. For available HTTP methods, see [enum Method].\n\t\t\t\tSends the body data raw, as a byte array and does not encode it in any way."
          }
        ]
      },
      "name": "HTTPClient",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "METHOD_GET",
            "enum": "Method"
          },
          {
            "value": "1",
            "name": "METHOD_HEAD",
            "enum": "Method"
          },
          {
            "value": "2",
            "name": "METHOD_POST",
            "enum": "Method"
          },
          {
            "value": "3",
            "name": "METHOD_PUT",
            "enum": "Method"
          },
          {
            "value": "4",
            "name": "METHOD_DELETE",
            "enum": "Method"
          },
          {
            "value": "5",
            "name": "METHOD_OPTIONS",
            "enum": "Method"
          },
          {
            "value": "6",
            "name": "METHOD_TRACE",
            "enum": "Method"
          },
          {
            "value": "7",
            "name": "METHOD_CONNECT",
            "enum": "Method"
          },
          {
            "value": "8",
            "name": "METHOD_PATCH",
            "enum": "Method"
          },
          {
            "value": "9",
            "name": "METHOD_MAX",
            "enum": "Method"
          },
          {
            "value": "0",
            "name": "STATUS_DISCONNECTED",
            "enum": "Status"
          },
          {
            "value": "1",
            "name": "STATUS_RESOLVING",
            "enum": "Status"
          },
          {
            "value": "2",
            "name": "STATUS_CANT_RESOLVE",
            "enum": "Status"
          },
          {
            "value": "3",
            "name": "STATUS_CONNECTING",
            "enum": "Status"
          },
          {
            "value": "4",
            "name": "STATUS_CANT_CONNECT",
            "enum": "Status"
          },
          {
            "value": "5",
            "name": "STATUS_CONNECTED",
            "enum": "Status"
          },
          {
            "value": "6",
            "name": "STATUS_REQUESTING",
            "enum": "Status"
          },
          {
            "value": "7",
            "name": "STATUS_BODY",
            "enum": "Status"
          },
          {
            "value": "8",
            "name": "STATUS_CONNECTION_ERROR",
            "enum": "Status"
          },
          {
            "value": "9",
            "name": "STATUS_SSL_HANDSHAKE_ERROR",
            "enum": "Status"
          },
          {
            "value": "100",
            "name": "RESPONSE_CONTINUE",
            "enum": "ResponseCode"
          },
          {
            "value": "101",
            "name": "RESPONSE_SWITCHING_PROTOCOLS",
            "enum": "ResponseCode"
          },
          {
            "value": "102",
            "name": "RESPONSE_PROCESSING",
            "enum": "ResponseCode"
          },
          {
            "value": "200",
            "name": "RESPONSE_OK",
            "enum": "ResponseCode"
          },
          {
            "value": "201",
            "name": "RESPONSE_CREATED",
            "enum": "ResponseCode"
          },
          {
            "value": "202",
            "name": "RESPONSE_ACCEPTED",
            "enum": "ResponseCode"
          },
          {
            "value": "203",
            "name": "RESPONSE_NON_AUTHORITATIVE_INFORMATION",
            "enum": "ResponseCode"
          },
          {
            "value": "204",
            "name": "RESPONSE_NO_CONTENT",
            "enum": "ResponseCode"
          },
          {
            "value": "205",
            "name": "RESPONSE_RESET_CONTENT",
            "enum": "ResponseCode"
          },
          {
            "value": "206",
            "name": "RESPONSE_PARTIAL_CONTENT",
            "enum": "ResponseCode"
          },
          {
            "value": "207",
            "name": "RESPONSE_MULTI_STATUS",
            "enum": "ResponseCode"
          },
          {
            "value": "208",
            "name": "RESPONSE_ALREADY_REPORTED",
            "enum": "ResponseCode"
          },
          {
            "value": "226",
            "name": "RESPONSE_IM_USED",
            "enum": "ResponseCode"
          },
          {
            "value": "300",
            "name": "RESPONSE_MULTIPLE_CHOICES",
            "enum": "ResponseCode"
          },
          {
            "value": "301",
            "name": "RESPONSE_MOVED_PERMANENTLY",
            "enum": "ResponseCode"
          },
          {
            "value": "302",
            "name": "RESPONSE_FOUND",
            "enum": "ResponseCode"
          },
          {
            "value": "303",
            "name": "RESPONSE_SEE_OTHER",
            "enum": "ResponseCode"
          },
          {
            "value": "304",
            "name": "RESPONSE_NOT_MODIFIED",
            "enum": "ResponseCode"
          },
          {
            "value": "305",
            "name": "RESPONSE_USE_PROXY",
            "enum": "ResponseCode"
          },
          {
            "value": "306",
            "name": "RESPONSE_SWITCH_PROXY",
            "enum": "ResponseCode"
          },
          {
            "value": "307",
            "name": "RESPONSE_TEMPORARY_REDIRECT",
            "enum": "ResponseCode"
          },
          {
            "value": "308",
            "name": "RESPONSE_PERMANENT_REDIRECT",
            "enum": "ResponseCode"
          },
          {
            "value": "400",
            "name": "RESPONSE_BAD_REQUEST",
            "enum": "ResponseCode"
          },
          {
            "value": "401",
            "name": "RESPONSE_UNAUTHORIZED",
            "enum": "ResponseCode"
          },
          {
            "value": "402",
            "name": "RESPONSE_PAYMENT_REQUIRED",
            "enum": "ResponseCode"
          },
          {
            "value": "403",
            "name": "RESPONSE_FORBIDDEN",
            "enum": "ResponseCode"
          },
          {
            "value": "404",
            "name": "RESPONSE_NOT_FOUND",
            "enum": "ResponseCode"
          },
          {
            "value": "405",
            "name": "RESPONSE_METHOD_NOT_ALLOWED",
            "enum": "ResponseCode"
          },
          {
            "value": "406",
            "name": "RESPONSE_NOT_ACCEPTABLE",
            "enum": "ResponseCode"
          },
          {
            "value": "407",
            "name": "RESPONSE_PROXY_AUTHENTICATION_REQUIRED",
            "enum": "ResponseCode"
          },
          {
            "value": "408",
            "name": "RESPONSE_REQUEST_TIMEOUT",
            "enum": "ResponseCode"
          },
          {
            "value": "409",
            "name": "RESPONSE_CONFLICT",
            "enum": "ResponseCode"
          },
          {
            "value": "410",
            "name": "RESPONSE_GONE",
            "enum": "ResponseCode"
          },
          {
            "value": "411",
            "name": "RESPONSE_LENGTH_REQUIRED",
            "enum": "ResponseCode"
          },
          {
            "value": "412",
            "name": "RESPONSE_PRECONDITION_FAILED",
            "enum": "ResponseCode"
          },
          {
            "value": "413",
            "name": "RESPONSE_REQUEST_ENTITY_TOO_LARGE",
            "enum": "ResponseCode"
          },
          {
            "value": "414",
            "name": "RESPONSE_REQUEST_URI_TOO_LONG",
            "enum": "ResponseCode"
          },
          {
            "value": "415",
            "name": "RESPONSE_UNSUPPORTED_MEDIA_TYPE",
            "enum": "ResponseCode"
          },
          {
            "value": "416",
            "name": "RESPONSE_REQUESTED_RANGE_NOT_SATISFIABLE",
            "enum": "ResponseCode"
          },
          {
            "value": "417",
            "name": "RESPONSE_EXPECTATION_FAILED",
            "enum": "ResponseCode"
          },
          {
            "value": "418",
            "name": "RESPONSE_IM_A_TEAPOT",
            "enum": "ResponseCode"
          },
          {
            "value": "421",
            "name": "RESPONSE_MISDIRECTED_REQUEST",
            "enum": "ResponseCode"
          },
          {
            "value": "422",
            "name": "RESPONSE_UNPROCESSABLE_ENTITY",
            "enum": "ResponseCode"
          },
          {
            "value": "423",
            "name": "RESPONSE_LOCKED",
            "enum": "ResponseCode"
          },
          {
            "value": "424",
            "name": "RESPONSE_FAILED_DEPENDENCY",
            "enum": "ResponseCode"
          },
          {
            "value": "426",
            "name": "RESPONSE_UPGRADE_REQUIRED",
            "enum": "ResponseCode"
          },
          {
            "value": "428",
            "name": "RESPONSE_PRECONDITION_REQUIRED",
            "enum": "ResponseCode"
          },
          {
            "value": "429",
            "name": "RESPONSE_TOO_MANY_REQUESTS",
            "enum": "ResponseCode"
          },
          {
            "value": "431",
            "name": "RESPONSE_REQUEST_HEADER_FIELDS_TOO_LARGE",
            "enum": "ResponseCode"
          },
          {
            "value": "451",
            "name": "RESPONSE_UNAVAILABLE_FOR_LEGAL_REASONS",
            "enum": "ResponseCode"
          },
          {
            "value": "500",
            "name": "RESPONSE_INTERNAL_SERVER_ERROR",
            "enum": "ResponseCode"
          },
          {
            "value": "501",
            "name": "RESPONSE_NOT_IMPLEMENTED",
            "enum": "ResponseCode"
          },
          {
            "value": "502",
            "name": "RESPONSE_BAD_GATEWAY",
            "enum": "ResponseCode"
          },
          {
            "value": "503",
            "name": "RESPONSE_SERVICE_UNAVAILABLE",
            "enum": "ResponseCode"
          },
          {
            "value": "504",
            "name": "RESPONSE_GATEWAY_TIMEOUT",
            "enum": "ResponseCode"
          },
          {
            "value": "505",
            "name": "RESPONSE_HTTP_VERSION_NOT_SUPPORTED",
            "enum": "ResponseCode"
          },
          {
            "value": "506",
            "name": "RESPONSE_VARIANT_ALSO_NEGOTIATES",
            "enum": "ResponseCode"
          },
          {
            "value": "507",
            "name": "RESPONSE_INSUFFICIENT_STORAGE",
            "enum": "ResponseCode"
          },
          {
            "value": "508",
            "name": "RESPONSE_LOOP_DETECTED",
            "enum": "ResponseCode"
          },
          {
            "value": "510",
            "name": "RESPONSE_NOT_EXTENDED",
            "enum": "ResponseCode"
          },
          {
            "value": "511",
            "name": "RESPONSE_NETWORK_AUTH_REQUIRED",
            "enum": "ResponseCode"
          }
        ]
      },
      "brief_description": "Low-level hyper-text transfer protocol client.",
      "description": "Hyper-text transfer protocol client (sometimes called \"User Agent\"). Used to make HTTP requests to download web content, upload files and other data or to communicate with various services, among other use cases. [b]See the [HTTPRequest] node for a higher-level alternative.[/b]\n\t\t[b]Note:[/b] This client only needs to connect to a host once (see [method connect_to_host]) to send multiple requests. Because of this, methods that take URLs usually take just the part after the host instead of the full URL, as the client is already connected to a host. See [method request] for a full example and to get started.\n\t\tA [HTTPClient] should be reused between multiple requests or to connect to different hosts instead of creating one client per request. Supports SSL and SSL server certificate verification. HTTP status codes in the 2xx range indicate success, 3xx redirection (i.e. \"try again, but over here\"), 4xx something was wrong with the request, and 5xx something went wrong on the server's side.\n\t\tFor more information on HTTP, see https://developer.mozilla.org/en-US/docs/Web/HTTP (or read RFC 2616 to get it straight from the source: https://tools.ietf.org/html/rfc2616).\n\t\t[b]Note:[/b] When performing HTTP requests from a project exported to HTML5, keep in mind the remote server may not allow requests from foreign origins due to [url=https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS]CORS[/url]. If you host the server in question, you should modify its backend to allow requests from foreign origins by adding the [code]Access-Control-Allow-Origin: *[/code] HTTP header.\n\t\t[b]Note:[/b] SSL/TLS support is currently limited to TLS 1.0, TLS 1.1, and TLS 1.2. Attempting to connect to a TLS 1.3-only server will return an error.\n\t\t[b]Warning:[/b] SSL/TLS certificate revocation and certificate pinning are currently not supported. Revoked certificates are accepted as long as they are otherwise valid. If this is a concern, you may want to use automatically managed certificates with a short validity period."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          "https://docs.godotengine.org/en/3.3/tutorials/networking/http_request_class.html",
          "https://docs.godotengine.org/en/3.3/tutorials/networking/ssl_certificates.html"
        ]
      },
      "members": {
        "member": [
          {
            "default": "-1",
            "value": "Maximum allowed size for response bodies.",
            "setter": "set_body_size_limit",
            "name": "body_size_limit",
            "getter": "get_body_size_limit",
            "type": "int"
          },
          {
            "default": "65536",
            "value": "The size of the buffer used and maximum bytes to read per iteration. See [member HTTPClient.read_chunk_size].\n\t\t\tSet this to a lower value (e.g. 4096 for 4 KiB) when downloading small files to decrease memory usage at the cost of download speeds.",
            "setter": "set_download_chunk_size",
            "name": "download_chunk_size",
            "getter": "get_download_chunk_size",
            "type": "int"
          },
          {
            "default": "\"\"",
            "value": "The file to download into. Will output any received file into it.",
            "setter": "set_download_file",
            "name": "download_file",
            "getter": "get_download_file",
            "type": "String"
          },
          {
            "default": "8",
            "value": "Maximum number of allowed redirects.",
            "setter": "set_max_redirects",
            "name": "max_redirects",
            "getter": "get_max_redirects",
            "type": "int"
          },
          {
            "default": "0",
            "setter": "set_timeout",
            "name": "timeout",
            "getter": "get_timeout",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], multithreading is used to improve performance.",
            "setter": "set_use_threads",
            "name": "use_threads",
            "getter": "is_using_threads",
            "type": "bool"
          }
        ]
      },
      "inherits": "Node",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "name": "cancel_request",
            "description": "Cancels the current request."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_body_size",
            "description": "Returns the response body length.\n\t\t\t\t[b]Note:[/b] Some Web servers may not send a body length. In this case, the value returned will be [code]-1[/code]. If using chunked transfer encoding, the body length will also be [code]-1[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_downloaded_bytes",
            "description": "Returns the amount of bytes this HTTPRequest downloaded."
          },
          {
            "return": {
              "type": "int",
              "enum": "HTTPClient.Status"
            },
            "qualifiers": "const",
            "name": "get_http_client_status",
            "description": "Returns the current status of the underlying [HTTPClient]. See [enum HTTPClient.Status]."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "url",
                "type": "String",
                "index": "0"
              },
              {
                "default": "PoolStringArray(  )",
                "name": "custom_headers",
                "type": "PoolStringArray",
                "index": "1"
              },
              {
                "default": "true",
                "name": "ssl_validate_domain",
                "type": "bool",
                "index": "2"
              },
              {
                "default": "0",
                "name": "method",
                "type": "int",
                "enum": "HTTPClient.Method",
                "index": "3"
              },
              {
                "default": "\"\"",
                "name": "request_data",
                "type": "String",
                "index": "4"
              }
            ],
            "name": "request",
            "description": "Creates request on the underlying [HTTPClient]. If there is no configuration errors, it tries to connect using [method HTTPClient.connect_to_host] and passes parameters onto [method HTTPClient.request].\n\t\t\t\tReturns [constant OK] if request is successfully created. (Does not imply that the server has responded), [constant ERR_UNCONFIGURED] if not in the tree, [constant ERR_BUSY] if still processing previous request, [constant ERR_INVALID_PARAMETER] if given string is not a valid URL format, or [constant ERR_CANT_CONNECT] if not using thread and the [HTTPClient] cannot connect to host.\n\t\t\t\t[b]Note:[/b] The [code]request_data[/code] parameter is ignored if [code]method[/code] is [constant HTTPClient.METHOD_GET]. This is because GET methods can't contain request data. As a workaround, you can pass request data as a query string in the URL. See [method String.http_escape] for an example."
          }
        ]
      },
      "name": "HTTPRequest",
      "version": "3.3",
      "signals": {
        "signal": {
          "argument": [
            {
              "name": "result",
              "type": "int",
              "index": "0"
            },
            {
              "name": "response_code",
              "type": "int",
              "index": "1"
            },
            {
              "name": "headers",
              "type": "PoolStringArray",
              "index": "2"
            },
            {
              "name": "body",
              "type": "PoolByteArray",
              "index": "3"
            }
          ],
          "name": "request_completed",
          "description": "Emitted when a request is completed."
        }
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "RESULT_SUCCESS",
            "enum": "Result"
          },
          {
            "value": "1",
            "name": "RESULT_CHUNKED_BODY_SIZE_MISMATCH",
            "enum": "Result"
          },
          {
            "value": "2",
            "name": "RESULT_CANT_CONNECT",
            "enum": "Result"
          },
          {
            "value": "3",
            "name": "RESULT_CANT_RESOLVE",
            "enum": "Result"
          },
          {
            "value": "4",
            "name": "RESULT_CONNECTION_ERROR",
            "enum": "Result"
          },
          {
            "value": "5",
            "name": "RESULT_SSL_HANDSHAKE_ERROR",
            "enum": "Result"
          },
          {
            "value": "6",
            "name": "RESULT_NO_RESPONSE",
            "enum": "Result"
          },
          {
            "value": "7",
            "name": "RESULT_BODY_SIZE_LIMIT_EXCEEDED",
            "enum": "Result"
          },
          {
            "value": "8",
            "name": "RESULT_REQUEST_FAILED",
            "enum": "Result"
          },
          {
            "value": "9",
            "name": "RESULT_DOWNLOAD_FILE_CANT_OPEN",
            "enum": "Result"
          },
          {
            "value": "10",
            "name": "RESULT_DOWNLOAD_FILE_WRITE_ERROR",
            "enum": "Result"
          },
          {
            "value": "11",
            "name": "RESULT_REDIRECT_LIMIT_REACHED",
            "enum": "Result"
          },
          {
            "value": "12",
            "name": "RESULT_TIMEOUT",
            "enum": "Result"
          }
        ]
      },
      "brief_description": "A node with the ability to send HTTP(S) requests.",
      "description": "A node with the ability to send HTTP requests. Uses [HTTPClient] internally.\n\t\tCan be used to make HTTP requests, i.e. download or upload files or web content via HTTP.\n\t\t[b]Warning:[/b] See the notes and warnings on [HTTPClient] for limitations, especially regarding SSL security.\n\t\t[b]Example of contacting a REST API and printing one of its returned fields:[/b]\n\t\t[codeblock]\n\t\tfunc _ready():\n\t\t    # Create an HTTP request node and connect its completion signal.\n\t\t    var http_request = HTTPRequest.new()\n\t\t    add_child(http_request)\n\t\t    http_request.connect(\"request_completed\", self, \"_http_request_completed\")\n\n\t\t    # Perform a GET request. The URL below returns JSON as of writing.\n\t\t    var error = http_request.request(\"https://httpbin.org/get\")\n\t\t    if error != OK:\n\t\t        push_error(\"An error occurred in the HTTP request.\")\n\n\t\t    # Perform a POST request. The URL below returns JSON as of writing.\n\t\t    # Note: Don't make simultaneous requests using a single HTTPRequest node.\n\t\t    # The snippet below is provided for reference only.\n\t\t    var body = {\"name\": \"Godette\"}\n\t\t    error = http_request.request(\"https://httpbin.org/post\", [], true, HTTPClient.METHOD_POST, body)\n\t\t    if error != OK:\n\t\t        push_error(\"An error occurred in the HTTP request.\")\n\n\n\t\t# Called when the HTTP request is completed.\n\t\tfunc _http_request_completed(result, response_code, headers, body):\n\t\t    var response = parse_json(body.get_string_from_utf8())\n\n\t\t    # Will print the user agent string used by the HTTPRequest node (as recognized by httpbin.org).\n\t\t    print(response.headers[\"User-Agent\"])\n\t\t[/codeblock]\n\t\t[b]Example of loading and displaying an image using HTTPRequest:[/b]\n\t\t[codeblock]\n\t\tfunc _ready():\n\t\t    # Create an HTTP request node and connect its completion signal.\n\t\t    var http_request = HTTPRequest.new()\n\t\t    add_child(http_request)\n\t\t    http_request.connect(\"request_completed\", self, \"_http_request_completed\")\n\n\t\t    # Perform the HTTP request. The URL below returns a PNG image as of writing.\n\t\t    var error = http_request.request(\"https://via.placeholder.com/512\")\n\t\t    if error != OK:\n\t\t        push_error(\"An error occurred in the HTTP request.\")\n\n\n\t\t# Called when the HTTP request is completed.\n\t\tfunc _http_request_completed(result, response_code, headers, body):\n\t\t    var image = Image.new()\n\t\t    var error = image.load_png_from_buffer(body)\n\t\t    if error != OK:\n\t\t        push_error(\"Couldn't load the image.\")\n\n\t\t    var texture = ImageTexture.new()\n\t\t    texture.create_from_image(image)\n\n\t\t    # Display the image in a TextureRect node.\n\t\t    var texture_rect = TextureRect.new()\n\t\t    add_child(texture_rect)\n\t\t    texture_rect.texture = texture\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://docs.godotengine.org/en/3.3/getting_started/workflow/assets/importing_images.html",
          "title": "Importing images"
        }
      },
      "members": {
        "member": [
          {
            "default": "7",
            "setter": "set_flags",
            "override": "true",
            "name": "flags",
            "getter": "get_flags",
            "type": "int"
          },
          {
            "default": "0.7",
            "value": "The storage quality for [constant STORAGE_COMPRESS_LOSSY].",
            "setter": "set_lossy_storage_quality",
            "name": "lossy_quality",
            "getter": "get_lossy_storage_quality",
            "type": "float"
          },
          {
            "default": "0",
            "value": "The storage type (raw, lossy, or compressed).",
            "setter": "set_storage",
            "name": "storage",
            "getter": "get_storage",
            "type": "int",
            "enum": "ImageTexture.Storage"
          }
        ]
      },
      "inherits": "Texture",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "width",
                "type": "int",
                "index": "0"
              },
              {
                "name": "height",
                "type": "int",
                "index": "1"
              },
              {
                "name": "format",
                "type": "int",
                "enum": "Image.Format",
                "index": "2"
              },
              {
                "default": "7",
                "name": "flags",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "create",
            "description": "Create a new [ImageTexture] with [code]width[/code] and [code]height[/code].\n\t\t\t\t[code]format[/code] is a value from [enum Image.Format], [code]flags[/code] is any combination of [enum Texture.Flags]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "image",
                "type": "Image",
                "index": "0"
              },
              {
                "default": "7",
                "name": "flags",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "create_from_image",
            "description": "Initializes the texture by allocating and setting the data from an [Image] with [code]flags[/code] from [enum Texture.Flags]. An sRGB to linear color space conversion can take place, according to [enum Image.Format]."
          },
          {
            "return": {
              "type": "int",
              "enum": "Image.Format"
            },
            "qualifiers": "const",
            "name": "get_format",
            "description": "Returns the format of the texture, one of [enum Image.Format]."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "load",
            "description": "Loads an image from a file path and creates a texture from it.\n\t\t\t\t[b]Note:[/b] the method is deprecated and will be removed in Godot 4.0, use [method Image.load] and [method create_from_image] instead."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "image",
              "type": "Image",
              "index": "0"
            },
            "name": "set_data",
            "description": "Replaces the texture's data with a new [Image].\n\t\t\t\t[b]Note:[/b] The texture has to be initialized first with the [method create_from_image] method before it can be updated. The new image dimensions, format, and mipmaps configuration should match the existing texture's image configuration, otherwise it has to be re-created with the [method create_from_image] method.\n\t\t\t\tUse this method over [method create_from_image] if you need to update the texture frequently, which is faster than allocating additional memory for a new texture each time."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "size",
              "type": "Vector2",
              "index": "0"
            },
            "name": "set_size_override",
            "description": "Resizes the texture to the specified dimensions."
          }
        ]
      },
      "name": "ImageTexture",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "STORAGE_RAW",
            "enum": "Storage"
          },
          {
            "value": "1",
            "name": "STORAGE_COMPRESS_LOSSY",
            "enum": "Storage"
          },
          {
            "value": "2",
            "name": "STORAGE_COMPRESS_LOSSLESS",
            "enum": "Storage"
          }
        ]
      },
      "brief_description": "A [Texture] based on an [Image].",
      "description": "A [Texture] based on an [Image]. For an image to be displayed, an [ImageTexture] has to be created from it using the [method create_from_image] method:\n\t\t[codeblock]\n\t\tvar texture = ImageTexture.new()\n\t\tvar image = Image.new()\n\t\timage.load(\"res://icon.png\")\n\t\ttexture.create_from_image(image)\n\t\t$Sprite.texture = texture\n\t\t[/codeblock]\n\t\tThis way, textures can be created at run-time by loading images both from within the editor and externally.\n\t\t[b]Warning:[/b] Prefer to load imported textures with [method @GDScript.load] over loading them from within the filesystem dynamically with [method Image.load], as it may not work in exported projects:\n\t\t[codeblock]\n\t\tvar texture = load(\"res://icon.png\")\n\t\t$Sprite.texture = texture\n\t\t[/codeblock]\n\t\tThis is because images have to be imported as [StreamTexture] first to be loaded with [method @GDScript.load]. If you'd still like to load an image file just like any other [Resource], import it as an [Image] resource instead, and then load it normally using the [method @GDScript.load] method.\n\t\tBut do note that the image data can still be retrieved from an imported texture as well using the [method Texture.get_data] method, which returns a copy of the data:\n\t\t[codeblock]\n\t\tvar texture = load(\"res://icon.png\")\n\t\tvar image : Image = texture.get_data()\n\t\t[/codeblock]\n\t\tAn [ImageTexture] is not meant to be operated from within the editor interface directly, and is mostly useful for rendering images on screen dynamically via code. If you need to generate images procedurally from within the editor, consider saving and importing images as custom texture resources implementing a new [EditorImportPlugin].\n\t\t[b]Note:[/b] The maximum texture size is 16384×16384 pixels due to graphics hardware limitations."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://docs.godotengine.org/en/3.3/getting_started/workflow/assets/importing_images.html",
          "title": "Importing images"
        }
      },
      "members": {
        "member": {
          "default": "{\"data\": PoolByteArray(  ),\"format\": \"Lum8\",\"height\": 0,\"mipmaps\": false,\"width\": 0}",
          "value": "Holds all the image's color data in a given format. See [enum Format] constants.",
          "setter": "_set_data",
          "name": "data",
          "getter": "_get_data",
          "type": "Dictionary"
        }
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "src",
                "type": "Image",
                "index": "0"
              },
              {
                "name": "src_rect",
                "type": "Rect2",
                "index": "1"
              },
              {
                "name": "dst",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "blend_rect",
            "description": "Alpha-blends [code]src_rect[/code] from [code]src[/code] image to this image at coordinates [code]dest[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "src",
                "type": "Image",
                "index": "0"
              },
              {
                "name": "mask",
                "type": "Image",
                "index": "1"
              },
              {
                "name": "src_rect",
                "type": "Rect2",
                "index": "2"
              },
              {
                "name": "dst",
                "type": "Vector2",
                "index": "3"
              }
            ],
            "name": "blend_rect_mask",
            "description": "Alpha-blends [code]src_rect[/code] from [code]src[/code] image to this image using [code]mask[/code] image at coordinates [code]dst[/code]. Alpha channels are required for both [code]src[/code] and [code]mask[/code]. [code]dst[/code] pixels and [code]src[/code] pixels will blend if the corresponding mask pixel's alpha value is not 0. [code]src[/code] image and [code]mask[/code] image [b]must[/b] have the same size (width and height) but they can have different formats."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "src",
                "type": "Image",
                "index": "0"
              },
              {
                "name": "src_rect",
                "type": "Rect2",
                "index": "1"
              },
              {
                "name": "dst",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "blit_rect",
            "description": "Copies [code]src_rect[/code] from [code]src[/code] image to this image at coordinates [code]dst[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "src",
                "type": "Image",
                "index": "0"
              },
              {
                "name": "mask",
                "type": "Image",
                "index": "1"
              },
              {
                "name": "src_rect",
                "type": "Rect2",
                "index": "2"
              },
              {
                "name": "dst",
                "type": "Vector2",
                "index": "3"
              }
            ],
            "name": "blit_rect_mask",
            "description": "Blits [code]src_rect[/code] area from [code]src[/code] image to this image at the coordinates given by [code]dst[/code]. [code]src[/code] pixel is copied onto [code]dst[/code] if the corresponding [code]mask[/code] pixel's alpha value is not 0. [code]src[/code] image and [code]mask[/code] image [b]must[/b] have the same size (width and height) but they can have different formats."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "1.0",
              "name": "bump_scale",
              "type": "float",
              "index": "0"
            },
            "name": "bumpmap_to_normalmap",
            "description": "Converts a bumpmap to a normalmap. A bumpmap provides a height offset per-pixel, while a normalmap provides a normal direction per pixel."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_mipmaps",
            "description": "Removes the image's mipmaps."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "mode",
                "type": "int",
                "enum": "Image.CompressMode",
                "index": "0"
              },
              {
                "name": "source",
                "type": "int",
                "enum": "Image.CompressSource",
                "index": "1"
              },
              {
                "name": "lossy_quality",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "compress",
            "description": "Compresses the image to use less memory. Can not directly access pixel data while the image is compressed. Returns error if the chosen compression mode is not available. See [enum CompressMode] and [enum CompressSource] constants."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "format",
              "type": "int",
              "enum": "Image.Format",
              "index": "0"
            },
            "name": "convert",
            "description": "Converts the image's format. See [enum Format] constants."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "src",
              "type": "Image",
              "index": "0"
            },
            "name": "copy_from",
            "description": "Copies [code]src[/code] image to this image."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "width",
                "type": "int",
                "index": "0"
              },
              {
                "name": "height",
                "type": "int",
                "index": "1"
              },
              {
                "name": "use_mipmaps",
                "type": "bool",
                "index": "2"
              },
              {
                "name": "format",
                "type": "int",
                "enum": "Image.Format",
                "index": "3"
              }
            ],
            "name": "create",
            "description": "Creates an empty image of given size and format. See [enum Format] constants. If [code]use_mipmaps[/code] is [code]true[/code] then generate mipmaps for this image. See the [method generate_mipmaps]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "width",
                "type": "int",
                "index": "0"
              },
              {
                "name": "height",
                "type": "int",
                "index": "1"
              },
              {
                "name": "use_mipmaps",
                "type": "bool",
                "index": "2"
              },
              {
                "name": "format",
                "type": "int",
                "enum": "Image.Format",
                "index": "3"
              },
              {
                "name": "data",
                "type": "PoolByteArray",
                "index": "4"
              }
            ],
            "name": "create_from_data",
            "description": "Creates a new image of given size and format. See [enum Format] constants. Fills the image with the given raw data. If [code]use_mipmaps[/code] is [code]true[/code] then loads mipmaps for this image from [code]data[/code]. See [method generate_mipmaps]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "width",
                "type": "int",
                "index": "0"
              },
              {
                "name": "height",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "crop",
            "description": "Crops the image to the given [code]width[/code] and [code]height[/code]. If the specified size is larger than the current size, the extra area is filled with black pixels."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "name": "decompress",
            "description": "Decompresses the image if it is compressed. Returns an error if decompress function is not available."
          },
          {
            "return": {
              "type": "int",
              "enum": "Image.AlphaMode"
            },
            "qualifiers": "const",
            "name": "detect_alpha",
            "description": "Returns [constant ALPHA_BLEND] if the image has data for alpha values. Returns [constant ALPHA_BIT] if all the alpha values are stored in a single bit. Returns [constant ALPHA_NONE] if no data for alpha values is found."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "expand_x2_hq2x",
            "description": "Stretches the image and enlarges it by a factor of 2. No interpolation is done."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "color",
              "type": "Color",
              "index": "0"
            },
            "name": "fill",
            "description": "Fills the image with a given [Color]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "fix_alpha_edges",
            "description": "Blends low-alpha pixels with nearby pixels."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "flip_x",
            "description": "Flips the image horizontally."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "flip_y",
            "description": "Flips the image vertically."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "default": "false",
              "name": "renormalize",
              "type": "bool",
              "index": "0"
            },
            "name": "generate_mipmaps",
            "description": "Generates mipmaps for the image. Mipmaps are precalculated lower-resolution copies of the image that are automatically used if the image needs to be scaled down when rendered. They help improve image quality and performance when rendering. This method returns an error if the image is compressed, in a custom format, or if the image's width/height is [code]0[/code]."
          },
          {
            "return": {
              "type": "PoolByteArray"
            },
            "qualifiers": "const",
            "name": "get_data",
            "description": "Returns a copy of the image's raw data."
          },
          {
            "return": {
              "type": "int",
              "enum": "Image.Format"
            },
            "qualifiers": "const",
            "name": "get_format",
            "description": "Returns the image's format. See [enum Format] constants."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_height",
            "description": "Returns the image's height."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "mipmap",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_mipmap_offset",
            "description": "Returns the offset where the image's mipmap with index [code]mipmap[/code] is stored in the [code]data[/code] dictionary."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": [
              {
                "name": "x",
                "type": "int",
                "index": "0"
              },
              {
                "name": "y",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_pixel",
            "description": "Returns the color of the pixel at [code](x, y)[/code] if the image is locked. If the image is unlocked, it always returns a [Color] with the value [code](0, 0, 0, 1.0)[/code]. This is the same as [method get_pixelv], but two integer arguments instead of a Vector2 argument."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "src",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_pixelv",
            "description": "Returns the color of the pixel at [code]src[/code] if the image is locked. If the image is unlocked, it always returns a [Color] with the value [code](0, 0, 0, 1.0)[/code]. This is the same as [method get_pixel], but with a Vector2 argument instead of two integer arguments."
          },
          {
            "return": {
              "type": "Image"
            },
            "argument": {
              "name": "rect",
              "type": "Rect2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_rect",
            "description": "Returns a new image that is a copy of the image's area specified with [code]rect[/code]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_size",
            "description": "Returns the image's size (width and height)."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "qualifiers": "const",
            "name": "get_used_rect",
            "description": "Returns a [Rect2] enclosing the visible portion of the image, considering each pixel with a non-zero alpha channel as visible."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_width",
            "description": "Returns the image's width."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "has_mipmaps",
            "description": "Returns [code]true[/code] if the image has generated mipmaps."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_compressed",
            "description": "Returns [code]true[/code] if the image is compressed."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_empty",
            "description": "Returns [code]true[/code] if the image has no data."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_invisible",
            "description": "Returns [code]true[/code] if all the image's pixels have an alpha value of 0. Returns [code]false[/code] if any pixel has an alpha value higher than 0."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "load",
            "description": "Loads an image from file [code]path[/code]. See [url=https://docs.godotengine.org/en/3.3/getting_started/workflow/assets/importing_images.html#supported-image-formats]Supported image formats[/url] for a list of supported image formats and limitations.\n\t\t\t\t[b]Warning:[/b] This method should only be used in the editor or in cases when you need to load external images at run-time, such as images located at the [code]user://[/code] directory, and may not work in exported projects.\n\t\t\t\tSee also [ImageTexture] description for usage examples."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "buffer",
              "type": "PoolByteArray",
              "index": "0"
            },
            "name": "load_bmp_from_buffer",
            "description": "Loads an image from the binary contents of a BMP file.\n\t\t\t\t[b]Note:[/b] Godot's BMP module doesn't support 16-bit per pixel images. Only 1-bit, 4-bit, 8-bit, 24-bit, and 32-bit per pixel images are supported."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "buffer",
              "type": "PoolByteArray",
              "index": "0"
            },
            "name": "load_jpg_from_buffer",
            "description": "Loads an image from the binary contents of a JPEG file."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "buffer",
              "type": "PoolByteArray",
              "index": "0"
            },
            "name": "load_png_from_buffer",
            "description": "Loads an image from the binary contents of a PNG file."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "buffer",
              "type": "PoolByteArray",
              "index": "0"
            },
            "name": "load_tga_from_buffer",
            "description": "Loads an image from the binary contents of a TGA file."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "buffer",
              "type": "PoolByteArray",
              "index": "0"
            },
            "name": "load_webp_from_buffer",
            "description": "Loads an image from the binary contents of a WebP file."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "lock",
            "description": "Locks the data for reading and writing access. Sends an error to the console if the image is not locked when reading or writing a pixel."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "normalmap_to_xy",
            "description": "Converts the image's data to represent coordinates on a 3D plane. This is used when the image represents a normalmap. A normalmap can add lots of detail to a 3D surface without increasing the polygon count."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "premultiply_alpha",
            "description": "Multiplies color values with alpha values. Resulting color values for a pixel are [code](color * alpha)/256[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "width",
                "type": "int",
                "index": "0"
              },
              {
                "name": "height",
                "type": "int",
                "index": "1"
              },
              {
                "default": "1",
                "name": "interpolation",
                "type": "int",
                "enum": "Image.Interpolation",
                "index": "2"
              }
            ],
            "name": "resize",
            "description": "Resizes the image to the given [code]width[/code] and [code]height[/code]. New pixels are calculated using the [code]interpolation[/code] mode defined via [enum Interpolation] constants."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "default": "false",
                "name": "square",
                "type": "bool",
                "index": "0"
              },
              {
                "default": "1",
                "name": "interpolation",
                "type": "int",
                "enum": "Image.Interpolation",
                "index": "1"
              }
            ],
            "name": "resize_to_po2",
            "description": "Resizes the image to the nearest power of 2 for the width and height. If [code]square[/code] is [code]true[/code] then set width and height to be the same. New pixels are calculated using the [code]interpolation[/code] mode defined via [enum Interpolation] constants."
          },
          {
            "return": {
              "type": "Image"
            },
            "name": "rgbe_to_srgb",
            "description": "Converts a standard RGBE (Red Green Blue Exponent) image to an sRGB image."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "default": "false",
                "name": "grayscale",
                "type": "bool",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "save_exr",
            "description": "Saves the image as an EXR file to [code]path[/code]. If [code]grayscale[/code] is [code]true[/code] and the image has only one channel, it will be saved explicitly as monochrome rather than one red channel. This function will return [constant ERR_UNAVAILABLE] if Godot was compiled without the TinyEXR module.\n\t\t\t\t[b]Note:[/b] The TinyEXR module is disabled in non-editor builds, which means [method save_exr] will return [constant ERR_UNAVAILABLE] when it is called from an exported project."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "save_png",
            "description": "Saves the image as a PNG file to [code]path[/code]."
          },
          {
            "return": {
              "type": "PoolByteArray"
            },
            "qualifiers": "const",
            "name": "save_png_to_buffer",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "x",
                "type": "int",
                "index": "0"
              },
              {
                "name": "y",
                "type": "int",
                "index": "1"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "2"
              }
            ],
            "name": "set_pixel",
            "description": "Sets the [Color] of the pixel at [code](x, y)[/code] if the image is locked. Example:\n\t\t\t\t[codeblock]\n\t\t\t\tvar img = Image.new()\n\t\t\t\timg.create(img_width, img_height, false, Image.FORMAT_RGBA8)\n\t\t\t\timg.lock()\n\t\t\t\timg.set_pixel(x, y, color) # Works\n\t\t\t\timg.unlock()\n\t\t\t\timg.set_pixel(x, y, color) # Does not have an effect\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "dst",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "set_pixelv",
            "description": "Sets the [Color] of the pixel at [code](dst.x, dst.y)[/code] if the image is locked. Note that the [code]dst[/code] values must be integers. Example:\n\t\t\t\t[codeblock]\n\t\t\t\tvar img = Image.new()\n\t\t\t\timg.create(img_width, img_height, false, Image.FORMAT_RGBA8)\n\t\t\t\timg.lock()\n\t\t\t\timg.set_pixelv(Vector2(x, y), color) # Works\n\t\t\t\timg.unlock()\n\t\t\t\timg.set_pixelv(Vector2(x, y), color) # Does not have an effect\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "name": "shrink_x2",
            "description": "Shrinks the image by a factor of 2."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "srgb_to_linear",
            "description": "Converts the raw data from the sRGB colorspace to a linear scale."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "unlock",
            "description": "Unlocks the data and prevents changes."
          }
        ]
      },
      "name": "Image",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "16384",
            "name": "MAX_WIDTH"
          },
          {
            "value": "16384",
            "name": "MAX_HEIGHT"
          },
          {
            "value": "0",
            "name": "FORMAT_L8",
            "enum": "Format"
          },
          {
            "value": "1",
            "name": "FORMAT_LA8",
            "enum": "Format"
          },
          {
            "value": "2",
            "name": "FORMAT_R8",
            "enum": "Format"
          },
          {
            "value": "3",
            "name": "FORMAT_RG8",
            "enum": "Format"
          },
          {
            "value": "4",
            "name": "FORMAT_RGB8",
            "enum": "Format"
          },
          {
            "value": "5",
            "name": "FORMAT_RGBA8",
            "enum": "Format"
          },
          {
            "value": "6",
            "name": "FORMAT_RGBA4444",
            "enum": "Format"
          },
          {
            "value": "7",
            "name": "FORMAT_RGBA5551",
            "enum": "Format"
          },
          {
            "value": "8",
            "name": "FORMAT_RF",
            "enum": "Format"
          },
          {
            "value": "9",
            "name": "FORMAT_RGF",
            "enum": "Format"
          },
          {
            "value": "10",
            "name": "FORMAT_RGBF",
            "enum": "Format"
          },
          {
            "value": "11",
            "name": "FORMAT_RGBAF",
            "enum": "Format"
          },
          {
            "value": "12",
            "name": "FORMAT_RH",
            "enum": "Format"
          },
          {
            "value": "13",
            "name": "FORMAT_RGH",
            "enum": "Format"
          },
          {
            "value": "14",
            "name": "FORMAT_RGBH",
            "enum": "Format"
          },
          {
            "value": "15",
            "name": "FORMAT_RGBAH",
            "enum": "Format"
          },
          {
            "value": "16",
            "name": "FORMAT_RGBE9995",
            "enum": "Format"
          },
          {
            "value": "17",
            "name": "FORMAT_DXT1",
            "enum": "Format"
          },
          {
            "value": "18",
            "name": "FORMAT_DXT3",
            "enum": "Format"
          },
          {
            "value": "19",
            "name": "FORMAT_DXT5",
            "enum": "Format"
          },
          {
            "value": "20",
            "name": "FORMAT_RGTC_R",
            "enum": "Format"
          },
          {
            "value": "21",
            "name": "FORMAT_RGTC_RG",
            "enum": "Format"
          },
          {
            "value": "22",
            "name": "FORMAT_BPTC_RGBA",
            "enum": "Format"
          },
          {
            "value": "23",
            "name": "FORMAT_BPTC_RGBF",
            "enum": "Format"
          },
          {
            "value": "24",
            "name": "FORMAT_BPTC_RGBFU",
            "enum": "Format"
          },
          {
            "value": "25",
            "name": "FORMAT_PVRTC2",
            "enum": "Format"
          },
          {
            "value": "26",
            "name": "FORMAT_PVRTC2A",
            "enum": "Format"
          },
          {
            "value": "27",
            "name": "FORMAT_PVRTC4",
            "enum": "Format"
          },
          {
            "value": "28",
            "name": "FORMAT_PVRTC4A",
            "enum": "Format"
          },
          {
            "value": "29",
            "name": "FORMAT_ETC",
            "enum": "Format"
          },
          {
            "value": "30",
            "name": "FORMAT_ETC2_R11",
            "enum": "Format"
          },
          {
            "value": "31",
            "name": "FORMAT_ETC2_R11S",
            "enum": "Format"
          },
          {
            "value": "32",
            "name": "FORMAT_ETC2_RG11",
            "enum": "Format"
          },
          {
            "value": "33",
            "name": "FORMAT_ETC2_RG11S",
            "enum": "Format"
          },
          {
            "value": "34",
            "name": "FORMAT_ETC2_RGB8",
            "enum": "Format"
          },
          {
            "value": "35",
            "name": "FORMAT_ETC2_RGBA8",
            "enum": "Format"
          },
          {
            "value": "36",
            "name": "FORMAT_ETC2_RGB8A1",
            "enum": "Format"
          },
          {
            "value": "37",
            "name": "FORMAT_MAX",
            "enum": "Format"
          },
          {
            "value": "0",
            "name": "INTERPOLATE_NEAREST",
            "enum": "Interpolation"
          },
          {
            "value": "1",
            "name": "INTERPOLATE_BILINEAR",
            "enum": "Interpolation"
          },
          {
            "value": "2",
            "name": "INTERPOLATE_CUBIC",
            "enum": "Interpolation"
          },
          {
            "value": "3",
            "name": "INTERPOLATE_TRILINEAR",
            "enum": "Interpolation"
          },
          {
            "value": "4",
            "name": "INTERPOLATE_LANCZOS",
            "enum": "Interpolation"
          },
          {
            "value": "0",
            "name": "ALPHA_NONE",
            "enum": "AlphaMode"
          },
          {
            "value": "1",
            "name": "ALPHA_BIT",
            "enum": "AlphaMode"
          },
          {
            "value": "2",
            "name": "ALPHA_BLEND",
            "enum": "AlphaMode"
          },
          {
            "value": "0",
            "name": "COMPRESS_S3TC",
            "enum": "CompressMode"
          },
          {
            "value": "1",
            "name": "COMPRESS_PVRTC2",
            "enum": "CompressMode"
          },
          {
            "value": "2",
            "name": "COMPRESS_PVRTC4",
            "enum": "CompressMode"
          },
          {
            "value": "3",
            "name": "COMPRESS_ETC",
            "enum": "CompressMode"
          },
          {
            "value": "4",
            "name": "COMPRESS_ETC2",
            "enum": "CompressMode"
          },
          {
            "value": "0",
            "name": "COMPRESS_SOURCE_GENERIC",
            "enum": "CompressSource"
          },
          {
            "value": "1",
            "name": "COMPRESS_SOURCE_SRGB",
            "enum": "CompressSource"
          },
          {
            "value": "2",
            "name": "COMPRESS_SOURCE_NORMAL",
            "enum": "CompressSource"
          }
        ]
      },
      "brief_description": "Image datatype.",
      "description": "Native image datatype. Contains image data which can be converted to an [ImageTexture] and provides commonly used [i]image processing[/i] methods. The maximum width and height for an [Image] are [constant MAX_WIDTH] and [constant MAX_HEIGHT].\n\t\tAn [Image] cannot be assigned to a [code]texture[/code] property of an object directly (such as [Sprite]), and has to be converted manually to an [ImageTexture] first.\n\t\t[b]Note:[/b] The maximum image size is 16384×16384 pixels due to graphics hardware limitations. Larger images may fail to import."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "GeometryInstance",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "lats",
                "type": "int",
                "index": "0"
              },
              {
                "name": "lons",
                "type": "int",
                "index": "1"
              },
              {
                "name": "radius",
                "type": "float",
                "index": "2"
              },
              {
                "default": "true",
                "name": "add_uv",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "add_sphere",
            "description": "Simple helper to draw an UV sphere with given latitude, longitude and radius."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "position",
              "type": "Vector3",
              "index": "0"
            },
            "name": "add_vertex",
            "description": "Adds a vertex in local coordinate space with the currently set color/uv/etc."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "primitive",
                "type": "int",
                "enum": "Mesh.PrimitiveType",
                "index": "0"
              },
              {
                "default": "null",
                "name": "texture",
                "type": "Texture",
                "index": "1"
              }
            ],
            "name": "begin",
            "description": "Begin drawing (and optionally pass a texture override). When done call [method end]. For more information on how this works, search for [code]glBegin()[/code] and [code]glEnd()[/code] references.\n\t\t\t\tFor the type of primitive, see the [enum Mesh.PrimitiveType] enum."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Clears everything that was drawn using begin/end."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "end",
            "description": "Ends a drawing context and displays the results."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "color",
              "type": "Color",
              "index": "0"
            },
            "name": "set_color",
            "description": "The current drawing color."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "normal",
              "type": "Vector3",
              "index": "0"
            },
            "name": "set_normal",
            "description": "The next vertex's normal."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "tangent",
              "type": "Plane",
              "index": "0"
            },
            "name": "set_tangent",
            "description": "The next vertex's tangent (and binormal facing)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "uv",
              "type": "Vector2",
              "index": "0"
            },
            "name": "set_uv",
            "description": "The next vertex's UV."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "uv",
              "type": "Vector2",
              "index": "0"
            },
            "name": "set_uv2",
            "description": "The next vertex's second layer UV."
          }
        ]
      },
      "name": "ImmediateGeometry",
      "version": "3.3",
      "constants": {},
      "brief_description": "Draws simple geometry from code.",
      "description": "Draws simple geometry from code. Uses a drawing mode similar to OpenGL 1.x.\n\t\tSee also [ArrayMesh], [MeshDataTool] and [SurfaceTool] for procedural geometry generation.\n\t\t[b]Note:[/b] ImmediateGeometry3D is best suited to small amounts of mesh data that change every frame. It will be slow when handling large amounts of mesh data. If mesh data doesn't change often, use [ArrayMesh], [MeshDataTool] or [SurfaceTool] instead.\n\t\t[b]Note:[/b] Godot uses clockwise [url=https://learnopengl.com/Advanced-OpenGL/Face-culling]winding order[/url] for front faces of triangle primitive modes.\n\t\t[b]Note:[/b] In case of missing points when handling large amounts of mesh data, try increasing its buffer size limit under [member ProjectSettings.rendering/limits/buffers/immediate_buffer_size_kb]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/inputs/inputevent.html#actions",
            "title": "InputEvent: Actions"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/515",
            "title": "2D Dodge The Creeps Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/676",
            "title": "3D Voxel Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "\"\"",
            "value": "The action's name. Actions are accessed via this [String].",
            "setter": "set_action",
            "name": "action",
            "getter": "get_action",
            "type": "String"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the action's state is pressed. If [code]false[/code], the action's state is released.",
            "setter": "set_pressed",
            "name": "pressed",
            "getter": "is_pressed",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "The action's strength between 0 and 1. This value is considered as equal to 0 if pressed is [code]false[/code]. The event strength allows faking analog joypad motion events, by specifying how strongly the joypad axis is bent or pressed.",
            "setter": "set_strength",
            "name": "strength",
            "getter": "get_strength",
            "type": "float"
          }
        ]
      },
      "inherits": "InputEvent",
      "methods": {},
      "name": "InputEventAction",
      "version": "3.3",
      "constants": {},
      "brief_description": "Input event type for actions.",
      "description": "Contains a generic action which can be targeted from several types of inputs. Actions can be created from the [b]Input Map[/b] tab in the [b]Project > Project Settings[/b] menu. See [method Node._input]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "Vector2( 0, 0 )",
          "value": "The local gesture position relative to the [Viewport]. If used in [method Control._gui_input], the position is relative to the current [Control] that received this gesture.",
          "setter": "set_position",
          "name": "position",
          "getter": "get_position",
          "type": "Vector2"
        }
      },
      "inherits": "InputEventWithModifiers",
      "methods": {},
      "name": "InputEventGesture",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base class for touch control gestures.",
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/inputs/inputevent.html"
      },
      "members": {
        "member": [
          {
            "default": "0",
            "value": "Button identifier. One of the [enum JoystickList] button constants.",
            "setter": "set_button_index",
            "name": "button_index",
            "getter": "get_button_index",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the button's state is pressed. If [code]false[/code], the button's state is released.",
            "setter": "set_pressed",
            "name": "pressed",
            "getter": "is_pressed",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "Represents the pressure the user puts on the button with his finger, if the controller supports it. Ranges from [code]0[/code] to [code]1[/code].",
            "setter": "set_pressure",
            "name": "pressure",
            "getter": "get_pressure",
            "type": "float"
          }
        ]
      },
      "inherits": "InputEvent",
      "methods": {},
      "name": "InputEventJoypadButton",
      "version": "3.3",
      "constants": {},
      "brief_description": "Input event for gamepad buttons.",
      "description": "Input event type for gamepad buttons. For gamepad analog sticks and joysticks, see [InputEventJoypadMotion]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/inputs/inputevent.html"
      },
      "members": {
        "member": [
          {
            "default": "0",
            "value": "Axis identifier. Use one of the [enum JoystickList] axis constants.",
            "setter": "set_axis",
            "name": "axis",
            "getter": "get_axis",
            "type": "int"
          },
          {
            "default": "0.0",
            "value": "Current position of the joystick on the given axis. The value ranges from [code]-1.0[/code] to [code]1.0[/code]. A value of [code]0[/code] means the axis is in its resting position.",
            "setter": "set_axis_value",
            "name": "axis_value",
            "getter": "get_axis_value",
            "type": "float"
          }
        ]
      },
      "inherits": "InputEvent",
      "methods": {},
      "name": "InputEventJoypadMotion",
      "version": "3.3",
      "constants": {},
      "brief_description": "Input event type for gamepad joysticks and other motions. For buttons, see [code]InputEventJoypadButton[/code].",
      "description": "Stores information about joystick motions. One [InputEventJoypadMotion] represents one axis at a time."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/inputs/inputevent.html"
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the key was already pressed before this event. It means the user is holding the key down.",
            "setter": "set_echo",
            "name": "echo",
            "getter": "is_echo",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the key's state is pressed. If [code]false[/code], the key's state is released.",
            "setter": "set_pressed",
            "name": "pressed",
            "getter": "is_pressed",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "The key scancode, which corresponds to one of the [enum KeyList] constants.\n\t\t\tTo get a human-readable representation of the [InputEventKey], use [code]OS.get_scancode_string(event.scancode)[/code] where [code]event[/code] is the [InputEventKey].",
            "setter": "set_scancode",
            "name": "scancode",
            "getter": "get_scancode",
            "type": "int"
          },
          {
            "default": "0",
            "value": "The key Unicode identifier (when relevant). Unicode identifiers for the composite characters and complex scripts may not be available unless IME input mode is active. See [method OS.set_ime_active] for more information.",
            "setter": "set_unicode",
            "name": "unicode",
            "getter": "get_unicode",
            "type": "int"
          }
        ]
      },
      "inherits": "InputEventWithModifiers",
      "methods": {
        "method": {
          "return": {
            "type": "int"
          },
          "qualifiers": "const",
          "name": "get_scancode_with_modifiers",
          "description": "Returns the scancode combined with modifier keys such as [code]Shift[/code] or [code]Alt[/code]. See also [InputEventWithModifiers].\n\t\t\t\tTo get a human-readable representation of the [InputEventKey] with modifiers, use [code]OS.get_scancode_string(event.get_scancode_with_modifiers())[/code] where [code]event[/code] is the [InputEventKey]."
        }
      },
      "name": "InputEventKey",
      "version": "3.3",
      "constants": {},
      "brief_description": "Input event type for keyboard events.",
      "description": "Stores key presses on the keyboard. Supports key presses, key releases and [member echo] events."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "1.0",
          "setter": "set_factor",
          "name": "factor",
          "getter": "get_factor",
          "type": "float"
        }
      },
      "inherits": "InputEventGesture",
      "methods": {},
      "name": "InputEventMagnifyGesture",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0",
            "setter": "set_channel",
            "name": "channel",
            "getter": "get_channel",
            "type": "int"
          },
          {
            "default": "0",
            "setter": "set_controller_number",
            "name": "controller_number",
            "getter": "get_controller_number",
            "type": "int"
          },
          {
            "default": "0",
            "setter": "set_controller_value",
            "name": "controller_value",
            "getter": "get_controller_value",
            "type": "int"
          },
          {
            "default": "0",
            "setter": "set_instrument",
            "name": "instrument",
            "getter": "get_instrument",
            "type": "int"
          },
          {
            "default": "0",
            "setter": "set_message",
            "name": "message",
            "getter": "get_message",
            "type": "int"
          },
          {
            "default": "0",
            "setter": "set_pitch",
            "name": "pitch",
            "getter": "get_pitch",
            "type": "int"
          },
          {
            "default": "0",
            "setter": "set_pressure",
            "name": "pressure",
            "getter": "get_pressure",
            "type": "int"
          },
          {
            "default": "0",
            "setter": "set_velocity",
            "name": "velocity",
            "getter": "get_velocity",
            "type": "int"
          }
        ]
      },
      "inherits": "InputEvent",
      "methods": {},
      "name": "InputEventMIDI",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/inputs/mouse_and_input_coordinates.html"
      },
      "members": {
        "member": [
          {
            "default": "0",
            "value": "The mouse button identifier, one of the [enum ButtonList] button or button wheel constants.",
            "setter": "set_button_index",
            "name": "button_index",
            "getter": "get_button_index",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the mouse button's state is a double-click.",
            "setter": "set_doubleclick",
            "name": "doubleclick",
            "getter": "is_doubleclick",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "The amount (or delta) of the event. When used for high-precision scroll events, this indicates the scroll amount (vertical or horizontal). This is only supported on some platforms; the reported sensitivity varies depending on the platform. May be [code]0[/code] if not supported.",
            "setter": "set_factor",
            "name": "factor",
            "getter": "get_factor",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the mouse button's state is pressed. If [code]false[/code], the mouse button's state is released.",
            "setter": "set_pressed",
            "name": "pressed",
            "getter": "is_pressed",
            "type": "bool"
          }
        ]
      },
      "inherits": "InputEventMouse",
      "methods": {},
      "name": "InputEventMouseButton",
      "version": "3.3",
      "constants": {},
      "brief_description": "Input event type for mouse button events.",
      "description": "Contains mouse click information. See [method Node._input]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/inputs/mouse_and_input_coordinates.html",
            "title": "Mouse and input coordinates"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/676",
            "title": "3D Voxel Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "0.0",
            "value": "Represents the pressure the user puts on the pen. Ranges from [code]0.0[/code] to [code]1.0[/code].",
            "setter": "set_pressure",
            "name": "pressure",
            "getter": "get_pressure",
            "type": "float"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The mouse position relative to the previous position (position at the last frame).\n\t\t\t[b]Note:[/b] Since [InputEventMouseMotion] is only emitted when the mouse moves, the last event won't have a relative position of [code]Vector2(0, 0)[/code] when the user stops moving the mouse.",
            "setter": "set_relative",
            "name": "relative",
            "getter": "get_relative",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The mouse speed in pixels per second.",
            "setter": "set_speed",
            "name": "speed",
            "getter": "get_speed",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "Represents the angles of tilt of the pen. Positive X-coordinate value indicates a tilt to the right. Positive Y-coordinate value indicates a tilt toward the user. Ranges from [code]-1.0[/code] to [code]1.0[/code] for both axes.",
            "setter": "set_tilt",
            "name": "tilt",
            "getter": "get_tilt",
            "type": "Vector2"
          }
        ]
      },
      "inherits": "InputEventMouse",
      "methods": {},
      "name": "InputEventMouseMotion",
      "version": "3.3",
      "constants": {},
      "brief_description": "Input event type for mouse motion events.",
      "description": "Contains mouse and pen motion information. Supports relative, absolute positions and speed. See [method Node._input].\n\t\t[b]Note:[/b] By default, this event is only emitted once per frame rendered at most. If you need more precise input reporting, call [method Input.set_use_accumulated_input] with [code]false[/code] to make events emitted as often as possible. If you use InputEventMouseMotion to draw lines, consider implementing [url=https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm]Bresenham's line algorithm[/url] as well to avoid visible gaps in lines if the user is moving the mouse quickly."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/inputs/inputevent.html"
      },
      "members": {
        "member": [
          {
            "default": "0",
            "value": "The mouse button mask identifier, one of or a bitwise combination of the [enum ButtonList] button masks.",
            "setter": "set_button_mask",
            "name": "button_mask",
            "getter": "get_button_mask",
            "type": "int"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The global mouse position relative to the current [Viewport] when used in [method Control._gui_input], otherwise is at 0,0.",
            "setter": "set_global_position",
            "name": "global_position",
            "getter": "get_global_position",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The local mouse position relative to the [Viewport]. If used in [method Control._gui_input], the position is relative to the current [Control] which is under the mouse.",
            "setter": "set_position",
            "name": "position",
            "getter": "get_position",
            "type": "Vector2"
          }
        ]
      },
      "inherits": "InputEventWithModifiers",
      "methods": {},
      "name": "InputEventMouse",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base input event type for mouse events.",
      "description": "Stores general mouse events information."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "Vector2( 0, 0 )",
          "setter": "set_delta",
          "name": "delta",
          "getter": "get_delta",
          "type": "Vector2"
        }
      },
      "inherits": "InputEventGesture",
      "methods": {},
      "name": "InputEventPanGesture",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/inputs/inputevent.html"
      },
      "members": {
        "member": [
          {
            "default": "0",
            "value": "The drag event index in the case of a multi-drag event.",
            "setter": "set_index",
            "name": "index",
            "getter": "get_index",
            "type": "int"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The drag position.",
            "setter": "set_position",
            "name": "position",
            "getter": "get_position",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The drag position relative to its start position.",
            "setter": "set_relative",
            "name": "relative",
            "getter": "get_relative",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The drag speed.",
            "setter": "set_speed",
            "name": "speed",
            "getter": "get_speed",
            "type": "Vector2"
          }
        ]
      },
      "inherits": "InputEvent",
      "methods": {},
      "name": "InputEventScreenDrag",
      "version": "3.3",
      "constants": {},
      "brief_description": "Input event type for screen drag events. Only available on mobile devices.",
      "description": "Contains screen drag information. See [method Node._input]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/inputs/inputevent.html"
      },
      "members": {
        "member": [
          {
            "default": "0",
            "value": "The touch index in the case of a multi-touch event. One index = one finger.",
            "setter": "set_index",
            "name": "index",
            "getter": "get_index",
            "type": "int"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The touch position.",
            "setter": "set_position",
            "name": "position",
            "getter": "get_position",
            "type": "Vector2"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the touch's state is pressed. If [code]false[/code], the touch's state is released.",
            "setter": "set_pressed",
            "name": "pressed",
            "getter": "is_pressed",
            "type": "bool"
          }
        ]
      },
      "inherits": "InputEvent",
      "methods": {},
      "name": "InputEventScreenTouch",
      "version": "3.3",
      "constants": {},
      "brief_description": "Input event type for screen touch events.\n\t\t(only available on mobile devices)",
      "description": "Stores multi-touch press/release information. Supports touch press, touch release and [member index] for multi-touch count and order."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/inputs/inputevent.html"
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "State of the [code]Alt[/code] modifier.",
            "setter": "set_alt",
            "name": "alt",
            "getter": "get_alt",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "State of the [code]Command[/code] modifier.",
            "setter": "set_command",
            "name": "command",
            "getter": "get_command",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "State of the [code]Ctrl[/code] modifier.",
            "setter": "set_control",
            "name": "control",
            "getter": "get_control",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "State of the [code]Meta[/code] modifier.",
            "setter": "set_metakey",
            "name": "meta",
            "getter": "get_metakey",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "State of the [code]Shift[/code] modifier.",
            "setter": "set_shift",
            "name": "shift",
            "getter": "get_shift",
            "type": "bool"
          }
        ]
      },
      "inherits": "InputEvent",
      "methods": {},
      "name": "InputEventWithModifiers",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base class for keys events with modifiers.",
      "description": "Contains keys events information with modifiers support like [code]Shift[/code] or [code]Alt[/code]. See [method Node._input]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/inputs/inputevent.html",
            "title": "InputEvent"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/2d/2d_transforms.html",
            "title": "Viewport and canvas transforms"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/515",
            "title": "2D Dodge The Creeps Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/676",
            "title": "3D Voxel Demo"
          }
        ]
      },
      "members": {
        "member": {
          "default": "0",
          "value": "The event's device ID.\n\t\t\t[b]Note:[/b] This device ID will always be [code]-1[/code] for emulated mouse input from a touchscreen. This can be used to distinguish emulated mouse input from physical mouse input.",
          "setter": "set_device",
          "name": "device",
          "getter": "get_device",
          "type": "int"
        }
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "with_event",
              "type": "InputEvent",
              "index": "0"
            },
            "name": "accumulate",
            "description": "Returns [code]true[/code] if the given input event and this input event can be added together (only for events of type [InputEventMouseMotion]).\n\t\t\t\tThe given input event's position, global position and speed will be copied. The resulting [code]relative[/code] is a sum of both events. Both events' modifiers have to be identical."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "as_text",
            "description": "Returns a [String] representation of the event."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "action",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_action_strength",
            "description": "Returns a value between 0.0 and 1.0 depending on the given actions' state. Useful for getting the value of events of type [InputEventJoypadMotion]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "action",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_action",
            "description": "Returns [code]true[/code] if this input event matches a pre-defined action of any type."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "action",
                "type": "String",
                "index": "0"
              },
              {
                "default": "false",
                "name": "allow_echo",
                "type": "bool",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "is_action_pressed",
            "description": "Returns [code]true[/code] if the given action is being pressed (and is not an echo event for [InputEventKey] events, unless [code]allow_echo[/code] is [code]true[/code]). Not relevant for events of type [InputEventMouseMotion] or [InputEventScreenDrag]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "action",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_action_released",
            "description": "Returns [code]true[/code] if the given action is released (i.e. not pressed). Not relevant for events of type [InputEventMouseMotion] or [InputEventScreenDrag]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_action_type",
            "description": "Returns [code]true[/code] if this input event's type is one that can be assigned to an input action."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_echo",
            "description": "Returns [code]true[/code] if this input event is an echo event (only for events of type [InputEventKey])."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_pressed",
            "description": "Returns [code]true[/code] if this input event is pressed. Not relevant for events of type [InputEventMouseMotion] or [InputEventScreenDrag]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "event",
              "type": "InputEvent",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "shortcut_match",
            "description": "Returns [code]true[/code] if the given input event is checking for the same key ([InputEventKey]), button ([InputEventJoypadButton]) or action ([InputEventAction])."
          },
          {
            "return": {
              "type": "InputEvent"
            },
            "argument": [
              {
                "name": "xform",
                "type": "Transform2D",
                "index": "0"
              },
              {
                "default": "Vector2( 0, 0 )",
                "name": "local_ofs",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "xformed_by",
            "description": "Returns a copy of the given input event which has been offset by [code]local_ofs[/code] and transformed by [code]xform[/code]. Relevant for events of type [InputEventMouseButton], [InputEventMouseMotion], [InputEventScreenTouch], [InputEventScreenDrag], [InputEventMagnifyGesture] and [InputEventPanGesture]."
          }
        ]
      },
      "name": "InputEvent",
      "version": "3.3",
      "constants": {},
      "brief_description": "Generic input event.",
      "description": "Base class of all sort of input event. See [method Node._input]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/inputs/inputevent.html#inputmap"
      },
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "action",
                "type": "String",
                "index": "0"
              },
              {
                "name": "event",
                "type": "InputEvent",
                "index": "1"
              }
            ],
            "name": "action_add_event",
            "description": "Adds an [InputEvent] to an action. This [InputEvent] will trigger the action."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "action",
                "type": "String",
                "index": "0"
              },
              {
                "name": "event",
                "type": "InputEvent",
                "index": "1"
              }
            ],
            "name": "action_erase_event",
            "description": "Removes an [InputEvent] from an action."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "action",
              "type": "String",
              "index": "0"
            },
            "name": "action_erase_events",
            "description": "Removes all events from an action."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "action",
              "type": "String",
              "index": "0"
            },
            "name": "action_get_deadzone",
            "description": "Returns a deadzone value for the action."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "action",
                "type": "String",
                "index": "0"
              },
              {
                "name": "event",
                "type": "InputEvent",
                "index": "1"
              }
            ],
            "name": "action_has_event",
            "description": "Returns [code]true[/code] if the action has the given [InputEvent] associated with it."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "action",
                "type": "String",
                "index": "0"
              },
              {
                "name": "deadzone",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "action_set_deadzone",
            "description": "Sets a deadzone value for the action."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "action",
                "type": "String",
                "index": "0"
              },
              {
                "default": "0.5",
                "name": "deadzone",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "add_action",
            "description": "Adds an empty action to the [InputMap] with a configurable [code]deadzone[/code].\n\t\t\t\tAn [InputEvent] can then be added to this action with [method action_add_event]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "action",
              "type": "String",
              "index": "0"
            },
            "name": "erase_action",
            "description": "Removes an action from the [InputMap]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "event",
                "type": "InputEvent",
                "index": "0"
              },
              {
                "name": "action",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "event_is_action",
            "description": "Returns [code]true[/code] if the given event is part of an existing action. This method ignores keyboard modifiers if the given [InputEvent] is not pressed (for proper release detection). See [method action_has_event] if you don't want this behavior."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "action",
              "type": "String",
              "index": "0"
            },
            "name": "get_action_list",
            "description": "Returns an array of [InputEvent]s associated with a given action."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "get_actions",
            "description": "Returns an array of all actions in the [InputMap]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "action",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_action",
            "description": "Returns [code]true[/code] if the [InputMap] has a registered action with the given name."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "load_from_globals",
            "description": "Clears all [InputEventAction] in the [InputMap] and load it anew from [ProjectSettings]."
          }
        ]
      },
      "name": "InputMap",
      "version": "3.3",
      "constants": {},
      "brief_description": "Singleton that manages [InputEventAction].",
      "description": "Manages all [InputEventAction] which can be created/modified from the project settings menu [b]Project > Project Settings > Input Map[/b] or in code with [method add_action] and [method action_add_event]. See [method Node._input]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/inputs/index.html",
            "title": "Inputs tutorial index"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/515",
            "title": "2D Dodge The Creeps Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/676",
            "title": "3D Voxel Demo"
          }
        ]
      },
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "action",
                "type": "String",
                "index": "0"
              },
              {
                "default": "1.0",
                "name": "strength",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "action_press",
            "description": "This will simulate pressing the specified action.\n\t\t\t\tThe strength can be used for non-boolean actions, it's ranged between 0 and 1 representing the intensity of the given action.\n\t\t\t\t[b]Note:[/b] This method will not cause any [method Node._input] calls. It is intended to be used with [method is_action_pressed] and [method is_action_just_pressed]. If you want to simulate [code]_input[/code], use [method parse_input_event] instead."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "action",
              "type": "String",
              "index": "0"
            },
            "name": "action_release",
            "description": "If the specified action is already pressed, this will release it."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "mapping",
                "type": "String",
                "index": "0"
              },
              {
                "default": "false",
                "name": "update_existing",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "add_joy_mapping",
            "description": "Adds a new mapping entry (in SDL2 format) to the mapping database. Optionally update already connected devices."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "qualifiers": "const",
            "name": "get_accelerometer",
            "description": "Returns the acceleration of the device's accelerometer sensor, if the device has one. Otherwise, the method returns [constant Vector3.ZERO].\n\t\t\t\tNote this method returns an empty [Vector3] when running from the editor even when your device has an accelerometer. You must export your project to a supported device to read values from the accelerometer.\n\t\t\t\t[b]Note:[/b] This method only works on iOS, Android, and UWP. On other platforms, it always returns [constant Vector3.ZERO]. On Android the unit of measurement for each axis is m/s² while on iOS and UWP it's a multiple of the Earth's gravitational acceleration [code]g[/code] (~9.81 m/s²)."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "action",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_action_strength",
            "description": "Returns a value between 0 and 1 representing the intensity of the given action. In a joypad, for example, the further away the axis (analog sticks or L2, R2 triggers) is from the dead zone, the closer the value will be to 1. If the action is mapped to a control that has no axis as the keyboard, the value returned will be 0 or 1."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "get_connected_joypads",
            "description": "Returns an [Array] containing the device IDs of all currently connected joypads."
          },
          {
            "return": {
              "type": "int",
              "enum": "Input.CursorShape"
            },
            "qualifiers": "const",
            "name": "get_current_cursor_shape",
            "description": "Returns the currently assigned cursor shape (see [enum CursorShape])."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "qualifiers": "const",
            "name": "get_gravity",
            "description": "Returns the gravity of the device's accelerometer sensor, if the device has one. Otherwise, the method returns [constant Vector3.ZERO].\n\t\t\t\t[b]Note:[/b] This method only works on Android and iOS. On other platforms, it always returns [constant Vector3.ZERO]. On Android the unit of measurement for each axis is m/s² while on iOS it's a multiple of the Earth's gravitational acceleration [code]g[/code] (~9.81 m/s²)."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "qualifiers": "const",
            "name": "get_gyroscope",
            "description": "Returns the rotation rate in rad/s around a device's X, Y, and Z axes of the gyroscope sensor, if the device has one. Otherwise, the method returns [constant Vector3.ZERO].\n\t\t\t\t[b]Note:[/b] This method only works on Android and iOS. On other platforms, it always returns [constant Vector3.ZERO]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "device",
                "type": "int",
                "index": "0"
              },
              {
                "name": "axis",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_joy_axis",
            "description": "Returns the current value of the joypad axis at given index (see [enum JoystickList])."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "axis",
              "type": "String",
              "index": "0"
            },
            "name": "get_joy_axis_index_from_string",
            "description": "Returns the index of the provided axis name."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "axis_index",
              "type": "int",
              "index": "0"
            },
            "name": "get_joy_axis_string",
            "description": "Receives a [enum JoystickList] axis and returns its equivalent name as a string."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "button",
              "type": "String",
              "index": "0"
            },
            "name": "get_joy_button_index_from_string",
            "description": "Returns the index of the provided button name."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "button_index",
              "type": "int",
              "index": "0"
            },
            "name": "get_joy_button_string",
            "description": "Receives a gamepad button from [enum JoystickList] and returns its equivalent name as a string."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "device",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_joy_guid",
            "description": "Returns a SDL2-compatible device GUID on platforms that use gamepad remapping. Returns [code]\"Default Gamepad\"[/code] otherwise."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "device",
              "type": "int",
              "index": "0"
            },
            "name": "get_joy_name",
            "description": "Returns the name of the joypad at the specified device index."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "device",
              "type": "int",
              "index": "0"
            },
            "name": "get_joy_vibration_duration",
            "description": "Returns the duration of the current vibration effect in seconds."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "device",
              "type": "int",
              "index": "0"
            },
            "name": "get_joy_vibration_strength",
            "description": "Returns the strength of the joypad vibration: x is the strength of the weak motor, and y is the strength of the strong motor."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_last_mouse_speed",
            "description": "Returns the mouse speed for the last time the cursor was moved, and this until the next frame where the mouse moves. This means that even if the mouse is not moving, this function will still return the value of the last motion."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "qualifiers": "const",
            "name": "get_magnetometer",
            "description": "Returns the magnetic field strength in micro-Tesla for all axes of the device's magnetometer sensor, if the device has one. Otherwise, the method returns [constant Vector3.ZERO].\n\t\t\t\t[b]Note:[/b] This method only works on Android, iOS and UWP. On other platforms, it always returns [constant Vector3.ZERO]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_mouse_button_mask",
            "description": "Returns mouse buttons as a bitmask. If multiple mouse buttons are pressed at the same time, the bits are added together."
          },
          {
            "return": {
              "type": "int",
              "enum": "Input.MouseMode"
            },
            "qualifiers": "const",
            "name": "get_mouse_mode",
            "description": "Returns the mouse mode. See the constants for more information."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "action",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_action_just_pressed",
            "description": "Returns [code]true[/code] when the user starts pressing the action event, meaning it's [code]true[/code] only on the frame that the user pressed down the button.\n\t\t\t\tThis is useful for code that needs to run only once when an action is pressed, instead of every frame while it's pressed."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "action",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_action_just_released",
            "description": "Returns [code]true[/code] when the user stops pressing the action event, meaning it's [code]true[/code] only on the frame that the user released the button."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "action",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_action_pressed",
            "description": "Returns [code]true[/code] if you are pressing the action event. Note that if an action has multiple buttons assigned and more than one of them is pressed, releasing one button will release the action, even if some other button assigned to this action is still pressed."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "device",
                "type": "int",
                "index": "0"
              },
              {
                "name": "button",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "is_joy_button_pressed",
            "description": "Returns [code]true[/code] if you are pressing the joypad button (see [enum JoystickList])."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "device",
              "type": "int",
              "index": "0"
            },
            "name": "is_joy_known",
            "description": "Returns [code]true[/code] if the system knows the specified device. This means that it sets all button and axis indices exactly as defined in [enum JoystickList]. Unknown joypads are not expected to match these constants, but you can still retrieve events from them."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "scancode",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_key_pressed",
            "description": "Returns [code]true[/code] if you are pressing the key. You can pass a [enum KeyList] constant."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "button",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_mouse_button_pressed",
            "description": "Returns [code]true[/code] if you are pressing the mouse button specified with [enum ButtonList]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "device",
                "type": "int",
                "index": "0"
              },
              {
                "name": "connected",
                "type": "bool",
                "index": "1"
              },
              {
                "name": "name",
                "type": "String",
                "index": "2"
              },
              {
                "name": "guid",
                "type": "String",
                "index": "3"
              }
            ],
            "name": "joy_connection_changed",
            "description": "Notifies the [Input] singleton that a connection has changed, to update the state for the [code]device[/code] index.\n\t\t\t\tThis is used internally and should not have to be called from user scripts. See [signal joy_connection_changed] for the signal emitted when this is triggered internally."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "event",
              "type": "InputEvent",
              "index": "0"
            },
            "name": "parse_input_event",
            "description": "Feeds an [InputEvent] to the game. Can be used to artificially trigger input events from code. Also generates [method Node._input] calls.\n\t\t\t\tExample:\n\t\t\t\t[codeblock]\n\t\t\t\tvar a = InputEventAction.new()\n\t\t\t\ta.action = \"ui_cancel\"\n\t\t\t\ta.pressed = true\n\t\t\t\tInput.parse_input_event(a)\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "guid",
              "type": "String",
              "index": "0"
            },
            "name": "remove_joy_mapping",
            "description": "Removes all mappings from the internal database that match the given GUID."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "image",
                "type": "Resource",
                "index": "0"
              },
              {
                "default": "0",
                "name": "shape",
                "type": "int",
                "enum": "Input.CursorShape",
                "index": "1"
              },
              {
                "default": "Vector2( 0, 0 )",
                "name": "hotspot",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "set_custom_mouse_cursor",
            "description": "Sets a custom mouse cursor image, which is only visible inside the game window. The hotspot can also be specified. Passing [code]null[/code] to the image parameter resets to the system cursor. See [enum CursorShape] for the list of shapes.\n\t\t\t\t[code]image[/code]'s size must be lower than 256×256.\n\t\t\t\t[code]hotspot[/code] must be within [code]image[/code]'s size.\n\t\t\t\t[b]Note:[/b] [AnimatedTexture]s aren't supported as custom mouse cursors. If using an [AnimatedTexture], only the first frame will be displayed.\n\t\t\t\t[b]Note:[/b] Only images imported with the [b]Lossless[/b], [b]Lossy[/b] or [b]Uncompressed[/b] compression modes are supported. The [b]Video RAM[/b] compression mode can't be used for custom cursors."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "0",
              "name": "shape",
              "type": "int",
              "enum": "Input.CursorShape",
              "index": "0"
            },
            "name": "set_default_cursor_shape",
            "description": "Sets the default cursor shape to be used in the viewport instead of [constant CURSOR_ARROW].\n\t\t\t\t[b]Note:[/b] If you want to change the default cursor shape for [Control]'s nodes, use [member Control.mouse_default_cursor_shape] instead.\n\t\t\t\t[b]Note:[/b] This method generates an [InputEventMouseMotion] to update cursor immediately."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "mode",
              "type": "int",
              "enum": "Input.MouseMode",
              "index": "0"
            },
            "name": "set_mouse_mode",
            "description": "Sets the mouse mode. See the constants for more information."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enable",
              "type": "bool",
              "index": "0"
            },
            "name": "set_use_accumulated_input",
            "description": "Enables or disables the accumulation of similar input events sent by the operating system. When input accumulation is enabled, all input events generated during a frame will be merged and emitted when the frame is done rendering. Therefore, this limits the number of input method calls per second to the rendering FPS.\n\t\t\t\tInput accumulation is enabled by default. It can be disabled to get slightly more precise/reactive input at the cost of increased CPU usage. In applications where drawing freehand lines is required, input accumulation should generally be disabled while the user is drawing the line to get results that closely follow the actual input."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "device",
                "type": "int",
                "index": "0"
              },
              {
                "name": "weak_magnitude",
                "type": "float",
                "index": "1"
              },
              {
                "name": "strong_magnitude",
                "type": "float",
                "index": "2"
              },
              {
                "default": "0",
                "name": "duration",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "start_joy_vibration",
            "description": "Starts to vibrate the joypad. Joypads usually come with two rumble motors, a strong and a weak one. [code]weak_magnitude[/code] is the strength of the weak motor (between 0 and 1) and [code]strong_magnitude[/code] is the strength of the strong motor (between 0 and 1). [code]duration[/code] is the duration of the effect in seconds (a duration of 0 will try to play the vibration indefinitely).\n\t\t\t\t[b]Note:[/b] Not every hardware is compatible with long effect durations; it is recommended to restart an effect if it has to be played for more than a few seconds."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "device",
              "type": "int",
              "index": "0"
            },
            "name": "stop_joy_vibration",
            "description": "Stops the vibration of the joypad."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "500",
              "name": "duration_ms",
              "type": "int",
              "index": "0"
            },
            "name": "vibrate_handheld",
            "description": "Vibrate Android and iOS devices.\n\t\t\t\t[b]Note:[/b] It needs [code]VIBRATE[/code] permission for Android at export settings. iOS does not support duration."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "to",
              "type": "Vector2",
              "index": "0"
            },
            "name": "warp_mouse_position",
            "description": "Sets the mouse position to the specified vector."
          }
        ]
      },
      "name": "Input",
      "version": "3.3",
      "signals": {
        "signal": {
          "argument": [
            {
              "name": "device",
              "type": "int",
              "index": "0"
            },
            {
              "name": "connected",
              "type": "bool",
              "index": "1"
            }
          ],
          "name": "joy_connection_changed",
          "description": "Emitted when a joypad device has been connected or disconnected."
        }
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "MOUSE_MODE_VISIBLE",
            "enum": "MouseMode"
          },
          {
            "value": "1",
            "name": "MOUSE_MODE_HIDDEN",
            "enum": "MouseMode"
          },
          {
            "value": "2",
            "name": "MOUSE_MODE_CAPTURED",
            "enum": "MouseMode"
          },
          {
            "value": "3",
            "name": "MOUSE_MODE_CONFINED",
            "enum": "MouseMode"
          },
          {
            "value": "0",
            "name": "CURSOR_ARROW",
            "enum": "CursorShape"
          },
          {
            "value": "1",
            "name": "CURSOR_IBEAM",
            "enum": "CursorShape"
          },
          {
            "value": "2",
            "name": "CURSOR_POINTING_HAND",
            "enum": "CursorShape"
          },
          {
            "value": "3",
            "name": "CURSOR_CROSS",
            "enum": "CursorShape"
          },
          {
            "value": "4",
            "name": "CURSOR_WAIT",
            "enum": "CursorShape"
          },
          {
            "value": "5",
            "name": "CURSOR_BUSY",
            "enum": "CursorShape"
          },
          {
            "value": "6",
            "name": "CURSOR_DRAG",
            "enum": "CursorShape"
          },
          {
            "value": "7",
            "name": "CURSOR_CAN_DROP",
            "enum": "CursorShape"
          },
          {
            "value": "8",
            "name": "CURSOR_FORBIDDEN",
            "enum": "CursorShape"
          },
          {
            "value": "9",
            "name": "CURSOR_VSIZE",
            "enum": "CursorShape"
          },
          {
            "value": "10",
            "name": "CURSOR_HSIZE",
            "enum": "CursorShape"
          },
          {
            "value": "11",
            "name": "CURSOR_BDIAGSIZE",
            "enum": "CursorShape"
          },
          {
            "value": "12",
            "name": "CURSOR_FDIAGSIZE",
            "enum": "CursorShape"
          },
          {
            "value": "13",
            "name": "CURSOR_MOVE",
            "enum": "CursorShape"
          },
          {
            "value": "14",
            "name": "CURSOR_VSPLIT",
            "enum": "CursorShape"
          },
          {
            "value": "15",
            "name": "CURSOR_HSPLIT",
            "enum": "CursorShape"
          },
          {
            "value": "16",
            "name": "CURSOR_HELP",
            "enum": "CursorShape"
          }
        ]
      },
      "brief_description": "A singleton that deals with inputs.",
      "description": "A singleton that deals with inputs. This includes key presses, mouse buttons and movement, joypads, and input actions. Actions and their events can be set in the [b]Input Map[/b] tab in the [b]Project > Project Settings[/b], or with the [InputMap] class."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Node",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Node"
            },
            "argument": [
              {
                "default": "false",
                "name": "replace",
                "type": "bool",
                "index": "0"
              },
              {
                "default": "null",
                "name": "custom_scene",
                "type": "PackedScene",
                "index": "1"
              }
            ],
            "name": "create_instance",
            "description": "Not thread-safe. Use [method Object.call_deferred] if calling from a thread."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_instance_path",
            "description": "Gets the path to the [PackedScene] resource file that is loaded by default when calling [method replace_by_instance]. Not thread-safe. Use [method Object.call_deferred] if calling from a thread."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "argument": {
              "default": "false",
              "name": "with_order",
              "type": "bool",
              "index": "0"
            },
            "name": "get_stored_values",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "null",
              "name": "custom_scene",
              "type": "PackedScene",
              "index": "0"
            },
            "name": "replace_by_instance",
            "description": "Replaces this placeholder by the scene handed as an argument, or the original scene if no argument is given. As for all resources, the scene is loaded only if it's not loaded already. By manually loading the scene beforehand, delays caused by this function can be avoided."
          }
        ]
      },
      "name": "InstancePlaceholder",
      "version": "3.3",
      "constants": {},
      "brief_description": "Placeholder for the root [Node] of a [PackedScene].",
      "description": "Turning on the option [b]Load As Placeholder[/b] for an instanced scene in the editor causes it to be replaced by an InstancePlaceholder when running the game. This makes it possible to delay actually loading the scene until calling [method replace_by_instance]. This is useful to avoid loading large scenes all at once by loading parts of it selectively.\n\t\tThe InstancePlaceholder does not have a transform. This causes any child nodes to be positioned relatively to the Viewport from point (0,0), rather than their parent as displayed in the editor. Replacing the placeholder with a scene with a transform will transform children relatively to their parent again."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], and a target is set, the camera will move automatically.",
            "setter": "set_interpolation_enabled",
            "name": "enabled",
            "getter": "is_interpolation_enabled",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "How quickly the camera moves toward its target. Higher values will result in tighter camera motion.",
            "setter": "set_speed",
            "name": "speed",
            "getter": "get_speed",
            "type": "float"
          },
          {
            "default": "NodePath(\"\")",
            "value": "The target's [NodePath].",
            "setter": "set_target_path",
            "name": "target",
            "getter": "get_target_path",
            "type": "NodePath"
          }
        ]
      },
      "inherits": "Camera",
      "methods": {
        "method": {
          "return": {
            "type": "void"
          },
          "argument": {
            "name": "target",
            "type": "Object",
            "index": "0"
          },
          "name": "set_target",
          "description": "Sets the node to move toward and orient with."
        }
      },
      "name": "InterpolatedCamera",
      "version": "3.3",
      "constants": {},
      "brief_description": "[i]Deprecated.[/i] Camera which moves toward another node.",
      "description": "[i]Deprecated (will be removed in Godot 4.0).[/i] InterpolatedCamera is a [Camera] which smoothly moves to match a target node's position and rotation.\n\t\tIf it is not [member enabled] or does not have a valid target set, InterpolatedCamera acts like a normal Camera."
    }
  },
  {
    "class": {
      "tutorials": {},
      "methods": {
        "method": [
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "from",
              "type": "bool",
              "index": "0"
            },
            "name": "int",
            "description": "Cast a [bool] value to an integer value, [code]int(true)[/code] will be equals to 1 and [code]int(false)[/code] will be equals to 0."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "from",
              "type": "float",
              "index": "0"
            },
            "name": "int",
            "description": "Cast a float value to an integer value, this method simply removes the number fractions (i.e. rounds [code]from[/code] towards zero), so for example [code]int(2.7)[/code] will be equals to 2, [code]int(0.1)[/code] will be equals to 0 and [code]int(-2.7)[/code] will be equals to -2. This operation is also called truncation."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "from",
              "type": "String",
              "index": "0"
            },
            "name": "int",
            "description": "Cast a [String] value to an integer value, this method is an integer parser from a string, so calling this method with an invalid integer string will return 0, a valid string will be something like [code]'1.7'[/code]. This method will ignore all non-number characters, so calling [code]int('1e3')[/code] will return 13."
          }
        ]
      },
      "name": "int",
      "version": "3.3",
      "constants": {},
      "brief_description": "Integer built-in type.",
      "description": "Signed 64-bit integer type.\n\t\tIt can take values in the interval [code][-2^63, 2^63 - 1][/code], i.e. [code][-9223372036854775808, 9223372036854775807][/code]. Exceeding those bounds will wrap around.\n\t\t[int] is a [Variant] type, and will thus be used when assigning an integer value to a [Variant]. It can also be enforced with the [code]: int[/code] type hint.\n\t\t[codeblock]\n\t\tvar my_variant = 0 # int, value 0.\n\t\tmy_variant += 4.2 # float, value 4.2.\n\t\tvar my_int: int = 1 # int, value 1.\n\t\tmy_int = 4.2 # int, value 4, the right value is implicitly cast to int.\n\t\tmy_int = int(\"6.7\") # int, value 6, the String is explicitly cast with int.\n\n\t\tvar max_int = 9223372036854775807\n\t\tprint(max_int) # 9223372036854775807, OK.\n\t\tmax_int += 1\n\t\tprint(max_int) # -9223372036854775808, we overflowed and wrapped around.\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "\"\"",
              "name": "hostname",
              "type": "String",
              "index": "0"
            },
            "name": "clear_cache",
            "description": "Removes all of a [code]hostname[/code]'s cached references. If no [code]hostname[/code] is given, all cached IP addresses are removed."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "erase_resolve_item",
            "description": "Removes a given item [code]id[/code] from the queue. This should be used to free a queue after it has completed to enable more queries to happen."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_local_addresses",
            "description": "Returns all the user's current IPv4 and IPv6 addresses as an array."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_local_interfaces",
            "description": "Returns all network adapters as an array.\n\t\t\t\tEach adapter is a dictionary of the form:\n\t\t\t\t[codeblock]\n\t\t\t\t{\n\t\t\t\t    \"index\": \"1\", # Interface index.\n\t\t\t\t    \"name\": \"eth0\", # Interface name.\n\t\t\t\t    \"friendly\": \"Ethernet One\", # A friendly name (might be empty).\n\t\t\t\t    \"addresses\": [\"192.168.1.101\"], # An array of IP addresses associated to this interface.\n\t\t\t\t}\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_resolve_item_address",
            "description": "Returns a queued hostname's IP address, given its queue [code]id[/code]. Returns an empty string on error or if resolution hasn't happened yet (see [method get_resolve_item_status])."
          },
          {
            "return": {
              "type": "int",
              "enum": "IP.ResolverStatus"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_resolve_item_status",
            "description": "Returns a queued hostname's status as a [enum ResolverStatus] constant, given its queue [code]id[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": [
              {
                "name": "host",
                "type": "String",
                "index": "0"
              },
              {
                "default": "3",
                "name": "ip_type",
                "type": "int",
                "enum": "IP.Type",
                "index": "1"
              }
            ],
            "name": "resolve_hostname",
            "description": "Returns a given hostname's IPv4 or IPv6 address when resolved (blocking-type method). The address type returned depends on the [enum Type] constant given as [code]ip_type[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "host",
                "type": "String",
                "index": "0"
              },
              {
                "default": "3",
                "name": "ip_type",
                "type": "int",
                "enum": "IP.Type",
                "index": "1"
              }
            ],
            "name": "resolve_hostname_queue_item",
            "description": "Creates a queue item to resolve a hostname to an IPv4 or IPv6 address depending on the [enum Type] constant given as [code]ip_type[/code]. Returns the queue ID if successful, or [constant RESOLVER_INVALID_ID] on error."
          }
        ]
      },
      "name": "IP",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "RESOLVER_STATUS_NONE",
            "enum": "ResolverStatus"
          },
          {
            "value": "1",
            "name": "RESOLVER_STATUS_WAITING",
            "enum": "ResolverStatus"
          },
          {
            "value": "2",
            "name": "RESOLVER_STATUS_DONE",
            "enum": "ResolverStatus"
          },
          {
            "value": "3",
            "name": "RESOLVER_STATUS_ERROR",
            "enum": "ResolverStatus"
          },
          {
            "value": "32",
            "name": "RESOLVER_MAX_QUERIES"
          },
          {
            "value": "-1",
            "name": "RESOLVER_INVALID_ID"
          },
          {
            "value": "0",
            "name": "TYPE_NONE",
            "enum": "Type"
          },
          {
            "value": "1",
            "name": "TYPE_IPV4",
            "enum": "Type"
          },
          {
            "value": "2",
            "name": "TYPE_IPV6",
            "enum": "Type"
          },
          {
            "value": "3",
            "name": "TYPE_ANY",
            "enum": "Type"
          }
        ]
      },
      "brief_description": "Internet protocol (IP) support functions such as DNS resolution.",
      "description": "IP contains support functions for the Internet Protocol (IP). TCP/IP support is in different classes (see [StreamPeerTCP] and [TCP_Server]). IP provides DNS hostname resolution support, both blocking and threaded."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "value": "Default [StyleBox] for the [ItemList], i.e. used when the control is not being focused.",
            "name": "bg",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] used when the [ItemList] is being focused.",
            "name": "bg_focus",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] used for the cursor, when the [ItemList] is being focused.",
            "name": "cursor",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] used for the cursor, when the [ItemList] is not being focused.",
            "name": "cursor_unfocused",
            "type": "StyleBox"
          },
          {
            "value": "[Font] of the item's text.",
            "name": "font",
            "type": "Font"
          },
          {
            "default": "Color( 0.63, 0.63, 0.63, 1 )",
            "value": "Default text [Color] of the item.",
            "name": "font_color",
            "type": "Color"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "Text [Color] used when the item is selected.",
            "name": "font_color_selected",
            "type": "Color"
          },
          {
            "default": "Color( 0, 0, 0, 0.1 )",
            "value": "[Color] of the guideline. The guideline is a line drawn between each row of items.",
            "name": "guide_color",
            "type": "Color"
          },
          {
            "default": "4",
            "value": "The horizontal spacing between items.",
            "name": "hseparation",
            "type": "int"
          },
          {
            "default": "4",
            "value": "The spacing between item's icon and text.",
            "name": "icon_margin",
            "type": "int"
          },
          {
            "default": "2",
            "value": "The vertical spacing between each line of text.",
            "name": "line_separation",
            "type": "int"
          },
          {
            "value": "[StyleBox] for the selected items, used when the [ItemList] is not being focused.",
            "name": "selected",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] for the selected items, used when the [ItemList] is being focused.",
            "name": "selected_focus",
            "type": "StyleBox"
          },
          {
            "default": "2",
            "value": "The vertical spacing between items.",
            "name": "vseparation",
            "type": "int"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the currently selected item can be selected again.",
            "setter": "set_allow_reselect",
            "name": "allow_reselect",
            "getter": "get_allow_reselect",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], right mouse button click can select items.",
            "setter": "set_allow_rmb_select",
            "name": "allow_rmb_select",
            "getter": "get_allow_rmb_select",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the control will automatically resize the height to fit its content.",
            "setter": "set_auto_height",
            "name": "auto_height",
            "getter": "has_auto_height",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "The width all columns will be adjusted to.\n\t\t\tA value of zero disables the adjustment, each item will have a width equal to the width of its content and the columns will have an uneven width.",
            "setter": "set_fixed_column_width",
            "name": "fixed_column_width",
            "getter": "get_fixed_column_width",
            "type": "int"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The size all icons will be adjusted to.\n\t\t\tIf either X or Y component is not greater than zero, icon size won't be affected.",
            "setter": "set_fixed_icon_size",
            "name": "fixed_icon_size",
            "getter": "get_fixed_icon_size",
            "type": "Vector2"
          },
          {
            "default": "2",
            "setter": "set_focus_mode",
            "override": "true",
            "name": "focus_mode",
            "getter": "get_focus_mode",
            "type": "int",
            "enum": "Control.FocusMode"
          },
          {
            "default": "1",
            "value": "The icon position, whether above or to the left of the text. See the [enum IconMode] constants.",
            "setter": "set_icon_mode",
            "name": "icon_mode",
            "getter": "get_icon_mode",
            "type": "int",
            "enum": "ItemList.IconMode"
          },
          {
            "default": "1.0",
            "value": "The scale of icon applied after [member fixed_icon_size] and transposing takes effect.",
            "setter": "set_icon_scale",
            "name": "icon_scale",
            "getter": "get_icon_scale",
            "type": "float"
          },
          {
            "default": "1",
            "value": "Maximum columns the list will have.\n\t\t\tIf greater than zero, the content will be split among the specified columns.\n\t\t\tA value of zero means unlimited columns, i.e. all items will be put in the same row.",
            "setter": "set_max_columns",
            "name": "max_columns",
            "getter": "get_max_columns",
            "type": "int"
          },
          {
            "default": "1",
            "value": "Maximum lines of text allowed in each item. Space will be reserved even when there is not enough lines of text to display.\n\t\t\t[b]Note:[/b] This property takes effect only when [member icon_mode] is [constant ICON_MODE_TOP]. To make the text wrap, [member fixed_column_width] should be greater than zero.",
            "setter": "set_max_text_lines",
            "name": "max_text_lines",
            "getter": "get_max_text_lines",
            "type": "int"
          },
          {
            "default": "true",
            "setter": "set_clip_contents",
            "override": "true",
            "name": "rect_clip_content",
            "getter": "is_clipping_contents",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Whether all columns will have the same width.\n\t\t\tIf [code]true[/code], the width is equal to the largest column width of all columns.",
            "setter": "set_same_column_width",
            "name": "same_column_width",
            "getter": "is_same_column_width",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "Allows single or multiple item selection. See the [enum SelectMode] constants.",
            "setter": "set_select_mode",
            "name": "select_mode",
            "getter": "get_select_mode",
            "type": "int",
            "enum": "ItemList.SelectMode"
          }
        ]
      },
      "inherits": "Control",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "icon",
                "type": "Texture",
                "index": "0"
              },
              {
                "default": "true",
                "name": "selectable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "add_icon_item",
            "description": "Adds an item to the item list with no text, only an icon."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "text",
                "type": "String",
                "index": "0"
              },
              {
                "default": "null",
                "name": "icon",
                "type": "Texture",
                "index": "1"
              },
              {
                "default": "true",
                "name": "selectable",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "add_item",
            "description": "Adds an item to the item list with specified text. Specify an [code]icon[/code], or use [code]null[/code] as the [code]icon[/code] for a list item with no icon.\n\t\t\t\tIf selectable is [code]true[/code], the list item will be selectable."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Removes all items from the list."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "ensure_current_is_visible",
            "description": "Ensure current selection is visible, adjusting the scroll position as necessary."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "position",
                "type": "Vector2",
                "index": "0"
              },
              {
                "default": "false",
                "name": "exact",
                "type": "bool",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_item_at_position",
            "description": "Returns the item index at the given [code]position[/code].\n\t\t\t\tWhen there is no item at that point, -1 will be returned if [code]exact[/code] is [code]true[/code], and the closest item index will be returned otherwise."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_item_count",
            "description": "Returns the number of items currently in the list."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_custom_bg_color",
            "description": "Returns the custom background color of the item specified by [code]idx[/code] index."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_custom_fg_color",
            "description": "Returns the custom foreground color of the item specified by [code]idx[/code] index."
          },
          {
            "return": {
              "type": "Texture"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_icon",
            "description": "Returns the icon associated with the specified index."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_icon_modulate",
            "description": "Returns a [Color] modulating item's icon at the specified index."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_icon_region",
            "description": "Returns the region of item's icon used. The whole icon will be used if the region has no area."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_metadata",
            "description": "Returns the metadata value of the specified index."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_text",
            "description": "Returns the text associated with the specified index."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_tooltip",
            "description": "Returns the tooltip hint associated with the specified index."
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "name": "get_selected_items",
            "description": "Returns an array with the indexes of the selected items."
          },
          {
            "return": {
              "type": "VScrollBar"
            },
            "name": "get_v_scroll",
            "description": "Returns the [Object] ID associated with the list."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_anything_selected",
            "description": "Returns [code]true[/code] if one or more items are selected."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_item_disabled",
            "description": "Returns [code]true[/code] if the item at the specified index is disabled."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_item_icon_transposed",
            "description": "Returns [code]true[/code] if the item icon will be drawn transposed, i.e. the X and Y axes are swapped."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_item_selectable",
            "description": "Returns [code]true[/code] if the item at the specified index is selectable."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_item_tooltip_enabled",
            "description": "Returns [code]true[/code] if the tooltip is enabled for specified item index."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_selected",
            "description": "Returns [code]true[/code] if the item at the specified index is currently selected."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "from_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "move_item",
            "description": "Moves item from index [code]from_idx[/code] to [code]to_idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "remove_item",
            "description": "Removes the item specified by [code]idx[/code] index from the list."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "default": "true",
                "name": "single",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "select",
            "description": "Select the item at the specified index.\n\t\t\t\t[b]Note:[/b] This method does not trigger the item selection signal."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "custom_bg_color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "set_item_custom_bg_color",
            "description": "Sets the background color of the item specified by [code]idx[/code] index to the specified [Color]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "custom_fg_color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "set_item_custom_fg_color",
            "description": "Sets the foreground color of the item specified by [code]idx[/code] index to the specified [Color]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "disabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_item_disabled",
            "description": "Disables (or enables) the item at the specified index.\n\t\t\t\tDisabled items cannot be selected and do not trigger activation signals (when double-clicking or pressing Enter)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "icon",
                "type": "Texture",
                "index": "1"
              }
            ],
            "name": "set_item_icon",
            "description": "Sets (or replaces) the icon's [Texture] associated with the specified index."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "modulate",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "set_item_icon_modulate",
            "description": "Sets a modulating [Color] of the item associated with the specified index."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "rect",
                "type": "Rect2",
                "index": "1"
              }
            ],
            "name": "set_item_icon_region",
            "description": "Sets the region of item's icon used. The whole icon will be used if the region has no area."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "transposed",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_item_icon_transposed",
            "description": "Sets whether the item icon will be drawn transposed."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "metadata",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "set_item_metadata",
            "description": "Sets a value (of any type) to be stored with the item associated with the specified index."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "selectable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_item_selectable",
            "description": "Allows or disallows selection of the item associated with the specified index."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "text",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set_item_text",
            "description": "Sets text of the item associated with the specified index."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "tooltip",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set_item_tooltip",
            "description": "Sets the tooltip hint for the item associated with the specified index."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_item_tooltip_enabled",
            "description": "Sets whether the tooltip hint is enabled for specified item index."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "sort_items_by_text",
            "description": "Sorts items in the list by their text."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "unselect",
            "description": "Ensures the item associated with the specified index is not selected."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "unselect_all",
            "description": "Ensures there are no items selected."
          }
        ]
      },
      "name": "ItemList",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "name": "item_activated",
            "description": "Triggered when specified list item is activated via double-clicking or by pressing Enter."
          },
          {
            "argument": [
              {
                "name": "index",
                "type": "int",
                "index": "0"
              },
              {
                "name": "at_position",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "item_rmb_selected",
            "description": "Triggered when specified list item has been selected via right mouse clicking.\n\t\t\t\tThe click position is also provided to allow appropriate popup of context menus at the correct location.\n\t\t\t\t[member allow_rmb_select] must be enabled."
          },
          {
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "name": "item_selected",
            "description": "Triggered when specified item has been selected.\n\t\t\t\t[member allow_reselect] must be enabled to reselect an item."
          },
          {
            "argument": [
              {
                "name": "index",
                "type": "int",
                "index": "0"
              },
              {
                "name": "selected",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "multi_selected",
            "description": "Triggered when a multiple selection is altered on a list allowing multiple selection."
          },
          {
            "name": "nothing_selected",
            "description": "Triggered when a left mouse click is issued within the rect of the list but on empty space."
          },
          {
            "argument": {
              "name": "at_position",
              "type": "Vector2",
              "index": "0"
            },
            "name": "rmb_clicked",
            "description": "Triggered when a right mouse click is issued within the rect of the list but on empty space.\n\t\t\t\t[member allow_rmb_select] must be enabled."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "ICON_MODE_TOP",
            "enum": "IconMode"
          },
          {
            "value": "1",
            "name": "ICON_MODE_LEFT",
            "enum": "IconMode"
          },
          {
            "value": "0",
            "name": "SELECT_SINGLE",
            "enum": "SelectMode"
          },
          {
            "value": "1",
            "name": "SELECT_MULTI",
            "enum": "SelectMode"
          }
        ]
      },
      "brief_description": "Control that provides a list of selectable items (and/or icons) in a single column, or optionally in multiple columns.",
      "description": "This control provides a selectable list of items that may be in a single (or multiple columns) with option of text, icons, or both text and icon. Tooltips are supported and may be different for every item in the list.\n\t\tSelectable items in the list may be selected or deselected and multiple selection may be enabled. Selection with right mouse button may also be enabled to allow use of popup context menus. Items may also be \"activated\" by double-clicking them or by pressing Enter.\n\t\tItem text only supports single-line strings, newline characters (e.g. [code]\\n[/code]) in the string won't produce a newline. Text wrapping is enabled in [constant ICON_MODE_TOP] mode, but column's width is adjusted to fully fit its content by default. You need to set [member fixed_column_width] greater than zero to wrap the text."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Object",
      "methods": {
        "method": {
          "return": {
            "type": "JavaClass"
          },
          "argument": {
            "name": "name",
            "type": "String",
            "index": "0"
          },
          "name": "wrap",
          "description": {}
        }
      },
      "name": "JavaClassWrapper",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {},
      "name": "JavaClass",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/getting_started/workflow/export/exporting_for_web.html#calling-javascript-from-script"
      },
      "inherits": "Object",
      "methods": {
        "method": {
          "return": {
            "type": "Variant"
          },
          "argument": [
            {
              "name": "code",
              "type": "String",
              "index": "0"
            },
            {
              "default": "false",
              "name": "use_global_execution_context",
              "type": "bool",
              "index": "1"
            }
          ],
          "name": "eval",
          "description": "Execute the string [code]code[/code] as JavaScript code within the browser window. This is a call to the actual global JavaScript function [code]eval()[/code].\n\t\t\t\tIf [code]use_global_execution_context[/code] is [code]true[/code], the code will be evaluated in the global execution context. Otherwise, it is evaluated in the execution context of a function within the engine's runtime environment."
        }
      },
      "name": "JavaScript",
      "version": "3.3",
      "constants": {},
      "brief_description": "Singleton that connects the engine with the browser's JavaScript context in HTML5 export.",
      "description": "The JavaScript singleton is implemented only in the HTML5 export. It's used to access the browser's JavaScript context. This allows interaction with embedding pages or calling third-party JavaScript APIs.\n\t\t[b]Note:[/b] This singleton can be disabled at build-time to improve security. By default, the JavaScript singleton is enabled. Official export templates also have the JavaScript singleton enabled. See [url=https://docs.godotengine.org/en/3.3/development/compiling/compiling_for_web.html]Compiling for the Web[/url] in the documentation for more information."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Object",
      "methods": {},
      "name": "JNISingleton",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0.0",
            "value": "When [member node_a] and [member node_b] move in different directions the [code]bias[/code] controls how fast the joint pulls them back to their original position. The lower the [code]bias[/code] the more the two bodies can pull on the joint.",
            "setter": "set_bias",
            "name": "bias",
            "getter": "get_bias",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], [member node_a] and [member node_b] can not collide.",
            "setter": "set_exclude_nodes_from_collision",
            "name": "disable_collision",
            "getter": "get_exclude_nodes_from_collision",
            "type": "bool"
          },
          {
            "default": "NodePath(\"\")",
            "value": "The first body attached to the joint. Must derive from [PhysicsBody2D].",
            "setter": "set_node_a",
            "name": "node_a",
            "getter": "get_node_a",
            "type": "NodePath"
          },
          {
            "default": "NodePath(\"\")",
            "value": "The second body attached to the joint. Must derive from [PhysicsBody2D].",
            "setter": "set_node_b",
            "name": "node_b",
            "getter": "get_node_b",
            "type": "NodePath"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {},
      "name": "Joint2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base node for all joint constraints in 2D physics.",
      "description": "Base node for all joint constraints in 2D physics. Joints take 2 bodies and apply a custom constraint."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/524",
          "title": "3D Truck Town Demo"
        }
      },
      "members": {
        "member": [
          {
            "default": "true",
            "value": "If [code]true[/code], the two bodies of the nodes are not able to collide with each other.",
            "setter": "set_exclude_nodes_from_collision",
            "name": "collision/exclude_nodes",
            "getter": "get_exclude_nodes_from_collision",
            "type": "bool"
          },
          {
            "default": "NodePath(\"\")",
            "value": "The node attached to the first side (A) of the joint.",
            "setter": "set_node_a",
            "name": "nodes/node_a",
            "getter": "get_node_a",
            "type": "NodePath"
          },
          {
            "default": "NodePath(\"\")",
            "value": "The node attached to the second side (B) of the joint.",
            "setter": "set_node_b",
            "name": "nodes/node_b",
            "getter": "get_node_b",
            "type": "NodePath"
          },
          {
            "default": "1",
            "value": "The priority used to define which solver is executed first for multiple joints. The lower the value, the higher the priority.",
            "setter": "set_solver_priority",
            "name": "solver/priority",
            "getter": "get_solver_priority",
            "type": "int"
          }
        ]
      },
      "inherits": "Spatial",
      "methods": {},
      "name": "Joint",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base class for all 3D joints.",
      "description": "Joints are used to bind together two physics bodies. They have a solver priority and can define if the bodies of the two attached nodes should be able to collide with each other."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "value": "The error type if the JSON source was not successfully parsed. See the [enum Error] constants.",
            "setter": "set_error",
            "name": "error",
            "getter": "get_error",
            "type": "int",
            "enum": "Error"
          },
          {
            "default": "-1",
            "value": "The line number where the error occurred if the JSON source was not successfully parsed.",
            "setter": "set_error_line",
            "name": "error_line",
            "getter": "get_error_line",
            "type": "int"
          },
          {
            "default": "\"\"",
            "value": "The error message if the JSON source was not successfully parsed. See the [enum Error] constants.",
            "setter": "set_error_string",
            "name": "error_string",
            "getter": "get_error_string",
            "type": "String"
          },
          {
            "value": "A [Variant] containing the parsed JSON. Use [method @GDScript.typeof] or the [code]is[/code] keyword to check if it is what you expect. For example, if the JSON source starts with curly braces ([code]{}[/code]), a [Dictionary] will be returned. If the JSON source starts with brackets ([code][][/code]), an [Array] will be returned.\n\t\t\t[b]Note:[/b] The JSON specification does not define integer or float types, but only a [i]number[/i] type. Therefore, parsing a JSON text will convert all numerical values to [float] types.\n\t\t\t[b]Note:[/b] JSON objects do not preserve key order like Godot dictionaries, thus, you should not rely on keys being in a certain order if a dictionary is constructed from JSON. In contrast, JSON arrays retain the order of their elements:\n\t\t\t[codeblock]\n\t\t\tvar p = JSON.parse('[\"hello\", \"world\", \"!\"]')\n\t\t\tif typeof(p.result) == TYPE_ARRAY:\n\t\t\t    print(p.result[0]) # Prints \"hello\"\n\t\t\telse:\n\t\t\t    push_error(\"Unexpected results.\")\n\t\t\t[/codeblock]",
            "setter": "set_result",
            "name": "result",
            "getter": "get_result",
            "type": "Variant"
          }
        ]
      },
      "inherits": "Reference",
      "methods": {},
      "name": "JSONParseResult",
      "version": "3.3",
      "constants": {},
      "brief_description": "Data class wrapper for decoded JSON.",
      "description": "Returned by [method JSON.parse], [JSONParseResult] contains the decoded JSON or error information if the JSON source wasn't successfully parsed. You can check if the JSON source was successfully parsed with [code]if json_result.error == OK[/code]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Dictionary"
            },
            "argument": [
              {
                "name": "method",
                "type": "String",
                "index": "0"
              },
              {
                "name": "params",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "make_notification",
            "description": "Returns a dictionary in the form of a JSON-RPC notification. Notifications are one-shot messages which do not expect a response.\n\t\t\t\t- [code]method[/code]: Name of the method being called.\n\t\t\t\t- [code]params[/code]: An array or dictionary of parameters being passed to the method."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "argument": [
              {
                "name": "method",
                "type": "String",
                "index": "0"
              },
              {
                "name": "params",
                "type": "Variant",
                "index": "1"
              },
              {
                "name": "id",
                "type": "Variant",
                "index": "2"
              }
            ],
            "name": "make_request",
            "description": "Returns a dictionary in the form of a JSON-RPC request. Requests are sent to a server with the expectation of a response. The ID field is used for the server to specify which exact request it is responding to.\n\t\t\t\t- [code]method[/code]: Name of the method being called.\n\t\t\t\t- [code]params[/code]: An array or dictionary of parameters being passed to the method.\n\t\t\t\t- [code]id[/code]: Uniquely identifies this request. The server is expected to send a response with the same ID."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "argument": [
              {
                "name": "result",
                "type": "Variant",
                "index": "0"
              },
              {
                "name": "id",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "make_response",
            "description": "When a server has received and processed a request, it is expected to send a response. If you did not want a response then you need to have sent a Notification instead.\n\t\t\t\t- [code]result[/code]: The return value of the function which was called.\n\t\t\t\t- [code]id[/code]: The ID of the request this response is targeted to."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "argument": [
              {
                "name": "code",
                "type": "int",
                "index": "0"
              },
              {
                "name": "message",
                "type": "String",
                "index": "1"
              },
              {
                "default": "null",
                "name": "id",
                "type": "Variant",
                "index": "2"
              }
            ],
            "qualifiers": "const",
            "name": "make_response_error",
            "description": "Creates a response which indicates a previous reply has failed in some way.\n\t\t\t\t- [code]code[/code]: The error code corresponding to what kind of error this is. See the [enum ErrorCode] constants.\n\t\t\t\t- [code]message[/code]: A custom message about this error.\n\t\t\t\t- [code]id[/code]: The request this error is a response to."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "action",
                "type": "Variant",
                "index": "0"
              },
              {
                "default": "false",
                "name": "recurse",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "process_action",
            "description": "Given a Dictionary which takes the form of a JSON-RPC request: unpack the request and run it. Methods are resolved by looking at the field called \"method\" and looking for an equivalently named function in the JSONRPC object. If one is found that method is called.\n\t\t\t\tTo add new supported methods extend the JSONRPC class and call [method process_action] on your subclass.\n\t\t\t\t[code]action[/code]: The action to be run, as a Dictionary in the form of a JSON-RPC request or notification."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "action",
              "type": "String",
              "index": "0"
            },
            "name": "process_string",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "scope",
                "type": "String",
                "index": "0"
              },
              {
                "name": "target",
                "type": "Object",
                "index": "1"
              }
            ],
            "name": "set_scope",
            "description": {}
          }
        ]
      },
      "name": "JSONRPC",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "-32700",
            "name": "PARSE_ERROR",
            "enum": "ErrorCode"
          },
          {
            "value": "-32600",
            "name": "INVALID_REQUEST",
            "enum": "ErrorCode"
          },
          {
            "value": "-32601",
            "name": "METHOD_NOT_FOUND",
            "enum": "ErrorCode"
          },
          {
            "value": "-32602",
            "name": "INVALID_PARAMS",
            "enum": "ErrorCode"
          },
          {
            "value": "-32603",
            "name": "INTERNAL_ERROR",
            "enum": "ErrorCode"
          }
        ]
      },
      "brief_description": "A helper to handle dictionaries which look like JSONRPC documents.",
      "description": "[url=https://www.jsonrpc.org/]JSON-RPC[/url] is a standard which wraps a method call in a [JSON] object. The object has a particular structure and identifies which method is called, the parameters to that function, and carries an ID to keep track of responses. This class implements that standard on top of [Dictionary]; you will have to convert between a [Dictionary] and [JSON] with other functions."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "JSONParseResult"
            },
            "argument": {
              "name": "json",
              "type": "String",
              "index": "0"
            },
            "name": "parse",
            "description": "Parses a JSON-encoded string and returns a [JSONParseResult] containing the result."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": [
              {
                "name": "value",
                "type": "Variant",
                "index": "0"
              },
              {
                "default": "\"\"",
                "name": "indent",
                "type": "String",
                "index": "1"
              },
              {
                "default": "false",
                "name": "sort_keys",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "print",
            "description": "Converts a [Variant] var to JSON text and returns the result. Useful for serializing data to store or send over the network.\n\t\t\t\t[b]Note:[/b] The JSON specification does not define integer or float types, but only a [i]number[/i] type. Therefore, converting a Variant to JSON text will convert all numerical values to [float] types.\n\t\t\t\tUse [code]indent[/code] parameter to pretty print the output.\n\t\t\t\t[b]Example output:[/b]\n\t\t\t\t[codeblock]\n\t\t\t\t## JSON.print(my_dictionary)\n\t\t\t\t{\"name\":\"my_dictionary\",\"version\":\"1.0.0\",\"entities\":[{\"name\":\"entity_0\",\"value\":\"value_0\"},{\"name\":\"entity_1\",\"value\":\"value_1\"}]}\n\n\t\t\t\t## JSON.print(my_dictionary, \"\\t\")\n\t\t\t\t{\n\t\t\t\t        \"name\": \"my_dictionary\",\n\t\t\t\t        \"version\": \"1.0.0\",\n\t\t\t\t        \"entities\": [\n\t\t\t\t                {\n\t\t\t\t                        \"name\": \"entity_0\",\n\t\t\t\t                        \"value\": \"value_0\"\n\t\t\t\t                },\n\t\t\t\t                {\n\t\t\t\t                        \"name\": \"entity_1\",\n\t\t\t\t                        \"value\": \"value_1\"\n\t\t\t\t                }\n\t\t\t\t        ]\n\t\t\t\t}\n\t\t\t\t[/codeblock]"
          }
        ]
      },
      "name": "JSON",
      "version": "3.3",
      "constants": {},
      "brief_description": "Helper class for parsing JSON data.",
      "description": "Helper class for parsing JSON data. For usage example and other important hints, see [JSONParseResult]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/physics/kinematic_character_2d.html",
            "title": "Kinematic character (2D)"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/physics/using_kinematic_body_2d.html",
            "title": "Using KinematicBody2D"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/113",
            "title": "2D Kinematic Character Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/120",
            "title": "2D Platformer Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "0.08",
            "value": "Extra margin used for collision recovery in motion functions (see [method move_and_collide], [method move_and_slide], [method move_and_slide_with_snap]).\n\t\t\tIf the body is at least this close to another body, it will consider them to be colliding and will be pushed away before performing the actual motion.\n\t\t\tA higher value means it's more flexible for detecting collision, which helps with consistently detecting walls and floors.\n\t\t\tA lower value forces the collision algorithm to use more exact detection, so it can be used in cases that specifically require precision, e.g at very low scale to avoid visible jittering, or for stability with a stack of kinematic bodies.",
            "setter": "set_safe_margin",
            "name": "collision/safe_margin",
            "getter": "get_safe_margin",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the body's movement will be synchronized to the physics frame. This is useful when animating movement via [AnimationPlayer], for example on moving platforms. Do [b]not[/b] use together with [method move_and_slide] or [method move_and_collide] functions.",
            "setter": "set_sync_to_physics",
            "name": "motion/sync_to_physics",
            "getter": "is_sync_to_physics_enabled",
            "type": "bool"
          }
        ]
      },
      "inherits": "PhysicsBody2D",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_floor_normal",
            "description": "Returns the surface normal of the floor at the last collision point. Only valid after calling [method move_and_slide] or [method move_and_slide_with_snap] and when [method is_on_floor] returns [code]true[/code]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_floor_velocity",
            "description": "Returns the linear velocity of the floor at the last collision point. Only valid after calling [method move_and_slide] or [method move_and_slide_with_snap] and when [method is_on_floor] returns [code]true[/code]."
          },
          {
            "return": {
              "type": "KinematicCollision2D"
            },
            "argument": {
              "name": "slide_idx",
              "type": "int",
              "index": "0"
            },
            "name": "get_slide_collision",
            "description": "Returns a [KinematicCollision2D], which contains information about a collision that occurred during the last call to [method move_and_slide] or [method move_and_slide_with_snap]. Since the body can collide several times in a single call to [method move_and_slide], you must specify the index of the collision in the range 0 to ([method get_slide_count] - 1).\n\t\t\t\t[b]Example usage:[/b]\n\t\t\t\t[codeblock]\n\t\t\t\tfor i in get_slide_count():\n\t\t\t\t    var collision = get_slide_collision(i)\n\t\t\t\t    print(\"Collided with: \", collision.collider.name)\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_slide_count",
            "description": "Returns the number of times the body collided and changed direction during the last call to [method move_and_slide] or [method move_and_slide_with_snap]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_on_ceiling",
            "description": "Returns [code]true[/code] if the body collided with the ceiling on the last call of [method move_and_slide] or [method move_and_slide_with_snap]. Otherwise, returns [code]false[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_on_floor",
            "description": "Returns [code]true[/code] if the body collided with the floor on the last call of [method move_and_slide] or [method move_and_slide_with_snap]. Otherwise, returns [code]false[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_on_wall",
            "description": "Returns [code]true[/code] if the body collided with a wall on the last call of [method move_and_slide] or [method move_and_slide_with_snap]. Otherwise, returns [code]false[/code]."
          },
          {
            "return": {
              "type": "KinematicCollision2D"
            },
            "argument": [
              {
                "name": "rel_vec",
                "type": "Vector2",
                "index": "0"
              },
              {
                "default": "true",
                "name": "infinite_inertia",
                "type": "bool",
                "index": "1"
              },
              {
                "default": "true",
                "name": "exclude_raycast_shapes",
                "type": "bool",
                "index": "2"
              },
              {
                "default": "false",
                "name": "test_only",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "move_and_collide",
            "description": "Moves the body along the vector [code]rel_vec[/code]. The body will stop if it collides. Returns a [KinematicCollision2D], which contains information about the collision.\n\t\t\t\tIf [code]test_only[/code] is [code]true[/code], the body does not move but the would-be collision information is given."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "linear_velocity",
                "type": "Vector2",
                "index": "0"
              },
              {
                "default": "Vector2( 0, 0 )",
                "name": "up_direction",
                "type": "Vector2",
                "index": "1"
              },
              {
                "default": "false",
                "name": "stop_on_slope",
                "type": "bool",
                "index": "2"
              },
              {
                "default": "4",
                "name": "max_slides",
                "type": "int",
                "index": "3"
              },
              {
                "default": "0.785398",
                "name": "floor_max_angle",
                "type": "float",
                "index": "4"
              },
              {
                "default": "true",
                "name": "infinite_inertia",
                "type": "bool",
                "index": "5"
              }
            ],
            "name": "move_and_slide",
            "description": "Moves the body along a vector. If the body collides with another, it will slide along the other body rather than stop immediately. If the other body is a [KinematicBody2D] or [RigidBody2D], it will also be affected by the motion of the other body. You can use this to make moving and rotating platforms, or to make nodes push other nodes.\n\t\t\t\tThis method should be used in [method Node._physics_process] (or in a method called by [method Node._physics_process]), as it uses the physics step's [code]delta[/code] value automatically in calculations. Otherwise, the simulation will run at an incorrect speed.\n\t\t\t\t[code]linear_velocity[/code] is the velocity vector in pixels per second. Unlike in [method move_and_collide], you should [i]not[/i] multiply it by [code]delta[/code] — the physics engine handles applying the velocity.\n\t\t\t\t[code]up_direction[/code] is the up direction, used to determine what is a wall and what is a floor or a ceiling. If set to the default value of [code]Vector2(0, 0)[/code], everything is considered a wall. This is useful for topdown games.\n\t\t\t\tIf [code]stop_on_slope[/code] is [code]true[/code], body will not slide on slopes when you include gravity in [code]linear_velocity[/code] and the body is standing still.\n\t\t\t\tIf the body collides, it will change direction a maximum of [code]max_slides[/code] times before it stops.\n\t\t\t\t[code]floor_max_angle[/code] is the maximum angle (in radians) where a slope is still considered a floor (or a ceiling), rather than a wall. The default value equals 45 degrees.\n\t\t\t\tIf [code]infinite_inertia[/code] is [code]true[/code], body will be able to push [RigidBody2D] nodes, but it won't also detect any collisions with them. If [code]false[/code], it will interact with [RigidBody2D] nodes like with [StaticBody2D].\n\t\t\t\tReturns the [code]linear_velocity[/code] vector, rotated and/or scaled if a slide collision occurred. To get detailed information about collisions that occurred, use [method get_slide_collision]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "linear_velocity",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "snap",
                "type": "Vector2",
                "index": "1"
              },
              {
                "default": "Vector2( 0, 0 )",
                "name": "up_direction",
                "type": "Vector2",
                "index": "2"
              },
              {
                "default": "false",
                "name": "stop_on_slope",
                "type": "bool",
                "index": "3"
              },
              {
                "default": "4",
                "name": "max_slides",
                "type": "int",
                "index": "4"
              },
              {
                "default": "0.785398",
                "name": "floor_max_angle",
                "type": "float",
                "index": "5"
              },
              {
                "default": "true",
                "name": "infinite_inertia",
                "type": "bool",
                "index": "6"
              }
            ],
            "name": "move_and_slide_with_snap",
            "description": "Moves the body while keeping it attached to slopes. Similar to [method move_and_slide].\n\t\t\t\tAs long as the [code]snap[/code] vector is in contact with the ground, the body will remain attached to the surface. This means you must disable snap in order to jump, for example. You can do this by setting [code]snap[/code] to [code](0, 0)[/code] or by using [method move_and_slide] instead."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "from",
                "type": "Transform2D",
                "index": "0"
              },
              {
                "name": "rel_vec",
                "type": "Vector2",
                "index": "1"
              },
              {
                "default": "true",
                "name": "infinite_inertia",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "test_move",
            "description": "Checks for collisions without moving the body. Virtually sets the node's position, scale and rotation to that of the given [Transform2D], then tries to move the body along the vector [code]rel_vec[/code]. Returns [code]true[/code] if a collision would occur."
          }
        ]
      },
      "name": "KinematicBody2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Kinematic body 2D node.",
      "description": "Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all; to other types of bodies, such as a character or a rigid body, these are the same as a static body. However, they have two main uses:\n\t\t[b]Simulated motion:[/b] When these bodies are moved manually, either from code or from an [AnimationPlayer] (with [member AnimationPlayer.playback_process_mode] set to \"physics\"), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).\n\t\t[b]Kinematic characters:[/b] KinematicBody2D also has an API for moving objects (the [method move_and_collide] and [method move_and_slide] methods) while performing collision tests. This makes them really useful to implement characters that collide against a world, but don't require advanced physics."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/physics/kinematic_character_2d.html",
            "title": "Kinematic character (2D)"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/126",
            "title": "3D Kinematic Character Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/125",
            "title": "3D Platformer Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/676",
            "title": "3D Voxel Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "0.001",
            "value": "Extra margin used for collision recovery in motion functions (see [method move_and_collide], [method move_and_slide], [method move_and_slide_with_snap]).\n\t\t\tIf the body is at least this close to another body, it will consider them to be colliding and will be pushed away before performing the actual motion.\n\t\t\tA higher value means it's more flexible for detecting collision, which helps with consistently detecting walls and floors.\n\t\t\tA lower value forces the collision algorithm to use more exact detection, so it can be used in cases that specifically require precision, e.g at very low scale to avoid visible jittering, or for stability with a stack of kinematic bodies.",
            "setter": "set_safe_margin",
            "name": "collision/safe_margin",
            "getter": "get_safe_margin",
            "type": "float"
          },
          {
            "default": "false",
            "value": "Lock the body's X axis movement.",
            "setter": "set_axis_lock",
            "name": "move_lock_x",
            "getter": "get_axis_lock",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Lock the body's Y axis movement.",
            "setter": "set_axis_lock",
            "name": "move_lock_y",
            "getter": "get_axis_lock",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Lock the body's Z axis movement.",
            "setter": "set_axis_lock",
            "name": "move_lock_z",
            "getter": "get_axis_lock",
            "type": "bool"
          }
        ]
      },
      "inherits": "PhysicsBody",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "axis",
              "type": "int",
              "enum": "PhysicsServer.BodyAxis",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_axis_lock",
            "description": "Returns [code]true[/code] if the specified [code]axis[/code] is locked. See also [member move_lock_x], [member move_lock_y] and [member move_lock_z]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "qualifiers": "const",
            "name": "get_floor_normal",
            "description": "Returns the surface normal of the floor at the last collision point. Only valid after calling [method move_and_slide] or [method move_and_slide_with_snap] and when [method is_on_floor] returns [code]true[/code]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "qualifiers": "const",
            "name": "get_floor_velocity",
            "description": "Returns the linear velocity of the floor at the last collision point. Only valid after calling [method move_and_slide] or [method move_and_slide_with_snap] and when [method is_on_floor] returns [code]true[/code]."
          },
          {
            "return": {
              "type": "KinematicCollision"
            },
            "argument": {
              "name": "slide_idx",
              "type": "int",
              "index": "0"
            },
            "name": "get_slide_collision",
            "description": "Returns a [KinematicCollision], which contains information about a collision that occurred during the last call to [method move_and_slide] or [method move_and_slide_with_snap]. Since the body can collide several times in a single call to [method move_and_slide], you must specify the index of the collision in the range 0 to ([method get_slide_count] - 1)."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_slide_count",
            "description": "Returns the number of times the body collided and changed direction during the last call to [method move_and_slide] or [method move_and_slide_with_snap]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_on_ceiling",
            "description": "Returns [code]true[/code] if the body collided with the ceiling on the last call of [method move_and_slide] or [method move_and_slide_with_snap]. Otherwise, returns [code]false[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_on_floor",
            "description": "Returns [code]true[/code] if the body collided with the floor on the last call of [method move_and_slide] or [method move_and_slide_with_snap]. Otherwise, returns [code]false[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_on_wall",
            "description": "Returns [code]true[/code] if the body collided with a wall on the last call of [method move_and_slide] or [method move_and_slide_with_snap]. Otherwise, returns [code]false[/code]."
          },
          {
            "return": {
              "type": "KinematicCollision"
            },
            "argument": [
              {
                "name": "rel_vec",
                "type": "Vector3",
                "index": "0"
              },
              {
                "default": "true",
                "name": "infinite_inertia",
                "type": "bool",
                "index": "1"
              },
              {
                "default": "true",
                "name": "exclude_raycast_shapes",
                "type": "bool",
                "index": "2"
              },
              {
                "default": "false",
                "name": "test_only",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "move_and_collide",
            "description": "Moves the body along the vector [code]rel_vec[/code]. The body will stop if it collides. Returns a [KinematicCollision], which contains information about the collision.\n\t\t\t\tIf [code]test_only[/code] is [code]true[/code], the body does not move but the would-be collision information is given."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": [
              {
                "name": "linear_velocity",
                "type": "Vector3",
                "index": "0"
              },
              {
                "default": "Vector3( 0, 0, 0 )",
                "name": "up_direction",
                "type": "Vector3",
                "index": "1"
              },
              {
                "default": "false",
                "name": "stop_on_slope",
                "type": "bool",
                "index": "2"
              },
              {
                "default": "4",
                "name": "max_slides",
                "type": "int",
                "index": "3"
              },
              {
                "default": "0.785398",
                "name": "floor_max_angle",
                "type": "float",
                "index": "4"
              },
              {
                "default": "true",
                "name": "infinite_inertia",
                "type": "bool",
                "index": "5"
              }
            ],
            "name": "move_and_slide",
            "description": "Moves the body along a vector. If the body collides with another, it will slide along the other body rather than stop immediately. If the other body is a [KinematicBody] or [RigidBody], it will also be affected by the motion of the other body. You can use this to make moving and rotating platforms, or to make nodes push other nodes.\n\t\t\t\tThis method should be used in [method Node._physics_process] (or in a method called by [method Node._physics_process]), as it uses the physics step's [code]delta[/code] value automatically in calculations. Otherwise, the simulation will run at an incorrect speed.\n\t\t\t\t[code]linear_velocity[/code] is the velocity vector (typically meters per second). Unlike in [method move_and_collide], you should [i]not[/i] multiply it by [code]delta[/code] — the physics engine handles applying the velocity.\n\t\t\t\t[code]up_direction[/code] is the up direction, used to determine what is a wall and what is a floor or a ceiling. If set to the default value of [code]Vector3(0, 0, 0)[/code], everything is considered a wall.\n\t\t\t\tIf [code]stop_on_slope[/code] is [code]true[/code], body will not slide on slopes when you include gravity in [code]linear_velocity[/code] and the body is standing still.\n\t\t\t\tIf the body collides, it will change direction a maximum of [code]max_slides[/code] times before it stops.\n\t\t\t\t[code]floor_max_angle[/code] is the maximum angle (in radians) where a slope is still considered a floor (or a ceiling), rather than a wall. The default value equals 45 degrees.\n\t\t\t\tIf [code]infinite_inertia[/code] is [code]true[/code], body will be able to push [RigidBody] nodes, but it won't also detect any collisions with them. If [code]false[/code], it will interact with [RigidBody] nodes like with [StaticBody].\n\t\t\t\tReturns the [code]linear_velocity[/code] vector, rotated and/or scaled if a slide collision occurred. To get detailed information about collisions that occurred, use [method get_slide_collision]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": [
              {
                "name": "linear_velocity",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "snap",
                "type": "Vector3",
                "index": "1"
              },
              {
                "default": "Vector3( 0, 0, 0 )",
                "name": "up_direction",
                "type": "Vector3",
                "index": "2"
              },
              {
                "default": "false",
                "name": "stop_on_slope",
                "type": "bool",
                "index": "3"
              },
              {
                "default": "4",
                "name": "max_slides",
                "type": "int",
                "index": "4"
              },
              {
                "default": "0.785398",
                "name": "floor_max_angle",
                "type": "float",
                "index": "5"
              },
              {
                "default": "true",
                "name": "infinite_inertia",
                "type": "bool",
                "index": "6"
              }
            ],
            "name": "move_and_slide_with_snap",
            "description": "Moves the body while keeping it attached to slopes. Similar to [method move_and_slide].\n\t\t\t\tAs long as the [code]snap[/code] vector is in contact with the ground, the body will remain attached to the surface. This means you must disable snap in order to jump, for example. You can do this by setting [code]snap[/code] to [code](0, 0, 0)[/code] or by using [method move_and_slide] instead."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "axis",
                "type": "int",
                "enum": "PhysicsServer.BodyAxis",
                "index": "0"
              },
              {
                "name": "lock",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_axis_lock",
            "description": "Locks or unlocks the specified [code]axis[/code] depending on the value of [code]lock[/code]. See also [member move_lock_x], [member move_lock_y] and [member move_lock_z]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "from",
                "type": "Transform",
                "index": "0"
              },
              {
                "name": "rel_vec",
                "type": "Vector3",
                "index": "1"
              },
              {
                "default": "true",
                "name": "infinite_inertia",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "test_move",
            "description": "Checks for collisions without moving the body. Virtually sets the node's position, scale and rotation to that of the given [Transform], then tries to move the body along the vector [code]rel_vec[/code]. Returns [code]true[/code] if a collision would occur."
          }
        ]
      },
      "name": "KinematicBody",
      "version": "3.3",
      "constants": {},
      "brief_description": "Kinematic body 3D node.",
      "description": "Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all; to other types of bodies, such as a character or a rigid body, these are the same as a static body. However, they have two main uses:\n\t\t[b]Simulated motion:[/b] When these bodies are moved manually, either from code or from an [AnimationPlayer] (with [member AnimationPlayer.playback_process_mode] set to \"physics\"), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).\n\t\t[b]Kinematic characters:[/b] KinematicBody also has an API for moving objects (the [method move_and_collide] and [method move_and_slide] methods) while performing collision tests. This makes them really useful to implement characters that collide against a world, but don't require advanced physics."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "value": "The colliding body.",
            "setter": "",
            "name": "collider",
            "getter": "get_collider",
            "type": "Object"
          },
          {
            "default": "0",
            "value": "The colliding body's unique instance ID. See [method Object.get_instance_id].",
            "setter": "",
            "name": "collider_id",
            "getter": "get_collider_id",
            "type": "int"
          },
          {
            "value": "The colliding body's metadata. See [Object].",
            "setter": "",
            "name": "collider_metadata",
            "getter": "get_collider_metadata",
            "type": "Variant"
          },
          {
            "value": "The colliding body's [RID] used by the [Physics2DServer].",
            "setter": "",
            "name": "collider_rid",
            "getter": "get_collider_rid",
            "type": "RID"
          },
          {
            "value": "The colliding body's shape.",
            "setter": "",
            "name": "collider_shape",
            "getter": "get_collider_shape",
            "type": "Object"
          },
          {
            "default": "0",
            "value": "The colliding shape's index. See [CollisionObject2D].",
            "setter": "",
            "name": "collider_shape_index",
            "getter": "get_collider_shape_index",
            "type": "int"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The colliding object's velocity.",
            "setter": "",
            "name": "collider_velocity",
            "getter": "get_collider_velocity",
            "type": "Vector2"
          },
          {
            "value": "The moving object's colliding shape.",
            "setter": "",
            "name": "local_shape",
            "getter": "get_local_shape",
            "type": "Object"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The colliding body's shape's normal at the point of collision.",
            "setter": "",
            "name": "normal",
            "getter": "get_normal",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The point of collision, in global coordinates.",
            "setter": "",
            "name": "position",
            "getter": "get_position",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The moving object's remaining movement vector.",
            "setter": "",
            "name": "remainder",
            "getter": "get_remainder",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The distance the moving object traveled before collision.",
            "setter": "",
            "name": "travel",
            "getter": "get_travel",
            "type": "Vector2"
          }
        ]
      },
      "inherits": "Reference",
      "methods": {},
      "name": "KinematicCollision2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Collision data for [KinematicBody2D] collisions.",
      "description": "Contains collision data for [KinematicBody2D] collisions. When a [KinematicBody2D] is moved using [method KinematicBody2D.move_and_collide], it stops if it detects a collision with another body. If a collision is detected, a KinematicCollision2D object is returned.\n\t\tThis object contains information about the collision, including the colliding object, the remaining motion, and the collision position. This information can be used to calculate a collision response."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "value": "The colliding body.",
            "setter": "",
            "name": "collider",
            "getter": "get_collider",
            "type": "Object"
          },
          {
            "default": "0",
            "value": "The colliding body's unique instance ID. See [method Object.get_instance_id].",
            "setter": "",
            "name": "collider_id",
            "getter": "get_collider_id",
            "type": "int"
          },
          {
            "value": "The colliding body's metadata. See [Object].",
            "setter": "",
            "name": "collider_metadata",
            "getter": "get_collider_metadata",
            "type": "Variant"
          },
          {
            "value": "The colliding body's [RID] used by the [PhysicsServer].",
            "setter": "",
            "name": "collider_rid",
            "getter": "get_collider_rid",
            "type": "RID"
          },
          {
            "value": "The colliding body's shape.",
            "setter": "",
            "name": "collider_shape",
            "getter": "get_collider_shape",
            "type": "Object"
          },
          {
            "default": "0",
            "value": "The colliding shape's index. See [CollisionObject].",
            "setter": "",
            "name": "collider_shape_index",
            "getter": "get_collider_shape_index",
            "type": "int"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "The colliding object's velocity.",
            "setter": "",
            "name": "collider_velocity",
            "getter": "get_collider_velocity",
            "type": "Vector3"
          },
          {
            "value": "The moving object's colliding shape.",
            "setter": "",
            "name": "local_shape",
            "getter": "get_local_shape",
            "type": "Object"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "The colliding body's shape's normal at the point of collision.",
            "setter": "",
            "name": "normal",
            "getter": "get_normal",
            "type": "Vector3"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "The point of collision, in global coordinates.",
            "setter": "",
            "name": "position",
            "getter": "get_position",
            "type": "Vector3"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "The moving object's remaining movement vector.",
            "setter": "",
            "name": "remainder",
            "getter": "get_remainder",
            "type": "Vector3"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "The distance the moving object traveled before collision.",
            "setter": "",
            "name": "travel",
            "getter": "get_travel",
            "type": "Vector3"
          }
        ]
      },
      "inherits": "Reference",
      "methods": {},
      "name": "KinematicCollision",
      "version": "3.3",
      "constants": {},
      "brief_description": "Collision data for [KinematicBody] collisions.",
      "description": "Contains collision data for [KinematicBody] collisions. When a [KinematicBody] is moved using [method KinematicBody.move_and_collide], it stops if it detects a collision with another body. If a collision is detected, a KinematicCollision object is returned.\n\t\tThis object contains information about the collision, including the colliding object, the remaining motion, and the collision position. This information can be used to calculate a collision response."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/515",
          "title": "2D Dodge The Creeps Demo"
        }
      },
      "theme_items": {
        "theme_item": [
          {
            "value": "[Font] used for the [Label]'s text.",
            "name": "font",
            "type": "Font"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "Default text [Color] of the [Label].",
            "name": "font_color",
            "type": "Color"
          },
          {
            "default": "Color( 0, 0, 0, 0 )",
            "value": "[Color] of the text's shadow effect.",
            "name": "font_color_shadow",
            "type": "Color"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "The tint of [Font]'s outline. See [member DynamicFont.outline_color].",
            "name": "font_outline_modulate",
            "type": "Color"
          },
          {
            "default": "3",
            "value": "Vertical space between lines in multiline [Label].",
            "name": "line_spacing",
            "type": "int"
          },
          {
            "value": "Background [StyleBox] for the [Label].",
            "name": "normal",
            "type": "StyleBox"
          },
          {
            "default": "0",
            "value": "Boolean value. If set to 1 ([code]true[/code]), the shadow will be displayed around the whole text as an outline.",
            "name": "shadow_as_outline",
            "type": "int"
          },
          {
            "default": "1",
            "value": "The horizontal offset of the text's shadow.",
            "name": "shadow_offset_x",
            "type": "int"
          },
          {
            "default": "1",
            "value": "The vertical offset of the text's shadow.",
            "name": "shadow_offset_y",
            "type": "int"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "0",
            "value": "Controls the text's horizontal align. Supports left, center, right, and fill, or justify. Set it to one of the [enum Align] constants.",
            "setter": "set_align",
            "name": "align",
            "getter": "get_align",
            "type": "int",
            "enum": "Label.Align"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], wraps the text inside the node's bounding rectangle. If you resize the node, it will change its height automatically to show all the text.",
            "setter": "set_autowrap",
            "name": "autowrap",
            "getter": "has_autowrap",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the Label only shows the text that fits inside its bounding rectangle and will clip text horizontally.",
            "setter": "set_clip_text",
            "name": "clip_text",
            "getter": "is_clipping_text",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "The node ignores the first [code]lines_skipped[/code] lines before it starts to display text.",
            "setter": "set_lines_skipped",
            "name": "lines_skipped",
            "getter": "get_lines_skipped",
            "type": "int"
          },
          {
            "default": "-1",
            "value": "Limits the lines of text the node shows on screen.",
            "setter": "set_max_lines_visible",
            "name": "max_lines_visible",
            "getter": "get_max_lines_visible",
            "type": "int"
          },
          {
            "default": "2",
            "setter": "set_mouse_filter",
            "override": "true",
            "name": "mouse_filter",
            "getter": "get_mouse_filter",
            "type": "int",
            "enum": "Control.MouseFilter"
          },
          {
            "default": "1.0",
            "value": "Limits the amount of visible characters. If you set [code]percent_visible[/code] to 0.5, only up to half of the text's characters will display on screen. Useful to animate the text in a dialog box.",
            "setter": "set_percent_visible",
            "name": "percent_visible",
            "getter": "get_percent_visible",
            "type": "float"
          },
          {
            "default": "4",
            "setter": "set_v_size_flags",
            "override": "true",
            "name": "size_flags_vertical",
            "getter": "get_v_size_flags",
            "type": "int"
          },
          {
            "default": "\"\"",
            "value": "The text to display on screen.",
            "setter": "set_text",
            "name": "text",
            "getter": "get_text",
            "type": "String"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], all the text displays as UPPERCASE.",
            "setter": "set_uppercase",
            "name": "uppercase",
            "getter": "is_uppercase",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "Controls the text's vertical align. Supports top, center, bottom, and fill. Set it to one of the [enum VAlign] constants.",
            "setter": "set_valign",
            "name": "valign",
            "getter": "get_valign",
            "type": "int",
            "enum": "Label.VAlign"
          },
          {
            "default": "-1",
            "value": "Restricts the number of characters to display. Set to -1 to disable.",
            "setter": "set_visible_characters",
            "name": "visible_characters",
            "getter": "get_visible_characters",
            "type": "int"
          }
        ]
      },
      "inherits": "Control",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_line_count",
            "description": "Returns the amount of lines of text the Label has."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_line_height",
            "description": "Returns the font size in pixels."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_total_character_count",
            "description": "Returns the total number of printable characters in the text (excluding spaces and newlines)."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_visible_line_count",
            "description": "Returns the number of lines shown. Useful if the [Label]'s height cannot currently display all lines."
          }
        ]
      },
      "name": "Label",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "ALIGN_LEFT",
            "enum": "Align"
          },
          {
            "value": "1",
            "name": "ALIGN_CENTER",
            "enum": "Align"
          },
          {
            "value": "2",
            "name": "ALIGN_RIGHT",
            "enum": "Align"
          },
          {
            "value": "3",
            "name": "ALIGN_FILL",
            "enum": "Align"
          },
          {
            "value": "0",
            "name": "VALIGN_TOP",
            "enum": "VAlign"
          },
          {
            "value": "1",
            "name": "VALIGN_CENTER",
            "enum": "VAlign"
          },
          {
            "value": "2",
            "name": "VALIGN_BOTTOM",
            "enum": "VAlign"
          },
          {
            "value": "3",
            "name": "VALIGN_FILL",
            "enum": "VAlign"
          }
        ]
      },
      "brief_description": "Displays plain text in a line or wrapped inside a rectangle. For formatted text, use [RichTextLabel].",
      "description": "Label displays plain text on the screen. It gives you control over the horizontal and vertical alignment and can wrap the text inside the node's bounding rectangle. It doesn't support bold, italics, or other formatting. For that, use [RichTextLabel] instead.\n\t\t[b]Note:[/b] Contrarily to most other [Control]s, Label's [member Control.mouse_filter] defaults to [constant Control.MOUSE_FILTER_IGNORE] (i.e. it doesn't react to mouse input events). This implies that a label won't display any configured [member Control.hint_tooltip], unless you change its mouse filter."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "0",
          "setter": "set_flags",
          "override": "true",
          "name": "flags",
          "getter": "get_flags",
          "type": "int"
        }
      },
      "inherits": "Texture",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "ofs",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "texture",
                "type": "Texture",
                "index": "1"
              }
            ],
            "name": "add_piece",
            "description": "Adds [code]texture[/code] to this [LargeTexture], starting on offset [code]ofs[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Clears the [LargeTexture]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_piece_count",
            "description": "Returns the number of pieces currently in this [LargeTexture]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_piece_offset",
            "description": "Returns the offset of the piece with the index [code]idx[/code]."
          },
          {
            "return": {
              "type": "Texture"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_piece_texture",
            "description": "Returns the [Texture] of the piece with the index [code]idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "ofs",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "set_piece_offset",
            "description": "Sets the offset of the piece with the index [code]idx[/code] to [code]ofs[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "texture",
                "type": "Texture",
                "index": "1"
              }
            ],
            "name": "set_piece_texture",
            "description": "Sets the [Texture] of the piece with index [code]idx[/code] to [code]texture[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "size",
              "type": "Vector2",
              "index": "0"
            },
            "name": "set_size",
            "description": "Sets the size of this [LargeTexture]."
          }
        ]
      },
      "name": "LargeTexture",
      "version": "3.3",
      "constants": {},
      "brief_description": "[i]Deprecated.[/i] A [Texture] capable of storing many smaller textures with offsets.",
      "description": "[i]Deprecated (will be removed in Godot 4.0).[/i] A [Texture] capable of storing many smaller textures with offsets.\n\t\tYou can dynamically add pieces ([Texture]s) to this [LargeTexture] using different offsets."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/2d/2d_lights_and_shadows.html"
      },
      "members": {
        "member": [
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "The Light2D's [Color].",
            "setter": "set_color",
            "name": "color",
            "getter": "get_color",
            "type": "Color"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], Light2D will only appear when editing the scene.",
            "setter": "set_editor_only",
            "name": "editor_only",
            "getter": "is_editor_only",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], Light2D will emit light.",
            "setter": "set_enabled",
            "name": "enabled",
            "getter": "is_enabled",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "The Light2D's energy value. The larger the value, the stronger the light.",
            "setter": "set_energy",
            "name": "energy",
            "getter": "get_energy",
            "type": "float"
          },
          {
            "default": "0",
            "value": "The Light2D's mode. See [enum Mode] constants for values.",
            "setter": "set_mode",
            "name": "mode",
            "getter": "get_mode",
            "type": "int",
            "enum": "Light2D.Mode"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The offset of the Light2D's [code]texture[/code].",
            "setter": "set_texture_offset",
            "name": "offset",
            "getter": "get_texture_offset",
            "type": "Vector2"
          },
          {
            "default": "0.0",
            "value": "The height of the Light2D. Used with 2D normal mapping.",
            "setter": "set_height",
            "name": "range_height",
            "getter": "get_height",
            "type": "float"
          },
          {
            "default": "1",
            "value": "The layer mask. Only objects with a matching mask will be affected by the Light2D.",
            "setter": "set_item_cull_mask",
            "name": "range_item_cull_mask",
            "getter": "get_item_cull_mask",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Maximum layer value of objects that are affected by the Light2D.",
            "setter": "set_layer_range_max",
            "name": "range_layer_max",
            "getter": "get_layer_range_max",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Minimum layer value of objects that are affected by the Light2D.",
            "setter": "set_layer_range_min",
            "name": "range_layer_min",
            "getter": "get_layer_range_min",
            "type": "int"
          },
          {
            "default": "1024",
            "value": "Maximum [code]z[/code] value of objects that are affected by the Light2D.",
            "setter": "set_z_range_max",
            "name": "range_z_max",
            "getter": "get_z_range_max",
            "type": "int"
          },
          {
            "default": "-1024",
            "value": "Minimum [code]z[/code] value of objects that are affected by the Light2D.",
            "setter": "set_z_range_min",
            "name": "range_z_min",
            "getter": "get_z_range_min",
            "type": "int"
          },
          {
            "default": "2048",
            "value": "Shadow buffer size.",
            "setter": "set_shadow_buffer_size",
            "name": "shadow_buffer_size",
            "getter": "get_shadow_buffer_size",
            "type": "int"
          },
          {
            "default": "Color( 0, 0, 0, 0 )",
            "value": "[Color] of shadows cast by the Light2D.",
            "setter": "set_shadow_color",
            "name": "shadow_color",
            "getter": "get_shadow_color",
            "type": "Color"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the Light2D will cast shadows.",
            "setter": "set_shadow_enabled",
            "name": "shadow_enabled",
            "getter": "is_shadow_enabled",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "Shadow filter type. See [enum ShadowFilter] for possible values.",
            "setter": "set_shadow_filter",
            "name": "shadow_filter",
            "getter": "get_shadow_filter",
            "type": "int",
            "enum": "Light2D.ShadowFilter"
          },
          {
            "default": "0.0",
            "value": "Smoothing value for shadows.",
            "setter": "set_shadow_smooth",
            "name": "shadow_filter_smooth",
            "getter": "get_shadow_smooth",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Smooth shadow gradient length.",
            "setter": "set_shadow_gradient_length",
            "name": "shadow_gradient_length",
            "getter": "get_shadow_gradient_length",
            "type": "float"
          },
          {
            "default": "1",
            "value": "The shadow mask. Used with [LightOccluder2D] to cast shadows. Only occluders with a matching light mask will cast shadows.",
            "setter": "set_item_shadow_cull_mask",
            "name": "shadow_item_cull_mask",
            "getter": "get_item_shadow_cull_mask",
            "type": "int"
          },
          {
            "value": "[Texture] used for the Light2D's appearance.",
            "setter": "set_texture",
            "name": "texture",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "default": "1.0",
            "value": "The [code]texture[/code]'s scale factor.",
            "setter": "set_texture_scale",
            "name": "texture_scale",
            "getter": "get_texture_scale",
            "type": "float"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {},
      "name": "Light2D",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "MODE_ADD",
            "enum": "Mode"
          },
          {
            "value": "1",
            "name": "MODE_SUB",
            "enum": "Mode"
          },
          {
            "value": "2",
            "name": "MODE_MIX",
            "enum": "Mode"
          },
          {
            "value": "3",
            "name": "MODE_MASK",
            "enum": "Mode"
          },
          {
            "value": "0",
            "name": "SHADOW_FILTER_NONE",
            "enum": "ShadowFilter"
          },
          {
            "value": "1",
            "name": "SHADOW_FILTER_PCF3",
            "enum": "ShadowFilter"
          },
          {
            "value": "2",
            "name": "SHADOW_FILTER_PCF5",
            "enum": "ShadowFilter"
          },
          {
            "value": "3",
            "name": "SHADOW_FILTER_PCF7",
            "enum": "ShadowFilter"
          },
          {
            "value": "4",
            "name": "SHADOW_FILTER_PCF9",
            "enum": "ShadowFilter"
          },
          {
            "value": "5",
            "name": "SHADOW_FILTER_PCF13",
            "enum": "ShadowFilter"
          }
        ]
      },
      "brief_description": "Casts light in a 2D environment.",
      "description": "Casts light in a 2D environment. Light is defined by a (usually grayscale) texture, a color, an energy value, a mode (see constants), and various other parameters (range and shadows-related).\n\t\t[b]Note:[/b] Light2D can also be used as a mask."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/2d/2d_lights_and_shadows.html"
      },
      "members": {
        "member": [
          {
            "default": "1",
            "value": "The LightOccluder2D's light mask. The LightOccluder2D will cast shadows only from Light2D(s) that have the same light mask(s).",
            "setter": "set_occluder_light_mask",
            "name": "light_mask",
            "getter": "get_occluder_light_mask",
            "type": "int"
          },
          {
            "value": "The [OccluderPolygon2D] used to compute the shadow.",
            "setter": "set_occluder_polygon",
            "name": "occluder",
            "getter": "get_occluder_polygon",
            "type": "OccluderPolygon2D"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {},
      "name": "LightOccluder2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Occludes light cast by a Light2D, casting shadows.",
      "description": "Occludes light cast by a Light2D, casting shadows. The LightOccluder2D must be provided with an [OccluderPolygon2D] in order for the shadow to be computed."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/3d/lights_and_shadows.html",
            "title": "3D lights and shadows"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the light only appears in the editor and will not be visible at runtime.",
            "setter": "set_editor_only",
            "name": "editor_only",
            "getter": "is_editor_only",
            "type": "bool"
          },
          {
            "default": "1",
            "value": "The light's bake mode. See [enum BakeMode].",
            "setter": "set_bake_mode",
            "name": "light_bake_mode",
            "getter": "get_bake_mode",
            "type": "int",
            "enum": "Light.BakeMode"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "The light's color. An [i]overbright[/i] color can be used to achieve a result equivalent to increasing the light's [member light_energy].",
            "setter": "set_color",
            "name": "light_color",
            "getter": "get_color",
            "type": "Color"
          },
          {
            "default": "4294967295",
            "value": "The light will affect objects in the selected layers.",
            "setter": "set_cull_mask",
            "name": "light_cull_mask",
            "getter": "get_cull_mask",
            "type": "int"
          },
          {
            "default": "1.0",
            "value": "The light's strength multiplier (this is not a physical unit). For [OmniLight] and [SpotLight], changing this value will only change the light color's intensity, not the light's radius.",
            "setter": "set_param",
            "name": "light_energy",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Secondary multiplier used with indirect light (light bounces). This works on both [BakedLightmap] and [GIProbe].",
            "setter": "set_param",
            "name": "light_indirect_energy",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the light's effect is reversed, darkening areas and casting bright shadows.",
            "setter": "set_negative",
            "name": "light_negative",
            "getter": "is_negative",
            "type": "bool"
          },
          {
            "default": "0.5",
            "value": "The intensity of the specular blob in objects affected by the light. At [code]0[/code], the light becomes a pure diffuse light. When not baking emission, this can be used to avoid unrealistic reflections when placing lights above an emissive surface.",
            "setter": "set_param",
            "name": "light_specular",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "0.15",
            "value": "Used to adjust shadow appearance. Too small a value results in self-shadowing (\"shadow acne\"), while too large a value causes shadows to separate from casters (\"peter-panning\"). Adjust as needed.",
            "setter": "set_param",
            "name": "shadow_bias",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "Color( 0, 0, 0, 1 )",
            "value": "The color of shadows cast by this light.",
            "setter": "set_shadow_color",
            "name": "shadow_color",
            "getter": "get_shadow_color",
            "type": "Color"
          },
          {
            "default": "0.0",
            "value": "Attempts to reduce [member shadow_bias] gap.",
            "setter": "set_param",
            "name": "shadow_contact",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the light will cast shadows.",
            "setter": "set_shadow",
            "name": "shadow_enabled",
            "getter": "has_shadow",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], reverses the backface culling of the mesh. This can be useful when you have a flat mesh that has a light behind it. If you need to cast a shadow on both sides of the mesh, set the mesh to use double-sided shadows with [constant GeometryInstance.SHADOW_CASTING_SETTING_DOUBLE_SIDED].",
            "setter": "set_shadow_reverse_cull_face",
            "name": "shadow_reverse_cull_face",
            "getter": "get_shadow_reverse_cull_face",
            "type": "bool"
          }
        ]
      },
      "inherits": "VisualInstance",
      "methods": {
        "method": [
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "param",
              "type": "int",
              "enum": "Light.Param",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_param",
            "description": "Returns the value of the specified [enum Light.Param] parameter."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "param",
                "type": "int",
                "enum": "Light.Param",
                "index": "0"
              },
              {
                "name": "value",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_param",
            "description": "Sets the value of the specified [enum Light.Param] parameter."
          }
        ]
      },
      "name": "Light",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "PARAM_ENERGY",
            "enum": "Param"
          },
          {
            "value": "1",
            "name": "PARAM_INDIRECT_ENERGY",
            "enum": "Param"
          },
          {
            "value": "2",
            "name": "PARAM_SPECULAR",
            "enum": "Param"
          },
          {
            "value": "3",
            "name": "PARAM_RANGE",
            "enum": "Param"
          },
          {
            "value": "4",
            "name": "PARAM_ATTENUATION",
            "enum": "Param"
          },
          {
            "value": "5",
            "name": "PARAM_SPOT_ANGLE",
            "enum": "Param"
          },
          {
            "value": "6",
            "name": "PARAM_SPOT_ATTENUATION",
            "enum": "Param"
          },
          {
            "value": "7",
            "name": "PARAM_CONTACT_SHADOW_SIZE",
            "enum": "Param"
          },
          {
            "value": "8",
            "name": "PARAM_SHADOW_MAX_DISTANCE",
            "enum": "Param"
          },
          {
            "value": "9",
            "name": "PARAM_SHADOW_SPLIT_1_OFFSET",
            "enum": "Param"
          },
          {
            "value": "10",
            "name": "PARAM_SHADOW_SPLIT_2_OFFSET",
            "enum": "Param"
          },
          {
            "value": "11",
            "name": "PARAM_SHADOW_SPLIT_3_OFFSET",
            "enum": "Param"
          },
          {
            "value": "12",
            "name": "PARAM_SHADOW_NORMAL_BIAS",
            "enum": "Param"
          },
          {
            "value": "13",
            "name": "PARAM_SHADOW_BIAS",
            "enum": "Param"
          },
          {
            "value": "14",
            "name": "PARAM_SHADOW_BIAS_SPLIT_SCALE",
            "enum": "Param"
          },
          {
            "value": "15",
            "name": "PARAM_MAX",
            "enum": "Param"
          },
          {
            "value": "0",
            "name": "BAKE_DISABLED",
            "enum": "BakeMode"
          },
          {
            "value": "1",
            "name": "BAKE_INDIRECT",
            "enum": "BakeMode"
          },
          {
            "value": "2",
            "name": "BAKE_ALL",
            "enum": "BakeMode"
          }
        ]
      },
      "brief_description": "Provides a base class for different kinds of light nodes.",
      "description": "Light is the [i]abstract[/i] base class for light nodes. As it can't be instanced, it shouldn't be used directly. Other types of light nodes inherit from it. Light contains the common variables and parameters used for lighting."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://godotengine.org/asset-library/asset/584",
            "title": "Matrix Transform Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/583",
            "title": "2.5D Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the line's border will be anti-aliased.",
            "setter": "set_antialiased",
            "name": "antialiased",
            "getter": "get_antialiased",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "Controls the style of the line's first point. Use [enum LineCapMode] constants.",
            "setter": "set_begin_cap_mode",
            "name": "begin_cap_mode",
            "getter": "get_begin_cap_mode",
            "type": "int",
            "enum": "Line2D.LineCapMode"
          },
          {
            "default": "Color( 0.4, 0.5, 1, 1 )",
            "value": "The line's color. Will not be used if a gradient is set.",
            "setter": "set_default_color",
            "name": "default_color",
            "getter": "get_default_color",
            "type": "Color"
          },
          {
            "default": "0",
            "value": "Controls the style of the line's last point. Use [enum LineCapMode] constants.",
            "setter": "set_end_cap_mode",
            "name": "end_cap_mode",
            "getter": "get_end_cap_mode",
            "type": "int",
            "enum": "Line2D.LineCapMode"
          },
          {
            "value": "The gradient is drawn through the whole line from start to finish. The default color will not be used if a gradient is set.",
            "setter": "set_gradient",
            "name": "gradient",
            "getter": "get_gradient",
            "type": "Gradient"
          },
          {
            "default": "0",
            "value": "The style for the points between the start and the end.",
            "setter": "set_joint_mode",
            "name": "joint_mode",
            "getter": "get_joint_mode",
            "type": "int",
            "enum": "Line2D.LineJointMode"
          },
          {
            "default": "PoolVector2Array(  )",
            "value": "The points that form the lines. The line is drawn between every point set in this array. Points are interpreted as local vectors.",
            "setter": "set_points",
            "name": "points",
            "getter": "get_points",
            "type": "PoolVector2Array"
          },
          {
            "default": "8",
            "value": "The smoothness of the rounded joints and caps. This is only used if a cap or joint is set as round.",
            "setter": "set_round_precision",
            "name": "round_precision",
            "getter": "get_round_precision",
            "type": "int"
          },
          {
            "default": "2.0",
            "value": "The direction difference in radians between vector points. This value is only used if [code]joint mode[/code] is set to [constant LINE_JOINT_SHARP].",
            "setter": "set_sharp_limit",
            "name": "sharp_limit",
            "getter": "get_sharp_limit",
            "type": "float"
          },
          {
            "value": "The texture used for the line's texture. Uses [code]texture_mode[/code] for drawing style.",
            "setter": "set_texture",
            "name": "texture",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "default": "0",
            "value": "The style to render the [code]texture[/code] on the line. Use [enum LineTextureMode] constants.",
            "setter": "set_texture_mode",
            "name": "texture_mode",
            "getter": "get_texture_mode",
            "type": "int",
            "enum": "Line2D.LineTextureMode"
          },
          {
            "default": "10.0",
            "value": "The line's width.",
            "setter": "set_width",
            "name": "width",
            "getter": "get_width",
            "type": "float"
          },
          {
            "value": "The line's width varies with the curve. The original width is simply multiply by the value of the Curve.",
            "setter": "set_curve",
            "name": "width_curve",
            "getter": "get_curve",
            "type": "Curve"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "position",
                "type": "Vector2",
                "index": "0"
              },
              {
                "default": "-1",
                "name": "at_position",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "add_point",
            "description": "Adds a point at the [code]position[/code]. Appends the point at the end of the line.\n\t\t\t\tIf [code]at_position[/code] is given, the point is inserted before the point number [code]at_position[/code], moving that point (and every point after) after the inserted point. If [code]at_position[/code] is not given, or is an illegal value ([code]at_position < 0[/code] or [code]at_position >= [method get_point_count][/code]), the point will be appended at the end of the point list."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_points",
            "description": "Removes all points from the line."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_point_count",
            "description": "Returns the Line2D's amount of points."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "i",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_point_position",
            "description": "Returns point [code]i[/code]'s position."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "i",
              "type": "int",
              "index": "0"
            },
            "name": "remove_point",
            "description": "Removes the point at index [code]i[/code] from the line."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "i",
                "type": "int",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "set_point_position",
            "description": "Overwrites the position in point [code]i[/code] with the supplied [code]position[/code]."
          }
        ]
      },
      "name": "Line2D",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "LINE_JOINT_SHARP",
            "enum": "LineJointMode"
          },
          {
            "value": "1",
            "name": "LINE_JOINT_BEVEL",
            "enum": "LineJointMode"
          },
          {
            "value": "2",
            "name": "LINE_JOINT_ROUND",
            "enum": "LineJointMode"
          },
          {
            "value": "0",
            "name": "LINE_CAP_NONE",
            "enum": "LineCapMode"
          },
          {
            "value": "1",
            "name": "LINE_CAP_BOX",
            "enum": "LineCapMode"
          },
          {
            "value": "2",
            "name": "LINE_CAP_ROUND",
            "enum": "LineCapMode"
          },
          {
            "value": "0",
            "name": "LINE_TEXTURE_NONE",
            "enum": "LineTextureMode"
          },
          {
            "value": "1",
            "name": "LINE_TEXTURE_TILE",
            "enum": "LineTextureMode"
          },
          {
            "value": "2",
            "name": "LINE_TEXTURE_STRETCH",
            "enum": "LineTextureMode"
          }
        ]
      },
      "brief_description": "A 2D line.",
      "description": "A line through several points in 2D space.\n\t\t[b]Note:[/b] By default, Godot can only draw up to 4,096 polygon points at a time. To increase this limit, open the Project Settings and increase [member ProjectSettings.rendering/limits/buffers/canvas_polygon_buffer_size_kb] and [member ProjectSettings.rendering/limits/buffers/canvas_polygon_index_buffer_size_kb]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "value": "Texture for the clear button. See [member clear_button_enabled].",
            "name": "clear",
            "type": "Texture"
          },
          {
            "default": "Color( 0.88, 0.88, 0.88, 1 )",
            "value": "Color used as default tint for the clear button.",
            "name": "clear_button_color",
            "type": "Color"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "Color used for the clear button when it's pressed.",
            "name": "clear_button_color_pressed",
            "type": "Color"
          },
          {
            "default": "Color( 0.94, 0.94, 0.94, 1 )",
            "value": "Color of the [LineEdit]'s visual cursor (caret).",
            "name": "cursor_color",
            "type": "Color"
          },
          {
            "value": "Background used when [LineEdit] has GUI focus.",
            "name": "focus",
            "type": "StyleBox"
          },
          {
            "value": "Font used for the text.",
            "name": "font",
            "type": "Font"
          },
          {
            "default": "Color( 0.88, 0.88, 0.88, 1 )",
            "value": "Default font color.",
            "name": "font_color",
            "type": "Color"
          },
          {
            "default": "Color( 0, 0, 0, 1 )",
            "value": "Font color for selected text (inside the selection rectangle).",
            "name": "font_color_selected",
            "type": "Color"
          },
          {
            "default": "Color( 0.88, 0.88, 0.88, 0.5 )",
            "value": "Font color when editing is disabled.",
            "name": "font_color_uneditable",
            "type": "Color"
          },
          {
            "default": "12",
            "value": "Minimum horizontal space for the text (not counting the clear button and content margins). This value is measured in count of space characters (i.e. this amount of space characters can be displayed without scrolling).",
            "name": "minimum_spaces",
            "type": "int"
          },
          {
            "value": "Default background for the [LineEdit].",
            "name": "normal",
            "type": "StyleBox"
          },
          {
            "value": "Background used when [LineEdit] is in read-only mode ([member editable] is set to [code]false[/code]).",
            "name": "read_only",
            "type": "StyleBox"
          },
          {
            "default": "Color( 0.49, 0.49, 0.49, 1 )",
            "value": "Color of the selection rectangle.",
            "name": "selection_color",
            "type": "Color"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "0",
            "value": "Text alignment as defined in the [enum Align] enum.",
            "setter": "set_align",
            "name": "align",
            "getter": "get_align",
            "type": "int",
            "enum": "LineEdit.Align"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the caret (visual cursor) blinks.",
            "setter": "cursor_set_blink_enabled",
            "name": "caret_blink",
            "getter": "cursor_get_blink_enabled",
            "type": "bool"
          },
          {
            "default": "0.65",
            "value": "Duration (in seconds) of a caret's blinking cycle.",
            "setter": "cursor_set_blink_speed",
            "name": "caret_blink_speed",
            "getter": "cursor_get_blink_speed",
            "type": "float"
          },
          {
            "default": "0",
            "value": "The cursor's position inside the [LineEdit]. When set, the text may scroll to accommodate it.",
            "setter": "set_cursor_position",
            "name": "caret_position",
            "getter": "get_cursor_position",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the [LineEdit] will show a clear button if [code]text[/code] is not empty, which can be used to clear the text quickly.",
            "setter": "set_clear_button_enabled",
            "name": "clear_button_enabled",
            "getter": "is_clear_button_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the context menu will appear when right-clicked.",
            "setter": "set_context_menu_enabled",
            "name": "context_menu_enabled",
            "getter": "is_context_menu_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]false[/code], existing text cannot be modified and new text cannot be added.",
            "setter": "set_editable",
            "name": "editable",
            "getter": "is_editable",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the [LineEdit] width will increase to stay longer than the [member text]. It will [b]not[/b] compress if the [member text] is shortened.",
            "setter": "set_expand_to_text_length",
            "name": "expand_to_text_length",
            "getter": "get_expand_to_text_length",
            "type": "bool"
          },
          {
            "default": "2",
            "setter": "set_focus_mode",
            "override": "true",
            "name": "focus_mode",
            "getter": "get_focus_mode",
            "type": "int",
            "enum": "Control.FocusMode"
          },
          {
            "default": "0",
            "value": "Maximum amount of characters that can be entered inside the [LineEdit]. If [code]0[/code], there is no limit.",
            "setter": "set_max_length",
            "name": "max_length",
            "getter": "get_max_length",
            "type": "int"
          },
          {
            "default": "1",
            "setter": "set_default_cursor_shape",
            "override": "true",
            "name": "mouse_default_cursor_shape",
            "getter": "get_default_cursor_shape",
            "type": "int",
            "enum": "Control.CursorShape"
          },
          {
            "default": "0.6",
            "value": "Opacity of the [member placeholder_text]. From [code]0[/code] to [code]1[/code].",
            "setter": "set_placeholder_alpha",
            "name": "placeholder_alpha",
            "getter": "get_placeholder_alpha",
            "type": "float"
          },
          {
            "default": "\"\"",
            "value": "Text shown when the [LineEdit] is empty. It is [b]not[/b] the [LineEdit]'s default value (see [member text]).",
            "setter": "set_placeholder",
            "name": "placeholder_text",
            "getter": "get_placeholder",
            "type": "String"
          },
          {
            "value": "Sets the icon that will appear in the right end of the [LineEdit] if there's no [member text], or always, if [member clear_button_enabled] is set to [code]false[/code].",
            "setter": "set_right_icon",
            "name": "right_icon",
            "getter": "get_right_icon",
            "type": "Texture"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], every character is replaced with the secret character (see [member secret_character]).",
            "setter": "set_secret",
            "name": "secret",
            "getter": "is_secret",
            "type": "bool"
          },
          {
            "default": "\"*\"",
            "value": "The character to use to mask secret input (defaults to \"*\"). Only a single character can be used as the secret character.",
            "setter": "set_secret_character",
            "name": "secret_character",
            "getter": "get_secret_character",
            "type": "String"
          },
          {
            "default": "true",
            "value": "If [code]false[/code], it's impossible to select the text using mouse nor keyboard.",
            "setter": "set_selecting_enabled",
            "name": "selecting_enabled",
            "getter": "is_selecting_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]false[/code], using shortcuts will be disabled.",
            "setter": "set_shortcut_keys_enabled",
            "name": "shortcut_keys_enabled",
            "getter": "is_shortcut_keys_enabled",
            "type": "bool"
          },
          {
            "default": "\"\"",
            "value": "String value of the [LineEdit].\n\t\t\t[b]Note:[/b] Changing text using this property won't emit the [signal text_changed] signal.",
            "setter": "set_text",
            "name": "text",
            "getter": "get_text",
            "type": "String"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the native virtual keyboard is shown when focused on platforms that support it.",
            "setter": "set_virtual_keyboard_enabled",
            "name": "virtual_keyboard_enabled",
            "getter": "is_virtual_keyboard_enabled",
            "type": "bool"
          }
        ]
      },
      "inherits": "Control",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "text",
              "type": "String",
              "index": "0"
            },
            "name": "append_at_cursor",
            "description": "Adds [code]text[/code] after the cursor. If the resulting value is longer than [member max_length], nothing happens."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Erases the [LineEdit]'s [member text]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "delete_char_at_cursor",
            "description": "Deletes one character at the cursor's current position (equivalent to pressing the [code]Delete[/code] key)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "from_column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to_column",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "delete_text",
            "description": "Deletes a section of the [member text] going from position [code]from_column[/code] to [code]to_column[/code]. Both parameters should be within the text's length."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "deselect",
            "description": "Clears the current selection."
          },
          {
            "return": {
              "type": "PopupMenu"
            },
            "qualifiers": "const",
            "name": "get_menu",
            "description": "Returns the [PopupMenu] of this [LineEdit]. By default, this menu is displayed when right-clicking on the [LineEdit]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_scroll_offset",
            "description": "Returns the scroll offset due to [member caret_position], as a number of characters."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "option",
              "type": "int",
              "index": "0"
            },
            "name": "menu_option",
            "description": "Executes a given action as defined in the [enum MenuItems] enum."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "default": "0",
                "name": "from",
                "type": "int",
                "index": "0"
              },
              {
                "default": "-1",
                "name": "to",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "select",
            "description": "Selects characters inside [LineEdit] between [code]from[/code] and [code]to[/code]. By default, [code]from[/code] is at the beginning and [code]to[/code] at the end.\n\t\t\t\t[codeblock]\n\t\t\t\ttext = \"Welcome\"\n\t\t\t\tselect() # Will select \"Welcome\".\n\t\t\t\tselect(4) # Will select \"ome\".\n\t\t\t\tselect(2, 5) # Will select \"lco\".\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "name": "select_all",
            "description": "Selects the whole [String]."
          }
        ]
      },
      "name": "LineEdit",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "text_change_rejected",
            "description": "Emitted when trying to append text that would overflow the [member max_length]."
          },
          {
            "argument": {
              "name": "new_text",
              "type": "String",
              "index": "0"
            },
            "name": "text_changed",
            "description": "Emitted when the text changes."
          },
          {
            "argument": {
              "name": "new_text",
              "type": "String",
              "index": "0"
            },
            "name": "text_entered",
            "description": "Emitted when the user presses [constant KEY_ENTER] on the [LineEdit]."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "ALIGN_LEFT",
            "enum": "Align"
          },
          {
            "value": "1",
            "name": "ALIGN_CENTER",
            "enum": "Align"
          },
          {
            "value": "2",
            "name": "ALIGN_RIGHT",
            "enum": "Align"
          },
          {
            "value": "3",
            "name": "ALIGN_FILL",
            "enum": "Align"
          },
          {
            "value": "0",
            "name": "MENU_CUT",
            "enum": "MenuItems"
          },
          {
            "value": "1",
            "name": "MENU_COPY",
            "enum": "MenuItems"
          },
          {
            "value": "2",
            "name": "MENU_PASTE",
            "enum": "MenuItems"
          },
          {
            "value": "3",
            "name": "MENU_CLEAR",
            "enum": "MenuItems"
          },
          {
            "value": "4",
            "name": "MENU_SELECT_ALL",
            "enum": "MenuItems"
          },
          {
            "value": "5",
            "name": "MENU_UNDO",
            "enum": "MenuItems"
          },
          {
            "value": "6",
            "name": "MENU_REDO",
            "enum": "MenuItems"
          },
          {
            "value": "7",
            "name": "MENU_MAX",
            "enum": "MenuItems"
          }
        ]
      },
      "brief_description": "Control that provides single-line string editing.",
      "description": "LineEdit provides a single-line string editor, used for text fields.\n\t\tIt features many built-in shortcuts which will always be available ([code]Ctrl[/code] here maps to [code]Command[/code] on macOS):\n\t\t- Ctrl + C: Copy\n\t\t- Ctrl + X: Cut\n\t\t- Ctrl + V or Ctrl + Y: Paste/\"yank\"\n\t\t- Ctrl + Z: Undo\n\t\t- Ctrl + Shift + Z: Redo\n\t\t- Ctrl + U: Delete text from the cursor position to the beginning of the line\n\t\t- Ctrl + K: Delete text from the cursor position to the end of the line\n\t\t- Ctrl + A: Select all text\n\t\t- Up/Down arrow: Move the cursor to the beginning/end of the line\n\t\tOn macOS, some extra keyboard shortcuts are available:\n\t\t- Ctrl + F: Like the right arrow key, move the cursor one character right\n\t\t- Ctrl + B: Like the left arrow key, move the cursor one character left\n\t\t- Ctrl + P: Like the up arrow key, move the cursor to the previous line\n\t\t- Ctrl + N: Like the down arrow key, move the cursor to the next line\n\t\t- Ctrl + D: Like the Delete key, delete the character on the right side of cursor\n\t\t- Ctrl + H: Like the Backspace key, delete the character on the left side of the cursor\n\t\t- Command + Left arrow: Like the Home key, move the cursor to the beginning of the line\n\t\t- Command + Right arrow: Like the End key, move the cursor to the end of the line"
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0.0",
            "value": "The line's distance from the origin.",
            "setter": "set_d",
            "name": "d",
            "getter": "get_d",
            "type": "float"
          },
          {
            "default": "Vector2( 0, -1 )",
            "value": "The line's normal.",
            "setter": "set_normal",
            "name": "normal",
            "getter": "get_normal",
            "type": "Vector2"
          }
        ]
      },
      "inherits": "Shape2D",
      "methods": {},
      "name": "LineShape2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Line shape for 2D collisions.",
      "description": "Line shape for 2D collisions. It works like a 2D plane and will not allow any physics body to go to the negative side. Not recommended for rigid bodies, and usually not recommended for static bodies either because it forces checks against it on every frame."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "value": "[StyleBox] used when the [LinkButton] is focused. It is displayed over the current [StyleBox], so using [StyleBoxEmpty] will just disable the focus visual effect.",
            "name": "focus",
            "type": "StyleBox"
          },
          {
            "value": "[Font] of the [LinkButton]'s text.",
            "name": "font",
            "type": "Font"
          },
          {
            "default": "Color( 0.88, 0.88, 0.88, 1 )",
            "value": "Default text [Color] of the [LinkButton].",
            "name": "font_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.94, 0.94, 0.94, 1 )",
            "value": "Text [Color] used when the [LinkButton] is being hovered.",
            "name": "font_color_hover",
            "type": "Color"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "Text [Color] used when the [LinkButton] is being pressed.",
            "name": "font_color_pressed",
            "type": "Color"
          },
          {
            "default": "2",
            "value": "The vertical space between the baseline of text and the underline.",
            "name": "underline_spacing",
            "type": "int"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "0",
            "setter": "set_focus_mode",
            "override": "true",
            "name": "focus_mode",
            "getter": "get_focus_mode",
            "type": "int",
            "enum": "Control.FocusMode"
          },
          {
            "default": "2",
            "setter": "set_default_cursor_shape",
            "override": "true",
            "name": "mouse_default_cursor_shape",
            "getter": "get_default_cursor_shape",
            "type": "int",
            "enum": "Control.CursorShape"
          },
          {
            "default": "\"\"",
            "value": "The button's text that will be displayed inside the button's area.",
            "setter": "set_text",
            "name": "text",
            "getter": "get_text",
            "type": "String"
          },
          {
            "default": "0",
            "value": "Determines when to show the underline. See [enum UnderlineMode] for options.",
            "setter": "set_underline_mode",
            "name": "underline",
            "getter": "get_underline_mode",
            "type": "int",
            "enum": "LinkButton.UnderlineMode"
          }
        ]
      },
      "inherits": "BaseButton",
      "methods": {},
      "name": "LinkButton",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "UNDERLINE_MODE_ALWAYS",
            "enum": "UnderlineMode"
          },
          {
            "value": "1",
            "name": "UNDERLINE_MODE_ON_HOVER",
            "enum": "UnderlineMode"
          },
          {
            "value": "2",
            "name": "UNDERLINE_MODE_NEVER",
            "enum": "UnderlineMode"
          }
        ]
      },
      "brief_description": "Simple button used to represent a link to some resource.",
      "description": "This kind of button is primarily used when the interaction with the button causes a context change (like linking to a web page).\n\t\tSee also [BaseButton] which contains common properties and methods associated with this node."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Spatial",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "name": "clear_current",
            "description": "Disables the listener to use the current camera's listener instead."
          },
          {
            "return": {
              "type": "Transform"
            },
            "qualifiers": "const",
            "name": "get_listener_transform",
            "description": "Returns the listener's global orthonormalized [Transform]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_current",
            "description": "Returns [code]true[/code] if the listener was made current using [method make_current], [code]false[/code] otherwise.\n\t\t\t\t[b]Note:[/b] There may be more than one Listener marked as \"current\" in the scene tree, but only the one that was made current last will be used."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "make_current",
            "description": "Enables the listener. This will override the current camera's listener."
          }
        ]
      },
      "name": "Listener",
      "version": "3.3",
      "constants": {},
      "brief_description": "Overrides the location sounds are heard from.",
      "description": "Once added to the scene tree and enabled using [method make_current], this node will override the location sounds are heard from. This can be used to listen from a location different from the [Camera].\n\t\t[b]Note:[/b] There is no 2D equivalent for this node yet."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "files",
                "type": "PoolStringArray",
                "index": "0"
              },
              {
                "name": "from_screen",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "_drop_files",
            "description": "Called when files are dragged from the OS file manager and dropped in the game window. The arguments are a list of file paths and the identifier of the screen where the drag originated."
          },
          {
            "return": {
              "type": "void"
            },
            "qualifiers": "virtual",
            "name": "_finalize",
            "description": "Called before the program exits."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "Variant",
                "index": "0"
              },
              {
                "name": "meta",
                "type": "Variant",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "_global_menu_action",
            "description": "Called when the user performs an action in the system global menu (e.g. the Mac OS menu bar)."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "delta",
              "type": "float",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_idle",
            "description": "Called each idle frame with the time since the last idle frame as argument (in seconds). Equivalent to [method Node._process].\n\t\t\t\tIf implemented, the method must return a boolean value. [code]true[/code] ends the main loop, while [code]false[/code] lets it proceed to the next frame."
          },
          {
            "return": {
              "type": "void"
            },
            "qualifiers": "virtual",
            "name": "_initialize",
            "description": "Called once during initialization."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "event",
              "type": "InputEvent",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_input_event",
            "description": "Called whenever an [InputEvent] is received by the main loop."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "text",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_input_text",
            "description": "Deprecated callback, does not do anything. Use [method _input_event] to parse text input. Will be removed in Godot 4.0."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "delta",
              "type": "float",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_iteration",
            "description": "Called each physics frame with the time since the last physics frame as argument ([code]delta[/code], in seconds). Equivalent to [method Node._physics_process].\n\t\t\t\tIf implemented, the method must return a boolean value. [code]true[/code] ends the main loop, while [code]false[/code] lets it proceed to the next frame."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "finish",
            "description": "Should not be called manually, override [method _finalize] instead. Will be removed in Godot 4.0."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "delta",
              "type": "float",
              "index": "0"
            },
            "name": "idle",
            "description": "Should not be called manually, override [method _idle] instead. Will be removed in Godot 4.0."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "init",
            "description": "Should not be called manually, override [method _initialize] instead. Will be removed in Godot 4.0."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "event",
              "type": "InputEvent",
              "index": "0"
            },
            "name": "input_event",
            "description": "Should not be called manually, override [method _input_event] instead. Will be removed in Godot 4.0."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "text",
              "type": "String",
              "index": "0"
            },
            "name": "input_text",
            "description": "Should not be called manually, override [method _input_text] instead. Will be removed in Godot 4.0."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "delta",
              "type": "float",
              "index": "0"
            },
            "name": "iteration",
            "description": "Should not be called manually, override [method _iteration] instead. Will be removed in Godot 4.0."
          }
        ]
      },
      "name": "MainLoop",
      "version": "3.3",
      "signals": {
        "signal": {
          "argument": [
            {
              "name": "permission",
              "type": "String",
              "index": "0"
            },
            {
              "name": "granted",
              "type": "bool",
              "index": "1"
            }
          ],
          "name": "on_request_permissions_result",
          "description": "Emitted when a user responds to a permission request."
        }
      },
      "constants": {
        "constant": [
          {
            "value": "1002",
            "name": "NOTIFICATION_WM_MOUSE_ENTER"
          },
          {
            "value": "1003",
            "name": "NOTIFICATION_WM_MOUSE_EXIT"
          },
          {
            "value": "1004",
            "name": "NOTIFICATION_WM_FOCUS_IN"
          },
          {
            "value": "1005",
            "name": "NOTIFICATION_WM_FOCUS_OUT"
          },
          {
            "value": "1006",
            "name": "NOTIFICATION_WM_QUIT_REQUEST"
          },
          {
            "value": "1007",
            "name": "NOTIFICATION_WM_GO_BACK_REQUEST"
          },
          {
            "value": "1008",
            "name": "NOTIFICATION_WM_UNFOCUS_REQUEST"
          },
          {
            "value": "1009",
            "name": "NOTIFICATION_OS_MEMORY_WARNING"
          },
          {
            "value": "1010",
            "name": "NOTIFICATION_TRANSLATION_CHANGED"
          },
          {
            "value": "1011",
            "name": "NOTIFICATION_WM_ABOUT"
          },
          {
            "value": "1012",
            "name": "NOTIFICATION_CRASH"
          },
          {
            "value": "1013",
            "name": "NOTIFICATION_OS_IME_UPDATE"
          },
          {
            "value": "1014",
            "name": "NOTIFICATION_APP_RESUMED"
          },
          {
            "value": "1015",
            "name": "NOTIFICATION_APP_PAUSED"
          }
        ]
      },
      "brief_description": "Abstract base class for the game's main loop.",
      "description": "[MainLoop] is the abstract base class for a Godot project's game loop. It is inherited by [SceneTree], which is the default game loop implementation used in Godot projects, though it is also possible to write and use one's own [MainLoop] subclass instead of the scene tree.\n\t\tUpon the application start, a [MainLoop] implementation must be provided to the OS; otherwise, the application will exit. This happens automatically (and a [SceneTree] is created) unless a main [Script] is provided from the command line (with e.g. [code]godot -s my_loop.gd[/code], which should then be a [MainLoop] implementation.\n\t\tHere is an example script implementing a simple [MainLoop]:\n\t\t[codeblock]\n\t\textends MainLoop\n\n\t\tvar time_elapsed = 0\n\t\tvar keys_typed = []\n\t\tvar quit = false\n\n\t\tfunc _initialize():\n\t\t    print(\"Initialized:\")\n\t\t    print(\"  Starting time: %s\" % str(time_elapsed))\n\n\t\tfunc _idle(delta):\n\t\t    time_elapsed += delta\n\t\t    # Return true to end the main loop.\n\t\t    return quit\n\n\t\tfunc _input_event(event):\n\t\t    # Record keys.\n\t\t    if event is InputEventKey and event.pressed and !event.echo:\n\t\t        keys_typed.append(OS.get_scancode_string(event.scancode))\n\t\t        # Quit on Escape press.\n\t\t        if event.scancode == KEY_ESCAPE:\n\t\t            quit = true\n\t\t    # Quit on any mouse click.\n\t\t    if event is InputEventMouseButton:\n\t\t        quit = true\n\n\t\tfunc _finalize():\n\t\t    print(\"Finalized:\")\n\t\t    print(\"  End time: %s\" % str(time_elapsed))\n\t\t    print(\"  Keys typed: %s\" % var2str(keys_typed))\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "default": "0",
            "value": "All direct children of [MarginContainer] will have a bottom margin of [code]margin_bottom[/code] pixels.",
            "name": "margin_bottom",
            "type": "int"
          },
          {
            "default": "0",
            "value": "All direct children of [MarginContainer] will have a left margin of [code]margin_left[/code] pixels.",
            "name": "margin_left",
            "type": "int"
          },
          {
            "default": "0",
            "value": "All direct children of [MarginContainer] will have a right margin of [code]margin_right[/code] pixels.",
            "name": "margin_right",
            "type": "int"
          },
          {
            "default": "0",
            "value": "All direct children of [MarginContainer] will have a top margin of [code]margin_top[/code] pixels.",
            "name": "margin_top",
            "type": "int"
          }
        ]
      },
      "inherits": "Container",
      "methods": {},
      "name": "MarginContainer",
      "version": "3.3",
      "constants": {},
      "brief_description": "Simple margin container.",
      "description": "Adds a top, left, bottom, and right margin to all [Control] nodes that are direct children of the container. To control the [MarginContainer]'s margin, use the [code]margin_*[/code] theme properties listed below.\n\t\t[b]Note:[/b] Be careful, [Control] margin values are different than the constant margin values. If you want to change the custom margin values of the [MarginContainer] by code, you should use the following examples:\n\t\t[codeblock]\n\t\t# This code sample assumes the current script is extending MarginContainer.\n\t\tvar margin_value = 100\n\t\tadd_constant_override(\"margin_top\", margin_value)\n\t\tadd_constant_override(\"margin_left\", margin_value)\n\t\tadd_constant_override(\"margin_bottom\", margin_value)\n\t\tadd_constant_override(\"margin_right\", margin_value)\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "PoolByteArray"
            },
            "argument": {
              "name": "base64_str",
              "type": "String",
              "index": "0"
            },
            "name": "base64_to_raw",
            "description": "Returns a decoded [PoolByteArray] corresponding to the Base64-encoded string [code]base64_str[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "base64_str",
              "type": "String",
              "index": "0"
            },
            "name": "base64_to_utf8",
            "description": "Returns a decoded string corresponding to the Base64-encoded string [code]base64_str[/code]."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "base64_str",
                "type": "String",
                "index": "0"
              },
              {
                "default": "false",
                "name": "allow_objects",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "base64_to_variant",
            "description": "Returns a decoded [Variant] corresponding to the Base64-encoded string [code]base64_str[/code]. If [code]allow_objects[/code] is [code]true[/code], decoding objects is allowed.\n\t\t\t\t[b]Warning:[/b] Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "array",
              "type": "PoolByteArray",
              "index": "0"
            },
            "name": "raw_to_base64",
            "description": "Returns a Base64-encoded string of a given [PoolByteArray]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "utf8_str",
              "type": "String",
              "index": "0"
            },
            "name": "utf8_to_base64",
            "description": "Returns a Base64-encoded string of the UTF-8 string [code]utf8_str[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": [
              {
                "name": "variant",
                "type": "Variant",
                "index": "0"
              },
              {
                "default": "false",
                "name": "full_objects",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "variant_to_base64",
            "description": "Returns a Base64-encoded string of the [Variant] [code]variant[/code]. If [code]full_objects[/code] is [code]true[/code], encoding objects is allowed (and can potentially include code)."
          }
        ]
      },
      "name": "Marshalls",
      "version": "3.3",
      "constants": {},
      "brief_description": "Data transformation (marshalling) and encoding helpers.",
      "description": "Provides data transformation and encoding utility functions."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://godotengine.org/asset-library/asset/123",
            "title": "3D Material Testers Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "value": "Sets the [Material] to be used for the next pass. This renders the object again using a different material.\n\t\t\t[b]Note:[/b] only applies to [SpatialMaterial]s and [ShaderMaterial]s with type \"Spatial\".",
            "setter": "set_next_pass",
            "name": "next_pass",
            "getter": "get_next_pass",
            "type": "Material"
          },
          {
            "default": "0",
            "value": "Sets the render priority for transparent objects in 3D scenes. Higher priority objects will be sorted in front of lower priority objects.\n\t\t\t[b]Note:[/b] this only applies to sorting of transparent objects. This will not impact how transparent objects are sorted relative to opaque objects. This is because opaque objects are not sorted, while transparent objects are sorted from back to front (subject to priority).",
            "setter": "set_render_priority",
            "name": "render_priority",
            "getter": "get_render_priority",
            "type": "int"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {},
      "name": "Material",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "127",
            "name": "RENDER_PRIORITY_MAX"
          },
          {
            "value": "-128",
            "name": "RENDER_PRIORITY_MIN"
          }
        ]
      },
      "brief_description": "Abstract base [Resource] for coloring and shading geometry.",
      "description": "Material is a base [Resource] used for coloring and shading geometry. All materials inherit from it and almost all [VisualInstance] derived nodes carry a Material. A few flags and parameters are shared between all material types and are configured here."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "value": "[StyleBox] used when the [MenuButton] is disabled.",
            "name": "disabled",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] used when the [MenuButton] is focused. It is displayed over the current [StyleBox], so using [StyleBoxEmpty] will just disable the focus visual effect.",
            "name": "focus",
            "type": "StyleBox"
          },
          {
            "value": "[Font] of the [MenuButton]'s text.",
            "name": "font",
            "type": "Font"
          },
          {
            "default": "Color( 0.88, 0.88, 0.88, 1 )",
            "value": "Default text [Color] of the [MenuButton].",
            "name": "font_color",
            "type": "Color"
          },
          {
            "default": "Color( 1, 1, 1, 0.3 )",
            "value": "Text [Color] used when the [MenuButton] is disabled.",
            "name": "font_color_disabled",
            "type": "Color"
          },
          {
            "default": "Color( 0.94, 0.94, 0.94, 1 )",
            "value": "Text [Color] used when the [MenuButton] is being hovered.",
            "name": "font_color_hover",
            "type": "Color"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "Text [Color] used when the [MenuButton] is being pressed.",
            "name": "font_color_pressed",
            "type": "Color"
          },
          {
            "value": "[StyleBox] used when the [MenuButton] is being hovered.",
            "name": "hover",
            "type": "StyleBox"
          },
          {
            "default": "3",
            "value": "The horizontal space between [MenuButton]'s icon and text.",
            "name": "hseparation",
            "type": "int"
          },
          {
            "value": "Default [StyleBox] for the [MenuButton].",
            "name": "normal",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] used when the [MenuButton] is being pressed.",
            "name": "pressed",
            "type": "StyleBox"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "0",
            "setter": "set_action_mode",
            "override": "true",
            "name": "action_mode",
            "getter": "get_action_mode",
            "type": "int",
            "enum": "BaseButton.ActionMode"
          },
          {
            "default": "true",
            "setter": "set_flat",
            "override": "true",
            "name": "flat",
            "getter": "is_flat",
            "type": "bool"
          },
          {
            "default": "0",
            "setter": "set_focus_mode",
            "override": "true",
            "name": "focus_mode",
            "getter": "get_focus_mode",
            "type": "int",
            "enum": "Control.FocusMode"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], when the cursor hovers above another [MenuButton] within the same parent which also has [code]switch_on_hover[/code] enabled, it will close the current [MenuButton] and open the other one.",
            "setter": "set_switch_on_hover",
            "name": "switch_on_hover",
            "getter": "is_switch_on_hover",
            "type": "bool"
          },
          {
            "default": "true",
            "setter": "set_toggle_mode",
            "override": "true",
            "name": "toggle_mode",
            "getter": "is_toggle_mode",
            "type": "bool"
          }
        ]
      },
      "inherits": "Button",
      "methods": {
        "method": [
          {
            "return": {
              "type": "PopupMenu"
            },
            "qualifiers": "const",
            "name": "get_popup",
            "description": "Returns the [PopupMenu] contained in this button."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "disabled",
              "type": "bool",
              "index": "0"
            },
            "name": "set_disable_shortcuts",
            "description": "If [code]true[/code], shortcuts are disabled and cannot be used to trigger the button."
          }
        ]
      },
      "name": "MenuButton",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "about_to_show",
          "description": "Emitted when [PopupMenu] of this MenuButton is about to show."
        }
      },
      "constants": {},
      "brief_description": "Special button that brings up a [PopupMenu] when clicked.",
      "description": "Special button that brings up a [PopupMenu] when clicked.\n\t\tNew items can be created inside this [PopupMenu] using [code]get_popup().add_item(\"My Item Name\")[/code]. You can also create them directly from the editor. To do so, select the [MenuButton] node, then in the toolbar at the top of the 2D editor, click [b]Items[/b] then click [b]Add[/b] in the popup. You will be able to give each item new properties.\n\t\tSee also [BaseButton] which contains common properties and methods associated with this node."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Clears all data currently in MeshDataTool."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "mesh",
              "type": "ArrayMesh",
              "index": "0"
            },
            "name": "commit_to_surface",
            "description": "Adds a new surface to specified [Mesh] with edited data."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "ArrayMesh",
                "index": "0"
              },
              {
                "name": "surface",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "create_from_surface",
            "description": "Uses specified surface of given [Mesh] to populate data for MeshDataTool.\n\t\t\t\tRequires [Mesh] with primitive type [constant Mesh.PRIMITIVE_TRIANGLES]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_edge_count",
            "description": "Returns the number of edges in this [Mesh]."
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_edge_faces",
            "description": "Returns array of faces that touch given edge."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_edge_meta",
            "description": "Returns meta information assigned to given edge."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "vertex",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_edge_vertex",
            "description": "Returns index of specified vertex connected to given edge.\n\t\t\t\tVertex argument can only be 0 or 1 because edges are comprised of two vertices."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_face_count",
            "description": "Returns the number of faces in this [Mesh]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "edge",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_face_edge",
            "description": "Returns specified edge associated with given face.\n\t\t\t\tEdge argument must 2 or less because a face only has three edges."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_face_meta",
            "description": "Returns the metadata associated with the given face."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_face_normal",
            "description": "Calculates and returns the face normal of the given face."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "vertex",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_face_vertex",
            "description": "Returns the specified vertex of the given face.\n\t\t\t\tVertex argument must be 2 or less because faces contain three vertices."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_format",
            "description": "Returns the [Mesh]'s format. Format is an integer made up of [Mesh] format flags combined together. For example, a mesh containing both vertices and normals would return a format of [code]3[/code] because [constant ArrayMesh.ARRAY_FORMAT_VERTEX] is [code]1[/code] and [constant ArrayMesh.ARRAY_FORMAT_NORMAL] is [code]2[/code].\n\t\t\t\tSee [enum ArrayMesh.ArrayFormat] for a list of format flags."
          },
          {
            "return": {
              "type": "Material"
            },
            "qualifiers": "const",
            "name": "get_material",
            "description": "Returns the material assigned to the [Mesh]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_vertex",
            "description": "Returns the vertex at given index."
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_vertex_bones",
            "description": "Returns the bones of the given vertex."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_vertex_color",
            "description": "Returns the color of the given vertex."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_vertex_count",
            "description": "Returns the total number of vertices in [Mesh]."
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_vertex_edges",
            "description": "Returns an array of edges that share the given vertex."
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_vertex_faces",
            "description": "Returns an array of faces that share the given vertex."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_vertex_meta",
            "description": "Returns the metadata associated with the given vertex."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_vertex_normal",
            "description": "Returns the normal of the given vertex."
          },
          {
            "return": {
              "type": "Plane"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_vertex_tangent",
            "description": "Returns the tangent of the given vertex."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_vertex_uv",
            "description": "Returns the UV of the given vertex."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_vertex_uv2",
            "description": "Returns the UV2 of the given vertex."
          },
          {
            "return": {
              "type": "PoolRealArray"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_vertex_weights",
            "description": "Returns bone weights of the given vertex."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "meta",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "set_edge_meta",
            "description": "Sets the metadata of the given edge."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "meta",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "set_face_meta",
            "description": "Sets the metadata of the given face."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "material",
              "type": "Material",
              "index": "0"
            },
            "name": "set_material",
            "description": "Sets the material to be used by newly-constructed [Mesh]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "vertex",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "set_vertex",
            "description": "Sets the position of the given vertex."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "bones",
                "type": "PoolIntArray",
                "index": "1"
              }
            ],
            "name": "set_vertex_bones",
            "description": "Sets the bones of the given vertex."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "set_vertex_color",
            "description": "Sets the color of the given vertex."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "meta",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "set_vertex_meta",
            "description": "Sets the metadata associated with the given vertex."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "normal",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "set_vertex_normal",
            "description": "Sets the normal of the given vertex."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "tangent",
                "type": "Plane",
                "index": "1"
              }
            ],
            "name": "set_vertex_tangent",
            "description": "Sets the tangent of the given vertex."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "uv",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "set_vertex_uv",
            "description": "Sets the UV of the given vertex."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "uv2",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "set_vertex_uv2",
            "description": "Sets the UV2 of the given vertex."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "weights",
                "type": "PoolRealArray",
                "index": "1"
              }
            ],
            "name": "set_vertex_weights",
            "description": "Sets the bone weights of the given vertex."
          }
        ]
      },
      "name": "MeshDataTool",
      "version": "3.3",
      "constants": {},
      "brief_description": "Helper tool to access and edit [Mesh] data.",
      "description": "MeshDataTool provides access to individual vertices in a [Mesh]. It allows users to read and edit vertex data of meshes. It also creates an array of faces and edges.\n\t\tTo use MeshDataTool, load a mesh with [method create_from_surface]. When you are finished editing the data commit the data to a mesh with [method commit_to_surface].\n\t\tBelow is an example of how MeshDataTool may be used.\n\t\t[codeblock]\n\t\tvar mesh = ArrayMesh.new()\n\t\tmesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, CubeMesh.new().get_mesh_arrays())\n\t\tvar mdt = MeshDataTool.new()\n\t\tmdt.create_from_surface(mesh, 0)\n\t\tfor i in range(mdt.get_vertex_count()):\n\t\t    var vertex = mdt.get_vertex(i)\n\t\t    # In this example we extend the mesh by one unit, which results in separated faces as it is flat shaded.\n\t\t    vertex += mdt.get_vertex_normal(i)\n\t\t    # Save your change.\n\t\t    mdt.set_vertex(i, vertex)\n\t\tmesh.surface_remove(0)\n\t\tmdt.commit_to_surface(mesh)\n\t\tvar mi = MeshInstance.new()\n\t\tmi.mesh = mesh\n\t\tadd_child(mi)\n\t\t[/codeblock]\n\t\tSee also [ArrayMesh], [ImmediateGeometry] and [SurfaceTool] for procedural geometry generation.\n\t\t[b]Note:[/b] Godot uses clockwise [url=https://learnopengl.com/Advanced-OpenGL/Face-culling]winding order[/url] for front faces of triangle primitive modes."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/2d/2d_meshes.html"
      },
      "members": {
        "member": [
          {
            "value": "The [Mesh] that will be drawn by the [MeshInstance2D].",
            "setter": "set_mesh",
            "name": "mesh",
            "getter": "get_mesh",
            "type": "Mesh"
          },
          {
            "value": "The normal map that will be used if using the default [CanvasItemMaterial].\n\t\t\t[b]Note:[/b] Godot expects the normal map to use X+, Y-, and Z+ coordinates. See [url=http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates]this page[/url] for a comparison of normal map coordinates expected by popular engines.",
            "setter": "set_normal_map",
            "name": "normal_map",
            "getter": "get_normal_map",
            "type": "Texture"
          },
          {
            "value": "The [Texture] that will be used if using the default [CanvasItemMaterial]. Can be accessed as [code]TEXTURE[/code] in CanvasItem shader.",
            "setter": "set_texture",
            "name": "texture",
            "getter": "get_texture",
            "type": "Texture"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {},
      "name": "MeshInstance2D",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "texture_changed",
          "description": "Emitted when the [member texture] is changed."
        }
      },
      "constants": {},
      "brief_description": "Node used for displaying a [Mesh] in 2D.",
      "description": "Node used for displaying a [Mesh] in 2D. Can be constructed from an existing [Sprite] via a tool in the editor toolbar. Select \"Sprite\" then \"Convert to Mesh2D\", select settings in popup and press \"Create Mesh2D\"."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://godotengine.org/asset-library/asset/123",
            "title": "3D Material Testers Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/126",
            "title": "3D Kinematic Character Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/125",
            "title": "3D Platformer Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "value": "The [Mesh] resource for the instance.",
            "setter": "set_mesh",
            "name": "mesh",
            "getter": "get_mesh",
            "type": "Mesh"
          },
          {
            "default": "NodePath(\"..\")",
            "value": "[NodePath] to the [Skeleton] associated with the instance.",
            "setter": "set_skeleton_path",
            "name": "skeleton",
            "getter": "get_skeleton_path",
            "type": "NodePath"
          },
          {
            "value": "Sets the skin to be used by this instance.",
            "setter": "set_skin",
            "name": "skin",
            "getter": "get_skin",
            "type": "Skin"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], normals are transformed when software skinning is used. Set to [code]false[/code] when normals are not needed for better performance.\n\t\t\tSee [member ProjectSettings.rendering/quality/skinning/software_skinning_fallback] for details about how software skinning is enabled.",
            "setter": "set_software_skinning_transform_normals",
            "name": "software_skinning_transform_normals",
            "getter": "is_software_skinning_transform_normals_enabled",
            "type": "bool"
          }
        ]
      },
      "inherits": "GeometryInstance",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "name": "create_convex_collision",
            "description": "This helper creates a [StaticBody] child node with a [ConvexPolygonShape] collision shape calculated from the mesh geometry. It's mainly used for testing."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "create_debug_tangents",
            "description": "This helper creates a [MeshInstance] child node with gizmos at every vertex calculated from the mesh geometry. It's mainly used for testing."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "create_trimesh_collision",
            "description": "This helper creates a [StaticBody] child node with a [ConcavePolygonShape] collision shape calculated from the mesh geometry. It's mainly used for testing."
          },
          {
            "return": {
              "type": "Material"
            },
            "argument": {
              "name": "surface",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_active_material",
            "description": "Returns the [Material] that will be used by the [Mesh] when drawing. This can return the [member GeometryInstance.material_override], the surface override [Material] defined in this [MeshInstance], or the surface [Material] defined in the [Mesh]. For example, if [member GeometryInstance.material_override] is used, all surfaces will return the override material."
          },
          {
            "return": {
              "type": "Material"
            },
            "argument": {
              "name": "surface",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_surface_material",
            "description": "Returns the [Material] for a surface of the [Mesh] resource."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_surface_material_count",
            "description": "Returns the number of surface materials."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "surface",
                "type": "int",
                "index": "0"
              },
              {
                "name": "material",
                "type": "Material",
                "index": "1"
              }
            ],
            "name": "set_surface_material",
            "description": "Sets the [Material] for a surface of the [Mesh] resource."
          }
        ]
      },
      "name": "MeshInstance",
      "version": "3.3",
      "constants": {},
      "brief_description": "Node that instances meshes into a scenario.",
      "description": "MeshInstance is a node that takes a [Mesh] resource and adds it to the current scenario by creating an instance of it. This is the class most often used to get 3D geometry rendered and can be used to instance a single [Mesh] in many places. This allows to reuse geometry and save on resources. When a [Mesh] has to be instanced more than thousands of times at close proximity, consider using a [MultiMesh] in a [MultiMeshInstance] instead."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://godotengine.org/asset-library/asset/126",
            "title": "3D Kinematic Character Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/125",
            "title": "3D Platformer Demo"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Clears the library."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "create_item",
            "description": "Creates a new item in the library with the given ID.\n\t\t\t\tYou can get an unused ID from [method get_last_unused_item_id]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "find_item_by_name",
            "description": "Returns the first item with the given name."
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "qualifiers": "const",
            "name": "get_item_list",
            "description": "Returns the list of item IDs in use."
          },
          {
            "return": {
              "type": "Mesh"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_mesh",
            "description": "Returns the item's mesh."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_name",
            "description": "Returns the item's name."
          },
          {
            "return": {
              "type": "NavigationMesh"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_navmesh",
            "description": "Returns the item's navigation mesh."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_navmesh_transform",
            "description": "Returns the transform applied to the item's navigation mesh."
          },
          {
            "return": {
              "type": "Texture"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_preview",
            "description": "When running in the editor, returns a generated item preview (a 3D rendering in isometric perspective). When used in a running project, returns the manually-defined item preview which can be set using [method set_item_preview]. Returns an empty [Texture] if no preview was manually set in a running project."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_shapes",
            "description": "Returns an item's collision shapes.\n\t\t\t\tThe array consists of each [Shape] followed by its [Transform]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_last_unused_item_id",
            "description": "Gets an unused ID for a new item."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "remove_item",
            "description": "Removes the item."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "mesh",
                "type": "Mesh",
                "index": "1"
              }
            ],
            "name": "set_item_mesh",
            "description": "Sets the item's mesh."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "name",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set_item_name",
            "description": "Sets the item's name.\n\t\t\t\tThis name is shown in the editor. It can also be used to look up the item later using [method find_item_by_name]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "navmesh",
                "type": "NavigationMesh",
                "index": "1"
              }
            ],
            "name": "set_item_navmesh",
            "description": "Sets the item's navigation mesh."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "navmesh",
                "type": "Transform",
                "index": "1"
              }
            ],
            "name": "set_item_navmesh_transform",
            "description": "Sets the transform to apply to the item's navigation mesh."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "texture",
                "type": "Texture",
                "index": "1"
              }
            ],
            "name": "set_item_preview",
            "description": "Sets a texture to use as the item's preview icon in the editor."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shapes",
                "type": "Array",
                "index": "1"
              }
            ],
            "name": "set_item_shapes",
            "description": "Sets an item's collision shapes.\n\t\t\t\tThe array should consist of [Shape] objects, each followed by a [Transform] that will be applied to it. For shapes that should not have a transform, use [constant Transform.IDENTITY]."
          }
        ]
      },
      "name": "MeshLibrary",
      "version": "3.3",
      "constants": {},
      "brief_description": "Library of meshes.",
      "description": "A library of meshes. Contains a list of [Mesh] resources, each with a name and ID. Each item can also include collision and navigation shapes. This resource is used in [GridMap]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "value": "Sets the base texture that the Mesh will use to draw.",
            "setter": "set_base_texture",
            "name": "base_texture",
            "getter": "get_base_texture",
            "type": "Texture"
          },
          {
            "default": "0",
            "setter": "set_flags",
            "override": "true",
            "name": "flags",
            "getter": "get_flags",
            "type": "int"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "Sets the size of the image, needed for reference.",
            "setter": "set_image_size",
            "name": "image_size",
            "getter": "get_image_size",
            "type": "Vector2"
          },
          {
            "value": "Sets the mesh used to draw. It must be a mesh using 2D vertices.",
            "setter": "set_mesh",
            "name": "mesh",
            "getter": "get_mesh",
            "type": "Mesh"
          }
        ]
      },
      "inherits": "Texture",
      "methods": {},
      "name": "MeshTexture",
      "version": "3.3",
      "constants": {},
      "brief_description": "Simple texture that uses a mesh to draw itself.",
      "description": "Simple texture that uses a mesh to draw itself. It's limited because flags can't be changed and region drawing is not supported."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://godotengine.org/asset-library/asset/123",
            "title": "3D Material Testers Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/126",
            "title": "3D Kinematic Character Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/125",
            "title": "3D Platformer Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "members": {
        "member": {
          "default": "Vector2( 0, 0 )",
          "value": "Sets a hint to be used for lightmap resolution in [BakedLightmap]. Overrides [member BakedLightmap.default_texels_per_unit].",
          "setter": "set_lightmap_size_hint",
          "name": "lightmap_size_hint",
          "getter": "get_lightmap_size_hint",
          "type": "Vector2"
        }
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Shape"
            },
            "qualifiers": "const",
            "name": "create_convex_shape",
            "description": "Calculate a [ConvexPolygonShape] from the mesh."
          },
          {
            "return": {
              "type": "Mesh"
            },
            "argument": {
              "name": "margin",
              "type": "float",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "create_outline",
            "description": "Calculate an outline mesh at a defined offset (margin) from the original mesh.\n\t\t\t\t[b]Note:[/b] This method typically returns the vertices in reverse order (e.g. clockwise to counterclockwise)."
          },
          {
            "return": {
              "type": "Shape"
            },
            "qualifiers": "const",
            "name": "create_trimesh_shape",
            "description": "Calculate a [ConcavePolygonShape] from the mesh."
          },
          {
            "return": {
              "type": "TriangleMesh"
            },
            "qualifiers": "const",
            "name": "generate_triangle_mesh",
            "description": "Generate a [TriangleMesh] from the mesh."
          },
          {
            "return": {
              "type": "AABB"
            },
            "qualifiers": "const",
            "name": "get_aabb",
            "description": "Returns the smallest [AABB] enclosing this mesh in local space. Not affected by [code]custom_aabb[/code]. See also [method VisualInstance.get_transformed_aabb].\n\t\t\t\t[b]Note:[/b] This is only implemented for [ArrayMesh] and [PrimitiveMesh]."
          },
          {
            "return": {
              "type": "PoolVector3Array"
            },
            "qualifiers": "const",
            "name": "get_faces",
            "description": "Returns all the vertices that make up the faces of the mesh. Each three vertices represent one triangle."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_surface_count",
            "description": "Returns the amount of surfaces that the [Mesh] holds."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "surf_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "surface_get_arrays",
            "description": "Returns the arrays for the vertices, normals, uvs, etc. that make up the requested surface (see [method ArrayMesh.add_surface_from_arrays])."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "surf_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "surface_get_blend_shape_arrays",
            "description": "Returns the blend shape arrays for the requested surface."
          },
          {
            "return": {
              "type": "Material"
            },
            "argument": {
              "name": "surf_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "surface_get_material",
            "description": "Returns a [Material] in a given surface. Surface is rendered using this material."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "surf_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "material",
                "type": "Material",
                "index": "1"
              }
            ],
            "name": "surface_set_material",
            "description": "Sets a [Material] for a given surface. Surface will be rendered using this material."
          }
        ]
      },
      "name": "Mesh",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "PRIMITIVE_POINTS",
            "enum": "PrimitiveType"
          },
          {
            "value": "1",
            "name": "PRIMITIVE_LINES",
            "enum": "PrimitiveType"
          },
          {
            "value": "2",
            "name": "PRIMITIVE_LINE_STRIP",
            "enum": "PrimitiveType"
          },
          {
            "value": "3",
            "name": "PRIMITIVE_LINE_LOOP",
            "enum": "PrimitiveType"
          },
          {
            "value": "4",
            "name": "PRIMITIVE_TRIANGLES",
            "enum": "PrimitiveType"
          },
          {
            "value": "5",
            "name": "PRIMITIVE_TRIANGLE_STRIP",
            "enum": "PrimitiveType"
          },
          {
            "value": "6",
            "name": "PRIMITIVE_TRIANGLE_FAN",
            "enum": "PrimitiveType"
          },
          {
            "value": "0",
            "name": "BLEND_SHAPE_MODE_NORMALIZED",
            "enum": "BlendShapeMode"
          },
          {
            "value": "1",
            "name": "BLEND_SHAPE_MODE_RELATIVE",
            "enum": "BlendShapeMode"
          },
          {
            "value": "1",
            "name": "ARRAY_FORMAT_VERTEX",
            "enum": "ArrayFormat"
          },
          {
            "value": "2",
            "name": "ARRAY_FORMAT_NORMAL",
            "enum": "ArrayFormat"
          },
          {
            "value": "4",
            "name": "ARRAY_FORMAT_TANGENT",
            "enum": "ArrayFormat"
          },
          {
            "value": "8",
            "name": "ARRAY_FORMAT_COLOR",
            "enum": "ArrayFormat"
          },
          {
            "value": "16",
            "name": "ARRAY_FORMAT_TEX_UV",
            "enum": "ArrayFormat"
          },
          {
            "value": "32",
            "name": "ARRAY_FORMAT_TEX_UV2",
            "enum": "ArrayFormat"
          },
          {
            "value": "64",
            "name": "ARRAY_FORMAT_BONES",
            "enum": "ArrayFormat"
          },
          {
            "value": "128",
            "name": "ARRAY_FORMAT_WEIGHTS",
            "enum": "ArrayFormat"
          },
          {
            "value": "256",
            "name": "ARRAY_FORMAT_INDEX",
            "enum": "ArrayFormat"
          },
          {
            "value": "9",
            "name": "ARRAY_COMPRESS_BASE",
            "enum": "ArrayFormat"
          },
          {
            "value": "512",
            "name": "ARRAY_COMPRESS_VERTEX",
            "enum": "ArrayFormat"
          },
          {
            "value": "1024",
            "name": "ARRAY_COMPRESS_NORMAL",
            "enum": "ArrayFormat"
          },
          {
            "value": "2048",
            "name": "ARRAY_COMPRESS_TANGENT",
            "enum": "ArrayFormat"
          },
          {
            "value": "4096",
            "name": "ARRAY_COMPRESS_COLOR",
            "enum": "ArrayFormat"
          },
          {
            "value": "8192",
            "name": "ARRAY_COMPRESS_TEX_UV",
            "enum": "ArrayFormat"
          },
          {
            "value": "16384",
            "name": "ARRAY_COMPRESS_TEX_UV2",
            "enum": "ArrayFormat"
          },
          {
            "value": "32768",
            "name": "ARRAY_COMPRESS_BONES",
            "enum": "ArrayFormat"
          },
          {
            "value": "65536",
            "name": "ARRAY_COMPRESS_WEIGHTS",
            "enum": "ArrayFormat"
          },
          {
            "value": "131072",
            "name": "ARRAY_COMPRESS_INDEX",
            "enum": "ArrayFormat"
          },
          {
            "value": "262144",
            "name": "ARRAY_FLAG_USE_2D_VERTICES",
            "enum": "ArrayFormat"
          },
          {
            "value": "524288",
            "name": "ARRAY_FLAG_USE_16_BIT_BONES",
            "enum": "ArrayFormat"
          },
          {
            "value": "97280",
            "name": "ARRAY_COMPRESS_DEFAULT",
            "enum": "ArrayFormat"
          },
          {
            "value": "0",
            "name": "ARRAY_VERTEX",
            "enum": "ArrayType"
          },
          {
            "value": "1",
            "name": "ARRAY_NORMAL",
            "enum": "ArrayType"
          },
          {
            "value": "2",
            "name": "ARRAY_TANGENT",
            "enum": "ArrayType"
          },
          {
            "value": "3",
            "name": "ARRAY_COLOR",
            "enum": "ArrayType"
          },
          {
            "value": "4",
            "name": "ARRAY_TEX_UV",
            "enum": "ArrayType"
          },
          {
            "value": "5",
            "name": "ARRAY_TEX_UV2",
            "enum": "ArrayType"
          },
          {
            "value": "6",
            "name": "ARRAY_BONES",
            "enum": "ArrayType"
          },
          {
            "value": "7",
            "name": "ARRAY_WEIGHTS",
            "enum": "ArrayType"
          },
          {
            "value": "8",
            "name": "ARRAY_INDEX",
            "enum": "ArrayType"
          },
          {
            "value": "9",
            "name": "ARRAY_MAX",
            "enum": "ArrayType"
          }
        ]
      },
      "brief_description": "A [Resource] that contains vertex array-based geometry.",
      "description": "Mesh is a type of [Resource] that contains vertex array-based geometry, divided in [i]surfaces[/i]. Each surface contains a completely separate array and a material used to draw it. Design wise, a mesh with multiple surfaces is preferred to a single surface, because objects created in 3D editing software commonly contain multiple materials."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "value": "The [MultiMesh] that will be drawn by the [MultiMeshInstance2D].",
            "setter": "set_multimesh",
            "name": "multimesh",
            "getter": "get_multimesh",
            "type": "MultiMesh"
          },
          {
            "value": "The normal map that will be used if using the default [CanvasItemMaterial].\n\t\t\t[b]Note:[/b] Godot expects the normal map to use X+, Y-, and Z+ coordinates. See [url=http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates]this page[/url] for a comparison of normal map coordinates expected by popular engines.",
            "setter": "set_normal_map",
            "name": "normal_map",
            "getter": "get_normal_map",
            "type": "Texture"
          },
          {
            "value": "The [Texture] that will be used if using the default [CanvasItemMaterial]. Can be accessed as [code]TEXTURE[/code] in CanvasItem shader.",
            "setter": "set_texture",
            "name": "texture",
            "getter": "get_texture",
            "type": "Texture"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {},
      "name": "MultiMeshInstance2D",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "texture_changed",
          "description": "Emitted when the [member texture] is changed."
        }
      },
      "constants": {},
      "brief_description": "Node that instances a [MultiMesh] in 2D.",
      "description": "[MultiMeshInstance2D] is a specialized node to instance a [MultiMesh] resource in 2D.\n\t\tUsage is the same as [MultiMeshInstance]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          "https://docs.godotengine.org/en/3.3/tutorials/3d/vertex_animation/animating_thousands_of_fish.html",
          "https://docs.godotengine.org/en/3.3/tutorials/3d/using_multi_mesh_instance.html",
          "https://docs.godotengine.org/en/3.3/tutorials/optimization/using_multimesh.html"
        ]
      },
      "members": {
        "member": {
          "value": "The [MultiMesh] resource that will be used and shared among all instances of the [MultiMeshInstance].",
          "setter": "set_multimesh",
          "name": "multimesh",
          "getter": "get_multimesh",
          "type": "MultiMesh"
        }
      },
      "inherits": "GeometryInstance",
      "methods": {},
      "name": "MultiMeshInstance",
      "version": "3.3",
      "constants": {},
      "brief_description": "Node that instances a [MultiMesh].",
      "description": "[MultiMeshInstance] is a specialized node to instance [GeometryInstance]s based on a [MultiMesh] resource.\n\t\tThis is useful to optimize the rendering of a high amount of instances of a given mesh (for example trees in a forest or grass strands)."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          "https://docs.godotengine.org/en/3.3/tutorials/3d/vertex_animation/animating_thousands_of_fish.html",
          "https://docs.godotengine.org/en/3.3/tutorials/optimization/using_multimesh.html"
        ]
      },
      "members": {
        "member": [
          {
            "default": "0",
            "value": "Format of colors in color array that gets passed to shader.",
            "setter": "set_color_format",
            "name": "color_format",
            "getter": "get_color_format",
            "type": "int",
            "enum": "MultiMesh.ColorFormat"
          },
          {
            "default": "0",
            "value": "Format of custom data in custom data array that gets passed to shader.",
            "setter": "set_custom_data_format",
            "name": "custom_data_format",
            "getter": "get_custom_data_format",
            "type": "int",
            "enum": "MultiMesh.CustomDataFormat"
          },
          {
            "default": "0",
            "value": "Number of instances that will get drawn. This clears and (re)sizes the buffers. By default, all instances are drawn but you can limit this with [member visible_instance_count].",
            "setter": "set_instance_count",
            "name": "instance_count",
            "getter": "get_instance_count",
            "type": "int"
          },
          {
            "value": "Mesh to be drawn.",
            "setter": "set_mesh",
            "name": "mesh",
            "getter": "get_mesh",
            "type": "Mesh"
          },
          {
            "default": "0",
            "value": "Format of transform used to transform mesh, either 2D or 3D.",
            "setter": "set_transform_format",
            "name": "transform_format",
            "getter": "get_transform_format",
            "type": "int",
            "enum": "MultiMesh.TransformFormat"
          },
          {
            "default": "-1",
            "value": "Limits the number of instances drawn, -1 draws all instances. Changing this does not change the sizes of the buffers.",
            "setter": "set_visible_instance_count",
            "name": "visible_instance_count",
            "getter": "get_visible_instance_count",
            "type": "int"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "AABB"
            },
            "qualifiers": "const",
            "name": "get_aabb",
            "description": "Returns the visibility axis-aligned bounding box in local space. See also [method VisualInstance.get_transformed_aabb]."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "instance",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_instance_color",
            "description": "Gets a specific instance's color."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "instance",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_instance_custom_data",
            "description": "Returns the custom data that has been set for a specific instance."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": {
              "name": "instance",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_instance_transform",
            "description": "Returns the [Transform] of a specific instance."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "argument": {
              "name": "instance",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_instance_transform_2d",
            "description": "Returns the [Transform2D] of a specific instance."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "array",
              "type": "PoolRealArray",
              "index": "0"
            },
            "name": "set_as_bulk_array",
            "description": "Sets all data related to the instances in one go. This is especially useful when loading the data from disk or preparing the data from GDNative.\n\t\t\t\tAll data is packed in one large float array. An array may look like this: Transform for instance 1, color data for instance 1, custom data for instance 1, transform for instance 2, color data for instance 2, etc...\n\t\t\t\t[Transform] is stored as 12 floats, [Transform2D] is stored as 8 floats, [code]COLOR_8BIT[/code] / [code]CUSTOM_DATA_8BIT[/code] is stored as 1 float (4 bytes as is) and [code]COLOR_FLOAT[/code] / [code]CUSTOM_DATA_FLOAT[/code] is stored as 4 floats."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "int",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "set_instance_color",
            "description": "Sets the color of a specific instance by [i]multiplying[/i] the mesh's existing vertex colors.\n\t\t\t\tFor the color to take effect, ensure that [member color_format] is non-[code]null[/code] on the [MultiMesh] and [member SpatialMaterial.vertex_color_use_as_albedo] is [code]true[/code] on the material."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "int",
                "index": "0"
              },
              {
                "name": "custom_data",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "set_instance_custom_data",
            "description": "Sets custom data for a specific instance. Although [Color] is used, it is just a container for 4 floating point numbers. The format of the number can change depending on the [enum CustomDataFormat] used."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "int",
                "index": "0"
              },
              {
                "name": "transform",
                "type": "Transform",
                "index": "1"
              }
            ],
            "name": "set_instance_transform",
            "description": "Sets the [Transform] for a specific instance."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "int",
                "index": "0"
              },
              {
                "name": "transform",
                "type": "Transform2D",
                "index": "1"
              }
            ],
            "name": "set_instance_transform_2d",
            "description": "Sets the [Transform2D] for a specific instance."
          }
        ]
      },
      "name": "MultiMesh",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "TRANSFORM_2D",
            "enum": "TransformFormat"
          },
          {
            "value": "1",
            "name": "TRANSFORM_3D",
            "enum": "TransformFormat"
          },
          {
            "value": "0",
            "name": "COLOR_NONE",
            "enum": "ColorFormat"
          },
          {
            "value": "1",
            "name": "COLOR_8BIT",
            "enum": "ColorFormat"
          },
          {
            "value": "2",
            "name": "COLOR_FLOAT",
            "enum": "ColorFormat"
          },
          {
            "value": "0",
            "name": "CUSTOM_DATA_NONE",
            "enum": "CustomDataFormat"
          },
          {
            "value": "1",
            "name": "CUSTOM_DATA_8BIT",
            "enum": "CustomDataFormat"
          },
          {
            "value": "2",
            "name": "CUSTOM_DATA_FLOAT",
            "enum": "CustomDataFormat"
          }
        ]
      },
      "brief_description": "Provides high-performance mesh instancing.",
      "description": "MultiMesh provides low-level mesh instancing. Drawing thousands of [MeshInstance] nodes can be slow, since each object is submitted to the GPU then drawn individually.\n\t\tMultiMesh is much faster as it can draw thousands of instances with a single draw call, resulting in less API overhead.\n\t\tAs a drawback, if the instances are too far away from each other, performance may be reduced as every single instance will always render (they are spatially indexed as one, for the whole object).\n\t\tSince instances may have any behavior, the AABB used for visibility must be provided by the user."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code] (or if the [member network_peer] has [member PacketPeer.allow_object_decoding] set to [code]true[/code]), the MultiplayerAPI will allow encoding and decoding of object during RPCs/RSETs.\n\t\t\t[b]Warning:[/b] Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.",
            "setter": "set_allow_object_decoding",
            "name": "allow_object_decoding",
            "getter": "is_object_decoding_allowed",
            "type": "bool"
          },
          {
            "value": "The peer object to handle the RPC system (effectively enabling networking when set). Depending on the peer itself, the MultiplayerAPI will become a network server (check with [method is_network_server]) and will set root node's network mode to master, or it will become a regular peer with root node set to puppet. All child nodes are set to inherit the network mode by default. Handling of networking-related events (connection, disconnection, new clients) is done by connecting to MultiplayerAPI's signals.",
            "setter": "set_network_peer",
            "name": "network_peer",
            "getter": "get_network_peer",
            "type": "NetworkedMultiplayerPeer"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the MultiplayerAPI's [member network_peer] refuses new incoming connections.",
            "setter": "set_refuse_new_network_connections",
            "name": "refuse_new_network_connections",
            "getter": "is_refusing_new_network_connections",
            "type": "bool"
          },
          {
            "value": "The root node to use for RPCs. Instead of an absolute path, a relative path will be used to find the node upon which the RPC should be executed.\n\t\t\tThis effectively allows to have different branches of the scene tree to be managed by different MultiplayerAPI, allowing for example to run both client and server in the same scene.",
            "setter": "set_root_node",
            "name": "root_node",
            "getter": "get_root_node",
            "type": "Node"
          }
        ]
      },
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Clears the current MultiplayerAPI network state (you shouldn't call this unless you know what you are doing)."
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "qualifiers": "const",
            "name": "get_network_connected_peers",
            "description": "Returns the peer IDs of all connected peers of this MultiplayerAPI's [member network_peer]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_network_unique_id",
            "description": "Returns the unique peer ID of this MultiplayerAPI's [member network_peer]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_rpc_sender_id",
            "description": "Returns the sender's peer ID for the RPC currently being executed.\n\t\t\t\t[b]Note:[/b] If not inside an RPC this method will return 0."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "has_network_peer",
            "description": "Returns [code]true[/code] if there is a [member network_peer] set."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_network_server",
            "description": "Returns [code]true[/code] if this MultiplayerAPI's [member network_peer] is in server mode (listening for connections)."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "poll",
            "description": "Method used for polling the MultiplayerAPI. You only need to worry about this if you are using [member Node.custom_multiplayer] override or you set [member SceneTree.multiplayer_poll] to [code]false[/code]. By default, [SceneTree] will poll its MultiplayerAPI for you.\n\t\t\t\t[b]Note:[/b] This method results in RPCs and RSETs being called, so they will be executed in the same context of this function (e.g. [code]_process[/code], [code]physics[/code], [Thread])."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "bytes",
                "type": "PoolByteArray",
                "index": "0"
              },
              {
                "default": "0",
                "name": "id",
                "type": "int",
                "index": "1"
              },
              {
                "default": "2",
                "name": "mode",
                "type": "int",
                "enum": "NetworkedMultiplayerPeer.TransferMode",
                "index": "2"
              }
            ],
            "name": "send_bytes",
            "description": "Sends the given raw [code]bytes[/code] to a specific peer identified by [code]id[/code] (see [method NetworkedMultiplayerPeer.set_target_peer]). Default ID is [code]0[/code], i.e. broadcast to all peers."
          }
        ]
      },
      "name": "MultiplayerAPI",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "connected_to_server",
            "description": "Emitted when this MultiplayerAPI's [member network_peer] successfully connected to a server. Only emitted on clients."
          },
          {
            "name": "connection_failed",
            "description": "Emitted when this MultiplayerAPI's [member network_peer] fails to establish a connection to a server. Only emitted on clients."
          },
          {
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "network_peer_connected",
            "description": "Emitted when this MultiplayerAPI's [member network_peer] connects with a new peer. ID is the peer ID of the new peer. Clients get notified when other clients connect to the same server. Upon connecting to a server, a client also receives this signal for the server (with ID being 1)."
          },
          {
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "network_peer_disconnected",
            "description": "Emitted when this MultiplayerAPI's [member network_peer] disconnects from a peer. Clients get notified when other clients disconnect from the same server."
          },
          {
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "packet",
                "type": "PoolByteArray",
                "index": "1"
              }
            ],
            "name": "network_peer_packet",
            "description": "Emitted when this MultiplayerAPI's [member network_peer] receive a [code]packet[/code] with custom data (see [method send_bytes]). ID is the peer ID of the peer that sent the packet."
          },
          {
            "name": "server_disconnected",
            "description": "Emitted when this MultiplayerAPI's [member network_peer] disconnects from server. Only emitted on clients."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "RPC_MODE_DISABLED",
            "enum": "RPCMode"
          },
          {
            "value": "1",
            "name": "RPC_MODE_REMOTE",
            "enum": "RPCMode"
          },
          {
            "value": "2",
            "name": "RPC_MODE_MASTER",
            "enum": "RPCMode"
          },
          {
            "value": "3",
            "name": "RPC_MODE_PUPPET",
            "enum": "RPCMode"
          },
          {
            "value": "3",
            "name": "RPC_MODE_SLAVE",
            "enum": "RPCMode"
          },
          {
            "value": "4",
            "name": "RPC_MODE_REMOTESYNC",
            "enum": "RPCMode"
          },
          {
            "value": "4",
            "name": "RPC_MODE_SYNC",
            "enum": "RPCMode"
          },
          {
            "value": "5",
            "name": "RPC_MODE_MASTERSYNC",
            "enum": "RPCMode"
          },
          {
            "value": "6",
            "name": "RPC_MODE_PUPPETSYNC",
            "enum": "RPCMode"
          }
        ]
      },
      "brief_description": "High-level multiplayer API.",
      "description": "This class implements most of the logic behind the high-level multiplayer API. See also [NetworkedMultiplayerPeer].\n\t\tBy default, [SceneTree] has a reference to this class that is used to provide multiplayer capabilities (i.e. RPC/RSET) across the whole scene.\n\t\tIt is possible to override the MultiplayerAPI instance used by specific Nodes by setting the [member Node.custom_multiplayer] property, effectively allowing to run both client and server in the same scene.\n\t\t[b]Note:[/b] The high-level multiplayer API protocol is an implementation detail and isn't meant to be used by non-Godot servers. It may change without notice."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/threads/using_multiple_threads.html"
      },
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "name": "lock",
            "description": "Locks this [Mutex], blocks until it is unlocked by the current owner."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "name": "try_lock",
            "description": "Tries locking this [Mutex], but does not block. Returns [constant OK] on success, [constant ERR_BUSY] otherwise."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "unlock",
            "description": "Unlocks this [Mutex], leaving it to other threads."
          }
        ]
      },
      "name": "Mutex",
      "version": "3.3",
      "constants": {},
      "brief_description": "A synchronization mutex (mutual exclusion).",
      "description": "A synchronization mutex (mutual exclusion). This is used to synchronize multiple [Thread]s, and is equivalent to a binary [Semaphore]. It guarantees that only one thread can ever acquire the lock at a time. A mutex can be used to protect a critical section; however, be careful to avoid deadlocks."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/117",
          "title": "2D Navigation Demo"
        }
      },
      "inherits": "Node2D",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "to_point",
              "type": "Vector2",
              "index": "0"
            },
            "name": "get_closest_point",
            "description": "Returns the navigation point closest to the point given. Points are in local coordinate space."
          },
          {
            "return": {
              "type": "Object"
            },
            "argument": {
              "name": "to_point",
              "type": "Vector2",
              "index": "0"
            },
            "name": "get_closest_point_owner",
            "description": "Returns the owner of the [NavigationPolygon] which contains the navigation point closest to the point given. This is usually a [NavigationPolygonInstance]. For polygons added via [method navpoly_add], returns the owner that was given (or [code]null[/code] if the [code]owner[/code] parameter was omitted)."
          },
          {
            "return": {
              "type": "PoolVector2Array"
            },
            "argument": [
              {
                "name": "start",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "end",
                "type": "Vector2",
                "index": "1"
              },
              {
                "default": "true",
                "name": "optimize",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "get_simple_path",
            "description": "Returns the path between two given points. Points are in local coordinate space. If [code]optimize[/code] is [code]true[/code] (the default), the path is smoothed by merging path segments where possible.\n\t\t\t\t[b]Note:[/b] This method has known issues and will often return non-optimal paths. These issues will be fixed in Godot 4.0."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "NavigationPolygon",
                "index": "0"
              },
              {
                "name": "xform",
                "type": "Transform2D",
                "index": "1"
              },
              {
                "default": "null",
                "name": "owner",
                "type": "Object",
                "index": "2"
              }
            ],
            "name": "navpoly_add",
            "description": "Adds a [NavigationPolygon]. Returns an ID for use with [method navpoly_remove] or [method navpoly_set_transform]. If given, a [Transform2D] is applied to the polygon. The optional [code]owner[/code] is used as return value for [method get_closest_point_owner]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "navpoly_remove",
            "description": "Removes the [NavigationPolygon] with the given ID."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "xform",
                "type": "Transform2D",
                "index": "1"
              }
            ],
            "name": "navpoly_set_transform",
            "description": "Sets the transform applied to the [NavigationPolygon] with the given ID."
          }
        ]
      },
      "name": "Navigation2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "2D navigation and pathfinding node.",
      "description": "Navigation2D provides navigation and pathfinding within a 2D area, specified as a collection of [NavigationPolygon] resources. By default, these are automatically collected from child [NavigationPolygonInstance] nodes, but they can also be added on the fly with [method navpoly_add].\n\t\t[b]Note:[/b] The current navigation system has many known issues and will not always return optimal paths as expected. These issues will be fixed in Godot 4.0."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "true",
            "setter": "set_enabled",
            "name": "enabled",
            "getter": "is_enabled",
            "type": "bool"
          },
          {
            "setter": "set_navigation_mesh",
            "name": "navmesh",
            "getter": "get_navigation_mesh",
            "type": "NavigationMesh"
          }
        ]
      },
      "inherits": "Spatial",
      "methods": {},
      "name": "NavigationMeshInstance",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/124",
          "title": "3D Navmesh Demo"
        }
      },
      "members": {
        "member": [
          {
            "default": "2.0",
            "setter": "set_agent_height",
            "name": "agent/height",
            "getter": "get_agent_height",
            "type": "float"
          },
          {
            "default": "0.9",
            "setter": "set_agent_max_climb",
            "name": "agent/max_climb",
            "getter": "get_agent_max_climb",
            "type": "float"
          },
          {
            "default": "45.0",
            "setter": "set_agent_max_slope",
            "name": "agent/max_slope",
            "getter": "get_agent_max_slope",
            "type": "float"
          },
          {
            "default": "0.6",
            "setter": "set_agent_radius",
            "name": "agent/radius",
            "getter": "get_agent_radius",
            "type": "float"
          },
          {
            "default": "0.2",
            "setter": "set_cell_height",
            "name": "cell/height",
            "getter": "get_cell_height",
            "type": "float"
          },
          {
            "default": "0.3",
            "setter": "set_cell_size",
            "name": "cell/size",
            "getter": "get_cell_size",
            "type": "float"
          },
          {
            "default": "6.0",
            "setter": "set_detail_sample_distance",
            "name": "detail/sample_distance",
            "getter": "get_detail_sample_distance",
            "type": "float"
          },
          {
            "default": "1.0",
            "setter": "set_detail_sample_max_error",
            "name": "detail/sample_max_error",
            "getter": "get_detail_sample_max_error",
            "type": "float"
          },
          {
            "default": "1.3",
            "setter": "set_edge_max_error",
            "name": "edge/max_error",
            "getter": "get_edge_max_error",
            "type": "float"
          },
          {
            "default": "12.0",
            "setter": "set_edge_max_length",
            "name": "edge/max_length",
            "getter": "get_edge_max_length",
            "type": "float"
          },
          {
            "default": "false",
            "setter": "set_filter_walkable_low_height_spans",
            "name": "filter/filter_walkable_low_height_spans",
            "getter": "get_filter_walkable_low_height_spans",
            "type": "bool"
          },
          {
            "default": "false",
            "setter": "set_filter_ledge_spans",
            "name": "filter/ledge_spans",
            "getter": "get_filter_ledge_spans",
            "type": "bool"
          },
          {
            "default": "false",
            "setter": "set_filter_low_hanging_obstacles",
            "name": "filter/low_hanging_obstacles",
            "getter": "get_filter_low_hanging_obstacles",
            "type": "bool"
          },
          {
            "setter": "set_collision_mask",
            "name": "geometry/collision_mask",
            "getter": "get_collision_mask",
            "type": "int"
          },
          {
            "default": "0",
            "setter": "set_parsed_geometry_type",
            "name": "geometry/parsed_geometry_type",
            "getter": "get_parsed_geometry_type",
            "type": "int"
          },
          {
            "default": "0",
            "setter": "set_source_geometry_mode",
            "name": "geometry/source_geometry_mode",
            "getter": "get_source_geometry_mode",
            "type": "int"
          },
          {
            "setter": "set_source_group_name",
            "name": "geometry/source_group_name",
            "getter": "get_source_group_name",
            "type": "String"
          },
          {
            "default": "6.0",
            "setter": "set_verts_per_poly",
            "name": "polygon/verts_per_poly",
            "getter": "get_verts_per_poly",
            "type": "float"
          },
          {
            "default": "20.0",
            "setter": "set_region_merge_size",
            "name": "region/merge_size",
            "getter": "get_region_merge_size",
            "type": "float"
          },
          {
            "default": "8.0",
            "setter": "set_region_min_size",
            "name": "region/min_size",
            "getter": "get_region_min_size",
            "type": "float"
          },
          {
            "default": "0",
            "setter": "set_sample_partition_type",
            "name": "sample_partition_type/sample_partition_type",
            "getter": "get_sample_partition_type",
            "type": "int"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "polygon",
              "type": "PoolIntArray",
              "index": "0"
            },
            "name": "add_polygon",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_polygons",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "mesh",
              "type": "Mesh",
              "index": "0"
            },
            "name": "create_from_mesh",
            "description": {}
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "bit",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_collision_mask_bit",
            "description": {}
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "get_polygon",
            "description": {}
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_polygon_count",
            "description": {}
          },
          {
            "return": {
              "type": "PoolVector3Array"
            },
            "qualifiers": "const",
            "name": "get_vertices",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bit",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_collision_mask_bit",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "vertices",
              "type": "PoolVector3Array",
              "index": "0"
            },
            "name": "set_vertices",
            "description": {}
          }
        ]
      },
      "name": "NavigationMesh",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "SAMPLE_PARTITION_WATERSHED"
          },
          {
            "value": "1",
            "name": "SAMPLE_PARTITION_MONOTONE"
          },
          {
            "value": "2",
            "name": "SAMPLE_PARTITION_LAYERS"
          },
          {
            "value": "0",
            "name": "PARSED_GEOMETRY_MESH_INSTANCES"
          },
          {
            "value": "1",
            "name": "PARSED_GEOMETRY_STATIC_COLLIDERS"
          },
          {
            "value": "2",
            "name": "PARSED_GEOMETRY_BOTH"
          }
        ]
      },
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "true",
            "setter": "set_enabled",
            "name": "enabled",
            "getter": "is_enabled",
            "type": "bool"
          },
          {
            "setter": "set_navigation_polygon",
            "name": "navpoly",
            "getter": "get_navigation_polygon",
            "type": "NavigationPolygon"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {},
      "name": "NavigationPolygonInstance",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/117",
          "title": "2D Navigation Demo"
        }
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "outline",
              "type": "PoolVector2Array",
              "index": "0"
            },
            "name": "add_outline",
            "description": "Appends a [PoolVector2Array] that contains the vertices of an outline to the internal array that contains all the outlines. You have to call [method make_polygons_from_outlines] in order for this array to be converted to polygons that the engine will use."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "outline",
                "type": "PoolVector2Array",
                "index": "0"
              },
              {
                "name": "index",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "add_outline_at_index",
            "description": "Adds a [PoolVector2Array] that contains the vertices of an outline to the internal array that contains all the outlines at a fixed position. You have to call [method make_polygons_from_outlines] in order for this array to be converted to polygons that the engine will use."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "polygon",
              "type": "PoolIntArray",
              "index": "0"
            },
            "name": "add_polygon",
            "description": "Adds a polygon using the indices of the vertices you get when calling [method get_vertices]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_outlines",
            "description": "Clears the array of the outlines, but it doesn't clear the vertices and the polygons that were created by them."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_polygons",
            "description": "Clears the array of polygons, but it doesn't clear the array of outlines and vertices."
          },
          {
            "return": {
              "type": "PoolVector2Array"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_outline",
            "description": "Returns a [PoolVector2Array] containing the vertices of an outline that was created in the editor or by script."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_outline_count",
            "description": "Returns the number of outlines that were created in the editor or by script."
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "get_polygon",
            "description": "Returns a [PoolIntArray] containing the indices of the vertices of a created polygon."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_polygon_count",
            "description": "Returns the count of all polygons."
          },
          {
            "return": {
              "type": "PoolVector2Array"
            },
            "qualifiers": "const",
            "name": "get_vertices",
            "description": "Returns a [PoolVector2Array] containing all the vertices being used to create the polygons."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "make_polygons_from_outlines",
            "description": "Creates polygons from the outlines added in the editor or by script."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "remove_outline",
            "description": "Removes an outline created in the editor or by script. You have to call [method make_polygons_from_outlines] for the polygons to update."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "outline",
                "type": "PoolVector2Array",
                "index": "1"
              }
            ],
            "name": "set_outline",
            "description": "Changes an outline created in the editor or by script. You have to call [method make_polygons_from_outlines] for the polygons to update."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "vertices",
              "type": "PoolVector2Array",
              "index": "0"
            },
            "name": "set_vertices",
            "description": "Sets the vertices that can be then indexed to create polygons with the [method add_polygon] method."
          }
        ]
      },
      "name": "NavigationPolygon",
      "version": "3.3",
      "constants": {},
      "brief_description": "A node that has methods to draw outlines or use indices of vertices to create navigation polygons.",
      "description": "There are two ways to create polygons. Either by using the [method add_outline] method, or using the [method add_polygon] method.\n\t\tUsing [method add_outline]:\n\t\t[codeblock]\n\t\tvar polygon = NavigationPolygon.new()\n\t\tvar outline = PoolVector2Array([Vector2(0, 0), Vector2(0, 50), Vector2(50, 50), Vector2(50, 0)])\n\t\tpolygon.add_outline(outline)\n\t\tpolygon.make_polygons_from_outlines()\n\t\t$NavigationPolygonInstance.navpoly = polygon\n\t\t[/codeblock]\n\t\tUsing [method add_polygon] and indices of the vertices array.\n\t\t[codeblock]\n\t\tvar polygon = NavigationPolygon.new()\n\t\tvar vertices = PoolVector2Array([Vector2(0, 0), Vector2(0, 50), Vector2(50, 50), Vector2(50, 0)])\n\t\tpolygon.set_vertices(vertices)\n\t\tvar indices = PoolIntArray(0, 3, 1)\n\t\tpolygon.add_polygon(indices)\n\t\t$NavigationPolygonInstance.navpoly = polygon\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/124",
          "title": "3D Navmesh Demo"
        }
      },
      "members": {
        "member": {
          "default": "Vector3( 0, 1, 0 )",
          "value": "Defines which direction is up. By default, this is [code](0, 1, 0)[/code], which is the world's \"up\" direction.",
          "setter": "set_up_vector",
          "name": "up_vector",
          "getter": "get_up_vector",
          "type": "Vector3"
        }
      },
      "inherits": "Spatial",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "to_point",
              "type": "Vector3",
              "index": "0"
            },
            "name": "get_closest_point",
            "description": "Returns the navigation point closest to the point given. Points are in local coordinate space."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "to_point",
              "type": "Vector3",
              "index": "0"
            },
            "name": "get_closest_point_normal",
            "description": "Returns the surface normal at the navigation point closest to the point given. Useful for rotating a navigation agent according to the navigation mesh it moves on."
          },
          {
            "return": {
              "type": "Object"
            },
            "argument": {
              "name": "to_point",
              "type": "Vector3",
              "index": "0"
            },
            "name": "get_closest_point_owner",
            "description": "Returns the owner of the [NavigationMesh] which contains the navigation point closest to the point given. This is usually a [NavigationMeshInstance]. For meshes added via [method navmesh_add], returns the owner that was given (or [code]null[/code] if the [code]owner[/code] parameter was omitted)."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": [
              {
                "name": "start",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "end",
                "type": "Vector3",
                "index": "1"
              },
              {
                "default": "false",
                "name": "use_collision",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "get_closest_point_to_segment",
            "description": "Returns the navigation point closest to the given line segment. When enabling [code]use_collision[/code], only considers intersection points between segment and navigation meshes. If multiple intersection points are found, the one closest to the segment start point is returned."
          },
          {
            "return": {
              "type": "PoolVector3Array"
            },
            "argument": [
              {
                "name": "start",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "end",
                "type": "Vector3",
                "index": "1"
              },
              {
                "default": "true",
                "name": "optimize",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "get_simple_path",
            "description": "Returns the path between two given points. Points are in local coordinate space. If [code]optimize[/code] is [code]true[/code] (the default), the agent properties associated with each [NavigationMesh] (radius, height, etc.) are considered in the path calculation, otherwise they are ignored.\n\t\t\t\t[b]Note:[/b] This method has known issues and will often return non-optimal paths. These issues will be fixed in Godot 4.0."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "NavigationMesh",
                "index": "0"
              },
              {
                "name": "xform",
                "type": "Transform",
                "index": "1"
              },
              {
                "default": "null",
                "name": "owner",
                "type": "Object",
                "index": "2"
              }
            ],
            "name": "navmesh_add",
            "description": "Adds a [NavigationMesh]. Returns an ID for use with [method navmesh_remove] or [method navmesh_set_transform]. If given, a [Transform2D] is applied to the polygon. The optional [code]owner[/code] is used as return value for [method get_closest_point_owner]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "navmesh_remove",
            "description": "Removes the [NavigationMesh] with the given ID."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "xform",
                "type": "Transform",
                "index": "1"
              }
            ],
            "name": "navmesh_set_transform",
            "description": "Sets the transform applied to the [NavigationMesh] with the given ID."
          }
        ]
      },
      "name": "Navigation",
      "version": "3.3",
      "constants": {},
      "brief_description": "Mesh-based navigation and pathfinding node.",
      "description": "Provides navigation and pathfinding within a collection of [NavigationMesh]es. By default, these will be automatically collected from child [NavigationMeshInstance] nodes, but they can also be added on the fly with [method navmesh_add]. In addition to basic pathfinding, this class also assists with aligning navigation agents with the meshes they are navigating on.\n\t\t[b]Note:[/b] The current navigation system has many known issues and will not always return optimal paths as expected. These issues will be fixed in Godot 4.0."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/networking/high_level_multiplayer.html",
            "title": "High-level multiplayer"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/537",
            "title": "WebRTC Signaling Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "true",
            "value": "If [code]true[/code], this [NetworkedMultiplayerPeer] refuses new connections.",
            "setter": "set_refuse_new_connections",
            "name": "refuse_new_connections",
            "getter": "is_refusing_new_connections",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "The manner in which to send packets to the [code]target_peer[/code]. See [enum TransferMode].",
            "setter": "set_transfer_mode",
            "name": "transfer_mode",
            "getter": "get_transfer_mode",
            "type": "int",
            "enum": "NetworkedMultiplayerPeer.TransferMode"
          }
        ]
      },
      "inherits": "PacketPeer",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int",
              "enum": "NetworkedMultiplayerPeer.ConnectionStatus"
            },
            "qualifiers": "const",
            "name": "get_connection_status",
            "description": "Returns the current state of the connection. See [enum ConnectionStatus]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_packet_peer",
            "description": "Returns the ID of the [NetworkedMultiplayerPeer] who sent the most recent packet."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_unique_id",
            "description": "Returns the ID of this [NetworkedMultiplayerPeer]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "poll",
            "description": "Waits up to 1 second to receive a new network event."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "set_target_peer",
            "description": "Sets the peer to which packets will be sent.\n\t\t\t\tThe [code]id[/code] can be one of: [constant TARGET_PEER_BROADCAST] to send to all connected peers, [constant TARGET_PEER_SERVER] to send to the peer acting as server, a valid peer ID to send to that specific peer, a negative peer ID to send to all peers except that one. By default, the target peer is [constant TARGET_PEER_BROADCAST]."
          }
        ]
      },
      "name": "NetworkedMultiplayerPeer",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "connection_failed",
            "description": "Emitted when a connection attempt fails."
          },
          {
            "name": "connection_succeeded",
            "description": "Emitted when a connection attempt succeeds."
          },
          {
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "peer_connected",
            "description": "Emitted by the server when a client connects."
          },
          {
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "peer_disconnected",
            "description": "Emitted by the server when a client disconnects."
          },
          {
            "name": "server_disconnected",
            "description": "Emitted by clients when the server disconnects."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "TRANSFER_MODE_UNRELIABLE",
            "enum": "TransferMode"
          },
          {
            "value": "1",
            "name": "TRANSFER_MODE_UNRELIABLE_ORDERED",
            "enum": "TransferMode"
          },
          {
            "value": "2",
            "name": "TRANSFER_MODE_RELIABLE",
            "enum": "TransferMode"
          },
          {
            "value": "0",
            "name": "CONNECTION_DISCONNECTED",
            "enum": "ConnectionStatus"
          },
          {
            "value": "1",
            "name": "CONNECTION_CONNECTING",
            "enum": "ConnectionStatus"
          },
          {
            "value": "2",
            "name": "CONNECTION_CONNECTED",
            "enum": "ConnectionStatus"
          },
          {
            "value": "0",
            "name": "TARGET_PEER_BROADCAST"
          },
          {
            "value": "1",
            "name": "TARGET_PEER_SERVER"
          }
        ]
      },
      "brief_description": "A high-level network interface to simplify multiplayer interactions.",
      "description": "Manages the connection to network peers. Assigns unique IDs to each client connected to the server. See also [MultiplayerAPI].\n\t\t[b]Note:[/b] The high-level multiplayer API protocol is an implementation detail and isn't meant to be used by non-Godot servers. It may change without notice."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0",
            "value": "The stretch mode to use for horizontal stretching/tiling. See [enum NinePatchRect.AxisStretchMode] for possible values.",
            "setter": "set_h_axis_stretch_mode",
            "name": "axis_stretch_horizontal",
            "getter": "get_h_axis_stretch_mode",
            "type": "int",
            "enum": "NinePatchRect.AxisStretchMode"
          },
          {
            "default": "0",
            "value": "The stretch mode to use for vertical stretching/tiling. See [enum NinePatchRect.AxisStretchMode] for possible values.",
            "setter": "set_v_axis_stretch_mode",
            "name": "axis_stretch_vertical",
            "getter": "get_v_axis_stretch_mode",
            "type": "int",
            "enum": "NinePatchRect.AxisStretchMode"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], draw the panel's center. Else, only draw the 9-slice's borders.",
            "setter": "set_draw_center",
            "name": "draw_center",
            "getter": "is_draw_center_enabled",
            "type": "bool"
          },
          {
            "default": "2",
            "setter": "set_mouse_filter",
            "override": "true",
            "name": "mouse_filter",
            "getter": "get_mouse_filter",
            "type": "int",
            "enum": "Control.MouseFilter"
          },
          {
            "default": "0",
            "value": "The height of the 9-slice's bottom row. A margin of 16 means the 9-slice's bottom corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders.",
            "setter": "set_patch_margin",
            "name": "patch_margin_bottom",
            "getter": "get_patch_margin",
            "type": "int"
          },
          {
            "default": "0",
            "value": "The width of the 9-slice's left column. A margin of 16 means the 9-slice's left corners and side will have a width of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders.",
            "setter": "set_patch_margin",
            "name": "patch_margin_left",
            "getter": "get_patch_margin",
            "type": "int"
          },
          {
            "default": "0",
            "value": "The width of the 9-slice's right column. A margin of 16 means the 9-slice's right corners and side will have a width of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders.",
            "setter": "set_patch_margin",
            "name": "patch_margin_right",
            "getter": "get_patch_margin",
            "type": "int"
          },
          {
            "default": "0",
            "value": "The height of the 9-slice's top row. A margin of 16 means the 9-slice's top corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders.",
            "setter": "set_patch_margin",
            "name": "patch_margin_top",
            "getter": "get_patch_margin",
            "type": "int"
          },
          {
            "default": "Rect2( 0, 0, 0, 0 )",
            "value": "Rectangular region of the texture to sample from. If you're working with an atlas, use this property to define the area the 9-slice should use. All other properties are relative to this one. If the rect is empty, NinePatchRect will use the whole texture.",
            "setter": "set_region_rect",
            "name": "region_rect",
            "getter": "get_region_rect",
            "type": "Rect2"
          },
          {
            "value": "The node's texture resource.",
            "setter": "set_texture",
            "name": "texture",
            "getter": "get_texture",
            "type": "Texture"
          }
        ]
      },
      "inherits": "Control",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_patch_margin",
            "description": "Returns the size of the margin identified by the given [enum Margin] constant."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "margin",
                "type": "int",
                "enum": "Margin",
                "index": "0"
              },
              {
                "name": "value",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set_patch_margin",
            "description": "Sets the size of the margin identified by the given [enum Margin] constant to [code]value[/code] in pixels."
          }
        ]
      },
      "name": "NinePatchRect",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "texture_changed",
          "description": "Emitted when the node's texture changes."
        }
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "AXIS_STRETCH_MODE_STRETCH",
            "enum": "AxisStretchMode"
          },
          {
            "value": "1",
            "name": "AXIS_STRETCH_MODE_TILE",
            "enum": "AxisStretchMode"
          },
          {
            "value": "2",
            "name": "AXIS_STRETCH_MODE_TILE_FIT",
            "enum": "AxisStretchMode"
          }
        ]
      },
      "brief_description": "Scalable texture-based frame that tiles the texture's centers and sides, but keeps the corners' original size. Perfect for panels and dialog boxes.",
      "description": "Also known as 9-slice panels, NinePatchRect produces clean panels of any size, based on a small texture. To do so, it splits the texture in a 3×3 grid. When you scale the node, it tiles the texture's sides horizontally or vertically, the center on both axes but it doesn't scale or tile the corners."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/2d/custom_drawing_in_2d.html",
            "title": "Custom drawing in 2D"
          },
          {
            "value": "https://github.com/godotengine/godot-demo-projects/tree/master/2d",
            "title": "All 2D Demos"
          }
        ]
      },
      "members": {
        "member": [
          {
            "value": "Global position.",
            "setter": "set_global_position",
            "name": "global_position",
            "getter": "get_global_position",
            "type": "Vector2"
          },
          {
            "value": "Global rotation in radians.",
            "setter": "set_global_rotation",
            "name": "global_rotation",
            "getter": "get_global_rotation",
            "type": "float"
          },
          {
            "value": "Global rotation in degrees.",
            "setter": "set_global_rotation_degrees",
            "name": "global_rotation_degrees",
            "getter": "get_global_rotation_degrees",
            "type": "float"
          },
          {
            "value": "Global scale.",
            "setter": "set_global_scale",
            "name": "global_scale",
            "getter": "get_global_scale",
            "type": "Vector2"
          },
          {
            "value": "Global [Transform2D].",
            "setter": "set_global_transform",
            "name": "global_transform",
            "getter": "get_global_transform",
            "type": "Transform2D"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "Position, relative to the node's parent.",
            "setter": "set_position",
            "name": "position",
            "getter": "get_position",
            "type": "Vector2"
          },
          {
            "default": "0.0",
            "value": "Rotation in radians, relative to the node's parent.",
            "setter": "set_rotation",
            "name": "rotation",
            "getter": "get_rotation",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Rotation in degrees, relative to the node's parent.",
            "setter": "set_rotation_degrees",
            "name": "rotation_degrees",
            "getter": "get_rotation_degrees",
            "type": "float"
          },
          {
            "default": "Vector2( 1, 1 )",
            "value": "The node's scale. Unscaled value: [code](1, 1)[/code].",
            "setter": "set_scale",
            "name": "scale",
            "getter": "get_scale",
            "type": "Vector2"
          },
          {
            "value": "Local [Transform2D].",
            "setter": "set_transform",
            "name": "transform",
            "getter": "get_transform",
            "type": "Transform2D"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the node's Z index is relative to its parent's Z index. If this node's Z index is 2 and its parent's effective Z index is 3, then this node's effective Z index will be 2 + 3 = 5.",
            "setter": "set_z_as_relative",
            "name": "z_as_relative",
            "getter": "is_z_relative",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "Z index. Controls the order in which the nodes render. A node with a higher Z index will display in front of others. Must be between [constant VisualServer.CANVAS_ITEM_Z_MIN] and [constant VisualServer.CANVAS_ITEM_Z_MAX] (inclusive).",
            "setter": "set_z_index",
            "name": "z_index",
            "getter": "get_z_index",
            "type": "int"
          }
        ]
      },
      "inherits": "CanvasItem",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "ratio",
              "type": "Vector2",
              "index": "0"
            },
            "name": "apply_scale",
            "description": "Multiplies the current scale by the [code]ratio[/code] vector."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "point",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_angle_to",
            "description": "Returns the angle between the node and the [code]point[/code] in radians."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "argument": {
              "name": "parent",
              "type": "Node",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_relative_transform_to_parent",
            "description": "Returns the [Transform2D] relative to this node's parent."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "offset",
              "type": "Vector2",
              "index": "0"
            },
            "name": "global_translate",
            "description": "Adds the [code]offset[/code] vector to the node's global position."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "point",
              "type": "Vector2",
              "index": "0"
            },
            "name": "look_at",
            "description": "Rotates the node so it points towards the [code]point[/code], which is expected to use global coordinates."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "delta",
                "type": "float",
                "index": "0"
              },
              {
                "default": "false",
                "name": "scaled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "move_local_x",
            "description": "Applies a local translation on the node's X axis based on the [method Node._process]'s [code]delta[/code]. If [code]scaled[/code] is [code]false[/code], normalizes the movement."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "delta",
                "type": "float",
                "index": "0"
              },
              {
                "default": "false",
                "name": "scaled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "move_local_y",
            "description": "Applies a local translation on the node's Y axis based on the [method Node._process]'s [code]delta[/code]. If [code]scaled[/code] is [code]false[/code], normalizes the movement."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "radians",
              "type": "float",
              "index": "0"
            },
            "name": "rotate",
            "description": "Applies a rotation to the node, in radians, starting from its current rotation."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "local_point",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "to_global",
            "description": "Transforms the provided local position into a position in global coordinate space. The input is expected to be local relative to the [Node2D] it is called on. e.g. Applying this method to the positions of child nodes will correctly transform their positions into the global coordinate space, but applying it to a node's own position will give an incorrect result, as it will incorporate the node's own transformation into its global position."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "global_point",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "to_local",
            "description": "Transforms the provided global position into a position in local coordinate space. The output will be local relative to the [Node2D] it is called on. e.g. It is appropriate for determining the positions of child nodes, but it is not appropriate for determining its own position relative to its parent."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "offset",
              "type": "Vector2",
              "index": "0"
            },
            "name": "translate",
            "description": "Translates the node by the given [code]offset[/code] in local coordinates."
          }
        ]
      },
      "name": "Node2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "A 2D game object, inherited by all 2D-related nodes. Has a position, rotation, scale, and Z index.",
      "description": "A 2D game object, with a transform (position, rotation, and scale). All 2D nodes, including physics objects and sprites, inherit from Node2D. Use Node2D as a parent node to move, scale and rotate children in a 2D project. Also gives control of the node's render order."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/520",
          "title": "2D Role Playing Game Demo"
        }
      },
      "methods": {
        "method": [
          {
            "return": {
              "type": "NodePath"
            },
            "argument": {
              "name": "from",
              "type": "String",
              "index": "0"
            },
            "name": "NodePath",
            "description": "Creates a NodePath from a string, e.g. [code]\"Path2D/PathFollow2D/Sprite:texture:size\"[/code]. A path is absolute if it starts with a slash. Absolute paths are only valid in the global scene tree, not within individual scenes. In a relative path, [code]\".\"[/code] and [code]\"..\"[/code] indicate the current node and its parent.\n\t\t\t\tThe \"subnames\" optionally included after the path to the target node can point to resources or properties, and can also be nested.\n\t\t\t\tExamples of valid NodePaths (assuming that those nodes exist and have the referenced resources or properties):\n\t\t\t\t[codeblock]\n\t\t\t\t# Points to the Sprite node\n\t\t\t\t\"Path2D/PathFollow2D/Sprite\"\n\t\t\t\t# Points to the Sprite node and its \"texture\" resource.\n\t\t\t\t# get_node() would retrieve \"Sprite\", while get_node_and_resource()\n\t\t\t\t# would retrieve both the Sprite node and the \"texture\" resource.\n\t\t\t\t\"Path2D/PathFollow2D/Sprite:texture\"\n\t\t\t\t# Points to the Sprite node and its \"position\" property.\n\t\t\t\t\"Path2D/PathFollow2D/Sprite:position\"\n\t\t\t\t# Points to the Sprite node and the \"x\" component of its \"position\" property.\n\t\t\t\t\"Path2D/PathFollow2D/Sprite:position:x\"\n\t\t\t\t# Absolute path (from \"root\")\n\t\t\t\t\"/root/Level/Path2D\"\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "NodePath"
            },
            "name": "get_as_property_path",
            "description": "Returns a node path with a colon character ([code]:[/code]) prepended, transforming it to a pure property path with no node name (defaults to resolving from the current node).\n\t\t\t\t[codeblock]\n\t\t\t\t# This will be parsed as a node path to the \"x\" property in the \"position\" node\n\t\t\t\tvar node_path = NodePath(\"position:x\")\n\t\t\t\t# This will be parsed as a node path to the \"x\" component of the \"position\" property in the current node\n\t\t\t\tvar property_path = node_path.get_as_property_path()\n\t\t\t\tprint(property_path) # :position:x\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "String"
            },
            "name": "get_concatenated_subnames",
            "description": "Returns all subnames concatenated with a colon character ([code]:[/code]) as separator, i.e. the right side of the first colon in a node path.\n\t\t\t\t[codeblock]\n\t\t\t\tvar nodepath = NodePath(\"Path2D/PathFollow2D/Sprite:texture:load_path\")\n\t\t\t\tprint(nodepath.get_concatenated_subnames()) # texture:load_path\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "get_name",
            "description": "Gets the node name indicated by [code]idx[/code] (0 to [method get_name_count]).\n\t\t\t\t[codeblock]\n\t\t\t\tvar node_path = NodePath(\"Path2D/PathFollow2D/Sprite\")\n\t\t\t\tprint(node_path.get_name(0)) # Path2D\n\t\t\t\tprint(node_path.get_name(1)) # PathFollow2D\n\t\t\t\tprint(node_path.get_name(2)) # Sprite\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_name_count",
            "description": "Gets the number of node names which make up the path. Subnames (see [method get_subname_count]) are not included.\n\t\t\t\tFor example, [code]\"Path2D/PathFollow2D/Sprite\"[/code] has 3 names."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "get_subname",
            "description": "Gets the resource or property name indicated by [code]idx[/code] (0 to [method get_subname_count]).\n\t\t\t\t[codeblock]\n\t\t\t\tvar node_path = NodePath(\"Path2D/PathFollow2D/Sprite:texture:load_path\")\n\t\t\t\tprint(node_path.get_subname(0)) # texture\n\t\t\t\tprint(node_path.get_subname(1)) # load_path\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_subname_count",
            "description": "Gets the number of resource or property names (\"subnames\") in the path. Each subname is listed after a colon character ([code]:[/code]) in the node path.\n\t\t\t\tFor example, [code]\"Path2D/PathFollow2D/Sprite:texture:load_path\"[/code] has 2 subnames."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_absolute",
            "description": "Returns [code]true[/code] if the node path is absolute (as opposed to relative), which means that it starts with a slash character ([code]/[/code]). Absolute node paths can be used to access the root node ([code]\"/root\"[/code]) or autoloads (e.g. [code]\"/global\"[/code] if a \"global\" autoload was registered)."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_empty",
            "description": "Returns [code]true[/code] if the node path is empty."
          }
        ]
      },
      "name": "NodePath",
      "version": "3.3",
      "constants": {},
      "brief_description": "Pre-parsed scene tree path.",
      "description": "A pre-parsed relative or absolute path in a scene tree, for use with [method Node.get_node] and similar functions. It can reference a node, a resource within a node, or a property of a node or resource. For instance, [code]\"Path2D/PathFollow2D/Sprite:texture:size\"[/code] would refer to the [code]size[/code] property of the [code]texture[/code] resource on the node named [code]\"Sprite\"[/code] which is a child of the other named nodes in the path.\n\t\tYou will usually just pass a string to [method Node.get_node] and it will be automatically converted, but you may occasionally want to parse a path ahead of time with [NodePath] or the literal syntax [code]@\"path\"[/code]. Exporting a [NodePath] variable will give you a node selection widget in the properties panel of the editor, which can often be useful.\n\t\tA [NodePath] is composed of a list of slash-separated node names (like a filesystem path) and an optional colon-separated list of \"subnames\" which can be resources or properties.\n\t\tSome examples of NodePaths include the following:\n\t\t[codeblock]\n\t\t# No leading slash means it is relative to the current node.\n\t\t@\"A\" # Immediate child A\n\t\t@\"A/B\" # A's child B\n\t\t@\".\" # The current node.\n\t\t@\"..\" # The parent node.\n\t\t@\"../C\" # A sibling node C.\n\t\t# A leading slash means it is absolute from the SceneTree.\n\t\t@\"/root\" # Equivalent to get_tree().get_root().\n\t\t@\"/root/Main\" # If your main scene's root node were named \"Main\".\n\t\t@\"/root/MyAutoload\" # If you have an autoloaded node or scene.\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/getting_started/step_by_step/scenes_and_nodes.html",
            "title": "Scenes and nodes"
          },
          {
            "value": "https://github.com/godotengine/godot-demo-projects/",
            "title": "All Demos"
          }
        ]
      },
      "members": {
        "member": [
          {
            "value": "The override to the default [MultiplayerAPI]. Set to [code]null[/code] to use the default [SceneTree] one.",
            "setter": "set_custom_multiplayer",
            "name": "custom_multiplayer",
            "getter": "get_custom_multiplayer",
            "type": "MultiplayerAPI"
          },
          {
            "value": "When a scene is instanced from a file, its topmost node contains the filename from which it was loaded.",
            "setter": "set_filename",
            "name": "filename",
            "getter": "get_filename",
            "type": "String"
          },
          {
            "value": "The [MultiplayerAPI] instance associated with this node. Either the [member custom_multiplayer], or the default SceneTree one (if inside tree).",
            "setter": "",
            "name": "multiplayer",
            "getter": "get_multiplayer",
            "type": "MultiplayerAPI"
          },
          {
            "value": "The name of the node. This name is unique among the siblings (other child nodes from the same parent). When set to an existing name, the node will be automatically renamed.\n\t\t\t[b]Note:[/b] Auto-generated names might include the [code]@[/code] character, which is reserved for unique names when using [method add_child]. When setting the name manually, any [code]@[/code] will be removed.",
            "setter": "set_name",
            "name": "name",
            "getter": "get_name",
            "type": "String"
          },
          {
            "value": "The node owner. A node can have any other node as owner (as long as it is a valid parent, grandparent, etc. ascending in the tree). When saving a node (using [PackedScene]), all the nodes it owns will be saved with it. This allows for the creation of complex [SceneTree]s, with instancing and subinstancing.",
            "setter": "set_owner",
            "name": "owner",
            "getter": "get_owner",
            "type": "Node"
          },
          {
            "default": "0",
            "value": "Pause mode. How the node will behave if the [SceneTree] is paused.",
            "setter": "set_pause_mode",
            "name": "pause_mode",
            "getter": "get_pause_mode",
            "type": "int",
            "enum": "Node.PauseMode"
          },
          {
            "default": "0",
            "value": "The node's priority in the execution order of the enabled processing callbacks (i.e. [constant NOTIFICATION_PROCESS], [constant NOTIFICATION_PHYSICS_PROCESS] and their internal counterparts). Nodes whose process priority value is [i]lower[/i] will have their processing callbacks executed first.",
            "setter": "set_process_priority",
            "name": "process_priority",
            "getter": "get_process_priority",
            "type": "int"
          }
        ]
      },
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "qualifiers": "virtual",
            "name": "_enter_tree",
            "description": "Called when the node enters the [SceneTree] (e.g. upon instancing, scene changing, or after calling [method add_child] in a script). If the node has children, its [method _enter_tree] callback will be called first, and then that of the children.\n\t\t\t\tCorresponds to the [constant NOTIFICATION_ENTER_TREE] notification in [method Object._notification]."
          },
          {
            "return": {
              "type": "void"
            },
            "qualifiers": "virtual",
            "name": "_exit_tree",
            "description": "Called when the node is about to leave the [SceneTree] (e.g. upon freeing, scene changing, or after calling [method remove_child] in a script). If the node has children, its [method _exit_tree] callback will be called last, after all its children have left the tree.\n\t\t\t\tCorresponds to the [constant NOTIFICATION_EXIT_TREE] notification in [method Object._notification] and signal [signal tree_exiting]. To get notified when the node has already left the active tree, connect to the [signal tree_exited]."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "virtual",
            "name": "_get_configuration_warning",
            "description": "The string returned from this method is displayed as a warning in the Scene Dock if the script that overrides it is a [code]tool[/code] script.\n\t\t\t\tReturning an empty string produces no warning.\n\t\t\t\tCall [method update_configuration_warning] when the warning needs to be updated for this node."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "event",
              "type": "InputEvent",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_input",
            "description": "Called when there is an input event. The input event propagates up through the node tree until a node consumes it.\n\t\t\t\tIt is only called if input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process_input].\n\t\t\t\tTo consume the input event and stop it propagating further to other nodes, [method SceneTree.set_input_as_handled] can be called.\n\t\t\t\tFor gameplay input, [method _unhandled_input] and [method _unhandled_key_input] are usually a better fit as they allow the GUI to intercept the events first.\n\t\t\t\t[b]Note:[/b] This method is only called if the node is present in the scene tree (i.e. if it's not orphan)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "delta",
              "type": "float",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_physics_process",
            "description": "Called during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the [code]delta[/code] variable should be constant. [code]delta[/code] is in seconds.\n\t\t\t\tIt is only called if physics processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_physics_process].\n\t\t\t\tCorresponds to the [constant NOTIFICATION_PHYSICS_PROCESS] notification in [method Object._notification].\n\t\t\t\t[b]Note:[/b] This method is only called if the node is present in the scene tree (i.e. if it's not orphan)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "delta",
              "type": "float",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_process",
            "description": "Called during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the [code]delta[/code] time since the previous frame is not constant. [code]delta[/code] is in seconds.\n\t\t\t\tIt is only called if processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process].\n\t\t\t\tCorresponds to the [constant NOTIFICATION_PROCESS] notification in [method Object._notification].\n\t\t\t\t[b]Note:[/b] This method is only called if the node is present in the scene tree (i.e. if it's not orphan)."
          },
          {
            "return": {
              "type": "void"
            },
            "qualifiers": "virtual",
            "name": "_ready",
            "description": "Called when the node is \"ready\", i.e. when both the node and its children have entered the scene tree. If the node has children, their [method _ready] callbacks get triggered first, and the parent node will receive the ready notification afterwards.\n\t\t\t\tCorresponds to the [constant NOTIFICATION_READY] notification in [method Object._notification]. See also the [code]onready[/code] keyword for variables.\n\t\t\t\tUsually used for initialization. For even earlier initialization, [method Object._init] may be used. See also [method _enter_tree].\n\t\t\t\t[b]Note:[/b] [method _ready] may be called only once for each node. After removing a node from the scene tree and adding again, [code]_ready[/code] will not be called for the second time. This can be bypassed with requesting another call with [method request_ready], which may be called anywhere before adding the node again."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "event",
              "type": "InputEvent",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_unhandled_input",
            "description": "Called when an [InputEvent] hasn't been consumed by [method _input] or any GUI. The input event propagates up through the node tree until a node consumes it.\n\t\t\t\tIt is only called if unhandled input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process_unhandled_input].\n\t\t\t\tTo consume the input event and stop it propagating further to other nodes, [method SceneTree.set_input_as_handled] can be called.\n\t\t\t\tFor gameplay input, this and [method _unhandled_key_input] are usually a better fit than [method _input] as they allow the GUI to intercept the events first.\n\t\t\t\t[b]Note:[/b] This method is only called if the node is present in the scene tree (i.e. if it's not orphan)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "event",
              "type": "InputEventKey",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_unhandled_key_input",
            "description": "Called when an [InputEventKey] hasn't been consumed by [method _input] or any GUI. The input event propagates up through the node tree until a node consumes it.\n\t\t\t\tIt is only called if unhandled key input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process_unhandled_key_input].\n\t\t\t\tTo consume the input event and stop it propagating further to other nodes, [method SceneTree.set_input_as_handled] can be called.\n\t\t\t\tFor gameplay input, this and [method _unhandled_input] are usually a better fit than [method _input] as they allow the GUI to intercept the events first.\n\t\t\t\t[b]Note:[/b] This method is only called if the node is present in the scene tree (i.e. if it's not orphan)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "node",
                "type": "Node",
                "index": "0"
              },
              {
                "default": "false",
                "name": "legible_unique_name",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "add_child",
            "description": "Adds a child node. Nodes can have any number of children, but every child must have a unique name. Child nodes are automatically deleted when the parent node is deleted, so an entire scene can be removed by deleting its topmost node.\n\t\t\t\tIf [code]legible_unique_name[/code] is [code]true[/code], the child node will have a human-readable name based on the name of the node being instanced instead of its type.\n\t\t\t\t[b]Note:[/b] If the child node already has a parent, the function will fail. Use [method remove_child] first to remove the node from its current parent. For example:\n\t\t\t\t[codeblock]\n\t\t\t\tif child_node.get_parent():\n\t\t\t\t    child_node.get_parent().remove_child(child_node)\n\t\t\t\tadd_child(child_node)\n\t\t\t\t[/codeblock]\n\t\t\t\t[b]Note:[/b] If you want a child to be persisted to a [PackedScene], you must set [member owner] in addition to calling [method add_child]. This is typically relevant for [url=https://godot.readthedocs.io/en/3.2/tutorials/misc/running_code_in_the_editor.html]tool scripts[/url] and [url=https://godot.readthedocs.io/en/latest/tutorials/plugins/editor/index.html]editor plugins[/url]. If [method add_child] is called without setting [member owner], the newly added [Node] will not be visible in the scene tree, though it will be visible in the 2D/3D view."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "node",
                "type": "Node",
                "index": "0"
              },
              {
                "name": "child_node",
                "type": "Node",
                "index": "1"
              },
              {
                "default": "false",
                "name": "legible_unique_name",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "add_child_below_node",
            "description": "Adds [code]child_node[/code] as a child. The child is placed below the given [code]node[/code] in the list of children.\n\t\t\t\tIf [code]legible_unique_name[/code] is [code]true[/code], the child node will have a human-readable name based on the name of the node being instanced instead of its type."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "group",
                "type": "String",
                "index": "0"
              },
              {
                "default": "false",
                "name": "persistent",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "add_to_group",
            "description": "Adds the node to a group. Groups are helpers to name and organize a subset of nodes, for example \"enemies\" or \"collectables\". A node can be in any number of groups. Nodes can be assigned a group at any time, but will not be added until they are inside the scene tree (see [method is_inside_tree]). See notes in the description, and the group methods in [SceneTree].\n\t\t\t\tThe [code]persistent[/code] option is used when packing node to [PackedScene] and saving to file. Non-persistent groups aren't stored."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "can_process",
            "description": "Returns [code]true[/code] if the node can process while the scene tree is paused (see [member pause_mode]). Always returns [code]true[/code] if the scene tree is not paused, and [code]false[/code] if the node is not in the tree."
          },
          {
            "return": {
              "type": "Node"
            },
            "argument": {
              "default": "15",
              "name": "flags",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "duplicate",
            "description": "Duplicates the node, returning a new node.\n\t\t\t\tYou can fine-tune the behavior using the [code]flags[/code] (see [enum DuplicateFlags]).\n\t\t\t\t[b]Note:[/b] It will not work properly if the node contains a script with constructor arguments (i.e. needs to supply arguments to [method Object._init] method). In that case, the node will be duplicated without a script."
          },
          {
            "return": {
              "type": "Node"
            },
            "argument": [
              {
                "name": "mask",
                "type": "String",
                "index": "0"
              },
              {
                "default": "true",
                "name": "recursive",
                "type": "bool",
                "index": "1"
              },
              {
                "default": "true",
                "name": "owned",
                "type": "bool",
                "index": "2"
              }
            ],
            "qualifiers": "const",
            "name": "find_node",
            "description": "Finds a descendant of this node whose name matches [code]mask[/code] as in [method String.match] (i.e. case-sensitive, but [code]\"*\"[/code] matches zero or more characters and [code]\"?\"[/code] matches any single character except [code]\".\"[/code]).\n\t\t\t\t[b]Note:[/b] It does not match against the full path, just against individual node names.\n\t\t\t\tIf [code]owned[/code] is [code]true[/code], this method only finds nodes whose owner is this node. This is especially important for scenes instantiated through a script, because those scenes don't have an owner.\n\t\t\t\t[b]Note:[/b] As this method walks through all the descendants of the node, it is the slowest way to get a reference to another node. Whenever possible, consider using [method get_node] instead. To avoid using [method find_node] too often, consider caching the node reference into a variable."
          },
          {
            "return": {
              "type": "Node"
            },
            "argument": {
              "name": "mask",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "find_parent",
            "description": "Finds the first parent of the current node whose name matches [code]mask[/code] as in [method String.match] (i.e. case-sensitive, but [code]\"*\"[/code] matches zero or more characters and [code]\"?\"[/code] matches any single character except [code]\".\"[/code]).\n\t\t\t\t[b]Note:[/b] It does not match against the full path, just against individual node names.\n\t\t\t\t[b]Note:[/b] As this method walks upwards in the scene tree, it can be slow in large, deeply nested scene trees. Whenever possible, consider using [method get_node] instead. To avoid using [method find_parent] too often, consider caching the node reference into a variable."
          },
          {
            "return": {
              "type": "Node"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_child",
            "description": "Returns a child node by its index (see [method get_child_count]). This method is often used for iterating all children of a node.\n\t\t\t\tTo access a child node via its name, use [method get_node]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_child_count",
            "description": "Returns the number of child nodes."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_children",
            "description": "Returns an array of references to node's children."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_groups",
            "description": "Returns an array listing the groups that the node is a member of."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_index",
            "description": "Returns the node's index, i.e. its position among the siblings of its parent."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_network_master",
            "description": "Returns the peer ID of the network master for this node. See [method set_network_master]."
          },
          {
            "return": {
              "type": "Node"
            },
            "argument": {
              "name": "path",
              "type": "NodePath",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_node",
            "description": "Fetches a node. The [NodePath] can be either a relative path (from the current node) or an absolute path (in the scene tree) to a node. If the path does not exist, a [code]null instance[/code] is returned and an error is logged. Attempts to access methods on the return value will result in an \"Attempt to call <method> on a null instance.\" error.\n\t\t\t\t[b]Note:[/b] Fetching absolute paths only works when the node is inside the scene tree (see [method is_inside_tree]).\n\t\t\t\t[b]Example:[/b] Assume your current node is Character and the following tree:\n\t\t\t\t[codeblock]\n\t\t\t\t/root\n\t\t\t\t/root/Character\n\t\t\t\t/root/Character/Sword\n\t\t\t\t/root/Character/Backpack/Dagger\n\t\t\t\t/root/MyGame\n\t\t\t\t/root/Swamp/Alligator\n\t\t\t\t/root/Swamp/Mosquito\n\t\t\t\t/root/Swamp/Goblin\n\t\t\t\t[/codeblock]\n\t\t\t\tPossible paths are:\n\t\t\t\t[codeblock]\n\t\t\t\tget_node(\"Sword\")\n\t\t\t\tget_node(\"Backpack/Dagger\")\n\t\t\t\tget_node(\"../Swamp/Alligator\")\n\t\t\t\tget_node(\"/root/MyGame\")\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "path",
              "type": "NodePath",
              "index": "0"
            },
            "name": "get_node_and_resource",
            "description": "Fetches a node and one of its resources as specified by the [NodePath]'s subname (e.g. [code]Area2D/CollisionShape2D:shape[/code]). If several nested resources are specified in the [NodePath], the last one will be fetched.\n\t\t\t\tThe return value is an array of size 3: the first index points to the [Node] (or [code]null[/code] if not found), the second index points to the [Resource] (or [code]null[/code] if not found), and the third index is the remaining [NodePath], if any.\n\t\t\t\tFor example, assuming that [code]Area2D/CollisionShape2D[/code] is a valid node and that its [code]shape[/code] property has been assigned a [RectangleShape2D] resource, one could have this kind of output:\n\t\t\t\t[codeblock]\n\t\t\t\tprint(get_node_and_resource(\"Area2D/CollisionShape2D\")) # [[CollisionShape2D:1161], Null, ]\n\t\t\t\tprint(get_node_and_resource(\"Area2D/CollisionShape2D:shape\")) # [[CollisionShape2D:1161], [RectangleShape2D:1156], ]\n\t\t\t\tprint(get_node_and_resource(\"Area2D/CollisionShape2D:shape:extents\")) # [[CollisionShape2D:1161], [RectangleShape2D:1156], :extents]\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "Node"
            },
            "argument": {
              "name": "path",
              "type": "NodePath",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_node_or_null",
            "description": "Similar to [method get_node], but does not log an error if [code]path[/code] does not point to a valid [Node]."
          },
          {
            "return": {
              "type": "Node"
            },
            "qualifiers": "const",
            "name": "get_parent",
            "description": "Returns the parent node of the current node, or a [code]null instance[/code] if the node lacks a parent."
          },
          {
            "return": {
              "type": "NodePath"
            },
            "qualifiers": "const",
            "name": "get_path",
            "description": "Returns the absolute path of the current node. This only works if the current node is inside the scene tree (see [method is_inside_tree])."
          },
          {
            "return": {
              "type": "NodePath"
            },
            "argument": {
              "name": "node",
              "type": "Node",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_path_to",
            "description": "Returns the relative [NodePath] from this node to the specified [code]node[/code]. Both nodes must be in the same scene or the function will fail."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_physics_process_delta_time",
            "description": "Returns the time elapsed (in seconds) since the last physics-bound frame (see [method _physics_process]). This is always a constant value in physics processing unless the frames per second is changed via [member Engine.iterations_per_second]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_position_in_parent",
            "description": "Returns the node's order in the scene tree branch. For example, if called on the first child node the position is [code]0[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_process_delta_time",
            "description": "Returns the time elapsed (in seconds) since the last process callback. This value may vary from frame to frame."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "get_scene_instance_load_placeholder",
            "description": "Returns [code]true[/code] if this is an instance load placeholder. See [InstancePlaceholder]."
          },
          {
            "return": {
              "type": "SceneTree"
            },
            "qualifiers": "const",
            "name": "get_tree",
            "description": "Returns the [SceneTree] that contains this node."
          },
          {
            "return": {
              "type": "Viewport"
            },
            "qualifiers": "const",
            "name": "get_viewport",
            "description": "Returns the node's [Viewport]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "path",
              "type": "NodePath",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_node",
            "description": "Returns [code]true[/code] if the node that the [NodePath] points to exists."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "path",
              "type": "NodePath",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_node_and_resource",
            "description": "Returns [code]true[/code] if the [NodePath] points to a valid node and its subname points to a valid resource, e.g. [code]Area2D/CollisionShape2D:shape[/code]. Properties with a non-[Resource] type (e.g. nodes or primitive math types) are not considered resources."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "node",
              "type": "Node",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_a_parent_of",
            "description": "Returns [code]true[/code] if the given node is a direct or indirect child of the current node."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_displayed_folded",
            "description": "Returns [code]true[/code] if the node is folded (collapsed) in the Scene dock."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "node",
              "type": "Node",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_greater_than",
            "description": "Returns [code]true[/code] if the given node occurs later in the scene hierarchy than the current node."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "group",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_in_group",
            "description": "Returns [code]true[/code] if this node is in the specified group. See notes in the description, and the group methods in [SceneTree]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_inside_tree",
            "description": "Returns [code]true[/code] if this node is currently inside a [SceneTree]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_network_master",
            "description": "Returns [code]true[/code] if the local system is the master of this node."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_physics_processing",
            "description": "Returns [code]true[/code] if physics processing is enabled (see [method set_physics_process])."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_physics_processing_internal",
            "description": "Returns [code]true[/code] if internal physics processing is enabled (see [method set_physics_process_internal])."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_processing",
            "description": "Returns [code]true[/code] if processing is enabled (see [method set_process])."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_processing_input",
            "description": "Returns [code]true[/code] if the node is processing input (see [method set_process_input])."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_processing_internal",
            "description": "Returns [code]true[/code] if internal processing is enabled (see [method set_process_internal])."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_processing_unhandled_input",
            "description": "Returns [code]true[/code] if the node is processing unhandled input (see [method set_process_unhandled_input])."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_processing_unhandled_key_input",
            "description": "Returns [code]true[/code] if the node is processing unhandled key input (see [method set_process_unhandled_key_input])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "child_node",
                "type": "Node",
                "index": "0"
              },
              {
                "name": "to_position",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "move_child",
            "description": "Moves a child node to a different position (order) among the other children. Since calls, signals, etc are performed by tree order, changing the order of children nodes may be useful."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "print_stray_nodes",
            "description": "Prints all stray nodes (nodes outside the [SceneTree]). Used for debugging. Works only in debug builds."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "print_tree",
            "description": "Prints the tree to stdout. Used mainly for debugging purposes. This version displays the path relative to the current node, and is good for copy/pasting into the [method get_node] function.\n\t\t\t\t[b]Example output:[/b]\n\t\t\t\t[codeblock]\n\t\t\t\tTheGame\n\t\t\t\tTheGame/Menu\n\t\t\t\tTheGame/Menu/Label\n\t\t\t\tTheGame/Menu/Camera2D\n\t\t\t\tTheGame/SplashScreen\n\t\t\t\tTheGame/SplashScreen/Camera2D\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "name": "print_tree_pretty",
            "description": "Similar to [method print_tree], this prints the tree to stdout. This version displays a more graphical representation similar to what is displayed in the scene inspector. It is useful for inspecting larger trees.\n\t\t\t\t[b]Example output:[/b]\n\t\t\t\t[codeblock]\n\t\t\t\t ┖╴TheGame\n\t\t\t\t    ┠╴Menu\n\t\t\t\t    ┃  ┠╴Label\n\t\t\t\t    ┃  ┖╴Camera2D\n\t\t\t\t    ┖╴SplashScreen\n\t\t\t\t       ┖╴Camera2D\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "method",
                "type": "String",
                "index": "0"
              },
              {
                "default": "[  ]",
                "name": "args",
                "type": "Array",
                "index": "1"
              },
              {
                "default": "false",
                "name": "parent_first",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "propagate_call",
            "description": "Calls the given method (if present) with the arguments given in [code]args[/code] on this node and recursively on all its children. If the [code]parent_first[/code] argument is [code]true[/code], the method will be called on the current node first, then on all its children. If [code]parent_first[/code] is [code]false[/code], the children will be called first."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "what",
              "type": "int",
              "index": "0"
            },
            "name": "propagate_notification",
            "description": "Notifies the current node and all its children recursively by calling [method Object.notification] on all of them."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "queue_free",
            "description": "Queues a node for deletion at the end of the current frame. When deleted, all of its child nodes will be deleted as well. This method ensures it's safe to delete the node, contrary to [method Object.free]. Use [method Object.is_queued_for_deletion] to check whether a node will be deleted at the end of the frame.\n\t\t\t\t[b]Important:[/b] If you have a variable pointing to a node, it will [i]not[/i] be assigned to [code]null[/code] once the node is freed. Instead, it will point to a [i]previously freed instance[/i] and you should validate it with [method @GDScript.is_instance_valid] before attempting to call its methods or access its properties."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "raise",
            "description": "Moves this node to the bottom of parent node's children hierarchy. This is often useful in GUIs ([Control] nodes), because their order of drawing depends on their order in the tree. The top Node is drawn first, then any siblings below the top Node in the hierarchy are successively drawn on top of it. After using [code]raise[/code], a Control will be drawn on top of its siblings."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "remove_and_skip",
            "description": "Removes a node and sets all its children as children of the parent node (if it exists). All event subscriptions that pass by the removed node will be unsubscribed."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "node",
              "type": "Node",
              "index": "0"
            },
            "name": "remove_child",
            "description": "Removes a child node. The node is NOT deleted and must be deleted manually."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "group",
              "type": "String",
              "index": "0"
            },
            "name": "remove_from_group",
            "description": "Removes a node from a group. See notes in the description, and the group methods in [SceneTree]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "node",
                "type": "Node",
                "index": "0"
              },
              {
                "default": "false",
                "name": "keep_data",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "replace_by",
            "description": "Replaces a node in a scene by the given one. Subscriptions that pass through this node will be lost."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "request_ready",
            "description": "Requests that [code]_ready[/code] be called again. Note that the method won't be called immediately, but is scheduled for when the node is added to the scene tree again (see [method _ready]). [code]_ready[/code] is called only for the node which requested it, which means that you need to request ready for each child if you want them to call [code]_ready[/code] too (in which case, [code]_ready[/code] will be called in the same order as it would normally)."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "method",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "vararg",
            "name": "rpc",
            "description": "Sends a remote procedure call request for the given [code]method[/code] to peers on the network (and locally), optionally sending all additional arguments as arguments to the method called by the RPC. The call request will only be received by nodes with the same [NodePath], including the exact same node name. Behaviour depends on the RPC configuration for the given method, see [method rpc_config]. Methods are not exposed to RPCs by default. See also [method rset] and [method rset_config] for properties. Returns an empty [Variant].\n\t\t\t\t[b]Note:[/b] You can only safely use RPCs on clients after you received the [code]connected_to_server[/code] signal from the [SceneTree]. You also need to keep track of the connection state, either by the [SceneTree] signals like [code]server_disconnected[/code] or by checking [code]SceneTree.network_peer.get_connection_status() == CONNECTION_CONNECTED[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "method",
                "type": "String",
                "index": "0"
              },
              {
                "name": "mode",
                "type": "int",
                "enum": "MultiplayerAPI.RPCMode",
                "index": "1"
              }
            ],
            "name": "rpc_config",
            "description": "Changes the RPC mode for the given [code]method[/code] to the given [code]mode[/code]. See [enum MultiplayerAPI.RPCMode]. An alternative is annotating methods and properties with the corresponding keywords ([code]remote[/code], [code]master[/code], [code]puppet[/code], [code]remotesync[/code], [code]mastersync[/code], [code]puppetsync[/code]). By default, methods are not exposed to networking (and RPCs). See also [method rset] and [method rset_config] for properties."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "peer_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "method",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "vararg",
            "name": "rpc_id",
            "description": "Sends a [method rpc] to a specific peer identified by [code]peer_id[/code] (see [method NetworkedMultiplayerPeer.set_target_peer]). Returns an empty [Variant]."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "method",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "vararg",
            "name": "rpc_unreliable",
            "description": "Sends a [method rpc] using an unreliable protocol. Returns an empty [Variant]."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "peer_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "method",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "vararg",
            "name": "rpc_unreliable_id",
            "description": "Sends a [method rpc] to a specific peer identified by [code]peer_id[/code] using an unreliable protocol (see [method NetworkedMultiplayerPeer.set_target_peer]). Returns an empty [Variant]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "property",
                "type": "String",
                "index": "0"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "rset",
            "description": "Remotely changes a property's value on other peers (and locally). Behaviour depends on the RPC configuration for the given property, see [method rset_config]. See also [method rpc] for RPCs for methods, most information applies to this method as well."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "property",
                "type": "String",
                "index": "0"
              },
              {
                "name": "mode",
                "type": "int",
                "enum": "MultiplayerAPI.RPCMode",
                "index": "1"
              }
            ],
            "name": "rset_config",
            "description": "Changes the RPC mode for the given [code]property[/code] to the given [code]mode[/code]. See [enum MultiplayerAPI.RPCMode]. An alternative is annotating methods and properties with the corresponding keywords ([code]remote[/code], [code]master[/code], [code]puppet[/code], [code]remotesync[/code], [code]mastersync[/code], [code]puppetsync[/code]). By default, properties are not exposed to networking (and RPCs). See also [method rpc] and [method rpc_config] for methods."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "peer_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "property",
                "type": "String",
                "index": "1"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "2"
              }
            ],
            "name": "rset_id",
            "description": "Remotely changes the property's value on a specific peer identified by [code]peer_id[/code] (see [method NetworkedMultiplayerPeer.set_target_peer])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "property",
                "type": "String",
                "index": "0"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "rset_unreliable",
            "description": "Remotely changes the property's value on other peers (and locally) using an unreliable protocol."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "peer_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "property",
                "type": "String",
                "index": "1"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "2"
              }
            ],
            "name": "rset_unreliable_id",
            "description": "Remotely changes property's value on a specific peer identified by [code]peer_id[/code] using an unreliable protocol (see [method NetworkedMultiplayerPeer.set_target_peer])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "fold",
              "type": "bool",
              "index": "0"
            },
            "name": "set_display_folded",
            "description": "Sets the folded state of the node in the Scene dock."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "default": "true",
                "name": "recursive",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_network_master",
            "description": "Sets the node's network master to the peer with the given peer ID. The network master is the peer that has authority over the node on the network. Useful in conjunction with the [code]master[/code] and [code]puppet[/code] keywords. Inherited from the parent node by default, which ultimately defaults to peer ID 1 (the server). If [code]recursive[/code], the given peer is recursively set as the master for all children of this node."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enable",
              "type": "bool",
              "index": "0"
            },
            "name": "set_physics_process",
            "description": "Enables or disables physics (i.e. fixed framerate) processing. When a node is being processed, it will receive a [constant NOTIFICATION_PHYSICS_PROCESS] at a fixed (usually 60 FPS, see [member Engine.iterations_per_second] to change) interval (and the [method _physics_process] callback will be called if exists). Enabled automatically if [method _physics_process] is overridden. Any calls to this before [method _ready] will be ignored."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enable",
              "type": "bool",
              "index": "0"
            },
            "name": "set_physics_process_internal",
            "description": "Enables or disables internal physics for this node. Internal physics processing happens in isolation from the normal [method _physics_process] calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or physics processing is disabled for scripting ([method set_physics_process]). Only useful for advanced uses to manipulate built-in nodes' behavior.\n\t\t\t\t[b]Warning:[/b] Built-in Nodes rely on the internal processing for their own logic, so changing this value from your code may lead to unexpected behavior. Script access to this internal logic is provided for specific advanced uses, but is unsafe and not supported."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enable",
              "type": "bool",
              "index": "0"
            },
            "name": "set_process",
            "description": "Enables or disables processing. When a node is being processed, it will receive a [constant NOTIFICATION_PROCESS] on every drawn frame (and the [method _process] callback will be called if exists). Enabled automatically if [method _process] is overridden. Any calls to this before [method _ready] will be ignored."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enable",
              "type": "bool",
              "index": "0"
            },
            "name": "set_process_input",
            "description": "Enables or disables input processing. This is not required for GUI controls! Enabled automatically if [method _input] is overridden. Any calls to this before [method _ready] will be ignored."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enable",
              "type": "bool",
              "index": "0"
            },
            "name": "set_process_internal",
            "description": "Enables or disabled internal processing for this node. Internal processing happens in isolation from the normal [method _process] calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or processing is disabled for scripting ([method set_process]). Only useful for advanced uses to manipulate built-in nodes' behavior.\n\t\t\t\t[b]Warning:[/b] Built-in Nodes rely on the internal processing for their own logic, so changing this value from your code may lead to unexpected behavior. Script access to this internal logic is provided for specific advanced uses, but is unsafe and not supported."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enable",
              "type": "bool",
              "index": "0"
            },
            "name": "set_process_unhandled_input",
            "description": "Enables unhandled input processing. This is not required for GUI controls! It enables the node to receive all input that was not previously handled (usually by a [Control]). Enabled automatically if [method _unhandled_input] is overridden. Any calls to this before [method _ready] will be ignored."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enable",
              "type": "bool",
              "index": "0"
            },
            "name": "set_process_unhandled_key_input",
            "description": "Enables unhandled key input processing. Enabled automatically if [method _unhandled_key_input] is overridden. Any calls to this before [method _ready] will be ignored."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "load_placeholder",
              "type": "bool",
              "index": "0"
            },
            "name": "set_scene_instance_load_placeholder",
            "description": "Sets whether this is an instance load placeholder. See [InstancePlaceholder]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "update_configuration_warning",
            "description": "Updates the warning displayed for this node in the Scene Dock.\n\t\t\t\tUse [method _get_configuration_warning] to setup the warning message to display."
          }
        ]
      },
      "name": "Node",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "ready",
            "description": "Emitted when the node is ready."
          },
          {
            "name": "renamed",
            "description": "Emitted when the node is renamed."
          },
          {
            "name": "tree_entered",
            "description": "Emitted when the node enters the tree."
          },
          {
            "name": "tree_exited",
            "description": "Emitted after the node exits the tree and is no longer active."
          },
          {
            "name": "tree_exiting",
            "description": "Emitted when the node is still active but about to exit the tree. This is the right place for de-initialization (or a \"destructor\", if you will)."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "10",
            "name": "NOTIFICATION_ENTER_TREE"
          },
          {
            "value": "11",
            "name": "NOTIFICATION_EXIT_TREE"
          },
          {
            "value": "12",
            "name": "NOTIFICATION_MOVED_IN_PARENT"
          },
          {
            "value": "13",
            "name": "NOTIFICATION_READY"
          },
          {
            "value": "14",
            "name": "NOTIFICATION_PAUSED"
          },
          {
            "value": "15",
            "name": "NOTIFICATION_UNPAUSED"
          },
          {
            "value": "16",
            "name": "NOTIFICATION_PHYSICS_PROCESS"
          },
          {
            "value": "17",
            "name": "NOTIFICATION_PROCESS"
          },
          {
            "value": "18",
            "name": "NOTIFICATION_PARENTED"
          },
          {
            "value": "19",
            "name": "NOTIFICATION_UNPARENTED"
          },
          {
            "value": "20",
            "name": "NOTIFICATION_INSTANCED"
          },
          {
            "value": "21",
            "name": "NOTIFICATION_DRAG_BEGIN"
          },
          {
            "value": "22",
            "name": "NOTIFICATION_DRAG_END"
          },
          {
            "value": "23",
            "name": "NOTIFICATION_PATH_CHANGED"
          },
          {
            "value": "25",
            "name": "NOTIFICATION_INTERNAL_PROCESS"
          },
          {
            "value": "26",
            "name": "NOTIFICATION_INTERNAL_PHYSICS_PROCESS"
          },
          {
            "value": "27",
            "name": "NOTIFICATION_POST_ENTER_TREE"
          },
          {
            "value": "1002",
            "name": "NOTIFICATION_WM_MOUSE_ENTER"
          },
          {
            "value": "1003",
            "name": "NOTIFICATION_WM_MOUSE_EXIT"
          },
          {
            "value": "1004",
            "name": "NOTIFICATION_WM_FOCUS_IN"
          },
          {
            "value": "1005",
            "name": "NOTIFICATION_WM_FOCUS_OUT"
          },
          {
            "value": "1006",
            "name": "NOTIFICATION_WM_QUIT_REQUEST"
          },
          {
            "value": "1007",
            "name": "NOTIFICATION_WM_GO_BACK_REQUEST"
          },
          {
            "value": "1008",
            "name": "NOTIFICATION_WM_UNFOCUS_REQUEST"
          },
          {
            "value": "1009",
            "name": "NOTIFICATION_OS_MEMORY_WARNING"
          },
          {
            "value": "1010",
            "name": "NOTIFICATION_TRANSLATION_CHANGED"
          },
          {
            "value": "1011",
            "name": "NOTIFICATION_WM_ABOUT"
          },
          {
            "value": "1012",
            "name": "NOTIFICATION_CRASH"
          },
          {
            "value": "1013",
            "name": "NOTIFICATION_OS_IME_UPDATE"
          },
          {
            "value": "1014",
            "name": "NOTIFICATION_APP_RESUMED"
          },
          {
            "value": "1015",
            "name": "NOTIFICATION_APP_PAUSED"
          },
          {
            "value": "0",
            "name": "PAUSE_MODE_INHERIT",
            "enum": "PauseMode"
          },
          {
            "value": "1",
            "name": "PAUSE_MODE_STOP",
            "enum": "PauseMode"
          },
          {
            "value": "2",
            "name": "PAUSE_MODE_PROCESS",
            "enum": "PauseMode"
          },
          {
            "value": "1",
            "name": "DUPLICATE_SIGNALS",
            "enum": "DuplicateFlags"
          },
          {
            "value": "2",
            "name": "DUPLICATE_GROUPS",
            "enum": "DuplicateFlags"
          },
          {
            "value": "4",
            "name": "DUPLICATE_SCRIPTS",
            "enum": "DuplicateFlags"
          },
          {
            "value": "8",
            "name": "DUPLICATE_USE_INSTANCING",
            "enum": "DuplicateFlags"
          }
        ]
      },
      "brief_description": "Base class for all [i]scene[/i] objects.",
      "description": "Nodes are Godot's building blocks. They can be assigned as the child of another node, resulting in a tree arrangement. A given node can contain any number of nodes as children with the requirement that all siblings (direct children of a node) should have unique names.\n\t\tA tree of nodes is called a [i]scene[/i]. Scenes can be saved to the disk and then instanced into other scenes. This allows for very high flexibility in the architecture and data model of Godot projects.\n\t\t[b]Scene tree:[/b] The [SceneTree] contains the active tree of nodes. When a node is added to the scene tree, it receives the [constant NOTIFICATION_ENTER_TREE] notification and its [method _enter_tree] callback is triggered. Child nodes are always added [i]after[/i] their parent node, i.e. the [method _enter_tree] callback of a parent node will be triggered before its child's.\n\t\tOnce all nodes have been added in the scene tree, they receive the [constant NOTIFICATION_READY] notification and their respective [method _ready] callbacks are triggered. For groups of nodes, the [method _ready] callback is called in reverse order, starting with the children and moving up to the parent nodes.\n\t\tThis means that when adding a node to the scene tree, the following order will be used for the callbacks: [method _enter_tree] of the parent, [method _enter_tree] of the children, [method _ready] of the children and finally [method _ready] of the parent (recursively for the entire scene tree).\n\t\t[b]Processing:[/b] Nodes can override the \"process\" state, so that they receive a callback on each frame requesting them to process (do something). Normal processing (callback [method _process], toggled with [method set_process]) happens as fast as possible and is dependent on the frame rate, so the processing time [i]delta[/i] (in seconds) is passed as an argument. Physics processing (callback [method _physics_process], toggled with [method set_physics_process]) happens a fixed number of times per second (60 by default) and is useful for code related to the physics engine.\n\t\tNodes can also process input events. When present, the [method _input] function will be called for each input that the program receives. In many cases, this can be overkill (unless used for simple projects), and the [method _unhandled_input] function might be preferred; it is called when the input event was not handled by anyone else (typically, GUI [Control] nodes), ensuring that the node only receives the events that were meant for it.\n\t\tTo keep track of the scene hierarchy (especially when instancing scenes into other scenes), an \"owner\" can be set for the node with the [member owner] property. This keeps track of who instanced what. This is mostly useful when writing editors and tools, though.\n\t\tFinally, when a node is freed with [method Object.free] or [method queue_free], it will also free all its children.\n\t\t[b]Groups:[/b] Nodes can be added to as many groups as you want to be easy to manage, you could create groups like \"enemies\" or \"collectables\" for example, depending on your game. See [method add_to_group], [method is_in_group] and [method remove_from_group]. You can then retrieve all nodes in these groups, iterate them and even call methods on groups via the methods on [SceneTree].\n\t\t[b]Networking with nodes:[/b] After connecting to a server (or making one, see [NetworkedMultiplayerENet]), it is possible to use the built-in RPC (remote procedure call) system to communicate over the network. By calling [method rpc] with a method name, it will be called locally and in all connected peers (peers = clients and the server that accepts connections). To identify which node receives the RPC call, Godot will use its [NodePath] (make sure node names are the same on all peers). Also, take a look at the high-level networking tutorial and corresponding demos."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/getting_started/workflow/best_practices/node_alternatives.html",
            "title": "When and how to avoid using nodes for everything"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/getting_started/scripting/gdscript/gdscript_exports.html#advanced-exports",
            "title": "Advanced exports using _get_property_list()"
          }
        ]
      },
      "methods": {
        "method": [
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "property",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_get",
            "description": "Virtual method which can be overridden to customize the return value of [method get].\n\t\t\t\tReturns the given property. Returns [code]null[/code] if the [code]property[/code] does not exist."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "virtual",
            "name": "_get_property_list",
            "description": "Virtual method which can be overridden to customize the return value of [method get_property_list].\n\t\t\t\tReturns the object's property list as an [Array] of dictionaries.\n\t\t\t\tEach property's [Dictionary] must contain at least [code]name: String[/code] and [code]type: int[/code] (see [enum Variant.Type]) entries. Optionally, it can also include [code]hint: int[/code] (see [enum PropertyHint]), [code]hint_string: String[/code], and [code]usage: int[/code] (see [enum PropertyUsageFlags])."
          },
          {
            "return": {
              "type": "void"
            },
            "qualifiers": "virtual",
            "name": "_init",
            "description": "Called when the object is initialized."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "what",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_notification",
            "description": "Called whenever the object receives a notification, which is identified in [code]what[/code] by a constant. The base [Object] has two constants [constant NOTIFICATION_POSTINITIALIZE] and [constant NOTIFICATION_PREDELETE], but subclasses such as [Node] define a lot more notifications which are also received by this method."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "property",
                "type": "String",
                "index": "0"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "_set",
            "description": "Virtual method which can be overridden to customize the return value of [method set].\n\t\t\t\tSets a property. Returns [code]true[/code] if the [code]property[/code] exists."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "virtual",
            "name": "_to_string",
            "description": "Virtual method which can be overridden to customize the return value of [method to_string], and thus the object's representation where it is converted to a string, e.g. with [code]print(obj)[/code].\n\t\t\t\tReturns a [String] representing the object. If not overridden, defaults to [code]\"[ClassName:RID]\"[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "signal",
                "type": "String",
                "index": "0"
              },
              {
                "default": "[  ]",
                "name": "arguments",
                "type": "Array",
                "index": "1"
              }
            ],
            "name": "add_user_signal",
            "description": "Adds a user-defined [code]signal[/code]. Arguments are optional, but can be added as an [Array] of dictionaries, each containing [code]name: String[/code] and [code]type: int[/code] (see [enum Variant.Type]) entries."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "method",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "vararg",
            "name": "call",
            "description": "Calls the [code]method[/code] on the object and returns the result. This method supports a variable number of arguments, so parameters are passed as a comma separated list. Example:\n\t\t\t\t[codeblock]\n\t\t\t\tcall(\"set\", \"position\", Vector2(42.0, 0.0))\n\t\t\t\t[/codeblock]\n\t\t\t\t[b]Note:[/b] In C#, the method name must be specified as snake_case if it is defined by a built-in Godot node. This doesn't apply to user-defined methods where you should use the same convention as in the C# source (typically PascalCase)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "method",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "vararg",
            "name": "call_deferred",
            "description": "Calls the [code]method[/code] on the object during idle time. This method supports a variable number of arguments, so parameters are passed as a comma separated list. Example:\n\t\t\t\t[codeblock]\n\t\t\t\tcall_deferred(\"set\", \"position\", Vector2(42.0, 0.0))\n\t\t\t\t[/codeblock]\n\t\t\t\t[b]Note:[/b] In C#, the method name must be specified as snake_case if it is defined by a built-in Godot node. This doesn't apply to user-defined methods where you should use the same convention as in the C# source (typically PascalCase)."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "method",
                "type": "String",
                "index": "0"
              },
              {
                "name": "arg_array",
                "type": "Array",
                "index": "1"
              }
            ],
            "name": "callv",
            "description": "Calls the [code]method[/code] on the object and returns the result. Contrarily to [method call], this method does not support a variable number of arguments but expects all parameters to be via a single [Array].\n\t\t\t\t[codeblock]\n\t\t\t\tcallv(\"set\", [ \"position\", Vector2(42.0, 0.0) ])\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "can_translate_messages",
            "description": "Returns [code]true[/code] if the object can translate strings. See [method set_message_translation] and [method tr]."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "signal",
                "type": "String",
                "index": "0"
              },
              {
                "name": "target",
                "type": "Object",
                "index": "1"
              },
              {
                "name": "method",
                "type": "String",
                "index": "2"
              },
              {
                "default": "[  ]",
                "name": "binds",
                "type": "Array",
                "index": "3"
              },
              {
                "default": "0",
                "name": "flags",
                "type": "int",
                "index": "4"
              }
            ],
            "name": "connect",
            "description": "Connects a [code]signal[/code] to a [code]method[/code] on a [code]target[/code] object. Pass optional [code]binds[/code] to the call as an [Array] of parameters. These parameters will be passed to the method after any parameter used in the call to [method emit_signal]. Use [code]flags[/code] to set deferred or one-shot connections. See [enum ConnectFlags] constants.\n\t\t\t\tA [code]signal[/code] can only be connected once to a [code]method[/code]. It will throw an error if already connected, unless the signal was connected with [constant CONNECT_REFERENCE_COUNTED]. To avoid this, first, use [method is_connected] to check for existing connections.\n\t\t\t\tIf the [code]target[/code] is destroyed in the game's lifecycle, the connection will be lost.\n\t\t\t\tExamples:\n\t\t\t\t[codeblock]\n\t\t\t\tconnect(\"pressed\", self, \"_on_Button_pressed\") # BaseButton signal\n\t\t\t\tconnect(\"text_entered\", self, \"_on_LineEdit_text_entered\") # LineEdit signal\n\t\t\t\tconnect(\"hit\", self, \"_on_Player_hit\", [ weapon_type, damage ]) # User-defined signal\n\t\t\t\t[/codeblock]\n\t\t\t\tAn example of the relationship between [code]binds[/code] passed to [method connect] and parameters used when calling [method emit_signal]:\n\t\t\t\t[codeblock]\n\t\t\t\tconnect(\"hit\", self, \"_on_Player_hit\", [ weapon_type, damage ]) # weapon_type and damage are passed last\n\t\t\t\temit_signal(\"hit\", \"Dark lord\", 5) # \"Dark lord\" and 5 are passed first\n\t\t\t\tfunc _on_Player_hit(hit_by, level, weapon_type, damage):\n\t\t\t\t    print(\"Hit by %s (lvl %d) with weapon %s for %d damage\" % [hit_by, level, weapon_type, damage])\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "signal",
                "type": "String",
                "index": "0"
              },
              {
                "name": "target",
                "type": "Object",
                "index": "1"
              },
              {
                "name": "method",
                "type": "String",
                "index": "2"
              }
            ],
            "name": "disconnect",
            "description": "Disconnects a [code]signal[/code] from a [code]method[/code] on the given [code]target[/code].\n\t\t\t\tIf you try to disconnect a connection that does not exist, the method will throw an error. Use [method is_connected] to ensure that the connection exists."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "signal",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "vararg",
            "name": "emit_signal",
            "description": "Emits the given [code]signal[/code]. The signal must exist, so it should be a built-in signal of this class or one of its parent classes, or a user-defined signal. This method supports a variable number of arguments, so parameters are passed as a comma separated list. Example:\n\t\t\t\t[codeblock]\n\t\t\t\temit_signal(\"hit\", weapon_type, damage)\n\t\t\t\temit_signal(\"game_over\")\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "name": "free",
            "description": "Deletes the object from memory immediately. For [Node]s, you may want to use [method Node.queue_free] to queue the node for safe deletion at the end of the current frame.\n\t\t\t\t[b]Important:[/b] If you have a variable pointing to an object, it will [i]not[/i] be assigned to [code]null[/code] once the object is freed. Instead, it will point to a [i]previously freed instance[/i] and you should validate it with [method @GDScript.is_instance_valid] before attempting to call its methods or access its properties."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "property",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get",
            "description": "Returns the [Variant] value of the given [code]property[/code]. If the [code]property[/code] doesn't exist, this will return [code]null[/code].\n\t\t\t\t[b]Note:[/b] In C#, the property name must be specified as snake_case if it is defined by a built-in Godot node. This doesn't apply to user-defined properties where you should use the same convention as in the C# source (typically PascalCase)."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_class",
            "description": "Returns the object's class as a [String]."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_incoming_connections",
            "description": "Returns an [Array] of dictionaries with information about signals that are connected to the object.\n\t\t\t\tEach [Dictionary] contains three String entries:\n\t\t\t\t- [code]source[/code] is a reference to the signal emitter.\n\t\t\t\t- [code]signal_name[/code] is the name of the connected signal.\n\t\t\t\t- [code]method_name[/code] is the name of the method to which the signal is connected."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "property",
              "type": "NodePath",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_indexed",
            "description": "Gets the object's property indexed by the given [NodePath]. The node path should be relative to the current object and can use the colon character ([code]:[/code]) to access nested properties. Examples: [code]\"position:x\"[/code] or [code]\"material:next_pass:blend_mode\"[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_instance_id",
            "description": "Returns the object's unique instance ID.\n\t\t\t\tThis ID can be saved in [EncodedObjectAsID], and can be used to retrieve the object instance with [method @GDScript.instance_from_id]."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_meta",
            "description": "Returns the object's metadata entry for the given [code]name[/code]."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "qualifiers": "const",
            "name": "get_meta_list",
            "description": "Returns the object's metadata as a [PoolStringArray]."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_method_list",
            "description": "Returns the object's methods and their signatures as an [Array]."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_property_list",
            "description": "Returns the object's property list as an [Array] of dictionaries.\n\t\t\t\tEach property's [Dictionary] contain at least [code]name: String[/code] and [code]type: int[/code] (see [enum Variant.Type]) entries. Optionally, it can also include [code]hint: int[/code] (see [enum PropertyHint]), [code]hint_string: String[/code], and [code]usage: int[/code] (see [enum PropertyUsageFlags])."
          },
          {
            "return": {
              "type": "Reference"
            },
            "qualifiers": "const",
            "name": "get_script",
            "description": "Returns the object's [Script] instance, or [code]null[/code] if none is assigned."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "signal",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_signal_connection_list",
            "description": "Returns an [Array] of connections for the given [code]signal[/code]."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_signal_list",
            "description": "Returns the list of signals as an [Array] of dictionaries."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_meta",
            "description": "Returns [code]true[/code] if a metadata entry is found with the given [code]name[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "method",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_method",
            "description": "Returns [code]true[/code] if the object contains the given [code]method[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "signal",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_signal",
            "description": "Returns [code]true[/code] if the given [code]signal[/code] exists."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "signal",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_user_signal",
            "description": "Returns [code]true[/code] if the given user-defined [code]signal[/code] exists. Only signals added using [method add_user_signal] are taken into account."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_blocking_signals",
            "description": "Returns [code]true[/code] if signal emission blocking is enabled."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "class",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_class",
            "description": "Returns [code]true[/code] if the object inherits from the given [code]class[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "signal",
                "type": "String",
                "index": "0"
              },
              {
                "name": "target",
                "type": "Object",
                "index": "1"
              },
              {
                "name": "method",
                "type": "String",
                "index": "2"
              }
            ],
            "qualifiers": "const",
            "name": "is_connected",
            "description": "Returns [code]true[/code] if a connection exists for a given [code]signal[/code], [code]target[/code], and [code]method[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_queued_for_deletion",
            "description": "Returns [code]true[/code] if the [method Node.queue_free] method was called for the object."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "what",
                "type": "int",
                "index": "0"
              },
              {
                "default": "false",
                "name": "reversed",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "notification",
            "description": "Send a given notification to the object, which will also trigger a call to the [method _notification] method of all classes that the object inherits from.\n\t\t\t\tIf [code]reversed[/code] is [code]true[/code], [method _notification] is called first on the object's own class, and then up to its successive parent classes. If [code]reversed[/code] is [code]false[/code], [method _notification] is called first on the highest ancestor ([Object] itself), and then down to its successive inheriting classes."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "property_list_changed_notify",
            "description": "Notify the editor that the property list has changed, so that editor plugins can take the new values into account. Does nothing on export builds."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "remove_meta",
            "description": "Removes a given entry from the object's metadata. See also [method set_meta]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "property",
                "type": "String",
                "index": "0"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "set",
            "description": "Assigns a new value to the given property. If the [code]property[/code] does not exist, nothing will happen.\n\t\t\t\t[b]Note:[/b] In C#, the property name must be specified as snake_case if it is defined by a built-in Godot node. This doesn't apply to user-defined properties where you should use the same convention as in the C# source (typically PascalCase)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enable",
              "type": "bool",
              "index": "0"
            },
            "name": "set_block_signals",
            "description": "If set to [code]true[/code], signal emission is blocked."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "property",
                "type": "String",
                "index": "0"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "set_deferred",
            "description": "Assigns a new value to the given property, after the current frame's physics step. This is equivalent to calling [method set] via [method call_deferred], i.e. [code]call_deferred(\"set\", property, value)[/code].\n\t\t\t\t[b]Note:[/b] In C#, the property name must be specified as snake_case if it is defined by a built-in Godot node. This doesn't apply to user-defined properties where you should use the same convention as in the C# source (typically PascalCase)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "property",
                "type": "NodePath",
                "index": "0"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "set_indexed",
            "description": "Assigns a new value to the property identified by the [NodePath]. The node path should be relative to the current object and can use the colon character ([code]:[/code]) to access nested properties. Example:\n\t\t\t\t[codeblock]\n\t\t\t\tset_indexed(\"position\", Vector2(42, 0))\n\t\t\t\tset_indexed(\"position:y\", -10)\n\t\t\t\tprint(position) # (42, -10)\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enable",
              "type": "bool",
              "index": "0"
            },
            "name": "set_message_translation",
            "description": "Defines whether the object can translate strings (with calls to [method tr]). Enabled by default."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "set_meta",
            "description": "Adds, changes or removes a given entry in the object's metadata. Metadata are serialized and can take any [Variant] value.\n\t\t\t\tTo remove a given entry from the object's metadata, use [method remove_meta]. Metadata is also removed if its value is set to [code]null[/code]. This means you can also use [code]set_meta(\"name\", null)[/code] to remove metadata for [code]\"name\"[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "script",
              "type": "Reference",
              "index": "0"
            },
            "name": "set_script",
            "description": "Assigns a script to the object. Each object can have a single script assigned to it, which are used to extend its functionality.\n\t\t\t\tIf the object already had a script, the previous script instance will be freed and its variables and state will be lost. The new script's [method _init] method will be called."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "to_string",
            "description": "Returns a [String] representing the object. If not overridden, defaults to [code]\"[ClassName:RID]\"[/code].\n\t\t\t\tOverride the method [method _to_string] to customize the [String] representation."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "message",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "tr",
            "description": "Translates a message using translation catalogs configured in the Project Settings.\n\t\t\t\tOnly works if message translation is enabled (which it is by default), otherwise it returns the [code]message[/code] unchanged. See [method set_message_translation]."
          }
        ]
      },
      "name": "Object",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "script_changed",
          "description": "Emitted whenever the object's script is changed."
        }
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "NOTIFICATION_POSTINITIALIZE"
          },
          {
            "value": "1",
            "name": "NOTIFICATION_PREDELETE"
          },
          {
            "value": "1",
            "name": "CONNECT_DEFERRED",
            "enum": "ConnectFlags"
          },
          {
            "value": "2",
            "name": "CONNECT_PERSIST",
            "enum": "ConnectFlags"
          },
          {
            "value": "4",
            "name": "CONNECT_ONESHOT",
            "enum": "ConnectFlags"
          },
          {
            "value": "8",
            "name": "CONNECT_REFERENCE_COUNTED",
            "enum": "ConnectFlags"
          }
        ]
      },
      "brief_description": "Base class for all non-built-in types.",
      "description": "Every class which is not a built-in type inherits from this class.\n\t\tYou can construct Objects from scripting languages, using [code]Object.new()[/code] in GDScript, [code]new Object[/code] in C#, or the \"Construct Object\" node in VisualScript.\n\t\tObjects do not manage memory. If a class inherits from Object, you will have to delete instances of it manually. To do so, call the [method free] method from your script or delete the instance from C++.\n\t\tSome classes that extend Object add memory management. This is the case of [Reference], which counts references and deletes itself automatically when no longer referenced. [Node], another fundamental type, deletes all its children when freed from memory.\n\t\tObjects export properties, which are mainly useful for storage and editing, but not really so much in programming. Properties are exported in [method _get_property_list] and handled in [method _get] and [method _set]. However, scripting languages and C++ have simpler means to export them.\n\t\tProperty membership can be tested directly in GDScript using [code]in[/code]:\n\t\t[codeblock]\n\t\tvar n = Node2D.new()\n\t\tprint(\"position\" in n) # Prints \"True\".\n\t\tprint(\"other_property\" in n) # Prints \"False\".\n\t\t[/codeblock]\n\t\tThe [code]in[/code] operator will evaluate to [code]true[/code] as long as the key exists, even if the value is [code]null[/code].\n\t\tObjects also receive notifications. Notifications are a simple way to notify the object about different events, so they can all be handled together. See [method _notification].\n\t\t[b]Note:[/b] Unlike references to a [Reference], references to an Object stored in a variable can become invalid without warning. Therefore, it's recommended to use [Reference] for data classes instead of [Object].\n\t\t[b]Note:[/b] Due to a bug, you can't create a \"plain\" Object using [code]Object.new()[/code]. Instead, use [code]ClassDB.instance(\"Object\")[/code]. This bug only applies to Object itself, not any of its descendents like [Reference]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "true",
            "value": "If [code]true[/code], closes the polygon. A closed OccluderPolygon2D occludes the light coming from any direction. An opened OccluderPolygon2D occludes the light only at its outline's direction.",
            "setter": "set_closed",
            "name": "closed",
            "getter": "is_closed",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "The culling mode to use.",
            "setter": "set_cull_mode",
            "name": "cull_mode",
            "getter": "get_cull_mode",
            "type": "int",
            "enum": "OccluderPolygon2D.CullMode"
          },
          {
            "default": "PoolVector2Array(  )",
            "value": "A [Vector2] array with the index for polygon's vertices positions.\n\t\t\t[b]Note:[/b] The returned value is a copy of the underlying array, rather than a reference.",
            "setter": "set_polygon",
            "name": "polygon",
            "getter": "get_polygon",
            "type": "PoolVector2Array"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {},
      "name": "OccluderPolygon2D",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "CULL_DISABLED",
            "enum": "CullMode"
          },
          {
            "value": "1",
            "name": "CULL_CLOCKWISE",
            "enum": "CullMode"
          },
          {
            "value": "2",
            "name": "CULL_COUNTER_CLOCKWISE",
            "enum": "CullMode"
          }
        ]
      },
      "brief_description": "Defines a 2D polygon for LightOccluder2D.",
      "description": "Editor facility that helps you draw a 2D polygon used as resource for [LightOccluder2D]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/3d/lights_and_shadows.html"
      },
      "members": {
        "member": [
          {
            "default": "1.0",
            "value": "The light's attenuation (drop-off) curve. A number of presets are available in the [b]Inspector[/b] by right-clicking the curve.",
            "setter": "set_param",
            "name": "omni_attenuation",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "5.0",
            "value": "The light's radius. Note that the effectively lit area may appear to be smaller depending on the [member omni_attenuation] in use. No matter the [member omni_attenuation] in use, the light will never reach anything outside this radius.",
            "setter": "set_param",
            "name": "omni_range",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "1",
            "value": "See [enum ShadowDetail].",
            "setter": "set_shadow_detail",
            "name": "omni_shadow_detail",
            "getter": "get_shadow_detail",
            "type": "int",
            "enum": "OmniLight.ShadowDetail"
          },
          {
            "default": "1",
            "value": "See [enum ShadowMode].",
            "setter": "set_shadow_mode",
            "name": "omni_shadow_mode",
            "getter": "get_shadow_mode",
            "type": "int",
            "enum": "OmniLight.ShadowMode"
          }
        ]
      },
      "inherits": "Light",
      "methods": {},
      "name": "OmniLight",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "SHADOW_DUAL_PARABOLOID",
            "enum": "ShadowMode"
          },
          {
            "value": "1",
            "name": "SHADOW_CUBE",
            "enum": "ShadowMode"
          },
          {
            "value": "0",
            "name": "SHADOW_DETAIL_VERTICAL",
            "enum": "ShadowDetail"
          },
          {
            "value": "1",
            "name": "SHADOW_DETAIL_HORIZONTAL",
            "enum": "ShadowDetail"
          }
        ]
      },
      "brief_description": "Omnidirectional light, such as a light bulb or a candle.",
      "description": "An Omnidirectional light is a type of [Light] that emits light in all directions. The light is attenuated by distance and this attenuation can be configured by changing its energy, radius, and attenuation parameters.\n\t\t[b]Note:[/b] By default, only 32 OmniLights may affect a single mesh [i]resource[/i] at once. Consider splitting your level into several meshes to decrease the likelihood that more than 32 lights will affect the same mesh resource. Splitting the level mesh will also improve frustum culling effectiveness, leading to greater performance. If you need to use more lights per mesh, you can increase [member ProjectSettings.rendering/limits/rendering/max_lights_per_object] at the cost of shader compilation times."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "value": "The arrow icon to be drawn on the right end of the button.",
            "name": "arrow",
            "type": "Texture"
          },
          {
            "default": "2",
            "value": "The horizontal space between the arrow icon and the right edge of the button.",
            "name": "arrow_margin",
            "type": "int"
          },
          {
            "value": "[StyleBox] used when the [OptionButton] is disabled.",
            "name": "disabled",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] used when the [OptionButton] is focused. It is displayed over the current [StyleBox], so using [StyleBoxEmpty] will just disable the focus visual effect.",
            "name": "focus",
            "type": "StyleBox"
          },
          {
            "value": "[Font] of the [OptionButton]'s text.",
            "name": "font",
            "type": "Font"
          },
          {
            "default": "Color( 0.88, 0.88, 0.88, 1 )",
            "value": "Default text [Color] of the [OptionButton].",
            "name": "font_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.9, 0.9, 0.9, 0.2 )",
            "value": "Text [Color] used when the [OptionButton] is disabled.",
            "name": "font_color_disabled",
            "type": "Color"
          },
          {
            "default": "Color( 0.94, 0.94, 0.94, 1 )",
            "value": "Text [Color] used when the [OptionButton] is being hovered.",
            "name": "font_color_hover",
            "type": "Color"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "Text [Color] used when the [OptionButton] is being pressed.",
            "name": "font_color_pressed",
            "type": "Color"
          },
          {
            "value": "[StyleBox] used when the [OptionButton] is being hovered.",
            "name": "hover",
            "type": "StyleBox"
          },
          {
            "default": "2",
            "value": "The horizontal space between [OptionButton]'s icon and text.",
            "name": "hseparation",
            "type": "int"
          },
          {
            "value": "Default [StyleBox] for the [OptionButton].",
            "name": "normal",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] used when the [OptionButton] is being pressed.",
            "name": "pressed",
            "type": "StyleBox"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "0",
            "setter": "set_action_mode",
            "override": "true",
            "name": "action_mode",
            "getter": "get_action_mode",
            "type": "int",
            "enum": "BaseButton.ActionMode"
          },
          {
            "default": "0",
            "setter": "set_text_align",
            "override": "true",
            "name": "align",
            "getter": "get_text_align",
            "type": "int",
            "enum": "Button.TextAlign"
          },
          {
            "default": "-1",
            "value": "The index of the currently selected item, or [code]-1[/code] if no item is selected.",
            "setter": "_select_int",
            "name": "selected",
            "getter": "get_selected",
            "type": "int"
          },
          {
            "default": "true",
            "setter": "set_toggle_mode",
            "override": "true",
            "name": "toggle_mode",
            "getter": "is_toggle_mode",
            "type": "bool"
          }
        ]
      },
      "inherits": "Button",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "texture",
                "type": "Texture",
                "index": "0"
              },
              {
                "name": "label",
                "type": "String",
                "index": "1"
              },
              {
                "default": "-1",
                "name": "id",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "add_icon_item",
            "description": "Adds an item, with a [code]texture[/code] icon, text [code]label[/code] and (optionally) [code]id[/code]. If no [code]id[/code] is passed, the item index will be used as the item's ID. New items are appended at the end."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "label",
                "type": "String",
                "index": "0"
              },
              {
                "default": "-1",
                "name": "id",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "add_item",
            "description": "Adds an item, with text [code]label[/code] and (optionally) [code]id[/code]. If no [code]id[/code] is passed, the item index will be used as the item's ID. New items are appended at the end."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "add_separator",
            "description": "Adds a separator to the list of items. Separators help to group items. Separator also takes up an index and is appended at the end."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Clears all the items in the [OptionButton]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_item_count",
            "description": "Returns the amount of items in the OptionButton, including separators."
          },
          {
            "return": {
              "type": "Texture"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_icon",
            "description": "Returns the icon of the item at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_id",
            "description": "Returns the ID of the item at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_index",
            "description": "Returns the index of the item with the given [code]id[/code]."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_metadata",
            "description": "Retrieves the metadata of an item. Metadata may be any type and can be used to store extra information about an item, such as an external string ID."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_text",
            "description": "Returns the text of the item at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "PopupMenu"
            },
            "qualifiers": "const",
            "name": "get_popup",
            "description": "Returns the [PopupMenu] contained in this button."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_selected_id",
            "description": "Returns the ID of the selected item, or [code]0[/code] if no item is selected."
          },
          {
            "return": {
              "type": "Variant"
            },
            "qualifiers": "const",
            "name": "get_selected_metadata",
            "description": "Gets the metadata of the selected item. Metadata for items can be set using [method set_item_metadata]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_item_disabled",
            "description": "Returns [code]true[/code] if the item at index [code]idx[/code] is disabled."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "remove_item",
            "description": "Removes the item at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "select",
            "description": "Selects an item by index and makes it the current item. This will work even if the item is disabled."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "disabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_item_disabled",
            "description": "Sets whether the item at index [code]idx[/code] is disabled.\n\t\t\t\tDisabled items are drawn differently in the dropdown and are not selectable by the user. If the current selected item is set as disabled, it will remain selected."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "texture",
                "type": "Texture",
                "index": "1"
              }
            ],
            "name": "set_item_icon",
            "description": "Sets the icon of the item at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "id",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set_item_id",
            "description": "Sets the ID of the item at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "metadata",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "set_item_metadata",
            "description": "Sets the metadata of an item. Metadata may be of any type and can be used to store extra information about an item, such as an external string ID."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "text",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set_item_text",
            "description": "Sets the text of the item at index [code]idx[/code]."
          }
        ]
      },
      "name": "OptionButton",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "name": "item_focused",
            "description": "Emitted when the user navigates to an item using the [code]ui_up[/code] or [code]ui_down[/code] actions. The index of the item selected is passed as argument."
          },
          {
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "name": "item_selected",
            "description": "Emitted when the current item has been changed by the user. The index of the item selected is passed as argument."
          }
        ]
      },
      "constants": {},
      "brief_description": "Button control that provides selectable options when pressed.",
      "description": "OptionButton is a type button that provides a selectable list of items when pressed. The item selected becomes the \"current\" item and is displayed as the button text.\n\t\tSee also [BaseButton] which contains common properties and methods associated with this node."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/677",
          "title": "OS Test Demo"
        }
      },
      "members": {
        "member": [
          {
            "default": "\"\"",
            "value": "The clipboard from the host OS. Might be unavailable on some platforms.",
            "setter": "set_clipboard",
            "name": "clipboard",
            "getter": "get_clipboard",
            "type": "String"
          },
          {
            "default": "0",
            "value": "The current screen index (starting from 0).",
            "setter": "set_current_screen",
            "name": "current_screen",
            "getter": "get_current_screen",
            "type": "int"
          },
          {
            "default": "0",
            "value": "The exit code passed to the OS when the main loop exits. By convention, an exit code of [code]0[/code] indicates success whereas a non-zero exit code indicates an error. For portability reasons, the exit code should be set between 0 and 125 (inclusive).\n\t\t\t[b]Note:[/b] This value will be ignored if using [method SceneTree.quit] with an [code]exit_code[/code] argument passed.",
            "setter": "set_exit_code",
            "name": "exit_code",
            "getter": "get_exit_code",
            "type": "int"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the engine tries to keep the screen on while the game is running. Useful on mobile.",
            "setter": "set_keep_screen_on",
            "name": "keep_screen_on",
            "getter": "is_keep_screen_on",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the engine optimizes for low processor usage by only refreshing the screen if needed. Can improve battery consumption on mobile.",
            "setter": "set_low_processor_usage_mode",
            "name": "low_processor_usage_mode",
            "getter": "is_in_low_processor_usage_mode",
            "type": "bool"
          },
          {
            "default": "6900",
            "value": "The amount of sleeping between frames when the low-processor usage mode is enabled (in microseconds). Higher values will result in lower CPU usage.",
            "setter": "set_low_processor_usage_mode_sleep_usec",
            "name": "low_processor_usage_mode_sleep_usec",
            "getter": "get_low_processor_usage_mode_sleep_usec",
            "type": "int"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The maximum size of the window (without counting window manager decorations). Does not affect fullscreen mode. Set to [code](0, 0)[/code] to reset to the system default value.",
            "setter": "set_max_window_size",
            "name": "max_window_size",
            "getter": "get_max_window_size",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The minimum size of the window (without counting window manager decorations). Does not affect fullscreen mode. Set to [code](0, 0)[/code] to reset to the system default value.",
            "setter": "set_min_window_size",
            "name": "min_window_size",
            "getter": "get_min_window_size",
            "type": "Vector2"
          },
          {
            "default": "0",
            "value": "The current screen orientation.",
            "setter": "set_screen_orientation",
            "name": "screen_orientation",
            "getter": "get_screen_orientation",
            "type": "int",
            "enum": "_OS.ScreenOrientation"
          },
          {
            "default": "\"\"",
            "value": "The current tablet driver in use.",
            "setter": "set_current_tablet_driver",
            "name": "tablet_driver",
            "getter": "get_current_tablet_driver",
            "type": "String"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], vertical synchronization (Vsync) is enabled.",
            "setter": "set_use_vsync",
            "name": "vsync_enabled",
            "getter": "is_vsync_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code] and [code]vsync_enabled[/code] is true, the operating system's window compositor will be used for vsync when the compositor is enabled and the game is in windowed mode.\n\t\t\t[b]Note:[/b] This option is experimental and meant to alleviate stutter experienced by some users. However, some users have experienced a Vsync framerate halving (e.g. from 60 FPS to 30 FPS) when using it.\n\t\t\t[b]Note:[/b] This property is only implemented on Windows.",
            "setter": "set_vsync_via_compositor",
            "name": "vsync_via_compositor",
            "getter": "is_vsync_via_compositor_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], removes the window frame.\n\t\t\t[b]Note:[/b] Setting [code]window_borderless[/code] to [code]false[/code] disables per-pixel transparency.",
            "setter": "set_borderless_window",
            "name": "window_borderless",
            "getter": "get_borderless_window",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the window is fullscreen.",
            "setter": "set_window_fullscreen",
            "name": "window_fullscreen",
            "getter": "is_window_fullscreen",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the window is maximized.",
            "setter": "set_window_maximized",
            "name": "window_maximized",
            "getter": "is_window_maximized",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the window is minimized.",
            "setter": "set_window_minimized",
            "name": "window_minimized",
            "getter": "is_window_minimized",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the window background is transparent and window frame is removed.\n\t\t\tUse [code]get_tree().get_root().set_transparent_background(true)[/code] to disable main viewport background rendering.\n\t\t\t[b]Note:[/b] This property has no effect if [b]Project > Project Settings > Display > Window > Per-pixel transparency > Allowed[/b] setting is disabled.\n\t\t\t[b]Note:[/b] This property is implemented on HTML5, Linux, macOS and Windows.",
            "setter": "set_window_per_pixel_transparency_enabled",
            "name": "window_per_pixel_transparency_enabled",
            "getter": "get_window_per_pixel_transparency_enabled",
            "type": "bool"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The window position relative to the screen, the origin is the top left corner, +Y axis goes to the bottom and +X axis goes to the right.",
            "setter": "set_window_position",
            "name": "window_position",
            "getter": "get_window_position",
            "type": "Vector2"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the window is resizable by the user.",
            "setter": "set_window_resizable",
            "name": "window_resizable",
            "getter": "is_window_resizable",
            "type": "bool"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The size of the window (without counting window manager decorations).",
            "setter": "set_window_size",
            "name": "window_size",
            "getter": "get_window_size",
            "type": "Vector2"
          }
        ]
      },
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "text",
                "type": "String",
                "index": "0"
              },
              {
                "default": "\"Alert!\"",
                "name": "title",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "alert",
            "description": "Displays a modal dialog box using the host OS' facilities. Execution is blocked until the dialog is closed."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "can_draw",
            "description": "Returns [code]true[/code] if the host OS allows drawing."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "can_use_threads",
            "description": "Returns [code]true[/code] if the current host platform is using multiple threads."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "center_window",
            "description": "Centers the window on the screen if in windowed mode."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "close_midi_inputs",
            "description": "Shuts down system MIDI driver.\n\t\t\t\t[b]Note:[/b] This method is implemented on Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "msec",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "delay_msec",
            "description": "Delay execution of the current thread by [code]msec[/code] milliseconds. [code]msec[/code] must be greater than or equal to [code]0[/code]. Otherwise, [method delay_msec] will do nothing and will print an error message."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "usec",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "delay_usec",
            "description": "Delay execution of the current thread by [code]usec[/code] microseconds. [code]usec[/code] must be greater than or equal to [code]0[/code]. Otherwise, [method delay_usec] will do nothing and will print an error message."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "file",
              "type": "String",
              "index": "0"
            },
            "name": "dump_memory_to_file",
            "description": "Dumps the memory allocation ringlist to a file (only works in debug).\n\t\t\t\tEntry format per line: \"Address - Size - Description\"."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "file",
              "type": "String",
              "index": "0"
            },
            "name": "dump_resources_to_file",
            "description": "Dumps all used resources to file (only works in debug).\n\t\t\t\tEntry format per line: \"Resource Type : Resource Location\".\n\t\t\t\tAt the end of the file is a statistic of all used Resource Types."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "arguments",
                "type": "PoolStringArray",
                "index": "1"
              },
              {
                "default": "true",
                "name": "blocking",
                "type": "bool",
                "index": "2"
              },
              {
                "default": "[  ]",
                "name": "output",
                "type": "Array",
                "index": "3"
              },
              {
                "default": "false",
                "name": "read_stderr",
                "type": "bool",
                "index": "4"
              }
            ],
            "name": "execute",
            "description": "Execute the file at the given path with the arguments passed as an array of strings. Platform path resolution will take place. The resolved file must exist and be executable.\n\t\t\t\tThe arguments are used in the given order and separated by a space, so [code]OS.execute(\"ping\", [\"-w\", \"3\", \"godotengine.org\"], false)[/code] will resolve to [code]ping -w 3 godotengine.org[/code] in the system's shell.\n\t\t\t\tThis method has slightly different behavior based on whether the [code]blocking[/code] mode is enabled.\n\t\t\t\tIf [code]blocking[/code] is [code]true[/code], the Godot thread will pause its execution while waiting for the process to terminate. The shell output of the process will be written to the [code]output[/code] array as a single string. When the process terminates, the Godot thread will resume execution.\n\t\t\t\tIf [code]blocking[/code] is [code]false[/code], the Godot thread will continue while the new process runs. It is not possible to retrieve the shell output in non-blocking mode, so [code]output[/code] will be empty.\n\t\t\t\tThe return value also depends on the blocking mode. When blocking, the method will return an exit code of the process. When non-blocking, the method returns a process ID, which you can use to monitor the process (and potentially terminate it with [method kill]). If the process forking (non-blocking) or opening (blocking) fails, the method will return [code]-1[/code] or another exit code.\n\t\t\t\tExample of blocking mode and retrieving the shell output:\n\t\t\t\t[codeblock]\n\t\t\t\tvar output = []\n\t\t\t\tvar exit_code = OS.execute(\"ls\", [\"-l\", \"/tmp\"], true, output)\n\t\t\t\t[/codeblock]\n\t\t\t\tExample of non-blocking mode, running another instance of the project and storing its process ID:\n\t\t\t\t[codeblock]\n\t\t\t\tvar pid = OS.execute(OS.get_executable_path(), [], false)\n\t\t\t\t[/codeblock]\n\t\t\t\tIf you wish to access a shell built-in or perform a composite command, a platform-specific shell can be invoked. For example:\n\t\t\t\t[codeblock]\n\t\t\t\tOS.execute(\"CMD.exe\", [\"/C\", \"cd %TEMP% && dir\"], true, output)\n\t\t\t\t[/codeblock]\n\t\t\t\t[b]Note:[/b] This method is implemented on Android, iOS, Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "string",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "find_scancode_from_string",
            "description": "Returns the scancode of the given string (e.g. \"Escape\")."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_audio_driver_count",
            "description": "Returns the total number of available audio drivers."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "driver",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_audio_driver_name",
            "description": "Returns the audio driver name for the given index."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "name": "get_cmdline_args",
            "description": "Returns the command-line arguments passed to the engine.\n\t\t\t\tCommand-line arguments can be written in any form, including both [code]--key value[/code] and [code]--key=value[/code] forms so they can be properly parsed, as long as custom command-line arguments do not conflict with engine arguments.\n\t\t\t\tYou can also incorporate environment variables using the [method get_environment] method.\n\t\t\t\tYou can set [code]editor/main_run_args[/code] in the Project Settings to define command-line arguments to be passed by the editor when running the project.\n\t\t\t\tHere's a minimal example on how to parse command-line arguments into a dictionary using the [code]--key=value[/code] form for arguments:\n\t\t\t\t[codeblock]\n\t\t\t\tvar arguments = {}\n\t\t\t\tfor argument in OS.get_cmdline_args():\n\t\t\t\t    if argument.find(\"=\") > -1:\n\t\t\t\t        var key_value = argument.split(\"=\")\n\t\t\t\t        arguments[key_value[0].lstrip(\"--\")] = key_value[1]\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "name": "get_connected_midi_inputs",
            "description": "Returns an array of MIDI device names.\n\t\t\t\tThe returned array will be empty if the system MIDI driver has not previously been initialised with [method open_midi_inputs].\n\t\t\t\t[b]Note:[/b] This method is implemented on Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "int",
              "enum": "OS.VideoDriver"
            },
            "qualifiers": "const",
            "name": "get_current_video_driver",
            "description": "Returns the currently used video driver, using one of the values from [enum VideoDriver]."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "argument": {
              "default": "false",
              "name": "utc",
              "type": "bool",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_date",
            "description": "Returns current date as a dictionary of keys: [code]year[/code], [code]month[/code], [code]day[/code], [code]weekday[/code], [code]dst[/code] (Daylight Savings Time)."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "argument": {
              "default": "false",
              "name": "utc",
              "type": "bool",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_datetime",
            "description": "Returns current datetime as a dictionary of keys: [code]year[/code], [code]month[/code], [code]day[/code], [code]weekday[/code], [code]dst[/code] (Daylight Savings Time), [code]hour[/code], [code]minute[/code], [code]second[/code]."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "argument": {
              "name": "unix_time_val",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_datetime_from_unix_time",
            "description": "Gets a dictionary of time values corresponding to the given UNIX epoch time (in seconds).\n\t\t\t\tThe returned Dictionary's values will be the same as [method get_datetime], with the exception of Daylight Savings Time as it cannot be determined from the epoch."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_dynamic_memory_usage",
            "description": "Returns the total amount of dynamic memory used (only works in debug)."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "variable",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_environment",
            "description": "Returns the value of an environment variable. Returns an empty string if the environment variable doesn't exist.\n\t\t\t\t[b]Note:[/b] Double-check the casing of [code]variable[/code]. Environment variable names are case-sensitive on all platforms except Windows."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_executable_path",
            "description": "Returns the path to the current engine executable."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "qualifiers": "const",
            "name": "get_granted_permissions",
            "description": "With this function, you can get the list of dangerous permissions that have been granted to the Android application.\n\t\t\t\t[b]Note:[/b] This method is implemented on Android."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_ime_selection",
            "description": "Returns the IME cursor position (the currently-edited portion of the string) relative to the characters in the composition string.\n\t\t\t\t[constant MainLoop.NOTIFICATION_OS_IME_UPDATE] is sent to the application to notify it of changes to the IME cursor position.\n\t\t\t\t[b]Note:[/b] This method is implemented on macOS."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_ime_text",
            "description": "Returns the IME intermediate composition string.\n\t\t\t\t[constant MainLoop.NOTIFICATION_OS_IME_UPDATE] is sent to the application to notify it of changes to the IME composition string.\n\t\t\t\t[b]Note:[/b] This method is implemented on macOS."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_latin_keyboard_variant",
            "description": "Returns the current latin keyboard variant as a String.\n\t\t\t\tPossible return values are: [code]\"QWERTY\"[/code], [code]\"AZERTY\"[/code], [code]\"QZERTY\"[/code], [code]\"DVORAK\"[/code], [code]\"NEO\"[/code], [code]\"COLEMAK\"[/code] or [code]\"ERROR\"[/code].\n\t\t\t\t[b]Note:[/b] This method is implemented on Linux, macOS and Windows. Returns [code]\"QWERTY\"[/code] on unsupported platforms."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_locale",
            "description": "Returns the host OS locale."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_model_name",
            "description": "Returns the model name of the current device.\n\t\t\t\t[b]Note:[/b] This method is implemented on Android and iOS. Returns [code]\"GenericDevice\"[/code] on unsupported platforms."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_name",
            "description": "Returns the name of the host OS. Possible values are: [code]\"Android\"[/code], [code]\"iOS\"[/code], [code]\"HTML5\"[/code], [code]\"OSX\"[/code], [code]\"Server\"[/code], [code]\"Windows\"[/code], [code]\"UWP\"[/code], [code]\"X11\"[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "handle_type",
              "type": "int",
              "enum": "OS.HandleType",
              "index": "0"
            },
            "name": "get_native_handle",
            "description": "Returns internal structure pointers for use in GDNative plugins.\n\t\t\t\t[b]Note:[/b] This method is implemented on Linux and Windows (other OSs will soon be supported)."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_power_percent_left",
            "description": "Returns the amount of battery left in the device as a percentage. Returns [code]-1[/code] if power state is unknown.\n\t\t\t\t[b]Note:[/b] This method is implemented on Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_power_seconds_left",
            "description": "Returns an estimate of the time left in seconds before the device runs out of battery. Returns [code]-1[/code] if power state is unknown.\n\t\t\t\t[b]Note:[/b] This method is implemented on Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "int",
              "enum": "OS.PowerState"
            },
            "name": "get_power_state",
            "description": "Returns the current state of the device regarding battery and power. See [enum PowerState] constants.\n\t\t\t\t[b]Note:[/b] This method is implemented on Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_process_id",
            "description": "Returns the project's process ID.\n\t\t\t\t[b]Note:[/b] This method is implemented on Android, iOS, Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_processor_count",
            "description": "Returns the number of threads available on the host machine."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_real_window_size",
            "description": "Returns the window size including decorations like window borders."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "code",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_scancode_string",
            "description": "Returns the given scancode as a string (e.g. Return values: [code]\"Escape\"[/code], [code]\"Shift+Escape\"[/code]).\n\t\t\t\tSee also [member InputEventKey.scancode] and [method InputEventKey.get_scancode_with_modifiers]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_screen_count",
            "description": "Returns the number of displays attached to the host machine."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "default": "-1",
              "name": "screen",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_screen_dpi",
            "description": "Returns the dots per inch density of the specified screen. If [code]screen[/code] is [/code]-1[/code] (the default value), the current screen will be used.\n\t\t\t\t[b]Note:[/b] On macOS, returned value is inaccurate if fractional display scaling mode is used.\n\t\t\t\t[b]Note:[/b] On Android devices, the actual screen densities are grouped into six generalized densities:\n\t\t\t\t[codeblock]\n\t\t\t\t   ldpi - 120 dpi\n\t\t\t\t   mdpi - 160 dpi\n\t\t\t\t   hdpi - 240 dpi\n\t\t\t\t  xhdpi - 320 dpi\n\t\t\t\t xxhdpi - 480 dpi\n\t\t\t\txxxhdpi - 640 dpi\n\t\t\t\t[/codeblock]\n\t\t\t\t[b]Note:[/b] This method is implemented on Android, Linux, macOS and Windows. Returns [code]72[/code] on unsupported platforms."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_screen_max_scale",
            "description": "Return the greatest scale factor of all screens.\n\t\t\t\t[b]Note:[/b] On macOS returned value is [code]2.0[/code] if there is at least one hiDPI (Retina) screen in the system, and [code]1.0[/code] in all other cases.\n\t\t\t\t[b]Note:[/b] This method is implemented on macOS."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "default": "-1",
              "name": "screen",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_screen_position",
            "description": "Returns the position of the specified screen by index. If [code]screen[/code] is [/code]-1[/code] (the default value), the current screen will be used."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "default": "-1",
              "name": "screen",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_screen_scale",
            "description": "Return the scale factor of the specified screen by index. If [code]screen[/code] is [/code]-1[/code] (the default value), the current screen will be used.\n\t\t\t\t[b]Note:[/b] On macOS returned value is [code]2.0[/code] for hiDPI (Retina) screen, and [code]1.0[/code] for all other cases.\n\t\t\t\t[b]Note:[/b] This method is implemented on macOS."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "default": "-1",
              "name": "screen",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_screen_size",
            "description": "Returns the dimensions in pixels of the specified screen. If [code]screen[/code] is [/code]-1[/code] (the default value), the current screen will be used."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_splash_tick_msec",
            "description": "Returns the amount of time in milliseconds it took for the boot logo to appear."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_static_memory_peak_usage",
            "description": "Returns the maximum amount of static memory used (only works in debug)."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_static_memory_usage",
            "description": "Returns the amount of static memory being used by the program in bytes."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": [
              {
                "name": "dir",
                "type": "int",
                "enum": "OS.SystemDir",
                "index": "0"
              },
              {
                "default": "true",
                "name": "shared_storage",
                "type": "bool",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_system_dir",
            "description": "Returns the actual path to commonly used folders across different platforms. Available locations are specified in [enum SystemDir].\n\t\t\t\t[b]Note:[/b] This method is implemented on Android, Linux, macOS and Windows.\n\t\t\t\t[b]Note:[/b] Shared storage is implemented on Android and allows to differentiate between app specific and shared directories. Shared directories have additional restrictions on Android."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_system_time_msecs",
            "description": "Returns the epoch time of the operating system in milliseconds."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_system_time_secs",
            "description": "Returns the epoch time of the operating system in seconds."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_tablet_driver_count",
            "description": "Returns the total number of available tablet drivers.\n\t\t\t\t[b]Note:[/b] This method is implemented on Windows."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_tablet_driver_name",
            "description": "Returns the tablet driver name for the given index.\n\t\t\t\t[b]Note:[/b] This method is implemented on Windows."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_thread_caller_id",
            "description": "Returns the ID of the current thread. This can be used in logs to ease debugging of multi-threaded applications.\n\t\t\t\t[b]Note:[/b] Thread IDs are not deterministic and may be reused across application restarts."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_ticks_msec",
            "description": "Returns the amount of time passed in milliseconds since the engine started."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_ticks_usec",
            "description": "Returns the amount of time passed in microseconds since the engine started."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "argument": {
              "default": "false",
              "name": "utc",
              "type": "bool",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_time",
            "description": "Returns current time as a dictionary of keys: hour, minute, second."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "qualifiers": "const",
            "name": "get_time_zone_info",
            "description": "Returns the current time zone as a dictionary with the keys: bias and name."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_unique_id",
            "description": "Returns a string that is unique to the device.\n\t\t\t\t[b]Note:[/b] This string may change without notice if the user reinstalls/upgrades their operating system or changes their hardware. This means it should generally not be used to encrypt persistent data as the data saved before an unexpected ID change would become inaccessible. The returned string may also be falsified using external programs, so do not rely on the string returned by [method get_unique_id] for security purposes.\n\t\t\t\t[b]Note:[/b] Returns an empty string on HTML5 and UWP, as this method isn't implemented on those platforms yet."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_unix_time",
            "description": "Returns the current UNIX epoch timestamp in seconds.\n\t\t\t\t[b]Important:[/b] This is the system clock that the user can manually set. [b]Never use[/b] this method for precise time calculation since its results are also subject to automatic adjustments by the operating system. [b]Always use[/b] [method get_ticks_usec] or [method get_ticks_msec] for precise time calculation instead, since they are guaranteed to be monotonic (i.e. never decrease)."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "datetime",
              "type": "Dictionary",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_unix_time_from_datetime",
            "description": "Gets an epoch time value from a dictionary of time values.\n\t\t\t\t[code]datetime[/code] must be populated with the following keys: [code]year[/code], [code]month[/code], [code]day[/code], [code]hour[/code], [code]minute[/code], [code]second[/code].\n\t\t\t\tIf the dictionary is empty [code]0[/code] is returned. If some keys are omitted, they default to the equivalent values for the UNIX epoch timestamp 0 (1970-01-01 at 00:00:00 UTC).\n\t\t\t\tYou can pass the output from [method get_datetime_from_unix_time] directly into this function. Daylight Savings Time ([code]dst[/code]), if present, is ignored."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_user_data_dir",
            "description": "Returns the absolute directory path where user data is written ([code]user://[/code]).\n\t\t\t\tOn Linux, this is [code]~/.local/share/godot/app_userdata/[project_name][/code], or [code]~/.local/share/[custom_name][/code] if [code]use_custom_user_dir[/code] is set.\n\t\t\t\tOn macOS, this is [code]~/Library/Application Support/Godot/app_userdata/[project_name][/code], or [code]~/Library/Application Support/[custom_name][/code] if [code]use_custom_user_dir[/code] is set.\n\t\t\t\tOn Windows, this is [code]%APPDATA%\\Godot\\app_userdata\\[project_name][/code], or [code]%APPDATA%\\[custom_name][/code] if [code]use_custom_user_dir[/code] is set. [code]%APPDATA%[/code] expands to [code]%USERPROFILE%\\AppData\\Roaming[/code].\n\t\t\t\tIf the project name is empty, [code]user://[/code] falls back to [code]res://[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_video_driver_count",
            "description": "Returns the number of video drivers supported on the current platform."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "driver",
              "type": "int",
              "enum": "OS.VideoDriver",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_video_driver_name",
            "description": "Returns the name of the video driver matching the given [code]driver[/code] index. This index is a value from [enum VideoDriver], and you can use [method get_current_video_driver] to get the current backend's index."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_virtual_keyboard_height",
            "description": "Returns the on-screen keyboard's height in pixels. Returns 0 if there is no keyboard or if it is currently hidden."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "qualifiers": "const",
            "name": "get_window_safe_area",
            "description": "Returns unobscured area of the window where interactive controls should be rendered."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "menu",
                "type": "String",
                "index": "0"
              },
              {
                "name": "label",
                "type": "String",
                "index": "1"
              },
              {
                "name": "id",
                "type": "Variant",
                "index": "2"
              },
              {
                "name": "meta",
                "type": "Variant",
                "index": "3"
              }
            ],
            "name": "global_menu_add_item",
            "description": "Add a new item with text \"label\" to global menu. Use \"_dock\" menu to add item to the macOS dock icon menu.\n\t\t\t\t[b]Note:[/b] This method is implemented on macOS."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "menu",
              "type": "String",
              "index": "0"
            },
            "name": "global_menu_add_separator",
            "description": "Add a separator between items. Separators also occupy an index.\n\t\t\t\t[b]Note:[/b] This method is implemented on macOS."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "menu",
              "type": "String",
              "index": "0"
            },
            "name": "global_menu_clear",
            "description": "Clear the global menu, in effect removing all items.\n\t\t\t\t[b]Note:[/b] This method is implemented on macOS."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "menu",
                "type": "String",
                "index": "0"
              },
              {
                "name": "idx",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "global_menu_remove_item",
            "description": "Removes the item at index \"idx\" from the global menu. Note that the indexes of items after the removed item are going to be shifted by one.\n\t\t\t\t[b]Note:[/b] This method is implemented on macOS."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "variable",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_environment",
            "description": "Returns [code]true[/code] if the environment variable with the name [code]variable[/code] exists.\n\t\t\t\t[b]Note:[/b] Double-check the casing of [code]variable[/code]. Environment variable names are case-sensitive on all platforms except Windows."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "tag_name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_feature",
            "description": "Returns [code]true[/code] if the feature for the given feature tag is supported in the currently running instance, depending on the platform, build etc. Can be used to check whether you're currently running a debug build, on a certain platform or arch, etc. Refer to the [url=https://docs.godotengine.org/en/3.3/getting_started/workflow/export/feature_tags.html]Feature Tags[/url] documentation for more details.\n\t\t\t\t[b]Note:[/b] Tag names are case-sensitive."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "has_touchscreen_ui_hint",
            "description": "Returns [code]true[/code] if the device has a touchscreen or emulates one."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "has_virtual_keyboard",
            "description": "Returns [code]true[/code] if the platform has a virtual keyboard, [code]false[/code] otherwise."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "hide_virtual_keyboard",
            "description": "Hides the virtual keyboard if it is shown, does nothing otherwise."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_debug_build",
            "description": "Returns [code]true[/code] if the Godot binary used to run the project is a [i]debug[/i] export template, or when running in the editor.\n\t\t\t\tReturns [code]false[/code] if the Godot binary used to run the project is a [i]release[/i] export template.\n\t\t\t\tTo check whether the Godot binary used to run the project is an export template (debug or release), use [code]OS.has_feature(\"standalone\")[/code] instead."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_ok_left_and_cancel_right",
            "description": "Returns [code]true[/code] if the [b]OK[/b] button should appear on the left and [b]Cancel[/b] on the right."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "code",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_scancode_unicode",
            "description": "Returns [code]true[/code] if the input scancode corresponds to a Unicode character."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_stdout_verbose",
            "description": "Returns [code]true[/code] if the engine was executed with [code]-v[/code] (verbose stdout)."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_userfs_persistent",
            "description": "If [code]true[/code], the [code]user://[/code] file system is persistent, so that its state is the same after a player quits and starts the game again. Relevant to the HTML5 platform, where this persistence may be unavailable."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_window_always_on_top",
            "description": "Returns [code]true[/code] if the window should always be on top of other windows."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_window_focused",
            "description": "Returns [code]true[/code] if the window is currently focused.\n\t\t\t\t[b]Note:[/b] Only implemented on desktop platforms. On other platforms, it will always return [code]true[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "keyboard_get_current_layout",
            "description": "Returns active keyboard layout index.\n\t\t\t\t[b]Note:[/b] This method is implemented on Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "keyboard_get_layout_count",
            "description": "Returns the number of keyboard layouts.\n\t\t\t\t[b]Note:[/b] This method is implemented on Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "keyboard_get_layout_language",
            "description": "Returns the ISO-639/BCP-47 language code of the keyboard layout at position [code]index[/code].\n\t\t\t\t[b]Note:[/b] This method is implemented on Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "keyboard_get_layout_name",
            "description": "Returns the localized name of the keyboard layout at position [code]index[/code].\n\t\t\t\t[b]Note:[/b] This method is implemented on Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "name": "keyboard_set_current_layout",
            "description": "Sets active keyboard layout.\n\t\t\t\t[b]Note:[/b] This method is implemented on Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "pid",
              "type": "int",
              "index": "0"
            },
            "name": "kill",
            "description": "Kill (terminate) the process identified by the given process ID ([code]pid[/code]), e.g. the one returned by [method execute] in non-blocking mode.\n\t\t\t\t[b]Note:[/b] This method can also be used to kill processes that were not spawned by the game.\n\t\t\t\t[b]Note:[/b] This method is implemented on Android, iOS, Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "move_window_to_foreground",
            "description": "Moves the window to the front.\n\t\t\t\t[b]Note:[/b] This method is implemented on Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "native_video_is_playing",
            "description": "Returns [code]true[/code] if native video is playing.\n\t\t\t\t[b]Note:[/b] This method is implemented on Android and iOS."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "native_video_pause",
            "description": "Pauses native video playback.\n\t\t\t\t[b]Note:[/b] This method is implemented on Android and iOS."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "volume",
                "type": "float",
                "index": "1"
              },
              {
                "name": "audio_track",
                "type": "String",
                "index": "2"
              },
              {
                "name": "subtitle_track",
                "type": "String",
                "index": "3"
              }
            ],
            "name": "native_video_play",
            "description": "Plays native video from the specified path, at the given volume and with audio and subtitle tracks.\n\t\t\t\t[b]Note:[/b] This method is implemented on Android and iOS, and the current Android implementation does not support the [code]volume[/code], [code]audio_track[/code] and [code]subtitle_track[/code] options."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "native_video_stop",
            "description": "Stops native video playback.\n\t\t\t\t[b]Note:[/b] This method is implemented on Android and iOS."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "native_video_unpause",
            "description": "Resumes native video playback.\n\t\t\t\t[b]Note:[/b] This method is implemented on Android and iOS."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "open_midi_inputs",
            "description": "Initialises the singleton for the system MIDI driver.\n\t\t\t\t[b]Note:[/b] This method is implemented on Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "\"\"",
              "name": "tofile",
              "type": "String",
              "index": "0"
            },
            "name": "print_all_resources",
            "description": "Shows all resources in the game. Optionally, the list can be written to a file by specifying a file path in [code]tofile[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "print_all_textures_by_size",
            "description": "Shows the list of loaded textures sorted by size in memory."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "types",
              "type": "PoolStringArray",
              "index": "0"
            },
            "name": "print_resources_by_type",
            "description": "Shows the number of resources loaded by the game of the given types."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "false",
              "name": "short",
              "type": "bool",
              "index": "0"
            },
            "name": "print_resources_in_use",
            "description": "Shows all resources currently used by the game."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "request_attention",
            "description": "Request the user attention to the window. It'll flash the taskbar button on Windows or bounce the dock icon on OSX.\n\t\t\t\t[b]Note:[/b] This method is implemented on Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "request_permission",
            "description": "At the moment this function is only used by [code]AudioDriverOpenSL[/code] to request permission for [code]RECORD_AUDIO[/code] on Android."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "request_permissions",
            "description": "With this function, you can request dangerous permissions since normal permissions are automatically granted at install time in Android applications.\n\t\t\t\t[b]Note:[/b] This method is implemented on Android."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "variable",
                "type": "String",
                "index": "0"
              },
              {
                "name": "value",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "set_environment",
            "description": "Sets the value of the environment variable [code]variable[/code] to [code]value[/code]. The environment variable will be set for the Godot process and any process executed with [method execute] after running [method set_environment]. The environment variable will [i]not[/i] persist to processes run after the Godot process was terminated.\n\t\t\t\t[b]Note:[/b] Double-check the casing of [code]variable[/code]. Environment variable names are case-sensitive on all platforms except Windows."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "icon",
              "type": "Image",
              "index": "0"
            },
            "name": "set_icon",
            "description": "Sets the game's icon using an [Image] resource.\n\t\t\t\tThe same image is used for window caption, taskbar/dock and window selection dialog. Image is scaled as needed.\n\t\t\t\t[b]Note:[/b] This method is implemented on HTML5, Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "active",
              "type": "bool",
              "index": "0"
            },
            "name": "set_ime_active",
            "description": "Sets whether IME input mode should be enabled.\n\t\t\t\tIf active IME handles key events before the application and creates an composition string and suggestion list.\n\t\t\t\tApplication can retrieve the composition status by using [method get_ime_selection] and [method get_ime_text] functions.\n\t\t\t\tCompleted composition string is committed when input is finished.\n\t\t\t\t[b]Note:[/b] This method is implemented on Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "position",
              "type": "Vector2",
              "index": "0"
            },
            "name": "set_ime_position",
            "description": "Sets position of IME suggestion list popup (in window coordinates).\n\t\t\t\t[b]Note:[/b] This method is implemented on Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "filename",
              "type": "String",
              "index": "0"
            },
            "name": "set_native_icon",
            "description": "Sets the game's icon using a multi-size platform-specific icon file ([code]*.ico[/code] on Windows and [code]*.icns[/code] on macOS).\n\t\t\t\tAppropriate size sub-icons are used for window caption, taskbar/dock and window selection dialog.\n\t\t\t\t[b]Note:[/b] This method is implemented on macOS and Windows."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "set_thread_name",
            "description": "Sets the name of the current thread."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enabled",
              "type": "bool",
              "index": "0"
            },
            "name": "set_use_file_access_save_and_swap",
            "description": "Enables backup saves if [code]enabled[/code] is [code]true[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enabled",
              "type": "bool",
              "index": "0"
            },
            "name": "set_window_always_on_top",
            "description": "Sets whether the window should always be on top.\n\t\t\t\t[b]Note:[/b] This method is implemented on Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "region",
              "type": "PoolVector2Array",
              "index": "0"
            },
            "name": "set_window_mouse_passthrough",
            "description": "Sets a polygonal region of the window which accepts mouse events. Mouse events outside the region will be passed through.\n\t\t\t\tPassing an empty array will disable passthrough support (all mouse events will be intercepted by the window, which is the default behavior).\n\t\t\t\t[codeblock]\n\t\t\t\t# Set region, using Path2D node.\n\t\t\t\tOS.set_window_mouse_passthrough($Path2D.curve.get_baked_points())\n\n\t\t\t\t# Set region, using Polygon2D node.\n\t\t\t\tOS.set_window_mouse_passthrough($Polygon2D.polygon)\n\n\t\t\t\t# Reset region to default.\n\t\t\t\tOS.set_window_mouse_passthrough([])\n\t\t\t\t[/codeblock]\n\t\t\t\t[b]Note:[/b] On Windows, the portion of a window that lies outside the region is not drawn, while on Linux and macOS it is.\n\t\t\t\t[b]Note:[/b] This method is implemented on Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "title",
              "type": "String",
              "index": "0"
            },
            "name": "set_window_title",
            "description": "Sets the window title to the specified string.\n\t\t\t\t[b]Note:[/b] This should be used sporadically. Don't set this every frame, as that will negatively affect performance on some window managers.\n\t\t\t\t[b]Note:[/b] This method is implemented on HTML5, Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "uri",
              "type": "String",
              "index": "0"
            },
            "name": "shell_open",
            "description": "Requests the OS to open a resource with the most appropriate program. For example:\n\t\t\t\t- [code]OS.shell_open(\"C:\\\\Users\\name\\Downloads\")[/code] on Windows opens the file explorer at the user's Downloads folder.\n\t\t\t\t- [code]OS.shell_open(\"https://godotengine.org\")[/code] opens the default web browser on the official Godot website.\n\t\t\t\t- [code]OS.shell_open(\"mailto:example@example.com\")[/code] opens the default email client with the \"To\" field set to [code]example@example.com[/code]. See [url=https://blog.escapecreative.com/customizing-mailto-links/]Customizing [code]mailto:[/code] Links[/url] for a list of fields that can be added.\n\t\t\t\tUse [method ProjectSettings.globalize_path] to convert a [code]res://[/code] or [code]user://[/code] path into a system path for use with this method.\n\t\t\t\t[b]Note:[/b] This method is implemented on Android, iOS, HTML5, Linux, macOS and Windows."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "default": "\"\"",
                "name": "existing_text",
                "type": "String",
                "index": "0"
              },
              {
                "default": "false",
                "name": "multiline",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "show_virtual_keyboard",
            "description": "Shows the virtual keyboard if the platform has one.\n\t\t\t\tThe [code]existing_text[/code] parameter is useful for implementing your own [LineEdit] or [TextEdit], as it tells the virtual keyboard what text has already been typed (the virtual keyboard uses it for auto-correct and predictions).\n\t\t\t\tThe [code]multiline[/code] parameter needs to be set to [code]true[/code] to be able to enter multiple lines of text, as in [TextEdit].\n\t\t\t\t[b]Note:[/b] This method is implemented on Android, iOS and UWP."
          }
        ]
      },
      "name": "OS",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "1",
            "name": "VIDEO_DRIVER_GLES2",
            "enum": "VideoDriver"
          },
          {
            "value": "0",
            "name": "VIDEO_DRIVER_GLES3",
            "enum": "VideoDriver"
          },
          {
            "value": "0",
            "name": "DAY_SUNDAY",
            "enum": "Weekday"
          },
          {
            "value": "1",
            "name": "DAY_MONDAY",
            "enum": "Weekday"
          },
          {
            "value": "2",
            "name": "DAY_TUESDAY",
            "enum": "Weekday"
          },
          {
            "value": "3",
            "name": "DAY_WEDNESDAY",
            "enum": "Weekday"
          },
          {
            "value": "4",
            "name": "DAY_THURSDAY",
            "enum": "Weekday"
          },
          {
            "value": "5",
            "name": "DAY_FRIDAY",
            "enum": "Weekday"
          },
          {
            "value": "6",
            "name": "DAY_SATURDAY",
            "enum": "Weekday"
          },
          {
            "value": "1",
            "name": "MONTH_JANUARY",
            "enum": "Month"
          },
          {
            "value": "2",
            "name": "MONTH_FEBRUARY",
            "enum": "Month"
          },
          {
            "value": "3",
            "name": "MONTH_MARCH",
            "enum": "Month"
          },
          {
            "value": "4",
            "name": "MONTH_APRIL",
            "enum": "Month"
          },
          {
            "value": "5",
            "name": "MONTH_MAY",
            "enum": "Month"
          },
          {
            "value": "6",
            "name": "MONTH_JUNE",
            "enum": "Month"
          },
          {
            "value": "7",
            "name": "MONTH_JULY",
            "enum": "Month"
          },
          {
            "value": "8",
            "name": "MONTH_AUGUST",
            "enum": "Month"
          },
          {
            "value": "9",
            "name": "MONTH_SEPTEMBER",
            "enum": "Month"
          },
          {
            "value": "10",
            "name": "MONTH_OCTOBER",
            "enum": "Month"
          },
          {
            "value": "11",
            "name": "MONTH_NOVEMBER",
            "enum": "Month"
          },
          {
            "value": "12",
            "name": "MONTH_DECEMBER",
            "enum": "Month"
          },
          {
            "value": "0",
            "name": "APPLICATION_HANDLE",
            "enum": "HandleType"
          },
          {
            "value": "1",
            "name": "DISPLAY_HANDLE",
            "enum": "HandleType"
          },
          {
            "value": "2",
            "name": "WINDOW_HANDLE",
            "enum": "HandleType"
          },
          {
            "value": "3",
            "name": "WINDOW_VIEW",
            "enum": "HandleType"
          },
          {
            "value": "4",
            "name": "OPENGL_CONTEXT",
            "enum": "HandleType"
          },
          {
            "value": "0",
            "name": "SCREEN_ORIENTATION_LANDSCAPE",
            "enum": "ScreenOrientation"
          },
          {
            "value": "1",
            "name": "SCREEN_ORIENTATION_PORTRAIT",
            "enum": "ScreenOrientation"
          },
          {
            "value": "2",
            "name": "SCREEN_ORIENTATION_REVERSE_LANDSCAPE",
            "enum": "ScreenOrientation"
          },
          {
            "value": "3",
            "name": "SCREEN_ORIENTATION_REVERSE_PORTRAIT",
            "enum": "ScreenOrientation"
          },
          {
            "value": "4",
            "name": "SCREEN_ORIENTATION_SENSOR_LANDSCAPE",
            "enum": "ScreenOrientation"
          },
          {
            "value": "5",
            "name": "SCREEN_ORIENTATION_SENSOR_PORTRAIT",
            "enum": "ScreenOrientation"
          },
          {
            "value": "6",
            "name": "SCREEN_ORIENTATION_SENSOR",
            "enum": "ScreenOrientation"
          },
          {
            "value": "0",
            "name": "SYSTEM_DIR_DESKTOP",
            "enum": "SystemDir"
          },
          {
            "value": "1",
            "name": "SYSTEM_DIR_DCIM",
            "enum": "SystemDir"
          },
          {
            "value": "2",
            "name": "SYSTEM_DIR_DOCUMENTS",
            "enum": "SystemDir"
          },
          {
            "value": "3",
            "name": "SYSTEM_DIR_DOWNLOADS",
            "enum": "SystemDir"
          },
          {
            "value": "4",
            "name": "SYSTEM_DIR_MOVIES",
            "enum": "SystemDir"
          },
          {
            "value": "5",
            "name": "SYSTEM_DIR_MUSIC",
            "enum": "SystemDir"
          },
          {
            "value": "6",
            "name": "SYSTEM_DIR_PICTURES",
            "enum": "SystemDir"
          },
          {
            "value": "7",
            "name": "SYSTEM_DIR_RINGTONES",
            "enum": "SystemDir"
          },
          {
            "value": "0",
            "name": "POWERSTATE_UNKNOWN",
            "enum": "PowerState"
          },
          {
            "value": "1",
            "name": "POWERSTATE_ON_BATTERY",
            "enum": "PowerState"
          },
          {
            "value": "2",
            "name": "POWERSTATE_NO_BATTERY",
            "enum": "PowerState"
          },
          {
            "value": "3",
            "name": "POWERSTATE_CHARGING",
            "enum": "PowerState"
          },
          {
            "value": "4",
            "name": "POWERSTATE_CHARGED",
            "enum": "PowerState"
          }
        ]
      },
      "brief_description": "Operating System functions.",
      "description": "Operating System functions. OS wraps the most common functionality to communicate with the host operating system, such as the clipboard, video driver, date and time, timers, environment variables, execution of binaries, command line, etc."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": {
          "return": {
            "type": "int"
          },
          "qualifiers": "const",
          "name": "size",
          "description": {}
        }
      },
      "name": "PackedDataContainerRef",
      "version": "3.3",
      "constants": {},
      "brief_description": "Reference version of [PackedDataContainer].",
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "PoolByteArray(  )",
          "setter": "_set_data",
          "name": "__data__",
          "getter": "_get_data",
          "type": "PoolByteArray"
        }
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "value",
              "type": "Variant",
              "index": "0"
            },
            "name": "pack",
            "description": {}
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "size",
            "description": {}
          }
        ]
      },
      "name": "PackedDataContainer",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/520",
          "title": "2D Role Playing Game Demo"
        }
      },
      "members": {
        "member": {
          "default": "{\"conn_count\": 0,\"conns\": PoolIntArray(  ),\"editable_instances\": [  ],\"names\": PoolStringArray(  ),\"node_count\": 0,\"node_paths\": [  ],\"nodes\": PoolIntArray(  ),\"variants\": [  ],\"version\": 2}",
          "value": "A dictionary representation of the scene contents.\n\t\t\tAvailable keys include \"rnames\" and \"variants\" for resources, \"node_count\", \"nodes\", \"node_paths\" for nodes, \"editable_instances\" for base scene children overrides, \"conn_count\" and \"conns\" for signal connections, and \"version\" for the format style of the PackedScene.",
          "setter": "_set_bundled_scene",
          "name": "_bundled",
          "getter": "_get_bundled_scene",
          "type": "Dictionary"
        }
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "can_instance",
            "description": "Returns [code]true[/code] if the scene file has nodes."
          },
          {
            "return": {
              "type": "SceneState"
            },
            "name": "get_state",
            "description": "Returns the [code]SceneState[/code] representing the scene file contents."
          },
          {
            "return": {
              "type": "Node"
            },
            "argument": {
              "default": "0",
              "name": "edit_state",
              "type": "int",
              "enum": "PackedScene.GenEditState",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "instance",
            "description": "Instantiates the scene's node hierarchy. Triggers child scene instantiation(s). Triggers a [constant Node.NOTIFICATION_INSTANCED] notification on the root node."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "path",
              "type": "Node",
              "index": "0"
            },
            "name": "pack",
            "description": "Pack will ignore any sub-nodes not owned by given node. See [member Node.owner]."
          }
        ]
      },
      "name": "PackedScene",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "GEN_EDIT_STATE_DISABLED",
            "enum": "GenEditState"
          },
          {
            "value": "1",
            "name": "GEN_EDIT_STATE_INSTANCE",
            "enum": "GenEditState"
          },
          {
            "value": "2",
            "name": "GEN_EDIT_STATE_MAIN",
            "enum": "GenEditState"
          }
        ]
      },
      "brief_description": "An abstraction of a serialized scene.",
      "description": "A simplified interface to a scene file. Provides access to operations and checks that can be performed on the scene resource itself.\n\t\tCan be used to save a node to a file. When saving, the node as well as all the nodes it owns get saved (see [code]owner[/code] property on [Node]).\n\t\t[b]Note:[/b] The node doesn't need to own itself.\n\t\t[b]Example of loading a saved scene:[/b]\n\t\t[codeblock]\n\t\t# Use `load()` instead of `preload()` if the path isn't known at compile-time.\n\t\tvar scene = preload(\"res://scene.tscn\").instance()\n\t\t# Add the node as a child of the node the script is attached to.\n\t\tadd_child(scene)\n\t\t[/codeblock]\n\t\t[b]Example of saving a node with different owners:[/b] The following example creates 3 objects: [code]Node2D[/code] ([code]node[/code]), [code]RigidBody2D[/code] ([code]rigid[/code]) and [code]CollisionObject2D[/code] ([code]collision[/code]). [code]collision[/code] is a child of [code]rigid[/code] which is a child of [code]node[/code]. Only [code]rigid[/code] is owned by [code]node[/code] and [code]pack[/code] will therefore only save those two nodes, but not [code]collision[/code].\n\t\t[codeblock]\n\t\t# Create the objects.\n\t\tvar node = Node2D.new()\n\t\tvar rigid = RigidBody2D.new()\n\t\tvar collision = CollisionShape2D.new()\n\n\t\t# Create the object hierarchy.\n\t\trigid.add_child(collision)\n\t\tnode.add_child(rigid)\n\n\t\t# Change owner of `rigid`, but not of `collision`.\n\t\trigid.owner = node\n\n\t\tvar scene = PackedScene.new()\n\t\t# Only `node` and `rigid` are now packed.\n\t\tvar result = scene.pack(node)\n\t\tif result == OK:\n\t\t    var error = ResourceSaver.save(\"res://path/name.scn\", scene)  # Or \"user://...\"\n\t\t    if error != OK:\n\t\t        push_error(\"An error occurred while saving the scene to disk.\")\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "PacketPeer",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "packet_peer",
                "type": "PacketPeerUDP",
                "index": "0"
              },
              {
                "default": "true",
                "name": "validate_certs",
                "type": "bool",
                "index": "1"
              },
              {
                "default": "\"\"",
                "name": "for_hostname",
                "type": "String",
                "index": "2"
              },
              {
                "default": "null",
                "name": "valid_certificate",
                "type": "X509Certificate",
                "index": "3"
              }
            ],
            "name": "connect_to_peer",
            "description": "Connects a [code]peer[/code] beginning the DTLS handshake using the underlying [PacketPeerUDP] which must be connected (see [method PacketPeerUDP.connect_to_host]). If [code]validate_certs[/code] is [code]true[/code], [PacketPeerDTLS] will validate that the certificate presented by the remote peer and match it with the [code]for_hostname[/code] argument. You can specify a custom [X509Certificate] to use for validation via the [code]valid_certificate[/code] argument."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "disconnect_from_peer",
            "description": "Disconnects this peer, terminating the DTLS session."
          },
          {
            "return": {
              "type": "int",
              "enum": "PacketPeerDTLS.Status"
            },
            "qualifiers": "const",
            "name": "get_status",
            "description": "Returns the status of the connection. See [enum Status] for values."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "poll",
            "description": "Poll the connection to check for incoming packets. Call this frequently to update the status and keep the connection working."
          }
        ]
      },
      "name": "PacketPeerDTLS",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "STATUS_DISCONNECTED",
            "enum": "Status"
          },
          {
            "value": "1",
            "name": "STATUS_HANDSHAKING",
            "enum": "Status"
          },
          {
            "value": "2",
            "name": "STATUS_CONNECTED",
            "enum": "Status"
          },
          {
            "value": "3",
            "name": "STATUS_ERROR",
            "enum": "Status"
          },
          {
            "value": "4",
            "name": "STATUS_ERROR_HOSTNAME_MISMATCH",
            "enum": "Status"
          }
        ]
      },
      "brief_description": "DTLS packet peer.",
      "description": "This class represents a DTLS peer connection. It can be used to connect to a DTLS server, and is returned by [method DTLSServer.take_connection].\n\t\t[b]Warning:[/b] SSL/TLS certificate revocation and certificate pinning are currently not supported. Revoked certificates are accepted as long as they are otherwise valid. If this is a concern, you may want to use automatically managed certificates with a short validity period."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "65532",
            "setter": "set_input_buffer_max_size",
            "name": "input_buffer_max_size",
            "getter": "get_input_buffer_max_size",
            "type": "int"
          },
          {
            "default": "65532",
            "setter": "set_output_buffer_max_size",
            "name": "output_buffer_max_size",
            "getter": "get_output_buffer_max_size",
            "type": "int"
          },
          {
            "value": "The wrapped [StreamPeer] object.",
            "setter": "set_stream_peer",
            "name": "stream_peer",
            "getter": "get_stream_peer",
            "type": "StreamPeer"
          }
        ]
      },
      "inherits": "PacketPeer",
      "methods": {},
      "name": "PacketPeerStream",
      "version": "3.3",
      "constants": {},
      "brief_description": "Wrapper to use a PacketPeer over a StreamPeer.",
      "description": "PacketStreamPeer provides a wrapper for working using packets over a stream. This allows for using packet based code with StreamPeers. PacketPeerStream implements a custom protocol over the StreamPeer, so the user should not read or write to the wrapped StreamPeer directly."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "PacketPeer",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "name": "close",
            "description": "Closes the UDP socket the [PacketPeerUDP] is currently listening on."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "host",
                "type": "String",
                "index": "0"
              },
              {
                "name": "port",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "connect_to_host",
            "description": "Calling this method connects this UDP peer to the given [code]host[/code]/[code]port[/code] pair. UDP is in reality connectionless, so this option only means that incoming packets from different addresses are automatically discarded, and that outgoing packets are always sent to the connected address (future calls to [method set_dest_address] are not allowed). This method does not send any data to the remote peer, to do that, use [method PacketPeer.put_var] or [method PacketPeer.put_packet] as usual. See also [UDPServer].\n\t\t\t\t[b]Note:[/b] Connecting to the remote peer does not help to protect from malicious attacks like IP spoofing, etc. Think about using an encryption technique like SSL or DTLS if you feel like your application is transferring sensitive information."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_packet_ip",
            "description": "Returns the IP of the remote peer that sent the last packet(that was received with [method PacketPeer.get_packet] or [method PacketPeer.get_var])."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_packet_port",
            "description": "Returns the port of the remote peer that sent the last packet(that was received with [method PacketPeer.get_packet] or [method PacketPeer.get_var])."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_connected_to_host",
            "description": "Returns [code]true[/code] if the UDP socket is open and has been connected to a remote address. See [method connect_to_host]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_listening",
            "description": "Returns whether this [PacketPeerUDP] is listening."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "multicast_address",
                "type": "String",
                "index": "0"
              },
              {
                "name": "interface_name",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "join_multicast_group",
            "description": "Joins the multicast group specified by [code]multicast_address[/code] using the interface identified by [code]interface_name[/code].\n\t\t\t\tYou can join the same multicast group with multiple interfaces. Use [method IP.get_local_interfaces] to know which are available.\n\t\t\t\tNote: Some Android devices might require the [code]CHANGE_WIFI_MULTICAST_STATE[/code] permission for multicast to work."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "multicast_address",
                "type": "String",
                "index": "0"
              },
              {
                "name": "interface_name",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "leave_multicast_group",
            "description": "Removes the interface identified by [code]interface_name[/code] from the multicast group specified by [code]multicast_address[/code]."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "port",
                "type": "int",
                "index": "0"
              },
              {
                "default": "\"*\"",
                "name": "bind_address",
                "type": "String",
                "index": "1"
              },
              {
                "default": "65536",
                "name": "recv_buf_size",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "listen",
            "description": "Makes this [PacketPeerUDP] listen on the [code]port[/code] binding to [code]bind_address[/code] with a buffer size [code]recv_buf_size[/code].\n\t\t\t\tIf [code]bind_address[/code] is set to [code]\"*\"[/code] (default), the peer will listen on all available addresses (both IPv4 and IPv6).\n\t\t\t\tIf [code]bind_address[/code] is set to [code]\"0.0.0.0\"[/code] (for IPv4) or [code]\"::\"[/code] (for IPv6), the peer will listen on all available addresses matching that IP type.\n\t\t\t\tIf [code]bind_address[/code] is set to any valid address (e.g. [code]\"192.168.1.101\"[/code], [code]\"::1\"[/code], etc), the peer will only listen on the interface with that addresses (or fail if no interface with the given address exists)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enabled",
              "type": "bool",
              "index": "0"
            },
            "name": "set_broadcast_enabled",
            "description": "Enable or disable sending of broadcast packets (e.g. [code]set_dest_address(\"255.255.255.255\", 4343)[/code]. This option is disabled by default.\n\t\t\t\tNote: Some Android devices might require the [code]CHANGE_WIFI_MULTICAST_STATE[/code] permission and this option to be enabled to receive broadcast packets too."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "host",
                "type": "String",
                "index": "0"
              },
              {
                "name": "port",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set_dest_address",
            "description": "Sets the destination address and port for sending packets and variables. A hostname will be resolved using DNS if needed.\n\t\t\t\tNote: [method set_broadcast_enabled] must be enabled before sending packets to a broadcast address (e.g. [code]255.255.255.255[/code])."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "name": "wait",
            "description": "Waits for a packet to arrive on the listening port. See [method listen].\n\t\t\t\t[b]Note:[/b] [method wait] can't be interrupted once it has been called. This can be worked around by allowing the other party to send a specific \"death pill\" packet like this:\n\t\t\t\t[codeblock]\n\t\t\t\t# Server\n\t\t\t\tsocket.set_dest_address(\"127.0.0.1\", 789)\n\t\t\t\tsocket.put_packet(\"Time to stop\".to_ascii())\n\n\t\t\t\t# Client\n\t\t\t\twhile socket.wait() == OK:\n\t\t\t\t    var data = socket.get_packet().get_string_from_ascii()\n\t\t\t\t    if data == \"Time to stop\":\n\t\t\t\t        return\n\t\t\t\t[/codeblock]"
          }
        ]
      },
      "name": "PacketPeerUDP",
      "version": "3.3",
      "constants": {},
      "brief_description": "UDP packet peer.",
      "description": "UDP packet peer. Can be used to send raw UDP packets as well as [Variant]s."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "false",
            "value": "[i]Deprecated.[/i] Use [code]get_var[/code] and [code]put_var[/code] parameters instead.\n\t\t\tIf [code]true[/code], the PacketPeer will allow encoding and decoding of object via [method get_var] and [method put_var].\n\t\t\t[b]Warning:[/b] Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.",
            "setter": "set_allow_object_decoding",
            "name": "allow_object_decoding",
            "getter": "is_object_decoding_allowed",
            "type": "bool"
          },
          {
            "default": "8388608",
            "value": "Maximum buffer size allowed when encoding [Variant]s. Raise this value to support heavier memory allocations.\n\t\t\tThe [method put_var] method allocates memory on the stack, and the buffer used will grow automatically to the closest power of two to match the size of the [Variant]. If the [Variant] is bigger than [code]encode_buffer_max_size[/code], the method will error out with [constant ERR_OUT_OF_MEMORY].",
            "setter": "set_encode_buffer_max_size",
            "name": "encode_buffer_max_size",
            "getter": "get_encode_buffer_max_size",
            "type": "int"
          }
        ]
      },
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_available_packet_count",
            "description": "Returns the number of packets currently available in the ring-buffer."
          },
          {
            "return": {
              "type": "PoolByteArray"
            },
            "name": "get_packet",
            "description": "Gets a raw packet."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "qualifiers": "const",
            "name": "get_packet_error",
            "description": "Returns the error state of the last packet received (via [method get_packet] and [method get_var])."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "default": "false",
              "name": "allow_objects",
              "type": "bool",
              "index": "0"
            },
            "name": "get_var",
            "description": "Gets a Variant. If [code]allow_objects[/code] (or [member allow_object_decoding]) is [code]true[/code], decoding objects is allowed.\n\t\t\t\t[b]Warning:[/b] Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "buffer",
              "type": "PoolByteArray",
              "index": "0"
            },
            "name": "put_packet",
            "description": "Sends a raw packet."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "var",
                "type": "Variant",
                "index": "0"
              },
              {
                "default": "false",
                "name": "full_objects",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "put_var",
            "description": "Sends a [Variant] as a packet. If [code]full_objects[/code] (or [member allow_object_decoding]) is [code]true[/code], encoding objects is allowed (and can potentially include code)."
          }
        ]
      },
      "name": "PacketPeer",
      "version": "3.3",
      "constants": {},
      "brief_description": "Abstraction and base class for packet-based protocols.",
      "description": "PacketPeer is an abstraction and base class for packet-based protocols (such as UDP). It provides an API for sending and receiving packets both as raw data or variables. This makes it easy to transfer data over a protocol, without having to encode data as low-level bytes or having to worry about network ordering."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/520",
          "title": "2D Role Playing Game Demo"
        }
      },
      "theme_items": {
        "theme_item": {
          "value": "The style of [PanelContainer]'s background.",
          "name": "panel",
          "type": "StyleBox"
        }
      },
      "inherits": "Container",
      "methods": {},
      "name": "PanelContainer",
      "version": "3.3",
      "constants": {},
      "brief_description": "Panel container type.",
      "description": "Panel container type. This container fits controls inside of the delimited area of a stylebox. It's useful for giving controls an outline."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://godotengine.org/asset-library/asset/520",
            "title": "2D Role Playing Game Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/516",
            "title": "2D Finite State Machine Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/523",
            "title": "3D Inverse Kinematics Demo"
          }
        ]
      },
      "theme_items": {
        "theme_item": {
          "value": "The style of this [Panel].",
          "name": "panel",
          "type": "StyleBox"
        }
      },
      "inherits": "Control",
      "methods": {},
      "name": "Panel",
      "version": "3.3",
      "constants": {},
      "brief_description": "Provides an opaque background for [Control] children.",
      "description": "Panel is a [Control] that displays an opaque background. It's commonly used as a parent and container for other types of [Control] nodes."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "value": "[Texture] to be applied to the PanoramaSky.",
          "setter": "set_panorama",
          "name": "panorama",
          "getter": "get_panorama",
          "type": "Texture"
        }
      },
      "inherits": "Sky",
      "methods": {},
      "name": "PanoramaSky",
      "version": "3.3",
      "constants": {},
      "brief_description": "A type of [Sky] used to draw a background texture.",
      "description": "A resource referenced in an [Environment] that is used to draw a background. The Panorama sky functions similar to skyboxes in other engines, except it uses an equirectangular sky map instead of a cube map.\n\t\tUsing an HDR panorama is strongly recommended for accurate, high-quality reflections. Godot supports the Radiance HDR ([code].hdr[/code]) and OpenEXR ([code].exr[/code]) image formats for this purpose.\n\t\tYou can use [url=https://danilw.github.io/GLSL-howto/cubemap_to_panorama_js/cubemap_to_panorama.html]this tool[/url] to convert a cube map to an equirectangular sky map."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "-100",
            "setter": "set_layer",
            "override": "true",
            "name": "layer",
            "getter": "get_layer",
            "type": "int"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The base position offset for all [ParallaxLayer] children.",
            "setter": "set_scroll_base_offset",
            "name": "scroll_base_offset",
            "getter": "get_scroll_base_offset",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 1, 1 )",
            "value": "The base motion scale for all [ParallaxLayer] children.",
            "setter": "set_scroll_base_scale",
            "name": "scroll_base_scale",
            "getter": "get_scroll_base_scale",
            "type": "Vector2"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], elements in [ParallaxLayer] child aren't affected by the zoom level of the camera.",
            "setter": "set_ignore_camera_zoom",
            "name": "scroll_ignore_camera_zoom",
            "getter": "is_ignore_camera_zoom",
            "type": "bool"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "Top-left limits for scrolling to begin. If the camera is outside of this limit, the background will stop scrolling. Must be lower than [member scroll_limit_end] to work.",
            "setter": "set_limit_begin",
            "name": "scroll_limit_begin",
            "getter": "get_limit_begin",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "Bottom-right limits for scrolling to end. If the camera is outside of this limit, the background will stop scrolling. Must be higher than [member scroll_limit_begin] to work.",
            "setter": "set_limit_end",
            "name": "scroll_limit_end",
            "getter": "get_limit_end",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The ParallaxBackground's scroll value. Calculated automatically when using a [Camera2D], but can be used to manually manage scrolling when no camera is present.",
            "setter": "set_scroll_offset",
            "name": "scroll_offset",
            "getter": "get_scroll_offset",
            "type": "Vector2"
          }
        ]
      },
      "inherits": "CanvasLayer",
      "methods": {},
      "name": "ParallaxBackground",
      "version": "3.3",
      "constants": {},
      "brief_description": "A node used to create a parallax scrolling background.",
      "description": "A ParallaxBackground uses one or more [ParallaxLayer] child nodes to create a parallax effect. Each [ParallaxLayer] can move at a different speed using [member ParallaxLayer.motion_offset]. This creates an illusion of depth in a 2D game. If not used with a [Camera2D], you must manually calculate the [member scroll_offset]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "Vector2( 0, 0 )",
            "value": "The ParallaxLayer's [Texture] mirroring. Useful for creating an infinite scrolling background. If an axis is set to [code]0[/code], the [Texture] will not be mirrored.",
            "setter": "set_mirroring",
            "name": "motion_mirroring",
            "getter": "get_mirroring",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The ParallaxLayer's offset relative to the parent ParallaxBackground's [member ParallaxBackground.scroll_offset].",
            "setter": "set_motion_offset",
            "name": "motion_offset",
            "getter": "get_motion_offset",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 1, 1 )",
            "value": "Multiplies the ParallaxLayer's motion. If an axis is set to [code]0[/code], it will not scroll.",
            "setter": "set_motion_scale",
            "name": "motion_scale",
            "getter": "get_motion_scale",
            "type": "Vector2"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {},
      "name": "ParallaxLayer",
      "version": "3.3",
      "constants": {},
      "brief_description": "A parallax scrolling layer to be used with [ParallaxBackground].",
      "description": "A ParallaxLayer must be the child of a [ParallaxBackground] node. Each ParallaxLayer can be set to move at different speeds relative to the camera movement or the [member ParallaxBackground.scroll_offset] value.\n\t\tThis node's children will be affected by its scroll offset.\n\t\t[b]Note:[/b] Any changes to this node's position and scale made after it enters the scene will be ignored."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/2d/particle_systems_2d.html",
            "title": "Particle systems (2D)"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/515",
            "title": "2D Dodge The Creeps Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "8",
            "value": "The number of particles emitted in one emission cycle (corresponding to the [member lifetime]).\n\t\t\t[b]Note:[/b] Changing [member amount] will reset the particle emission, therefore removing all particles that were already emitted before changing [member amount].",
            "setter": "set_amount",
            "name": "amount",
            "getter": "get_amount",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Particle draw order. Uses [enum DrawOrder] values.",
            "setter": "set_draw_order",
            "name": "draw_order",
            "getter": "get_draw_order",
            "type": "int",
            "enum": "Particles2D.DrawOrder"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], particles are being emitted.",
            "setter": "set_emitting",
            "name": "emitting",
            "getter": "is_emitting",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "How rapidly particles in an emission cycle are emitted. If greater than [code]0[/code], there will be a gap in emissions before the next cycle begins.",
            "setter": "set_explosiveness_ratio",
            "name": "explosiveness",
            "getter": "get_explosiveness_ratio",
            "type": "float"
          },
          {
            "default": "0",
            "value": "The particle system's frame rate is fixed to a value. For instance, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the simulation of the particle system itself.",
            "setter": "set_fixed_fps",
            "name": "fixed_fps",
            "getter": "get_fixed_fps",
            "type": "int"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], results in fractional delta calculation which has a smoother particles display effect.",
            "setter": "set_fractional_delta",
            "name": "fract_delta",
            "getter": "get_fractional_delta",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "The amount of time each particle will exist (in seconds).",
            "setter": "set_lifetime",
            "name": "lifetime",
            "getter": "get_lifetime",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], particles use the parent node's coordinate space. If [code]false[/code], they use global coordinates.",
            "setter": "set_use_local_coordinates",
            "name": "local_coords",
            "getter": "get_use_local_coordinates",
            "type": "bool"
          },
          {
            "value": "Normal map to be used for the [member texture] property.\n\t\t\t[b]Note:[/b] Godot expects the normal map to use X+, Y-, and Z+ coordinates. See [url=http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates]this page[/url] for a comparison of normal map coordinates expected by popular engines.",
            "setter": "set_normal_map",
            "name": "normal_map",
            "getter": "get_normal_map",
            "type": "Texture"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], only one emission cycle occurs. If set [code]true[/code] during a cycle, emission will stop at the cycle's end.",
            "setter": "set_one_shot",
            "name": "one_shot",
            "getter": "get_one_shot",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "Particle system starts as if it had already run for this many seconds.",
            "setter": "set_pre_process_time",
            "name": "preprocess",
            "getter": "get_pre_process_time",
            "type": "float"
          },
          {
            "value": "[Material] for processing particles. Can be a [ParticlesMaterial] or a [ShaderMaterial].",
            "setter": "set_process_material",
            "name": "process_material",
            "getter": "get_process_material",
            "type": "Material"
          },
          {
            "default": "0.0",
            "value": "Emission lifetime randomness ratio.",
            "setter": "set_randomness_ratio",
            "name": "randomness",
            "getter": "get_randomness_ratio",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Particle system's running speed scaling ratio. A value of [code]0[/code] can be used to pause the particles.",
            "setter": "set_speed_scale",
            "name": "speed_scale",
            "getter": "get_speed_scale",
            "type": "float"
          },
          {
            "value": "Particle texture. If [code]null[/code], particles will be squares.",
            "setter": "set_texture",
            "name": "texture",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "default": "Rect2( -100, -100, 200, 200 )",
            "value": "The [Rect2] that determines the node's region which needs to be visible on screen for the particle system to be active.\n\t\t\tGrow the rect if particles suddenly appear/disappear when the node enters/exits the screen. The [Rect2] can be grown via code or with the [b]Particles → Generate Visibility Rect[/b] editor tool.",
            "setter": "set_visibility_rect",
            "name": "visibility_rect",
            "getter": "get_visibility_rect",
            "type": "Rect2"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Rect2"
            },
            "qualifiers": "const",
            "name": "capture_rect",
            "description": "Returns a rectangle containing the positions of all existing particles."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "restart",
            "description": "Restarts all the existing particles."
          }
        ]
      },
      "name": "Particles2D",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "DRAW_ORDER_INDEX",
            "enum": "DrawOrder"
          },
          {
            "value": "1",
            "name": "DRAW_ORDER_LIFETIME",
            "enum": "DrawOrder"
          }
        ]
      },
      "brief_description": "GPU-based 2D particle emitter.",
      "description": "2D particle node used to create a variety of particle systems and effects. [Particles2D] features an emitter that generates some number of particles at a given rate.\n\t\tUse the [code]process_material[/code] property to add a [ParticlesMaterial] to configure particle appearance and behavior. Alternatively, you can add a [ShaderMaterial] which will be applied to all particles.\n\t\t[b]Note:[/b] [Particles2D] only work when using the GLES3 renderer. If using the GLES2 renderer, use [CPUParticles2D] instead. You can convert [Particles2D] to [CPUParticles2D] by selecting the node, clicking the [b]Particles[/b] menu at the top of the 2D editor viewport then choosing [b]Convert to CPUParticles2D[/b].\n\t\t[b]Note:[/b] After working on a Particles node, remember to update its [member visibility_rect] by selecting it, clicking the [b]Particles[/b] menu at the top of the 2D editor viewport then choose [b]Generate Visibility Rect[/b]. Otherwise, particles may suddenly disappear depending on the camera position and angle.\n\t\t[b]Note:[/b] Unlike [CPUParticles2D], [Particles2D] currently ignore the texture region defined in [AtlasTexture]s."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0.0",
            "value": "Initial rotation applied to each particle, in degrees.\n\t\t\tOnly applied when [member flag_disable_z] or [member flag_rotate_y] are [code]true[/code] or the [SpatialMaterial] being used to draw the particle is using [constant SpatialMaterial.BILLBOARD_PARTICLES].",
            "setter": "set_param",
            "name": "angle",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's rotation will be animated along this [CurveTexture].",
            "setter": "set_param_texture",
            "name": "angle_curve",
            "getter": "get_param_texture",
            "type": "Texture"
          },
          {
            "default": "0.0",
            "value": "Rotation randomness ratio.",
            "setter": "set_param_randomness",
            "name": "angle_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Initial angular velocity applied to each particle. Sets the speed of rotation of the particle.\n\t\t\tOnly applied when [member flag_disable_z] or [member flag_rotate_y] are [code]true[/code] or the [SpatialMaterial] being used to draw the particle is using [constant SpatialMaterial.BILLBOARD_PARTICLES].",
            "setter": "set_param",
            "name": "angular_velocity",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's angular velocity will vary along this [CurveTexture].",
            "setter": "set_param_texture",
            "name": "angular_velocity_curve",
            "getter": "get_param_texture",
            "type": "Texture"
          },
          {
            "default": "0.0",
            "value": "Angular velocity randomness ratio.",
            "setter": "set_param_randomness",
            "name": "angular_velocity_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Particle animation offset.",
            "setter": "set_param",
            "name": "anim_offset",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's animation offset will vary along this [CurveTexture].",
            "setter": "set_param_texture",
            "name": "anim_offset_curve",
            "getter": "get_param_texture",
            "type": "Texture"
          },
          {
            "default": "0.0",
            "value": "Animation offset randomness ratio.",
            "setter": "set_param_randomness",
            "name": "anim_offset_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Particle animation speed.",
            "setter": "set_param",
            "name": "anim_speed",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's animation speed will vary along this [CurveTexture].",
            "setter": "set_param_texture",
            "name": "anim_speed_curve",
            "getter": "get_param_texture",
            "type": "Texture"
          },
          {
            "default": "0.0",
            "value": "Animation speed randomness ratio.",
            "setter": "set_param_randomness",
            "name": "anim_speed_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "Each particle's initial color. If the [Particles2D]'s [code]texture[/code] is defined, it will be multiplied by this color. To have particle display color in a [SpatialMaterial] make sure to set [member SpatialMaterial.vertex_color_use_as_albedo] to [code]true[/code].",
            "setter": "set_color",
            "name": "color",
            "getter": "get_color",
            "type": "Color"
          },
          {
            "value": "Each particle's color will vary along this [GradientTexture].",
            "setter": "set_color_ramp",
            "name": "color_ramp",
            "getter": "get_color_ramp",
            "type": "Texture"
          },
          {
            "default": "0.0",
            "value": "The rate at which particles lose velocity.",
            "setter": "set_param",
            "name": "damping",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Damping will vary along this [CurveTexture].",
            "setter": "set_param_texture",
            "name": "damping_curve",
            "getter": "get_param_texture",
            "type": "Texture"
          },
          {
            "default": "0.0",
            "value": "Damping randomness ratio.",
            "setter": "set_param_randomness",
            "name": "damping_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "Vector3( 1, 0, 0 )",
            "value": "Unit vector specifying the particles' emission direction.",
            "setter": "set_direction",
            "name": "direction",
            "getter": "get_direction",
            "type": "Vector3"
          },
          {
            "value": "The box's extents if [code]emission_shape[/code] is set to [constant EMISSION_SHAPE_BOX].",
            "setter": "set_emission_box_extents",
            "name": "emission_box_extents",
            "getter": "get_emission_box_extents",
            "type": "Vector3"
          },
          {
            "value": "Particle color will be modulated by color determined by sampling this texture at the same point as the [member emission_point_texture].",
            "setter": "set_emission_color_texture",
            "name": "emission_color_texture",
            "getter": "get_emission_color_texture",
            "type": "Texture"
          },
          {
            "value": "Particle velocity and rotation will be set by sampling this texture at the same point as the [member emission_point_texture]. Used only in [constant EMISSION_SHAPE_DIRECTED_POINTS]. Can be created automatically from mesh or node by selecting \"Create Emission Points from Mesh/Node\" under the \"Particles\" tool in the toolbar.",
            "setter": "set_emission_normal_texture",
            "name": "emission_normal_texture",
            "getter": "get_emission_normal_texture",
            "type": "Texture"
          },
          {
            "value": "The number of emission points if [code]emission_shape[/code] is set to [constant EMISSION_SHAPE_POINTS] or [constant EMISSION_SHAPE_DIRECTED_POINTS].",
            "setter": "set_emission_point_count",
            "name": "emission_point_count",
            "getter": "get_emission_point_count",
            "type": "int"
          },
          {
            "value": "Particles will be emitted at positions determined by sampling this texture at a random position. Used with [constant EMISSION_SHAPE_POINTS] and [constant EMISSION_SHAPE_DIRECTED_POINTS]. Can be created automatically from mesh or node by selecting \"Create Emission Points from Mesh/Node\" under the \"Particles\" tool in the toolbar.",
            "setter": "set_emission_point_texture",
            "name": "emission_point_texture",
            "getter": "get_emission_point_texture",
            "type": "Texture"
          },
          {
            "default": "0",
            "value": "Particles will be emitted inside this region. Use [enum EmissionShape] constants for values.",
            "setter": "set_emission_shape",
            "name": "emission_shape",
            "getter": "get_emission_shape",
            "type": "int",
            "enum": "ParticlesMaterial.EmissionShape"
          },
          {
            "value": "The sphere's radius if [code]emission_shape[/code] is set to [constant EMISSION_SHAPE_SPHERE].",
            "setter": "set_emission_sphere_radius",
            "name": "emission_sphere_radius",
            "getter": "get_emission_sphere_radius",
            "type": "float"
          },
          {
            "default": "false",
            "value": "Align Y axis of particle with the direction of its velocity.",
            "setter": "set_flag",
            "name": "flag_align_y",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], particles will not move on the z axis.",
            "setter": "set_flag",
            "name": "flag_disable_z",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], particles rotate around Y axis by [member angle].",
            "setter": "set_flag",
            "name": "flag_rotate_y",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "Amount of [member spread] in Y/Z plane. A value of [code]1[/code] restricts particles to X/Z plane.",
            "setter": "set_flatness",
            "name": "flatness",
            "getter": "get_flatness",
            "type": "float"
          },
          {
            "default": "Vector3( 0, -9.8, 0 )",
            "value": "Gravity applied to every particle.",
            "setter": "set_gravity",
            "name": "gravity",
            "getter": "get_gravity",
            "type": "Vector3"
          },
          {
            "default": "0.0",
            "value": "Initial hue variation applied to each particle.",
            "setter": "set_param",
            "name": "hue_variation",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's hue will vary along this [CurveTexture].",
            "setter": "set_param_texture",
            "name": "hue_variation_curve",
            "getter": "get_param_texture",
            "type": "Texture"
          },
          {
            "default": "0.0",
            "value": "Hue variation randomness ratio.",
            "setter": "set_param_randomness",
            "name": "hue_variation_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Initial velocity magnitude for each particle. Direction comes from [member spread] and the node's orientation.",
            "setter": "set_param",
            "name": "initial_velocity",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Initial velocity randomness ratio.",
            "setter": "set_param_randomness",
            "name": "initial_velocity_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Particle lifetime randomness ratio.",
            "setter": "set_lifetime_randomness",
            "name": "lifetime_randomness",
            "getter": "get_lifetime_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Linear acceleration applied to each particle in the direction of motion.",
            "setter": "set_param",
            "name": "linear_accel",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's linear acceleration will vary along this [CurveTexture].",
            "setter": "set_param_texture",
            "name": "linear_accel_curve",
            "getter": "get_param_texture",
            "type": "Texture"
          },
          {
            "default": "0.0",
            "value": "Linear acceleration randomness ratio.",
            "setter": "set_param_randomness",
            "name": "linear_accel_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "value": "Orbital velocity applied to each particle. Makes the particles circle around origin. Specified in number of full rotations around origin per second.\n\t\t\tOnly available when [member flag_disable_z] is [code]true[/code].",
            "setter": "set_param",
            "name": "orbit_velocity",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's orbital velocity will vary along this [CurveTexture].",
            "setter": "set_param_texture",
            "name": "orbit_velocity_curve",
            "getter": "get_param_texture",
            "type": "Texture"
          },
          {
            "value": "Orbital velocity randomness ratio.",
            "setter": "set_param_randomness",
            "name": "orbit_velocity_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Radial acceleration applied to each particle. Makes particle accelerate away from origin.",
            "setter": "set_param",
            "name": "radial_accel",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's radial acceleration will vary along this [CurveTexture].",
            "setter": "set_param_texture",
            "name": "radial_accel_curve",
            "getter": "get_param_texture",
            "type": "Texture"
          },
          {
            "default": "0.0",
            "value": "Radial acceleration randomness ratio.",
            "setter": "set_param_randomness",
            "name": "radial_accel_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Initial scale applied to each particle.",
            "setter": "set_param",
            "name": "scale",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's scale will vary along this [CurveTexture].",
            "setter": "set_param_texture",
            "name": "scale_curve",
            "getter": "get_param_texture",
            "type": "Texture"
          },
          {
            "default": "0.0",
            "value": "Scale randomness ratio.",
            "setter": "set_param_randomness",
            "name": "scale_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "default": "45.0",
            "value": "Each particle's initial direction range from [code]+spread[/code] to [code]-spread[/code] degrees. Applied to X/Z plane and Y/Z planes.",
            "setter": "set_spread",
            "name": "spread",
            "getter": "get_spread",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity giving the particles a swirling motion.",
            "setter": "set_param",
            "name": "tangential_accel",
            "getter": "get_param",
            "type": "float"
          },
          {
            "value": "Each particle's tangential acceleration will vary along this [CurveTexture].",
            "setter": "set_param_texture",
            "name": "tangential_accel_curve",
            "getter": "get_param_texture",
            "type": "Texture"
          },
          {
            "default": "0.0",
            "value": "Tangential acceleration randomness ratio.",
            "setter": "set_param_randomness",
            "name": "tangential_accel_random",
            "getter": "get_param_randomness",
            "type": "float"
          },
          {
            "value": "Trail particles' color will vary along this [GradientTexture].",
            "setter": "set_trail_color_modifier",
            "name": "trail_color_modifier",
            "getter": "get_trail_color_modifier",
            "type": "GradientTexture"
          },
          {
            "default": "1",
            "value": "Emitter will emit [code]amount[/code] divided by [code]trail_divisor[/code] particles. The remaining particles will be used as trail(s).",
            "setter": "set_trail_divisor",
            "name": "trail_divisor",
            "getter": "get_trail_divisor",
            "type": "int"
          },
          {
            "value": "Trail particles' size will vary along this [CurveTexture].",
            "setter": "set_trail_size_modifier",
            "name": "trail_size_modifier",
            "getter": "get_trail_size_modifier",
            "type": "CurveTexture"
          }
        ]
      },
      "inherits": "Material",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "flag",
              "type": "int",
              "enum": "ParticlesMaterial.Flags",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_flag",
            "description": "Returns [code]true[/code] if the specified flag is enabled."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "param",
              "type": "int",
              "enum": "ParticlesMaterial.Parameter",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_param",
            "description": "Returns the value of the specified parameter."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "param",
              "type": "int",
              "enum": "ParticlesMaterial.Parameter",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_param_randomness",
            "description": "Returns the randomness ratio associated with the specified parameter."
          },
          {
            "return": {
              "type": "Texture"
            },
            "argument": {
              "name": "param",
              "type": "int",
              "enum": "ParticlesMaterial.Parameter",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_param_texture",
            "description": "Returns the [Texture] used by the specified parameter."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "flag",
                "type": "int",
                "enum": "ParticlesMaterial.Flags",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_flag",
            "description": "If [code]true[/code], enables the specified flag. See [enum Flags] for options."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "param",
                "type": "int",
                "enum": "ParticlesMaterial.Parameter",
                "index": "0"
              },
              {
                "name": "value",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_param",
            "description": "Sets the specified [enum Parameter]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "param",
                "type": "int",
                "enum": "ParticlesMaterial.Parameter",
                "index": "0"
              },
              {
                "name": "randomness",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_param_randomness",
            "description": "Sets the randomness ratio for the specified [enum Parameter]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "param",
                "type": "int",
                "enum": "ParticlesMaterial.Parameter",
                "index": "0"
              },
              {
                "name": "texture",
                "type": "Texture",
                "index": "1"
              }
            ],
            "name": "set_param_texture",
            "description": "Sets the [Texture] for the specified [enum Parameter]."
          }
        ]
      },
      "name": "ParticlesMaterial",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "PARAM_INITIAL_LINEAR_VELOCITY",
            "enum": "Parameter"
          },
          {
            "value": "1",
            "name": "PARAM_ANGULAR_VELOCITY",
            "enum": "Parameter"
          },
          {
            "value": "2",
            "name": "PARAM_ORBIT_VELOCITY",
            "enum": "Parameter"
          },
          {
            "value": "3",
            "name": "PARAM_LINEAR_ACCEL",
            "enum": "Parameter"
          },
          {
            "value": "4",
            "name": "PARAM_RADIAL_ACCEL",
            "enum": "Parameter"
          },
          {
            "value": "5",
            "name": "PARAM_TANGENTIAL_ACCEL",
            "enum": "Parameter"
          },
          {
            "value": "6",
            "name": "PARAM_DAMPING",
            "enum": "Parameter"
          },
          {
            "value": "7",
            "name": "PARAM_ANGLE",
            "enum": "Parameter"
          },
          {
            "value": "8",
            "name": "PARAM_SCALE",
            "enum": "Parameter"
          },
          {
            "value": "9",
            "name": "PARAM_HUE_VARIATION",
            "enum": "Parameter"
          },
          {
            "value": "10",
            "name": "PARAM_ANIM_SPEED",
            "enum": "Parameter"
          },
          {
            "value": "11",
            "name": "PARAM_ANIM_OFFSET",
            "enum": "Parameter"
          },
          {
            "value": "12",
            "name": "PARAM_MAX",
            "enum": "Parameter"
          },
          {
            "value": "0",
            "name": "FLAG_ALIGN_Y_TO_VELOCITY",
            "enum": "Flags"
          },
          {
            "value": "1",
            "name": "FLAG_ROTATE_Y",
            "enum": "Flags"
          },
          {
            "value": "2",
            "name": "FLAG_DISABLE_Z",
            "enum": "Flags"
          },
          {
            "value": "3",
            "name": "FLAG_MAX",
            "enum": "Flags"
          },
          {
            "value": "0",
            "name": "EMISSION_SHAPE_POINT",
            "enum": "EmissionShape"
          },
          {
            "value": "1",
            "name": "EMISSION_SHAPE_SPHERE",
            "enum": "EmissionShape"
          },
          {
            "value": "2",
            "name": "EMISSION_SHAPE_BOX",
            "enum": "EmissionShape"
          },
          {
            "value": "3",
            "name": "EMISSION_SHAPE_POINTS",
            "enum": "EmissionShape"
          },
          {
            "value": "4",
            "name": "EMISSION_SHAPE_DIRECTED_POINTS",
            "enum": "EmissionShape"
          },
          {
            "value": "5",
            "name": "EMISSION_SHAPE_MAX",
            "enum": "EmissionShape"
          }
        ]
      },
      "brief_description": "Particle properties for [Particles] and [Particles2D] nodes.",
      "description": "ParticlesMaterial defines particle properties and behavior. It is used in the [code]process_material[/code] of [Particles] and [Particles2D] emitter nodes.\n\t\tSome of this material's properties are applied to each particle when emitted, while others can have a [CurveTexture] applied to vary values over the lifetime of the particle.\n\t\tWhen a randomness ratio is applied to a property it is used to scale that property by a random amount. The random ratio is used to interpolate between [code]1.0[/code] and a random number less than one, the result is multiplied by the property to obtain the randomized property. For example a random ratio of [code]0.4[/code] would scale the original property between [code]0.4-1.0[/code] of its original value."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/3d/vertex_animation/controlling_thousands_of_fish.html",
            "title": "Controlling thousands of fish with Particles"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "8",
            "value": "The number of particles emitted in one emission cycle (corresponding to the [member lifetime]).\n\t\t\t[b]Note:[/b] Changing [member amount] will reset the particle emission, therefore removing all particles that were already emitted before changing [member amount].",
            "setter": "set_amount",
            "name": "amount",
            "getter": "get_amount",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Particle draw order. Uses [enum DrawOrder] values.",
            "setter": "set_draw_order",
            "name": "draw_order",
            "getter": "get_draw_order",
            "type": "int",
            "enum": "Particles.DrawOrder"
          },
          {
            "value": "[Mesh] that is drawn for the first draw pass.",
            "setter": "set_draw_pass_mesh",
            "name": "draw_pass_1",
            "getter": "get_draw_pass_mesh",
            "type": "Mesh"
          },
          {
            "value": "[Mesh] that is drawn for the second draw pass.",
            "setter": "set_draw_pass_mesh",
            "name": "draw_pass_2",
            "getter": "get_draw_pass_mesh",
            "type": "Mesh"
          },
          {
            "value": "[Mesh] that is drawn for the third draw pass.",
            "setter": "set_draw_pass_mesh",
            "name": "draw_pass_3",
            "getter": "get_draw_pass_mesh",
            "type": "Mesh"
          },
          {
            "value": "[Mesh] that is drawn for the fourth draw pass.",
            "setter": "set_draw_pass_mesh",
            "name": "draw_pass_4",
            "getter": "get_draw_pass_mesh",
            "type": "Mesh"
          },
          {
            "default": "1",
            "value": "The number of draw passes when rendering particles.",
            "setter": "set_draw_passes",
            "name": "draw_passes",
            "getter": "get_draw_passes",
            "type": "int"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], particles are being emitted.",
            "setter": "set_emitting",
            "name": "emitting",
            "getter": "is_emitting",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "Time ratio between each emission. If [code]0[/code], particles are emitted continuously. If [code]1[/code], all particles are emitted simultaneously.",
            "setter": "set_explosiveness_ratio",
            "name": "explosiveness",
            "getter": "get_explosiveness_ratio",
            "type": "float"
          },
          {
            "default": "0",
            "value": "The particle system's frame rate is fixed to a value. For instance, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the simulation of the particle system itself.",
            "setter": "set_fixed_fps",
            "name": "fixed_fps",
            "getter": "get_fixed_fps",
            "type": "int"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], results in fractional delta calculation which has a smoother particles display effect.",
            "setter": "set_fractional_delta",
            "name": "fract_delta",
            "getter": "get_fractional_delta",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "The amount of time each particle will exist (in seconds).",
            "setter": "set_lifetime",
            "name": "lifetime",
            "getter": "get_lifetime",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], particles use the parent node's coordinate space. If [code]false[/code], they use global coordinates.",
            "setter": "set_use_local_coordinates",
            "name": "local_coords",
            "getter": "get_use_local_coordinates",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], only [code]amount[/code] particles will be emitted.",
            "setter": "set_one_shot",
            "name": "one_shot",
            "getter": "get_one_shot",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "Amount of time to preprocess the particles before animation starts. Lets you start the animation some time after particles have started emitting.",
            "setter": "set_pre_process_time",
            "name": "preprocess",
            "getter": "get_pre_process_time",
            "type": "float"
          },
          {
            "value": "[Material] for processing particles. Can be a [ParticlesMaterial] or a [ShaderMaterial].",
            "setter": "set_process_material",
            "name": "process_material",
            "getter": "get_process_material",
            "type": "Material"
          },
          {
            "default": "0.0",
            "value": "Emission randomness ratio.",
            "setter": "set_randomness_ratio",
            "name": "randomness",
            "getter": "get_randomness_ratio",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Speed scaling ratio. A value of [code]0[/code] can be used to pause the particles.",
            "setter": "set_speed_scale",
            "name": "speed_scale",
            "getter": "get_speed_scale",
            "type": "float"
          },
          {
            "default": "AABB( -4, -4, -4, 8, 8, 8 )",
            "value": "The [AABB] that determines the node's region which needs to be visible on screen for the particle system to be active.\n\t\t\tGrow the box if particles suddenly appear/disappear when the node enters/exits the screen. The [AABB] can be grown via code or with the [b]Particles → Generate AABB[/b] editor tool.\n\t\t\t[b]Note:[/b] If the [ParticlesMaterial] in use is configured to cast shadows, you may want to enlarge this AABB to ensure the shadow is updated when particles are off-screen.",
            "setter": "set_visibility_aabb",
            "name": "visibility_aabb",
            "getter": "get_visibility_aabb",
            "type": "AABB"
          }
        ]
      },
      "inherits": "GeometryInstance",
      "methods": {
        "method": [
          {
            "return": {
              "type": "AABB"
            },
            "qualifiers": "const",
            "name": "capture_aabb",
            "description": "Returns the axis-aligned bounding box that contains all the particles that are active in the current frame."
          },
          {
            "return": {
              "type": "Mesh"
            },
            "argument": {
              "name": "pass",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_draw_pass_mesh",
            "description": "Returns the [Mesh] that is drawn at index [code]pass[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "restart",
            "description": "Restarts the particle emission, clearing existing particles."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "pass",
                "type": "int",
                "index": "0"
              },
              {
                "name": "mesh",
                "type": "Mesh",
                "index": "1"
              }
            ],
            "name": "set_draw_pass_mesh",
            "description": "Sets the [Mesh] that is drawn at index [code]pass[/code]."
          }
        ]
      },
      "name": "Particles",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "DRAW_ORDER_INDEX",
            "enum": "DrawOrder"
          },
          {
            "value": "1",
            "name": "DRAW_ORDER_LIFETIME",
            "enum": "DrawOrder"
          },
          {
            "value": "2",
            "name": "DRAW_ORDER_VIEW_DEPTH",
            "enum": "DrawOrder"
          },
          {
            "value": "4",
            "name": "MAX_DRAW_PASSES"
          }
        ]
      },
      "brief_description": "GPU-based 3D particle emitter.",
      "description": "3D particle node used to create a variety of particle systems and effects. [Particles] features an emitter that generates some number of particles at a given rate.\n\t\tUse the [code]process_material[/code] property to add a [ParticlesMaterial] to configure particle appearance and behavior. Alternatively, you can add a [ShaderMaterial] which will be applied to all particles.\n\t\t[b]Note:[/b] [Particles] only work when using the GLES3 renderer. If using the GLES2 renderer, use [CPUParticles] instead. You can convert [Particles] to [CPUParticles] by selecting the node, clicking the [b]Particles[/b] menu at the top of the 3D editor viewport then choosing [b]Convert to CPUParticles[/b].\n\t\t[b]Note:[/b] After working on a Particles node, remember to update its [member visibility_aabb] by selecting it, clicking the [b]Particles[/b] menu at the top of the 3D editor viewport then choose [b]Generate Visibility AABB[/b]. Otherwise, particles may suddenly disappear depending on the camera position and angle."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "value": "A [Curve2D] describing the path.",
            "setter": "set_curve",
            "name": "curve",
            "getter": "get_curve",
            "type": "Curve2D"
          },
          {
            "default": "Color( 0.5, 0.6, 1, 0.7 )",
            "setter": "set_self_modulate",
            "override": "true",
            "name": "self_modulate",
            "getter": "get_self_modulate",
            "type": "Color"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {},
      "name": "Path2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Contains a [Curve2D] path for [PathFollow2D] nodes to follow.",
      "description": "Can have [PathFollow2D] child nodes moving along the [Curve2D]. See [PathFollow2D] for more information on usage.\n\t\t[b]Note:[/b] The path is considered as relative to the moved nodes (children of [PathFollow2D]). As such, the curve should usually start with a zero vector ([code](0, 0)[/code])."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "true",
            "value": "If [code]true[/code], the position between two cached points is interpolated cubically, and linearly otherwise.\n\t\t\tThe points along the [Curve2D] of the [Path2D] are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.\n\t\t\tThere are two answers to this problem: either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations.",
            "setter": "set_cubic_interpolation",
            "name": "cubic_interp",
            "getter": "get_cubic_interpolation",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "The node's offset along the curve.",
            "setter": "set_h_offset",
            "name": "h_offset",
            "getter": "get_h_offset",
            "type": "float"
          },
          {
            "default": "4.0",
            "value": "How far to look ahead of the curve to calculate the tangent if the node is rotating. E.g. shorter lookaheads will lead to faster rotations.",
            "setter": "set_lookahead",
            "name": "lookahead",
            "getter": "get_lookahead",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], any offset outside the path's length will wrap around, instead of stopping at the ends. Use it for cyclic paths.",
            "setter": "set_loop",
            "name": "loop",
            "getter": "has_loop",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "The distance along the path in pixels.",
            "setter": "set_offset",
            "name": "offset",
            "getter": "get_offset",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], this node rotates to follow the path, making its descendants rotate.",
            "setter": "set_rotate",
            "name": "rotate",
            "getter": "is_rotating",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "The distance along the path as a number in the range 0.0 (for the first vertex) to 1.0 (for the last). This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length.",
            "setter": "set_unit_offset",
            "name": "unit_offset",
            "getter": "get_unit_offset",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The node's offset perpendicular to the curve.",
            "setter": "set_v_offset",
            "name": "v_offset",
            "getter": "get_v_offset",
            "type": "float"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {},
      "name": "PathFollow2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Point sampler for a [Path2D].",
      "description": "This node takes its parent [Path2D], and returns the coordinates of a point within it, given a distance from the first vertex.\n\t\tIt is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be children of this node. The descendant nodes will then move accordingly when setting an offset in this node."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "true",
            "value": "If [code]true[/code], the position between two cached points is interpolated cubically, and linearly otherwise.\n\t\t\tThe points along the [Curve3D] of the [Path] are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.\n\t\t\tThere are two answers to this problem: either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations.",
            "setter": "set_cubic_interpolation",
            "name": "cubic_interp",
            "getter": "get_cubic_interpolation",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "The node's offset along the curve.",
            "setter": "set_h_offset",
            "name": "h_offset",
            "getter": "get_h_offset",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], any offset outside the path's length will wrap around, instead of stopping at the ends. Use it for cyclic paths.",
            "setter": "set_loop",
            "name": "loop",
            "getter": "has_loop",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "The distance from the first vertex, measured in 3D units along the path. This sets this node's position to a point within the path.",
            "setter": "set_offset",
            "name": "offset",
            "getter": "get_offset",
            "type": "float"
          },
          {
            "default": "3",
            "value": "Allows or forbids rotation on one or more axes, depending on the [enum RotationMode] constants being used.",
            "setter": "set_rotation_mode",
            "name": "rotation_mode",
            "getter": "get_rotation_mode",
            "type": "int",
            "enum": "PathFollow.RotationMode"
          },
          {
            "default": "0.0",
            "value": "The distance from the first vertex, considering 0.0 as the first vertex and 1.0 as the last. This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length.",
            "setter": "set_unit_offset",
            "name": "unit_offset",
            "getter": "get_unit_offset",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The node's offset perpendicular to the curve.",
            "setter": "set_v_offset",
            "name": "v_offset",
            "getter": "get_v_offset",
            "type": "float"
          }
        ]
      },
      "inherits": "Spatial",
      "methods": {},
      "name": "PathFollow",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "ROTATION_NONE",
            "enum": "RotationMode"
          },
          {
            "value": "1",
            "name": "ROTATION_Y",
            "enum": "RotationMode"
          },
          {
            "value": "2",
            "name": "ROTATION_XY",
            "enum": "RotationMode"
          },
          {
            "value": "3",
            "name": "ROTATION_XYZ",
            "enum": "RotationMode"
          },
          {
            "value": "4",
            "name": "ROTATION_ORIENTED",
            "enum": "RotationMode"
          }
        ]
      },
      "brief_description": "Point sampler for a [Path].",
      "description": "This node takes its parent [Path], and returns the coordinates of a point within it, given a distance from the first vertex.\n\t\tIt is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be children of this node. The descendant nodes will then move accordingly when setting an offset in this node."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "value": "A [Curve3D] describing the path.",
          "setter": "set_curve",
          "name": "curve",
          "getter": "get_curve",
          "type": "Curve3D"
        }
      },
      "inherits": "Spatial",
      "methods": {},
      "name": "Path",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "curve_changed",
          "description": "Emitted when the [member curve] changes."
        }
      },
      "constants": {},
      "brief_description": "Contains a [Curve3D] path for [PathFollow] nodes to follow.",
      "description": "Can have [PathFollow] child nodes moving along the [Curve3D]. See [PathFollow] for more information on the usage.\n\t\tNote that the path is considered as relative to the moved nodes (children of [PathFollow]). As such, the curve should usually start with a zero vector [code](0, 0, 0)[/code]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "pck_path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "source_path",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "add_file",
            "description": "Adds the [code]source_path[/code] file to the current PCK package at the [code]pck_path[/code] internal path (should start with [code]res://[/code])."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "default": "false",
              "name": "verbose",
              "type": "bool",
              "index": "0"
            },
            "name": "flush",
            "description": "Writes the files specified using all [method add_file] calls since the last flush. If [code]verbose[/code] is [code]true[/code], a list of files added will be printed to the console for easier debugging."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "pck_name",
                "type": "String",
                "index": "0"
              },
              {
                "default": "0",
                "name": "alignment",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "pck_start",
            "description": "Creates a new PCK file with the name [code]pck_name[/code]. The [code].pck[/code] file extension isn't added automatically, so it should be part of [code]pck_name[/code] (even though it's not required)."
          }
        ]
      },
      "name": "PCKPacker",
      "version": "3.3",
      "constants": {},
      "brief_description": "Creates packages that can be loaded into a running project.",
      "description": "The [PCKPacker] is used to create packages that can be loaded into a running project using [method ProjectSettings.load_resource_pack].\n\t\t[codeblock]\n\t\tvar packer = PCKPacker.new()\n\t\tpacker.pck_start(\"test.pck\")\n\t\tpacker.add_file(\"res://text.txt\", \"text.txt\")\n\t\tpacker.flush()\n\t\t[/codeblock]\n\t\tThe above [PCKPacker] creates package [code]test.pck[/code], then adds a file named [code]text.txt[/code] at the root of the package."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Object",
      "methods": {
        "method": {
          "return": {
            "type": "float"
          },
          "argument": {
            "name": "monitor",
            "type": "int",
            "enum": "Performance.Monitor",
            "index": "0"
          },
          "qualifiers": "const",
          "name": "get_monitor",
          "description": "Returns the value of one of the available monitors. You should provide one of the [enum Monitor] constants as the argument, like this:\n\t\t\t\t[codeblock]\n\t\t\t\tprint(Performance.get_monitor(Performance.TIME_FPS)) # Prints the FPS to the console\n\t\t\t\t[/codeblock]"
        }
      },
      "name": "Performance",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "TIME_FPS",
            "enum": "Monitor"
          },
          {
            "value": "1",
            "name": "TIME_PROCESS",
            "enum": "Monitor"
          },
          {
            "value": "2",
            "name": "TIME_PHYSICS_PROCESS",
            "enum": "Monitor"
          },
          {
            "value": "3",
            "name": "MEMORY_STATIC",
            "enum": "Monitor"
          },
          {
            "value": "4",
            "name": "MEMORY_DYNAMIC",
            "enum": "Monitor"
          },
          {
            "value": "5",
            "name": "MEMORY_STATIC_MAX",
            "enum": "Monitor"
          },
          {
            "value": "6",
            "name": "MEMORY_DYNAMIC_MAX",
            "enum": "Monitor"
          },
          {
            "value": "7",
            "name": "MEMORY_MESSAGE_BUFFER_MAX",
            "enum": "Monitor"
          },
          {
            "value": "8",
            "name": "OBJECT_COUNT",
            "enum": "Monitor"
          },
          {
            "value": "9",
            "name": "OBJECT_RESOURCE_COUNT",
            "enum": "Monitor"
          },
          {
            "value": "10",
            "name": "OBJECT_NODE_COUNT",
            "enum": "Monitor"
          },
          {
            "value": "11",
            "name": "OBJECT_ORPHAN_NODE_COUNT",
            "enum": "Monitor"
          },
          {
            "value": "12",
            "name": "RENDER_OBJECTS_IN_FRAME",
            "enum": "Monitor"
          },
          {
            "value": "13",
            "name": "RENDER_VERTICES_IN_FRAME",
            "enum": "Monitor"
          },
          {
            "value": "14",
            "name": "RENDER_MATERIAL_CHANGES_IN_FRAME",
            "enum": "Monitor"
          },
          {
            "value": "15",
            "name": "RENDER_SHADER_CHANGES_IN_FRAME",
            "enum": "Monitor"
          },
          {
            "value": "16",
            "name": "RENDER_SURFACE_CHANGES_IN_FRAME",
            "enum": "Monitor"
          },
          {
            "value": "17",
            "name": "RENDER_DRAW_CALLS_IN_FRAME",
            "enum": "Monitor"
          },
          {
            "value": "18",
            "name": "RENDER_2D_ITEMS_IN_FRAME",
            "enum": "Monitor"
          },
          {
            "value": "19",
            "name": "RENDER_2D_DRAW_CALLS_IN_FRAME",
            "enum": "Monitor"
          },
          {
            "value": "20",
            "name": "RENDER_VIDEO_MEM_USED",
            "enum": "Monitor"
          },
          {
            "value": "21",
            "name": "RENDER_TEXTURE_MEM_USED",
            "enum": "Monitor"
          },
          {
            "value": "22",
            "name": "RENDER_VERTEX_MEM_USED",
            "enum": "Monitor"
          },
          {
            "value": "23",
            "name": "RENDER_USAGE_VIDEO_MEM_TOTAL",
            "enum": "Monitor"
          },
          {
            "value": "24",
            "name": "PHYSICS_2D_ACTIVE_OBJECTS",
            "enum": "Monitor"
          },
          {
            "value": "25",
            "name": "PHYSICS_2D_COLLISION_PAIRS",
            "enum": "Monitor"
          },
          {
            "value": "26",
            "name": "PHYSICS_2D_ISLAND_COUNT",
            "enum": "Monitor"
          },
          {
            "value": "27",
            "name": "PHYSICS_3D_ACTIVE_OBJECTS",
            "enum": "Monitor"
          },
          {
            "value": "28",
            "name": "PHYSICS_3D_COLLISION_PAIRS",
            "enum": "Monitor"
          },
          {
            "value": "29",
            "name": "PHYSICS_3D_ISLAND_COUNT",
            "enum": "Monitor"
          },
          {
            "value": "30",
            "name": "AUDIO_OUTPUT_LATENCY",
            "enum": "Monitor"
          },
          {
            "value": "31",
            "name": "MONITOR_MAX",
            "enum": "Monitor"
          }
        ]
      },
      "brief_description": "Exposes performance-related data.",
      "description": "This class provides access to a number of different monitors related to performance, such as memory usage, draw calls, and FPS. These are the same as the values displayed in the [b]Monitor[/b] tab in the editor's [b]Debugger[/b] panel. By using the [method get_monitor] method of this class, you can access this data from your code.\n\t\t[b]Note:[/b] A few of these monitors are only available in debug mode and will always return 0 when used in a release build.\n\t\t[b]Note:[/b] Many of these monitors are not updated in real-time, so there may be a short delay between changes."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Translation",
      "methods": {
        "method": {
          "return": {
            "type": "void"
          },
          "argument": {
            "name": "from",
            "type": "Translation",
            "index": "0"
          },
          "name": "generate",
          "description": "Generates and sets an optimized translation from the given [Translation] resource."
        }
      },
      "name": "PHashTranslation",
      "version": "3.3",
      "constants": {},
      "brief_description": "Optimized translation.",
      "description": "Optimized translation. Uses real-time compressed translations, which results in very small dictionaries."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )",
            "setter": "set_body_offset",
            "name": "body_offset",
            "getter": "get_body_offset",
            "type": "Transform"
          },
          {
            "default": "0.0",
            "setter": "set_bounce",
            "name": "bounce",
            "getter": "get_bounce",
            "type": "float"
          },
          {
            "default": "1.0",
            "setter": "set_friction",
            "name": "friction",
            "getter": "get_friction",
            "type": "float"
          },
          {
            "default": "1.0",
            "setter": "set_gravity_scale",
            "name": "gravity_scale",
            "getter": "get_gravity_scale",
            "type": "float"
          },
          {
            "default": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )",
            "setter": "set_joint_offset",
            "name": "joint_offset",
            "getter": "get_joint_offset",
            "type": "Transform"
          },
          {
            "default": "0",
            "setter": "set_joint_type",
            "name": "joint_type",
            "getter": "get_joint_type",
            "type": "int",
            "enum": "PhysicalBone.JointType"
          },
          {
            "default": "1.0",
            "setter": "set_mass",
            "name": "mass",
            "getter": "get_mass",
            "type": "float"
          },
          {
            "default": "9.8",
            "setter": "set_weight",
            "name": "weight",
            "getter": "get_weight",
            "type": "float"
          }
        ]
      },
      "inherits": "PhysicsBody",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "impulse",
              "type": "Vector3",
              "index": "0"
            },
            "name": "apply_central_impulse",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "position",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "impulse",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "apply_impulse",
            "description": {}
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_bone_id",
            "description": {}
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "get_simulate_physics",
            "description": {}
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_simulating_physics",
            "description": {}
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_static_body",
            "description": {}
          }
        ]
      },
      "name": "PhysicalBone",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "JOINT_TYPE_NONE",
            "enum": "JointType"
          },
          {
            "value": "1",
            "name": "JOINT_TYPE_PIN",
            "enum": "JointType"
          },
          {
            "value": "2",
            "name": "JOINT_TYPE_CONE",
            "enum": "JointType"
          },
          {
            "value": "3",
            "name": "JOINT_TYPE_HINGE",
            "enum": "JointType"
          },
          {
            "value": "4",
            "name": "JOINT_TYPE_SLIDER",
            "enum": "JointType"
          },
          {
            "value": "5",
            "name": "JOINT_TYPE_6DOF",
            "enum": "JointType"
          }
        ]
      },
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/physics/ray-casting.html"
      },
      "members": {
        "member": [
          {
            "value": "The body's rotational velocity.",
            "setter": "set_angular_velocity",
            "name": "angular_velocity",
            "getter": "get_angular_velocity",
            "type": "float"
          },
          {
            "value": "The inverse of the inertia of the body.",
            "setter": "",
            "name": "inverse_inertia",
            "getter": "get_inverse_inertia",
            "type": "float"
          },
          {
            "value": "The inverse of the mass of the body.",
            "setter": "",
            "name": "inverse_mass",
            "getter": "get_inverse_mass",
            "type": "float"
          },
          {
            "value": "The body's linear velocity.",
            "setter": "set_linear_velocity",
            "name": "linear_velocity",
            "getter": "get_linear_velocity",
            "type": "Vector2"
          },
          {
            "value": "If [code]true[/code], this body is currently sleeping (not active).",
            "setter": "set_sleep_state",
            "name": "sleeping",
            "getter": "is_sleeping",
            "type": "bool"
          },
          {
            "value": "The timestep (delta) used for the simulation.",
            "setter": "",
            "name": "step",
            "getter": "get_step",
            "type": "float"
          },
          {
            "value": "The rate at which the body stops rotating, if there are not any other forces moving it.",
            "setter": "",
            "name": "total_angular_damp",
            "getter": "get_total_angular_damp",
            "type": "float"
          },
          {
            "value": "The total gravity vector being currently applied to this body.",
            "setter": "",
            "name": "total_gravity",
            "getter": "get_total_gravity",
            "type": "Vector2"
          },
          {
            "value": "The rate at which the body stops moving, if there are not any other forces moving it.",
            "setter": "",
            "name": "total_linear_damp",
            "getter": "get_total_linear_damp",
            "type": "float"
          },
          {
            "value": "The body's transformation matrix.",
            "setter": "set_transform",
            "name": "transform",
            "getter": "get_transform",
            "type": "Transform2D"
          }
        ]
      },
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "force",
              "type": "Vector2",
              "index": "0"
            },
            "name": "add_central_force",
            "description": "Adds a constant directional force without affecting rotation."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "offset",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "force",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "add_force",
            "description": "Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "torque",
              "type": "float",
              "index": "0"
            },
            "name": "add_torque",
            "description": "Adds a constant rotational force."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "impulse",
              "type": "Vector2",
              "index": "0"
            },
            "name": "apply_central_impulse",
            "description": "Applies a directional impulse without affecting rotation."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "offset",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "impulse",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "apply_impulse",
            "description": "Applies a positioned impulse to the body. An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the \"_force\" functions otherwise). The offset uses the rotation of the global coordinate system, but is centered at the object's origin."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "impulse",
              "type": "float",
              "index": "0"
            },
            "name": "apply_torque_impulse",
            "description": "Applies a rotational impulse to the body."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": {
              "name": "contact_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_contact_collider",
            "description": "Returns the collider's [RID]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "contact_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_contact_collider_id",
            "description": "Returns the collider's object id."
          },
          {
            "return": {
              "type": "Object"
            },
            "argument": {
              "name": "contact_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_contact_collider_object",
            "description": "Returns the collider object. This depends on how it was created (will return a scene node if such was used to create it)."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "contact_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_contact_collider_position",
            "description": "Returns the contact position in the collider."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "contact_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_contact_collider_shape",
            "description": "Returns the collider's shape index."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "contact_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_contact_collider_shape_metadata",
            "description": "Returns the collided shape's metadata. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "contact_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_contact_collider_velocity_at_position",
            "description": "Returns the linear velocity vector at the collider's contact point."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_contact_count",
            "description": "Returns the number of contacts this body has with other bodies.\n\t\t\t\t[b]Note:[/b] By default, this returns 0 unless bodies are configured to monitor contacts. See [member RigidBody2D.contact_monitor]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "contact_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_contact_local_normal",
            "description": "Returns the local normal at the contact point."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "contact_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_contact_local_position",
            "description": "Returns the local position of the contact point."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "contact_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_contact_local_shape",
            "description": "Returns the local shape index of the collision."
          },
          {
            "return": {
              "type": "Physics2DDirectSpaceState"
            },
            "name": "get_space_state",
            "description": "Returns the current state of the space, useful for queries."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "integrate_forces",
            "description": "Calls the built-in force integration code."
          }
        ]
      },
      "name": "Physics2DDirectBodyState",
      "version": "3.3",
      "constants": {},
      "brief_description": "Direct access object to a physics body in the [Physics2DServer].",
      "description": "Provides direct access to a physics body in the [Physics2DServer], allowing safe changes to physics properties. This object is passed via the direct state callback of rigid/character bodies, and is intended for changing the direct state of that body. See [method RigidBody2D._integrate_forces]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/physics/ray-casting.html"
      },
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "shape",
              "type": "Physics2DShapeQueryParameters",
              "index": "0"
            },
            "name": "cast_motion",
            "description": "Checks how far a [Shape2D] can move without colliding. All the parameters for the query, including the shape and the motion, are supplied through a [Physics2DShapeQueryParameters] object.\n\t\t\t\tReturns an array with the safe and unsafe proportions (between 0 and 1) of the motion. The safe proportion is the maximum fraction of the motion that can be made without a collision. The unsafe proportion is the minimum fraction of the distance that must be moved for a collision. If no collision is detected a result of [code][1.0, 1.0][/code] will be returned.\n\t\t\t\t[b]Note:[/b] Any [Shape2D]s that the shape is already colliding with e.g. inside of, will be ignored. Use [method collide_shape] to determine the [Shape2D]s that the shape is already colliding with."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "shape",
                "type": "Physics2DShapeQueryParameters",
                "index": "0"
              },
              {
                "default": "32",
                "name": "max_results",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "collide_shape",
            "description": "Checks the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space. The resulting array contains a list of points where the shape intersects another. Like with [method intersect_shape], the number of returned results can be limited to save processing time."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "argument": {
              "name": "shape",
              "type": "Physics2DShapeQueryParameters",
              "index": "0"
            },
            "name": "get_rest_info",
            "description": "Checks the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space. If it collides with more than one shape, the nearest one is selected. If the shape did not intersect anything, then an empty dictionary is returned instead.\n\t\t\t\t[b]Note:[/b] This method does not take into account the [code]motion[/code] property of the object. The returned object is a dictionary containing the following fields:\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]linear_velocity[/code]: The colliding object's velocity [Vector2]. If the object is an [Area2D], the result is [code](0, 0)[/code].\n\t\t\t\t[code]metadata[/code]: The intersecting shape's metadata. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].\n\t\t\t\t[code]normal[/code]: The object's surface normal at the intersection point.\n\t\t\t\t[code]point[/code]: The intersection point.\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "point",
                "type": "Vector2",
                "index": "0"
              },
              {
                "default": "32",
                "name": "max_results",
                "type": "int",
                "index": "1"
              },
              {
                "default": "[  ]",
                "name": "exclude",
                "type": "Array",
                "index": "2"
              },
              {
                "default": "2147483647",
                "name": "collision_layer",
                "type": "int",
                "index": "3"
              },
              {
                "default": "true",
                "name": "collide_with_bodies",
                "type": "bool",
                "index": "4"
              },
              {
                "default": "false",
                "name": "collide_with_areas",
                "type": "bool",
                "index": "5"
              }
            ],
            "name": "intersect_point",
            "description": "Checks whether a point is inside any solid shape. The shapes the point is inside of are returned in an array containing dictionaries with the following fields:\n\t\t\t\t[code]collider[/code]: The colliding object.\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]metadata[/code]: The intersecting shape's metadata. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape.\n\t\t\t\tAdditionally, the method can take an [code]exclude[/code] array of objects or [RID]s that are to be excluded from collisions, a [code]collision_mask[/code] bitmask representing the physics layers to check in, or booleans to determine if the ray should collide with [PhysicsBody]s or [Area]s, respectively.\n\t\t\t\t[b]Note:[/b] [ConcavePolygonShape2D]s and [CollisionPolygon2D]s in [code]Segments[/code] build mode are not solid shapes. Therefore, they will not be detected."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "point",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "canvas_instance_id",
                "type": "int",
                "index": "1"
              },
              {
                "default": "32",
                "name": "max_results",
                "type": "int",
                "index": "2"
              },
              {
                "default": "[  ]",
                "name": "exclude",
                "type": "Array",
                "index": "3"
              },
              {
                "default": "2147483647",
                "name": "collision_layer",
                "type": "int",
                "index": "4"
              },
              {
                "default": "true",
                "name": "collide_with_bodies",
                "type": "bool",
                "index": "5"
              },
              {
                "default": "false",
                "name": "collide_with_areas",
                "type": "bool",
                "index": "6"
              }
            ],
            "name": "intersect_point_on_canvas",
            "description": {}
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "argument": [
              {
                "name": "from",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "to",
                "type": "Vector2",
                "index": "1"
              },
              {
                "default": "[  ]",
                "name": "exclude",
                "type": "Array",
                "index": "2"
              },
              {
                "default": "2147483647",
                "name": "collision_layer",
                "type": "int",
                "index": "3"
              },
              {
                "default": "true",
                "name": "collide_with_bodies",
                "type": "bool",
                "index": "4"
              },
              {
                "default": "false",
                "name": "collide_with_areas",
                "type": "bool",
                "index": "5"
              }
            ],
            "name": "intersect_ray",
            "description": "Intersects a ray in a given space. The returned object is a dictionary with the following fields:\n\t\t\t\t[code]collider[/code]: The colliding object.\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]metadata[/code]: The intersecting shape's metadata. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].\n\t\t\t\t[code]normal[/code]: The object's surface normal at the intersection point.\n\t\t\t\t[code]position[/code]: The intersection point.\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape.\n\t\t\t\tIf the ray did not intersect anything, then an empty dictionary is returned instead.\n\t\t\t\tAdditionally, the method can take an [code]exclude[/code] array of objects or [RID]s that are to be excluded from collisions, a [code]collision_mask[/code] bitmask representing the physics layers to check in, or booleans to determine if the ray should collide with [PhysicsBody]s or [Area]s, respectively."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "shape",
                "type": "Physics2DShapeQueryParameters",
                "index": "0"
              },
              {
                "default": "32",
                "name": "max_results",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "intersect_shape",
            "description": "Checks the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space.\n\t\t\t\t[b]Note:[/b] This method does not take into account the [code]motion[/code] property of the object. The intersected shapes are returned in an array containing dictionaries with the following fields:\n\t\t\t\t[code]collider[/code]: The colliding object.\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]metadata[/code]: The intersecting shape's metadata. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape.\n\t\t\t\tThe number of intersections can be limited with the [code]max_results[/code] parameter, to reduce the processing time."
          }
        ]
      },
      "name": "Physics2DDirectSpaceState",
      "version": "3.3",
      "constants": {},
      "brief_description": "Direct access object to a space in the [Physics2DServer].",
      "description": "Direct access object to a space in the [Physics2DServer]. It's used mainly to do queries against objects and areas residing in a given space."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape",
                "type": "RID",
                "index": "1"
              },
              {
                "default": "Transform2D( 1, 0, 0, 1, 0, 0 )",
                "name": "transform",
                "type": "Transform2D",
                "index": "2"
              },
              {
                "default": "false",
                "name": "disabled",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "area_add_shape",
            "description": "Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "id",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "area_attach_canvas_instance_id",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "id",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "area_attach_object_instance_id",
            "description": "Assigns the area to a descendant of [Object], so it can exist in the node tree."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "area",
              "type": "RID",
              "index": "0"
            },
            "name": "area_clear_shapes",
            "description": "Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "area_create",
            "description": "Creates an [Area2D]. After creating an [Area2D] with this method, assign it to a space using [method area_set_space] to use the created [Area2D] in the physics world."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "area",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "area_get_canvas_instance_id",
            "description": {}
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "area",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "area_get_object_instance_id",
            "description": "Gets the instance ID of the object the area is assigned to."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "Physics2DServer.AreaParameter",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "area_get_param",
            "description": "Returns an area parameter value. See [enum AreaParameter] for a list of available parameters."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "area_get_shape",
            "description": "Returns the [RID] of the nth shape of an area."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "area",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "area_get_shape_count",
            "description": "Returns the number of shapes assigned to an area."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "area_get_shape_transform",
            "description": "Returns the transform matrix of a shape within an area."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": {
              "name": "area",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "area_get_space",
            "description": "Returns the space assigned to the area."
          },
          {
            "return": {
              "type": "int",
              "enum": "Physics2DServer.AreaSpaceOverrideMode"
            },
            "argument": {
              "name": "area",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "area_get_space_override_mode",
            "description": "Returns the space override mode for the area."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "argument": {
              "name": "area",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "area_get_transform",
            "description": "Returns the transform matrix for an area."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "area_remove_shape",
            "description": "Removes a shape from an area. It does not delete the shape, so it can be reassigned later."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "receiver",
                "type": "Object",
                "index": "1"
              },
              {
                "name": "method",
                "type": "String",
                "index": "2"
              }
            ],
            "name": "area_set_area_monitor_callback",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "layer",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "area_set_collision_layer",
            "description": "Assigns the area to one or many physics layers."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mask",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "area_set_collision_mask",
            "description": "Sets which physics layers the area will monitor."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "receiver",
                "type": "Object",
                "index": "1"
              },
              {
                "name": "method",
                "type": "String",
                "index": "2"
              }
            ],
            "name": "area_set_monitor_callback",
            "description": "Sets the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters:\n\t\t\t\t1: [constant AREA_BODY_ADDED] or [constant AREA_BODY_REMOVED], depending on whether the object entered or exited the area.\n\t\t\t\t2: [RID] of the object that entered/exited the area.\n\t\t\t\t3: Instance ID of the object that entered/exited the area.\n\t\t\t\t4: The shape index of the object that entered/exited the area.\n\t\t\t\t5: The shape index of the area where the object entered/exited."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "monitorable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "area_set_monitorable",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "Physics2DServer.AreaParameter",
                "index": "1"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "2"
              }
            ],
            "name": "area_set_param",
            "description": "Sets the value for an area parameter. See [enum AreaParameter] for a list of available parameters."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "shape",
                "type": "RID",
                "index": "2"
              }
            ],
            "name": "area_set_shape",
            "description": "Substitutes a given area shape by another. The old shape is selected by its index, the new one by its [RID]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "disabled",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "area_set_shape_disabled",
            "description": "Disables a given shape in an area."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "transform",
                "type": "Transform2D",
                "index": "2"
              }
            ],
            "name": "area_set_shape_transform",
            "description": "Sets the transform matrix for an area shape."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "space",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "area_set_space",
            "description": "Assigns a space to the area."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mode",
                "type": "int",
                "enum": "Physics2DServer.AreaSpaceOverrideMode",
                "index": "1"
              }
            ],
            "name": "area_set_space_override_mode",
            "description": "Sets the space override mode for the area. See [enum AreaSpaceOverrideMode] for a list of available modes."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "transform",
                "type": "Transform2D",
                "index": "1"
              }
            ],
            "name": "area_set_transform",
            "description": "Sets the transform matrix for an area."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "force",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "body_add_central_force",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "excepted_body",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "body_add_collision_exception",
            "description": "Adds a body to the list of bodies exempt from collisions."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "offset",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "force",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "body_add_force",
            "description": "Adds a positioned force to the applied force and torque. As with [method body_apply_impulse], both the force and the offset from the body origin are in global coordinates. A force differs from an impulse in that, while the two are forces, the impulse clears itself after being applied."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape",
                "type": "RID",
                "index": "1"
              },
              {
                "default": "Transform2D( 1, 0, 0, 1, 0, 0 )",
                "name": "transform",
                "type": "Transform2D",
                "index": "2"
              },
              {
                "default": "false",
                "name": "disabled",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "body_add_shape",
            "description": "Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "torque",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "body_add_torque",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "impulse",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "body_apply_central_impulse",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "impulse",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "body_apply_impulse",
            "description": "Adds a positioned impulse to the applied force and torque. Both the force and the offset from the body origin are in global coordinates."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "impulse",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "body_apply_torque_impulse",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "id",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "body_attach_canvas_instance_id",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "id",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "body_attach_object_instance_id",
            "description": "Assigns the area to a descendant of [Object], so it can exist in the node tree."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "name": "body_clear_shapes",
            "description": "Removes all shapes from a body."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "body_create",
            "description": "Creates a physics body."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_get_canvas_instance_id",
            "description": {}
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_get_collision_layer",
            "description": "Returns the physics layer or layers a body belongs to."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_get_collision_mask",
            "description": "Returns the physics layer or layers a body can collide with."
          },
          {
            "return": {
              "type": "int",
              "enum": "Physics2DServer.CCDMode"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_get_continuous_collision_detection_mode",
            "description": "Returns the continuous collision detection mode."
          },
          {
            "return": {
              "type": "Physics2DDirectBodyState"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "name": "body_get_direct_state",
            "description": "Returns the [Physics2DDirectBodyState] of the body."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_get_max_contacts_reported",
            "description": "Returns the maximum contacts that can be reported. See [method body_set_max_contacts_reported]."
          },
          {
            "return": {
              "type": "int",
              "enum": "Physics2DServer.BodyMode"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_get_mode",
            "description": "Returns the body mode."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_get_object_instance_id",
            "description": "Gets the instance ID of the object the area is assigned to."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "Physics2DServer.BodyParameter",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "body_get_param",
            "description": "Returns the value of a body parameter. See [enum BodyParameter] for a list of available parameters."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "body_get_shape",
            "description": "Returns the [RID] of the nth shape of a body."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_get_shape_count",
            "description": "Returns the number of shapes assigned to a body."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "body_get_shape_metadata",
            "description": "Returns the metadata of a shape of a body."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "body_get_shape_transform",
            "description": "Returns the transform matrix of a body shape."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_get_space",
            "description": "Returns the [RID] of the space assigned to a body."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "state",
                "type": "int",
                "enum": "Physics2DServer.BodyState",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "body_get_state",
            "description": "Returns a body state."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_is_omitting_force_integration",
            "description": "Returns whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "excepted_body",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "body_remove_collision_exception",
            "description": "Removes a body from the list of bodies exempt from collisions."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "body_remove_shape",
            "description": "Removes a shape from a body. The shape is not deleted, so it can be reused afterwards."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "axis_velocity",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "body_set_axis_velocity",
            "description": "Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "layer",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "body_set_collision_layer",
            "description": "Sets the physics layer or layers a body belongs to."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mask",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "body_set_collision_mask",
            "description": "Sets the physics layer or layers a body can collide with."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mode",
                "type": "int",
                "enum": "Physics2DServer.CCDMode",
                "index": "1"
              }
            ],
            "name": "body_set_continuous_collision_detection_mode",
            "description": "Sets the continuous collision detection mode using one of the [enum CCDMode] constants.\n\t\t\t\tContinuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "receiver",
                "type": "Object",
                "index": "1"
              },
              {
                "name": "method",
                "type": "String",
                "index": "2"
              },
              {
                "default": "null",
                "name": "userdata",
                "type": "Variant",
                "index": "3"
              }
            ],
            "name": "body_set_force_integration_callback",
            "description": "Sets the function used to calculate physics for an object, if that object allows it (see [method body_set_omit_force_integration])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "amount",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "body_set_max_contacts_reported",
            "description": "Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mode",
                "type": "int",
                "enum": "Physics2DServer.BodyMode",
                "index": "1"
              }
            ],
            "name": "body_set_mode",
            "description": "Sets the body mode using one of the [enum BodyMode] constants."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "body_set_omit_force_integration",
            "description": "Sets whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "Physics2DServer.BodyParameter",
                "index": "1"
              },
              {
                "name": "value",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "body_set_param",
            "description": "Sets a body parameter. See [enum BodyParameter] for a list of available parameters."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "shape",
                "type": "RID",
                "index": "2"
              }
            ],
            "name": "body_set_shape",
            "description": "Substitutes a given body shape by another. The old shape is selected by its index, the new one by its [RID]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "2"
              },
              {
                "name": "margin",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "body_set_shape_as_one_way_collision",
            "description": "Enables one way collision on body if [code]enable[/code] is [code]true[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "disabled",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "body_set_shape_disabled",
            "description": "Disables shape in body if [code]disable[/code] is [code]true[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "metadata",
                "type": "Variant",
                "index": "2"
              }
            ],
            "name": "body_set_shape_metadata",
            "description": "Sets metadata of a shape within a body. This metadata is different from [method Object.set_meta], and can be retrieved on shape queries."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "transform",
                "type": "Transform2D",
                "index": "2"
              }
            ],
            "name": "body_set_shape_transform",
            "description": "Sets the transform matrix for a body shape."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "space",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "body_set_space",
            "description": "Assigns a space to the body (see [method space_create])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "state",
                "type": "int",
                "enum": "Physics2DServer.BodyState",
                "index": "1"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "2"
              }
            ],
            "name": "body_set_state",
            "description": "Sets a body state using one of the [enum BodyState] constants.\n\t\t\t\tNote that the method doesn't take effect immediately. The state will change on the next physics frame."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "from",
                "type": "Transform2D",
                "index": "1"
              },
              {
                "name": "motion",
                "type": "Vector2",
                "index": "2"
              },
              {
                "name": "infinite_inertia",
                "type": "bool",
                "index": "3"
              },
              {
                "default": "0.08",
                "name": "margin",
                "type": "float",
                "index": "4"
              },
              {
                "default": "null",
                "name": "result",
                "type": "Physics2DTestMotionResult",
                "index": "5"
              }
            ],
            "name": "body_test_motion",
            "description": "Returns [code]true[/code] if a collision would result from moving in the given direction from a given point in space. Margin increases the size of the shapes involved in the collision detection. [Physics2DTestMotionResult] can be passed to return additional information in."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "capsule_shape_create",
            "description": {}
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "circle_shape_create",
            "description": {}
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "concave_polygon_shape_create",
            "description": {}
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "convex_polygon_shape_create",
            "description": {}
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": [
              {
                "name": "anchor_a",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "anchor_b",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "body_a",
                "type": "RID",
                "index": "2"
              },
              {
                "name": "body_b",
                "type": "RID",
                "index": "3"
              }
            ],
            "name": "damped_spring_joint_create",
            "description": "Creates a damped spring joint between two bodies. If not specified, the second body is assumed to be the joint itself."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "Physics2DServer.DampedStringParam",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "damped_string_joint_get_param",
            "description": "Returns the value of a damped spring joint parameter."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "Physics2DServer.DampedStringParam",
                "index": "1"
              },
              {
                "name": "value",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "damped_string_joint_set_param",
            "description": "Sets a damped spring joint parameter. See [enum DampedStringParam] for a list of available parameters."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "rid",
              "type": "RID",
              "index": "0"
            },
            "name": "free_rid",
            "description": "Destroys any of the objects created by Physics2DServer. If the [RID] passed is not one of the objects that can be created by Physics2DServer, an error will be sent to the console."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "process_info",
              "type": "int",
              "enum": "Physics2DServer.ProcessInfo",
              "index": "0"
            },
            "name": "get_process_info",
            "description": "Returns information about the current state of the 2D physics engine. See [enum ProcessInfo] for a list of available states."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": [
              {
                "name": "groove1_a",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "groove2_a",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "anchor_b",
                "type": "Vector2",
                "index": "2"
              },
              {
                "name": "body_a",
                "type": "RID",
                "index": "3"
              },
              {
                "name": "body_b",
                "type": "RID",
                "index": "4"
              }
            ],
            "name": "groove_joint_create",
            "description": "Creates a groove joint between two bodies. If not specified, the bodies are assumed to be the joint itself."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "Physics2DServer.JointParam",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "joint_get_param",
            "description": "Returns the value of a joint parameter."
          },
          {
            "return": {
              "type": "int",
              "enum": "Physics2DServer.JointType"
            },
            "argument": {
              "name": "joint",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "joint_get_type",
            "description": "Returns a joint's type (see [enum JointType])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "Physics2DServer.JointParam",
                "index": "1"
              },
              {
                "name": "value",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "joint_set_param",
            "description": "Sets a joint parameter. See [enum JointParam] for a list of available parameters."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "line_shape_create",
            "description": {}
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": [
              {
                "name": "anchor",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "body_a",
                "type": "RID",
                "index": "1"
              },
              {
                "name": "body_b",
                "type": "RID",
                "index": "2"
              }
            ],
            "name": "pin_joint_create",
            "description": "Creates a pin joint between two bodies. If not specified, the second body is assumed to be the joint itself."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "ray_shape_create",
            "description": {}
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "rectangle_shape_create",
            "description": {}
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "segment_shape_create",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "active",
              "type": "bool",
              "index": "0"
            },
            "name": "set_active",
            "description": "Activates or deactivates the 2D physics engine."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "shape",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "shape_get_data",
            "description": "Returns the shape data."
          },
          {
            "return": {
              "type": "int",
              "enum": "Physics2DServer.ShapeType"
            },
            "argument": {
              "name": "shape",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "shape_get_type",
            "description": "Returns a shape's type (see [enum ShapeType])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "shape",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "data",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "shape_set_data",
            "description": "Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created [method shape_get_type]."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "space_create",
            "description": "Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with [method area_set_space], or to a body with [method body_set_space]."
          },
          {
            "return": {
              "type": "Physics2DDirectSpaceState"
            },
            "argument": {
              "name": "space",
              "type": "RID",
              "index": "0"
            },
            "name": "space_get_direct_state",
            "description": "Returns the state of a space, a [Physics2DDirectSpaceState]. This object can be used to make collision/intersection queries."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "space",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "Physics2DServer.SpaceParameter",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "space_get_param",
            "description": "Returns the value of a space parameter."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "space",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "space_is_active",
            "description": "Returns whether the space is active."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "space",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "active",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "space_set_active",
            "description": "Marks a space as active. It will not have an effect, unless it is assigned to an area or body."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "space",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "Physics2DServer.SpaceParameter",
                "index": "1"
              },
              {
                "name": "value",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "space_set_param",
            "description": "Sets the value for a space parameter. See [enum SpaceParameter] for a list of available parameters."
          }
        ]
      },
      "name": "Physics2DServer",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "SPACE_PARAM_CONTACT_RECYCLE_RADIUS",
            "enum": "SpaceParameter"
          },
          {
            "value": "1",
            "name": "SPACE_PARAM_CONTACT_MAX_SEPARATION",
            "enum": "SpaceParameter"
          },
          {
            "value": "2",
            "name": "SPACE_PARAM_BODY_MAX_ALLOWED_PENETRATION",
            "enum": "SpaceParameter"
          },
          {
            "value": "3",
            "name": "SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD",
            "enum": "SpaceParameter"
          },
          {
            "value": "4",
            "name": "SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD",
            "enum": "SpaceParameter"
          },
          {
            "value": "5",
            "name": "SPACE_PARAM_BODY_TIME_TO_SLEEP",
            "enum": "SpaceParameter"
          },
          {
            "value": "6",
            "name": "SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS",
            "enum": "SpaceParameter"
          },
          {
            "value": "7",
            "name": "SPACE_PARAM_TEST_MOTION_MIN_CONTACT_DEPTH",
            "enum": "SpaceParameter"
          },
          {
            "value": "0",
            "name": "SHAPE_LINE",
            "enum": "ShapeType"
          },
          {
            "value": "1",
            "name": "SHAPE_RAY",
            "enum": "ShapeType"
          },
          {
            "value": "2",
            "name": "SHAPE_SEGMENT",
            "enum": "ShapeType"
          },
          {
            "value": "3",
            "name": "SHAPE_CIRCLE",
            "enum": "ShapeType"
          },
          {
            "value": "4",
            "name": "SHAPE_RECTANGLE",
            "enum": "ShapeType"
          },
          {
            "value": "5",
            "name": "SHAPE_CAPSULE",
            "enum": "ShapeType"
          },
          {
            "value": "6",
            "name": "SHAPE_CONVEX_POLYGON",
            "enum": "ShapeType"
          },
          {
            "value": "7",
            "name": "SHAPE_CONCAVE_POLYGON",
            "enum": "ShapeType"
          },
          {
            "value": "8",
            "name": "SHAPE_CUSTOM",
            "enum": "ShapeType"
          },
          {
            "value": "0",
            "name": "AREA_PARAM_GRAVITY",
            "enum": "AreaParameter"
          },
          {
            "value": "1",
            "name": "AREA_PARAM_GRAVITY_VECTOR",
            "enum": "AreaParameter"
          },
          {
            "value": "2",
            "name": "AREA_PARAM_GRAVITY_IS_POINT",
            "enum": "AreaParameter"
          },
          {
            "value": "3",
            "name": "AREA_PARAM_GRAVITY_DISTANCE_SCALE",
            "enum": "AreaParameter"
          },
          {
            "value": "4",
            "name": "AREA_PARAM_GRAVITY_POINT_ATTENUATION",
            "enum": "AreaParameter"
          },
          {
            "value": "5",
            "name": "AREA_PARAM_LINEAR_DAMP",
            "enum": "AreaParameter"
          },
          {
            "value": "6",
            "name": "AREA_PARAM_ANGULAR_DAMP",
            "enum": "AreaParameter"
          },
          {
            "value": "7",
            "name": "AREA_PARAM_PRIORITY",
            "enum": "AreaParameter"
          },
          {
            "value": "0",
            "name": "AREA_SPACE_OVERRIDE_DISABLED",
            "enum": "AreaSpaceOverrideMode"
          },
          {
            "value": "1",
            "name": "AREA_SPACE_OVERRIDE_COMBINE",
            "enum": "AreaSpaceOverrideMode"
          },
          {
            "value": "2",
            "name": "AREA_SPACE_OVERRIDE_COMBINE_REPLACE",
            "enum": "AreaSpaceOverrideMode"
          },
          {
            "value": "3",
            "name": "AREA_SPACE_OVERRIDE_REPLACE",
            "enum": "AreaSpaceOverrideMode"
          },
          {
            "value": "4",
            "name": "AREA_SPACE_OVERRIDE_REPLACE_COMBINE",
            "enum": "AreaSpaceOverrideMode"
          },
          {
            "value": "0",
            "name": "BODY_MODE_STATIC",
            "enum": "BodyMode"
          },
          {
            "value": "1",
            "name": "BODY_MODE_KINEMATIC",
            "enum": "BodyMode"
          },
          {
            "value": "2",
            "name": "BODY_MODE_RIGID",
            "enum": "BodyMode"
          },
          {
            "value": "3",
            "name": "BODY_MODE_CHARACTER",
            "enum": "BodyMode"
          },
          {
            "value": "0",
            "name": "BODY_PARAM_BOUNCE",
            "enum": "BodyParameter"
          },
          {
            "value": "1",
            "name": "BODY_PARAM_FRICTION",
            "enum": "BodyParameter"
          },
          {
            "value": "2",
            "name": "BODY_PARAM_MASS",
            "enum": "BodyParameter"
          },
          {
            "value": "3",
            "name": "BODY_PARAM_INERTIA",
            "enum": "BodyParameter"
          },
          {
            "value": "4",
            "name": "BODY_PARAM_GRAVITY_SCALE",
            "enum": "BodyParameter"
          },
          {
            "value": "5",
            "name": "BODY_PARAM_LINEAR_DAMP",
            "enum": "BodyParameter"
          },
          {
            "value": "6",
            "name": "BODY_PARAM_ANGULAR_DAMP",
            "enum": "BodyParameter"
          },
          {
            "value": "7",
            "name": "BODY_PARAM_MAX",
            "enum": "BodyParameter"
          },
          {
            "value": "0",
            "name": "BODY_STATE_TRANSFORM",
            "enum": "BodyState"
          },
          {
            "value": "1",
            "name": "BODY_STATE_LINEAR_VELOCITY",
            "enum": "BodyState"
          },
          {
            "value": "2",
            "name": "BODY_STATE_ANGULAR_VELOCITY",
            "enum": "BodyState"
          },
          {
            "value": "3",
            "name": "BODY_STATE_SLEEPING",
            "enum": "BodyState"
          },
          {
            "value": "4",
            "name": "BODY_STATE_CAN_SLEEP",
            "enum": "BodyState"
          },
          {
            "value": "0",
            "name": "JOINT_PIN",
            "enum": "JointType"
          },
          {
            "value": "1",
            "name": "JOINT_GROOVE",
            "enum": "JointType"
          },
          {
            "value": "2",
            "name": "JOINT_DAMPED_SPRING",
            "enum": "JointType"
          },
          {
            "value": "0",
            "name": "JOINT_PARAM_BIAS",
            "enum": "JointParam"
          },
          {
            "value": "1",
            "name": "JOINT_PARAM_MAX_BIAS",
            "enum": "JointParam"
          },
          {
            "value": "2",
            "name": "JOINT_PARAM_MAX_FORCE",
            "enum": "JointParam"
          },
          {
            "value": "0",
            "name": "DAMPED_STRING_REST_LENGTH",
            "enum": "DampedStringParam"
          },
          {
            "value": "1",
            "name": "DAMPED_STRING_STIFFNESS",
            "enum": "DampedStringParam"
          },
          {
            "value": "2",
            "name": "DAMPED_STRING_DAMPING",
            "enum": "DampedStringParam"
          },
          {
            "value": "0",
            "name": "CCD_MODE_DISABLED",
            "enum": "CCDMode"
          },
          {
            "value": "1",
            "name": "CCD_MODE_CAST_RAY",
            "enum": "CCDMode"
          },
          {
            "value": "2",
            "name": "CCD_MODE_CAST_SHAPE",
            "enum": "CCDMode"
          },
          {
            "value": "0",
            "name": "AREA_BODY_ADDED",
            "enum": "AreaBodyStatus"
          },
          {
            "value": "1",
            "name": "AREA_BODY_REMOVED",
            "enum": "AreaBodyStatus"
          },
          {
            "value": "0",
            "name": "INFO_ACTIVE_OBJECTS",
            "enum": "ProcessInfo"
          },
          {
            "value": "1",
            "name": "INFO_COLLISION_PAIRS",
            "enum": "ProcessInfo"
          },
          {
            "value": "2",
            "name": "INFO_ISLAND_COUNT",
            "enum": "ProcessInfo"
          }
        ]
      },
      "brief_description": "Server interface for low-level 2D physics access.",
      "description": "Physics2DServer is the server responsible for all 2D physics. It can create many kinds of physics objects, but does not insert them on the node tree."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the query will take [Area2D]s into account.",
            "setter": "set_collide_with_areas",
            "name": "collide_with_areas",
            "getter": "is_collide_with_areas_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the query will take [PhysicsBody2D]s into account.",
            "setter": "set_collide_with_bodies",
            "name": "collide_with_bodies",
            "getter": "is_collide_with_bodies_enabled",
            "type": "bool"
          },
          {
            "default": "2147483647",
            "value": "The physics layer(s) the query will take into account (as a bitmask). See [url=https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.",
            "setter": "set_collision_layer",
            "name": "collision_layer",
            "getter": "get_collision_layer",
            "type": "int"
          },
          {
            "default": "[  ]",
            "value": "The list of objects or object [RID]s that will be excluded from collisions.",
            "setter": "set_exclude",
            "name": "exclude",
            "getter": "get_exclude",
            "type": "Array"
          },
          {
            "default": "0.0",
            "value": "The collision margin for the shape.",
            "setter": "set_margin",
            "name": "margin",
            "getter": "get_margin",
            "type": "float"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The motion of the shape being queried for.",
            "setter": "set_motion",
            "name": "motion",
            "getter": "get_motion",
            "type": "Vector2"
          },
          {
            "value": "The queried shape's [RID]. See also [method set_shape].",
            "setter": "set_shape_rid",
            "name": "shape_rid",
            "getter": "get_shape_rid",
            "type": "RID"
          },
          {
            "default": "Transform2D( 1, 0, 0, 1, 0, 0 )",
            "value": "The queried shape's transform matrix.",
            "setter": "set_transform",
            "name": "transform",
            "getter": "get_transform",
            "type": "Transform2D"
          }
        ]
      },
      "inherits": "Reference",
      "methods": {
        "method": {
          "return": {
            "type": "void"
          },
          "argument": {
            "name": "shape",
            "type": "Resource",
            "index": "0"
          },
          "name": "set_shape",
          "description": "Sets the [Shape2D] that will be used for collision/intersection queries."
        }
      },
      "name": "Physics2DShapeQueryParameters",
      "version": "3.3",
      "constants": {},
      "brief_description": "Parameters to be sent to a 2D shape physics query.",
      "description": "This class contains the shape and other parameters for 2D intersection/collision queries. See also [Physics2DShapeQueryResult]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_result_count",
            "description": "Returns the number of objects that intersected with the shape."
          },
          {
            "return": {
              "type": "Object"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_result_object",
            "description": "Returns the [Object] that intersected with the shape at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_result_object_id",
            "description": "Returns the instance ID of the [Object] that intersected with the shape at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_result_object_shape",
            "description": "Returns the child index of the object's [Shape] that intersected with the shape at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_result_rid",
            "description": "Returns the [RID] of the object that intersected with the shape at index [code]idx[/code]."
          }
        ]
      },
      "name": "Physics2DShapeQueryResult",
      "version": "3.3",
      "constants": {},
      "brief_description": "Result of a 2D shape query in [Physics2DServer].",
      "description": "The result of a 2D shape query in [Physics2DServer]. See also [Physics2DShapeQueryParameters]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "setter": "",
            "name": "collider",
            "getter": "get_collider",
            "type": "Object"
          },
          {
            "default": "0",
            "setter": "",
            "name": "collider_id",
            "getter": "get_collider_id",
            "type": "int"
          },
          {
            "setter": "",
            "name": "collider_rid",
            "getter": "get_collider_rid",
            "type": "RID"
          },
          {
            "default": "0",
            "setter": "",
            "name": "collider_shape",
            "getter": "get_collider_shape",
            "type": "int"
          },
          {
            "default": "Vector2( 0, 0 )",
            "setter": "",
            "name": "collider_velocity",
            "getter": "get_collider_velocity",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "setter": "",
            "name": "collision_normal",
            "getter": "get_collision_normal",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "setter": "",
            "name": "collision_point",
            "getter": "get_collision_point",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "setter": "",
            "name": "motion",
            "getter": "get_motion",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "setter": "",
            "name": "motion_remainder",
            "getter": "get_motion_remainder",
            "type": "Vector2"
          }
        ]
      },
      "inherits": "Reference",
      "methods": {},
      "name": "Physics2DTestMotionResult",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html"
      },
      "members": {
        "member": [
          {
            "default": "1",
            "value": "The physics layers this area is in.\n\t\t\tCollidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the [member collision_mask] property.\n\t\t\tA contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A. See [url=https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.",
            "setter": "set_collision_layer",
            "name": "collision_layer",
            "getter": "get_collision_layer",
            "type": "int"
          },
          {
            "default": "1",
            "value": "The physics layers this area scans for collisions. See [url=https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.",
            "setter": "set_collision_mask",
            "name": "collision_mask",
            "getter": "get_collision_mask",
            "type": "int"
          },
          {
            "default": "false",
            "setter": "set_pickable",
            "override": "true",
            "name": "input_pickable",
            "getter": "is_pickable",
            "type": "bool"
          },
          {
            "value": "Both [member collision_layer] and [member collision_mask]. Returns [member collision_layer] when accessed. Updates [member collision_layer] and [member collision_mask] when modified.",
            "setter": "_set_layers",
            "name": "layers",
            "getter": "_get_layers",
            "type": "int"
          }
        ]
      },
      "inherits": "CollisionObject2D",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "body",
              "type": "Node",
              "index": "0"
            },
            "name": "add_collision_exception_with",
            "description": "Adds a body to the list of bodies that this body can't collide with."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "get_collision_exceptions",
            "description": "Returns an array of nodes that were added as collision exceptions for this body."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "bit",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_collision_layer_bit",
            "description": "Returns an individual bit on the [member collision_layer]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "bit",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_collision_mask_bit",
            "description": "Returns an individual bit on the [member collision_mask]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "body",
              "type": "Node",
              "index": "0"
            },
            "name": "remove_collision_exception_with",
            "description": "Removes a body from the list of bodies that this body can't collide with."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bit",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_collision_layer_bit",
            "description": "Sets individual bits on the [member collision_layer] bitmask. Use this if you only need to change one layer's value."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bit",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_collision_mask_bit",
            "description": "Sets individual bits on the [member collision_mask] bitmask. Use this if you only need to change one layer's value."
          }
        ]
      },
      "name": "PhysicsBody2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base class for all objects affected by physics in 2D space.",
      "description": "PhysicsBody2D is an abstract base class for implementing a physics body. All *Body2D types inherit from it."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html"
      },
      "members": {
        "member": [
          {
            "default": "1",
            "value": "The physics layers this area is in.\n\t\t\tCollidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the [member collision_mask] property.\n\t\t\tA contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A. See [url=https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.",
            "setter": "set_collision_layer",
            "name": "collision_layer",
            "getter": "get_collision_layer",
            "type": "int"
          },
          {
            "default": "1",
            "value": "The physics layers this area scans for collisions. See [url=https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.",
            "setter": "set_collision_mask",
            "name": "collision_mask",
            "getter": "get_collision_mask",
            "type": "int"
          }
        ]
      },
      "inherits": "CollisionObject",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "body",
              "type": "Node",
              "index": "0"
            },
            "name": "add_collision_exception_with",
            "description": "Adds a body to the list of bodies that this body can't collide with."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "get_collision_exceptions",
            "description": "Returns an array of nodes that were added as collision exceptions for this body."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "bit",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_collision_layer_bit",
            "description": "Returns an individual bit on the [member collision_layer]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "bit",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_collision_mask_bit",
            "description": "Returns an individual bit on the [member collision_mask]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "body",
              "type": "Node",
              "index": "0"
            },
            "name": "remove_collision_exception_with",
            "description": "Removes a body from the list of bodies that this body can't collide with."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bit",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_collision_layer_bit",
            "description": "Sets individual bits on the [member collision_layer] bitmask. Use this if you only need to change one layer's value."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bit",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_collision_mask_bit",
            "description": "Sets individual bits on the [member collision_mask] bitmask. Use this if you only need to change one layer's value."
          }
        ]
      },
      "name": "PhysicsBody",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base class for all objects affected by physics in 3D space.",
      "description": "PhysicsBody is an abstract base class for implementing a physics body. All *Body types inherit from it."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "value": "The body's rotational velocity.",
            "setter": "set_angular_velocity",
            "name": "angular_velocity",
            "getter": "get_angular_velocity",
            "type": "Vector3"
          },
          {
            "setter": "",
            "name": "center_of_mass",
            "getter": "get_center_of_mass",
            "type": "Vector3"
          },
          {
            "value": "The inverse of the inertia of the body.",
            "setter": "",
            "name": "inverse_inertia",
            "getter": "get_inverse_inertia",
            "type": "Vector3"
          },
          {
            "value": "The inverse of the mass of the body.",
            "setter": "",
            "name": "inverse_mass",
            "getter": "get_inverse_mass",
            "type": "float"
          },
          {
            "value": "The body's linear velocity.",
            "setter": "set_linear_velocity",
            "name": "linear_velocity",
            "getter": "get_linear_velocity",
            "type": "Vector3"
          },
          {
            "setter": "",
            "name": "principal_inertia_axes",
            "getter": "get_principal_inertia_axes",
            "type": "Basis"
          },
          {
            "value": "If [code]true[/code], this body is currently sleeping (not active).",
            "setter": "set_sleep_state",
            "name": "sleeping",
            "getter": "is_sleeping",
            "type": "bool"
          },
          {
            "value": "The timestep (delta) used for the simulation.",
            "setter": "",
            "name": "step",
            "getter": "get_step",
            "type": "float"
          },
          {
            "value": "The rate at which the body stops rotating, if there are not any other forces moving it.",
            "setter": "",
            "name": "total_angular_damp",
            "getter": "get_total_angular_damp",
            "type": "float"
          },
          {
            "value": "The total gravity vector being currently applied to this body.",
            "setter": "",
            "name": "total_gravity",
            "getter": "get_total_gravity",
            "type": "Vector3"
          },
          {
            "value": "The rate at which the body stops moving, if there are not any other forces moving it.",
            "setter": "",
            "name": "total_linear_damp",
            "getter": "get_total_linear_damp",
            "type": "float"
          },
          {
            "value": "The body's transformation matrix.",
            "setter": "set_transform",
            "name": "transform",
            "getter": "get_transform",
            "type": "Transform"
          }
        ]
      },
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "force",
              "type": "Vector3",
              "index": "0"
            },
            "name": "add_central_force",
            "description": "Adds a constant directional force without affecting rotation.\n\t\t\t\tThis is equivalent to [code]add_force(force, Vector3(0,0,0))[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "force",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "add_force",
            "description": "Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "torque",
              "type": "Vector3",
              "index": "0"
            },
            "name": "add_torque",
            "description": "Adds a constant rotational force without affecting position."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "j",
              "type": "Vector3",
              "index": "0"
            },
            "name": "apply_central_impulse",
            "description": "Applies a single directional impulse without affecting rotation.\n\t\t\t\tThis is equivalent to [code]apply_impulse(Vector3(0, 0, 0), impulse)[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "position",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "j",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "apply_impulse",
            "description": "Applies a positioned impulse to the body. An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason it should only be used when simulating one-time impacts. The position uses the rotation of the global coordinate system, but is centered at the object's origin."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "j",
              "type": "Vector3",
              "index": "0"
            },
            "name": "apply_torque_impulse",
            "description": "Apply a torque impulse (which will be affected by the body mass and shape). This will rotate the body around the vector [code]j[/code] passed as parameter."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": {
              "name": "contact_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_contact_collider",
            "description": "Returns the collider's [RID]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "contact_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_contact_collider_id",
            "description": "Returns the collider's object id."
          },
          {
            "return": {
              "type": "Object"
            },
            "argument": {
              "name": "contact_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_contact_collider_object",
            "description": "Returns the collider object."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "contact_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_contact_collider_position",
            "description": "Returns the contact position in the collider."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "contact_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_contact_collider_shape",
            "description": "Returns the collider's shape index."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "contact_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_contact_collider_velocity_at_position",
            "description": "Returns the linear velocity vector at the collider's contact point."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_contact_count",
            "description": "Returns the number of contacts this body has with other bodies.\n\t\t\t\t[b]Note:[/b] By default, this returns 0 unless bodies are configured to monitor contacts. See [member RigidBody.contact_monitor]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "contact_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_contact_impulse",
            "description": "Impulse created by the contact. Only implemented for Bullet physics."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "contact_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_contact_local_normal",
            "description": "Returns the local normal at the contact point."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "contact_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_contact_local_position",
            "description": "Returns the local position of the contact point."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "contact_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_contact_local_shape",
            "description": "Returns the local shape index of the collision."
          },
          {
            "return": {
              "type": "PhysicsDirectSpaceState"
            },
            "name": "get_space_state",
            "description": "Returns the current state of the space, useful for queries."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "integrate_forces",
            "description": "Calls the built-in force integration code."
          }
        ]
      },
      "name": "PhysicsDirectBodyState",
      "version": "3.3",
      "constants": {},
      "brief_description": "Direct access object to a physics body in the [PhysicsServer].",
      "description": "Provides direct access to a physics body in the [PhysicsServer], allowing safe changes to physics properties. This object is passed via the direct state callback of rigid/character bodies, and is intended for changing the direct state of that body. See [method RigidBody._integrate_forces]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/physics/ray-casting.html"
      },
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "shape",
                "type": "PhysicsShapeQueryParameters",
                "index": "0"
              },
              {
                "name": "motion",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "cast_motion",
            "description": "Checks how far a [Shape] can move without colliding. All the parameters for the query, including the shape, are supplied through a [PhysicsShapeQueryParameters] object.\n\t\t\t\tReturns an array with the safe and unsafe proportions (between 0 and 1) of the motion. The safe proportion is the maximum fraction of the motion that can be made without a collision. The unsafe proportion is the minimum fraction of the distance that must be moved for a collision. If no collision is detected a result of [code][1.0, 1.0][/code] will be returned.\n\t\t\t\t[b]Note:[/b] Any [Shape]s that the shape is already colliding with e.g. inside of, will be ignored. Use [method collide_shape] to determine the [Shape]s that the shape is already colliding with."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "shape",
                "type": "PhysicsShapeQueryParameters",
                "index": "0"
              },
              {
                "default": "32",
                "name": "max_results",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "collide_shape",
            "description": "Checks the intersections of a shape, given through a [PhysicsShapeQueryParameters] object, against the space. The resulting array contains a list of points where the shape intersects another. Like with [method intersect_shape], the number of returned results can be limited to save processing time."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "argument": {
              "name": "shape",
              "type": "PhysicsShapeQueryParameters",
              "index": "0"
            },
            "name": "get_rest_info",
            "description": "Checks the intersections of a shape, given through a [PhysicsShapeQueryParameters] object, against the space. If it collides with more than one shape, the nearest one is selected. The returned object is a dictionary containing the following fields:\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]linear_velocity[/code]: The colliding object's velocity [Vector3]. If the object is an [Area], the result is [code](0, 0, 0)[/code].\n\t\t\t\t[code]normal[/code]: The object's surface normal at the intersection point.\n\t\t\t\t[code]point[/code]: The intersection point.\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape.\n\t\t\t\tIf the shape did not intersect anything, then an empty dictionary is returned instead."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "argument": [
              {
                "name": "from",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "to",
                "type": "Vector3",
                "index": "1"
              },
              {
                "default": "[  ]",
                "name": "exclude",
                "type": "Array",
                "index": "2"
              },
              {
                "default": "2147483647",
                "name": "collision_mask",
                "type": "int",
                "index": "3"
              },
              {
                "default": "true",
                "name": "collide_with_bodies",
                "type": "bool",
                "index": "4"
              },
              {
                "default": "false",
                "name": "collide_with_areas",
                "type": "bool",
                "index": "5"
              }
            ],
            "name": "intersect_ray",
            "description": "Intersects a ray in a given space. The returned object is a dictionary with the following fields:\n\t\t\t\t[code]collider[/code]: The colliding object.\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]normal[/code]: The object's surface normal at the intersection point.\n\t\t\t\t[code]position[/code]: The intersection point.\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape.\n\t\t\t\tIf the ray did not intersect anything, then an empty dictionary is returned instead.\n\t\t\t\tAdditionally, the method can take an [code]exclude[/code] array of objects or [RID]s that are to be excluded from collisions, a [code]collision_mask[/code] bitmask representing the physics layers to check in, or booleans to determine if the ray should collide with [PhysicsBody]s or [Area]s, respectively."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "shape",
                "type": "PhysicsShapeQueryParameters",
                "index": "0"
              },
              {
                "default": "32",
                "name": "max_results",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "intersect_shape",
            "description": "Checks the intersections of a shape, given through a [PhysicsShapeQueryParameters] object, against the space. The intersected shapes are returned in an array containing dictionaries with the following fields:\n\t\t\t\t[code]collider[/code]: The colliding object.\n\t\t\t\t[code]collider_id[/code]: The colliding object's ID.\n\t\t\t\t[code]rid[/code]: The intersecting object's [RID].\n\t\t\t\t[code]shape[/code]: The shape index of the colliding shape.\n\t\t\t\tThe number of intersections can be limited with the [code]max_results[/code] parameter, to reduce the processing time."
          }
        ]
      },
      "name": "PhysicsDirectSpaceState",
      "version": "3.3",
      "constants": {},
      "brief_description": "Direct access object to a space in the [PhysicsServer].",
      "description": "Direct access object to a space in the [PhysicsServer]. It's used mainly to do queries against objects and areas residing in a given space."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], subtracts the bounciness from the colliding object's bounciness instead of adding it.",
            "setter": "set_absorbent",
            "name": "absorbent",
            "getter": "is_absorbent",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "The body's bounciness. Values range from [code]0[/code] (no bounce) to [code]1[/code] (full bounciness).",
            "setter": "set_bounce",
            "name": "bounce",
            "getter": "get_bounce",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The body's friction. Values range from [code]0[/code] (frictionless) to [code]1[/code] (maximum friction).",
            "setter": "set_friction",
            "name": "friction",
            "getter": "get_friction",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the physics engine will use the friction of the object marked as \"rough\" when two objects collide. If [code]false[/code], the physics engine will use the lowest friction of all colliding objects instead. If [code]true[/code] for both colliding objects, the physics engine will use the highest friction.",
            "setter": "set_rough",
            "name": "rough",
            "getter": "is_rough",
            "type": "bool"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {},
      "name": "PhysicsMaterial",
      "version": "3.3",
      "constants": {},
      "brief_description": "A material for physics properties.",
      "description": "Provides a means of modifying the collision properties of a [PhysicsBody]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape",
                "type": "RID",
                "index": "1"
              },
              {
                "default": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )",
                "name": "transform",
                "type": "Transform",
                "index": "2"
              },
              {
                "default": "false",
                "name": "disabled",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "area_add_shape",
            "description": "Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "id",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "area_attach_object_instance_id",
            "description": "Assigns the area to a descendant of [Object], so it can exist in the node tree."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "area",
              "type": "RID",
              "index": "0"
            },
            "name": "area_clear_shapes",
            "description": "Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "area_create",
            "description": "Creates an [Area]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "area",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "area_get_object_instance_id",
            "description": "Gets the instance ID of the object the area is assigned to."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "PhysicsServer.AreaParameter",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "area_get_param",
            "description": "Returns an area parameter value. A list of available parameters is on the [enum AreaParameter] constants."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "area_get_shape",
            "description": "Returns the [RID] of the nth shape of an area."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "area",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "area_get_shape_count",
            "description": "Returns the number of shapes assigned to an area."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "area_get_shape_transform",
            "description": "Returns the transform matrix of a shape within an area."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": {
              "name": "area",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "area_get_space",
            "description": "Returns the space assigned to the area."
          },
          {
            "return": {
              "type": "int",
              "enum": "PhysicsServer.AreaSpaceOverrideMode"
            },
            "argument": {
              "name": "area",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "area_get_space_override_mode",
            "description": "Returns the space override mode for the area."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": {
              "name": "area",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "area_get_transform",
            "description": "Returns the transform matrix for an area."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "area",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "area_is_ray_pickable",
            "description": "If [code]true[/code], area collides with rays."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "area_remove_shape",
            "description": "Removes a shape from an area. It does not delete the shape, so it can be reassigned later."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "receiver",
                "type": "Object",
                "index": "1"
              },
              {
                "name": "method",
                "type": "String",
                "index": "2"
              }
            ],
            "name": "area_set_area_monitor_callback",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "layer",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "area_set_collision_layer",
            "description": "Assigns the area to one or many physics layers."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mask",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "area_set_collision_mask",
            "description": "Sets which physics layers the area will monitor."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "receiver",
                "type": "Object",
                "index": "1"
              },
              {
                "name": "method",
                "type": "String",
                "index": "2"
              }
            ],
            "name": "area_set_monitor_callback",
            "description": "Sets the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters:\n\t\t\t\t1: [constant AREA_BODY_ADDED] or [constant AREA_BODY_REMOVED], depending on whether the object entered or exited the area.\n\t\t\t\t2: [RID] of the object that entered/exited the area.\n\t\t\t\t3: Instance ID of the object that entered/exited the area.\n\t\t\t\t4: The shape index of the object that entered/exited the area.\n\t\t\t\t5: The shape index of the area where the object entered/exited."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "monitorable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "area_set_monitorable",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "PhysicsServer.AreaParameter",
                "index": "1"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "2"
              }
            ],
            "name": "area_set_param",
            "description": "Sets the value for an area parameter. A list of available parameters is on the [enum AreaParameter] constants."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "area_set_ray_pickable",
            "description": "Sets object pickable with rays."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "shape",
                "type": "RID",
                "index": "2"
              }
            ],
            "name": "area_set_shape",
            "description": "Substitutes a given area shape by another. The old shape is selected by its index, the new one by its [RID]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "disabled",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "area_set_shape_disabled",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "transform",
                "type": "Transform",
                "index": "2"
              }
            ],
            "name": "area_set_shape_transform",
            "description": "Sets the transform matrix for an area shape."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "space",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "area_set_space",
            "description": "Assigns a space to the area."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mode",
                "type": "int",
                "enum": "PhysicsServer.AreaSpaceOverrideMode",
                "index": "1"
              }
            ],
            "name": "area_set_space_override_mode",
            "description": "Sets the space override mode for the area. The modes are described in the [enum AreaSpaceOverrideMode] constants."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "area",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "transform",
                "type": "Transform",
                "index": "1"
              }
            ],
            "name": "area_set_transform",
            "description": "Sets the transform matrix for an area."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "force",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "body_add_central_force",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "excepted_body",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "body_add_collision_exception",
            "description": "Adds a body to the list of bodies exempt from collisions."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "force",
                "type": "Vector3",
                "index": "1"
              },
              {
                "name": "position",
                "type": "Vector3",
                "index": "2"
              }
            ],
            "name": "body_add_force",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape",
                "type": "RID",
                "index": "1"
              },
              {
                "default": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )",
                "name": "transform",
                "type": "Transform",
                "index": "2"
              },
              {
                "default": "false",
                "name": "disabled",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "body_add_shape",
            "description": "Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "torque",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "body_add_torque",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "impulse",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "body_apply_central_impulse",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector3",
                "index": "1"
              },
              {
                "name": "impulse",
                "type": "Vector3",
                "index": "2"
              }
            ],
            "name": "body_apply_impulse",
            "description": "Gives the body a push at a [code]position[/code] in the direction of the [code]impulse[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "impulse",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "body_apply_torque_impulse",
            "description": "Gives the body a push to rotate it."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "id",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "body_attach_object_instance_id",
            "description": "Assigns the area to a descendant of [Object], so it can exist in the node tree."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "name": "body_clear_shapes",
            "description": "Removes all shapes from a body."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": [
              {
                "default": "2",
                "name": "mode",
                "type": "int",
                "enum": "PhysicsServer.BodyMode",
                "index": "0"
              },
              {
                "default": "false",
                "name": "init_sleeping",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "body_create",
            "description": "Creates a physics body. The first parameter can be any value from [enum BodyMode] constants, for the type of body created. Additionally, the body can be created in sleeping state to save processing time."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_get_collision_layer",
            "description": "Returns the physics layer or layers a body belongs to."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_get_collision_mask",
            "description": "Returns the physics layer or layers a body can collide with.\n-"
          },
          {
            "return": {
              "type": "PhysicsDirectBodyState"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "name": "body_get_direct_state",
            "description": "Returns the [PhysicsDirectBodyState] of the body."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_get_kinematic_safe_margin",
            "description": {}
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_get_max_contacts_reported",
            "description": "Returns the maximum contacts that can be reported. See [method body_set_max_contacts_reported]."
          },
          {
            "return": {
              "type": "int",
              "enum": "PhysicsServer.BodyMode"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_get_mode",
            "description": "Returns the body mode."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_get_object_instance_id",
            "description": "Gets the instance ID of the object the area is assigned to."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "PhysicsServer.BodyParameter",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "body_get_param",
            "description": "Returns the value of a body parameter. A list of available parameters is on the [enum BodyParameter] constants."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "body_get_shape",
            "description": "Returns the [RID] of the nth shape of a body."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_get_shape_count",
            "description": "Returns the number of shapes assigned to a body."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "body_get_shape_transform",
            "description": "Returns the transform matrix of a body shape."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_get_space",
            "description": "Returns the [RID] of the space assigned to a body."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "state",
                "type": "int",
                "enum": "PhysicsServer.BodyState",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "body_get_state",
            "description": "Returns a body state."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "axis",
                "type": "int",
                "enum": "PhysicsServer.BodyAxis",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "body_is_axis_locked",
            "description": {}
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_is_continuous_collision_detection_enabled",
            "description": "If [code]true[/code], the continuous collision detection mode is enabled."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_is_omitting_force_integration",
            "description": "Returns whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback])."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "body",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "body_is_ray_pickable",
            "description": "If [code]true[/code], the body can be detected by rays."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "excepted_body",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "body_remove_collision_exception",
            "description": "Removes a body from the list of bodies exempt from collisions.\n\t\t\t\tContinuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "body_remove_shape",
            "description": "Removes a shape from a body. The shape is not deleted, so it can be reused afterwards."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "axis",
                "type": "int",
                "enum": "PhysicsServer.BodyAxis",
                "index": "1"
              },
              {
                "name": "lock",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "body_set_axis_lock",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "axis_velocity",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "body_set_axis_velocity",
            "description": "Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "layer",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "body_set_collision_layer",
            "description": "Sets the physics layer or layers a body belongs to."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mask",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "body_set_collision_mask",
            "description": "Sets the physics layer or layers a body can collide with."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "body_set_enable_continuous_collision_detection",
            "description": "If [code]true[/code], the continuous collision detection mode is enabled.\n\t\t\t\tContinuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "receiver",
                "type": "Object",
                "index": "1"
              },
              {
                "name": "method",
                "type": "String",
                "index": "2"
              },
              {
                "default": "null",
                "name": "userdata",
                "type": "Variant",
                "index": "3"
              }
            ],
            "name": "body_set_force_integration_callback",
            "description": "Sets the function used to calculate physics for an object, if that object allows it (see [method body_set_omit_force_integration])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "margin",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "body_set_kinematic_safe_margin",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "amount",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "body_set_max_contacts_reported",
            "description": "Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mode",
                "type": "int",
                "enum": "PhysicsServer.BodyMode",
                "index": "1"
              }
            ],
            "name": "body_set_mode",
            "description": "Sets the body mode, from one of the [enum BodyMode] constants."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "body_set_omit_force_integration",
            "description": "Sets whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "PhysicsServer.BodyParameter",
                "index": "1"
              },
              {
                "name": "value",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "body_set_param",
            "description": "Sets a body parameter. A list of available parameters is on the [enum BodyParameter] constants."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "body_set_ray_pickable",
            "description": "Sets the body pickable with rays if [code]enabled[/code] is set."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "shape",
                "type": "RID",
                "index": "2"
              }
            ],
            "name": "body_set_shape",
            "description": "Substitutes a given body shape by another. The old shape is selected by its index, the new one by its [RID]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "disabled",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "body_set_shape_disabled",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "transform",
                "type": "Transform",
                "index": "2"
              }
            ],
            "name": "body_set_shape_transform",
            "description": "Sets the transform matrix for a body shape."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "space",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "body_set_space",
            "description": "Assigns a space to the body (see [method space_create])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "body",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "state",
                "type": "int",
                "enum": "PhysicsServer.BodyState",
                "index": "1"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "2"
              }
            ],
            "name": "body_set_state",
            "description": "Sets a body state (see [enum BodyState] constants)."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "PhysicsServer.ConeTwistJointParam",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "cone_twist_joint_get_param",
            "description": "Gets a cone_twist_joint parameter (see [enum ConeTwistJointParam] constants)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "PhysicsServer.ConeTwistJointParam",
                "index": "1"
              },
              {
                "name": "value",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "cone_twist_joint_set_param",
            "description": "Sets a cone_twist_joint parameter (see [enum ConeTwistJointParam] constants)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "rid",
              "type": "RID",
              "index": "0"
            },
            "name": "free_rid",
            "description": "Destroys any of the objects created by PhysicsServer. If the [RID] passed is not one of the objects that can be created by PhysicsServer, an error will be sent to the console."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "axis",
                "type": "int",
                "enum": "Vector3.Axis",
                "index": "1"
              },
              {
                "name": "flag",
                "type": "int",
                "enum": "PhysicsServer.G6DOFJointAxisFlag",
                "index": "2"
              }
            ],
            "name": "generic_6dof_joint_get_flag",
            "description": "Gets a generic_6_DOF_joint flag (see [enum G6DOFJointAxisFlag] constants)."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "axis",
                "type": "int",
                "enum": "Vector3.Axis",
                "index": "1"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "PhysicsServer.G6DOFJointAxisParam",
                "index": "2"
              }
            ],
            "name": "generic_6dof_joint_get_param",
            "description": "Gets a generic_6_DOF_joint parameter (see [enum G6DOFJointAxisParam] constants)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "axis",
                "type": "int",
                "enum": "Vector3.Axis",
                "index": "1"
              },
              {
                "name": "flag",
                "type": "int",
                "enum": "PhysicsServer.G6DOFJointAxisFlag",
                "index": "2"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "generic_6dof_joint_set_flag",
            "description": "Sets a generic_6_DOF_joint flag (see [enum G6DOFJointAxisFlag] constants)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "axis",
                "type": "int",
                "enum": "Vector3.Axis",
                "index": "1"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "PhysicsServer.G6DOFJointAxisParam",
                "index": "2"
              },
              {
                "name": "value",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "generic_6dof_joint_set_param",
            "description": "Sets a generic_6_DOF_joint parameter (see [enum G6DOFJointAxisParam] constants)."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "process_info",
              "type": "int",
              "enum": "PhysicsServer.ProcessInfo",
              "index": "0"
            },
            "name": "get_process_info",
            "description": "Returns an Info defined by the [enum ProcessInfo] input given."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "flag",
                "type": "int",
                "enum": "PhysicsServer.HingeJointFlag",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "hinge_joint_get_flag",
            "description": "Gets a hinge_joint flag (see [enum HingeJointFlag] constants)."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "PhysicsServer.HingeJointParam",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "hinge_joint_get_param",
            "description": "Gets a hinge_joint parameter (see [enum HingeJointParam])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "flag",
                "type": "int",
                "enum": "PhysicsServer.HingeJointFlag",
                "index": "1"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "hinge_joint_set_flag",
            "description": "Sets a hinge_joint flag (see [enum HingeJointFlag] constants)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "PhysicsServer.HingeJointParam",
                "index": "1"
              },
              {
                "name": "value",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "hinge_joint_set_param",
            "description": "Sets a hinge_joint parameter (see [enum HingeJointParam] constants)."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": [
              {
                "name": "body_A",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "local_ref_A",
                "type": "Transform",
                "index": "1"
              },
              {
                "name": "body_B",
                "type": "RID",
                "index": "2"
              },
              {
                "name": "local_ref_B",
                "type": "Transform",
                "index": "3"
              }
            ],
            "name": "joint_create_cone_twist",
            "description": "Creates a [ConeTwistJoint]."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": [
              {
                "name": "body_A",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "local_ref_A",
                "type": "Transform",
                "index": "1"
              },
              {
                "name": "body_B",
                "type": "RID",
                "index": "2"
              },
              {
                "name": "local_ref_B",
                "type": "Transform",
                "index": "3"
              }
            ],
            "name": "joint_create_generic_6dof",
            "description": "Creates a [Generic6DOFJoint]."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": [
              {
                "name": "body_A",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "hinge_A",
                "type": "Transform",
                "index": "1"
              },
              {
                "name": "body_B",
                "type": "RID",
                "index": "2"
              },
              {
                "name": "hinge_B",
                "type": "Transform",
                "index": "3"
              }
            ],
            "name": "joint_create_hinge",
            "description": "Creates a [HingeJoint]."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": [
              {
                "name": "body_A",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "local_A",
                "type": "Vector3",
                "index": "1"
              },
              {
                "name": "body_B",
                "type": "RID",
                "index": "2"
              },
              {
                "name": "local_B",
                "type": "Vector3",
                "index": "3"
              }
            ],
            "name": "joint_create_pin",
            "description": "Creates a [PinJoint]."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": [
              {
                "name": "body_A",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "local_ref_A",
                "type": "Transform",
                "index": "1"
              },
              {
                "name": "body_B",
                "type": "RID",
                "index": "2"
              },
              {
                "name": "local_ref_B",
                "type": "Transform",
                "index": "3"
              }
            ],
            "name": "joint_create_slider",
            "description": "Creates a [SliderJoint]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "joint",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "joint_get_solver_priority",
            "description": "Gets the priority value of the Joint."
          },
          {
            "return": {
              "type": "int",
              "enum": "PhysicsServer.JointType"
            },
            "argument": {
              "name": "joint",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "joint_get_type",
            "description": "Returns the type of the Joint."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "priority",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "joint_set_solver_priority",
            "description": "Sets the priority value of the Joint."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "joint",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "pin_joint_get_local_a",
            "description": "Returns position of the joint in the local space of body a of the joint."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "joint",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "pin_joint_get_local_b",
            "description": "Returns position of the joint in the local space of body b of the joint."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "PhysicsServer.PinJointParam",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "pin_joint_get_param",
            "description": "Gets a pin_joint parameter (see [enum PinJointParam] constants)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "local_A",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "pin_joint_set_local_a",
            "description": "Sets position of the joint in the local space of body a of the joint."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "local_B",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "pin_joint_set_local_b",
            "description": "Sets position of the joint in the local space of body b of the joint."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "PhysicsServer.PinJointParam",
                "index": "1"
              },
              {
                "name": "value",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "pin_joint_set_param",
            "description": "Sets a pin_joint parameter (see [enum PinJointParam] constants)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "active",
              "type": "bool",
              "index": "0"
            },
            "name": "set_active",
            "description": "Activates or deactivates the 3D physics engine."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": {
              "name": "type",
              "type": "int",
              "enum": "PhysicsServer.ShapeType",
              "index": "0"
            },
            "name": "shape_create",
            "description": "Creates a shape of a type from [enum ShapeType]. Does not assign it to a body or an area. To do so, you must use [method area_set_shape] or [method body_set_shape]."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "shape",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "shape_get_data",
            "description": "Returns the shape data."
          },
          {
            "return": {
              "type": "int",
              "enum": "PhysicsServer.ShapeType"
            },
            "argument": {
              "name": "shape",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "shape_get_type",
            "description": "Returns the type of shape (see [enum ShapeType] constants)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "shape",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "data",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "shape_set_data",
            "description": "Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created [method shape_get_type]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "PhysicsServer.SliderJointParam",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "slider_joint_get_param",
            "description": "Gets a slider_joint parameter (see [enum SliderJointParam] constants)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "joint",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "PhysicsServer.SliderJointParam",
                "index": "1"
              },
              {
                "name": "value",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "slider_joint_set_param",
            "description": "Gets a slider_joint parameter (see [enum SliderJointParam] constants)."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "space_create",
            "description": "Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with [method area_set_space], or to a body with [method body_set_space]."
          },
          {
            "return": {
              "type": "PhysicsDirectSpaceState"
            },
            "argument": {
              "name": "space",
              "type": "RID",
              "index": "0"
            },
            "name": "space_get_direct_state",
            "description": "Returns the state of a space, a [PhysicsDirectSpaceState]. This object can be used to make collision/intersection queries."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "space",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "PhysicsServer.SpaceParameter",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "space_get_param",
            "description": "Returns the value of a space parameter."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "space",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "space_is_active",
            "description": "Returns whether the space is active."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "space",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "active",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "space_set_active",
            "description": "Marks a space as active. It will not have an effect, unless it is assigned to an area or body."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "space",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "PhysicsServer.SpaceParameter",
                "index": "1"
              },
              {
                "name": "value",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "space_set_param",
            "description": "Sets the value for a space parameter. A list of available parameters is on the [enum SpaceParameter] constants."
          }
        ]
      },
      "name": "PhysicsServer",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "JOINT_PIN",
            "enum": "JointType"
          },
          {
            "value": "1",
            "name": "JOINT_HINGE",
            "enum": "JointType"
          },
          {
            "value": "2",
            "name": "JOINT_SLIDER",
            "enum": "JointType"
          },
          {
            "value": "3",
            "name": "JOINT_CONE_TWIST",
            "enum": "JointType"
          },
          {
            "value": "4",
            "name": "JOINT_6DOF",
            "enum": "JointType"
          },
          {
            "value": "0",
            "name": "PIN_JOINT_BIAS",
            "enum": "PinJointParam"
          },
          {
            "value": "1",
            "name": "PIN_JOINT_DAMPING",
            "enum": "PinJointParam"
          },
          {
            "value": "2",
            "name": "PIN_JOINT_IMPULSE_CLAMP",
            "enum": "PinJointParam"
          },
          {
            "value": "0",
            "name": "HINGE_JOINT_BIAS",
            "enum": "HingeJointParam"
          },
          {
            "value": "1",
            "name": "HINGE_JOINT_LIMIT_UPPER",
            "enum": "HingeJointParam"
          },
          {
            "value": "2",
            "name": "HINGE_JOINT_LIMIT_LOWER",
            "enum": "HingeJointParam"
          },
          {
            "value": "3",
            "name": "HINGE_JOINT_LIMIT_BIAS",
            "enum": "HingeJointParam"
          },
          {
            "value": "4",
            "name": "HINGE_JOINT_LIMIT_SOFTNESS",
            "enum": "HingeJointParam"
          },
          {
            "value": "5",
            "name": "HINGE_JOINT_LIMIT_RELAXATION",
            "enum": "HingeJointParam"
          },
          {
            "value": "6",
            "name": "HINGE_JOINT_MOTOR_TARGET_VELOCITY",
            "enum": "HingeJointParam"
          },
          {
            "value": "7",
            "name": "HINGE_JOINT_MOTOR_MAX_IMPULSE",
            "enum": "HingeJointParam"
          },
          {
            "value": "0",
            "name": "HINGE_JOINT_FLAG_USE_LIMIT",
            "enum": "HingeJointFlag"
          },
          {
            "value": "1",
            "name": "HINGE_JOINT_FLAG_ENABLE_MOTOR",
            "enum": "HingeJointFlag"
          },
          {
            "value": "0",
            "name": "SLIDER_JOINT_LINEAR_LIMIT_UPPER",
            "enum": "SliderJointParam"
          },
          {
            "value": "1",
            "name": "SLIDER_JOINT_LINEAR_LIMIT_LOWER",
            "enum": "SliderJointParam"
          },
          {
            "value": "2",
            "name": "SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS",
            "enum": "SliderJointParam"
          },
          {
            "value": "3",
            "name": "SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION",
            "enum": "SliderJointParam"
          },
          {
            "value": "4",
            "name": "SLIDER_JOINT_LINEAR_LIMIT_DAMPING",
            "enum": "SliderJointParam"
          },
          {
            "value": "5",
            "name": "SLIDER_JOINT_LINEAR_MOTION_SOFTNESS",
            "enum": "SliderJointParam"
          },
          {
            "value": "6",
            "name": "SLIDER_JOINT_LINEAR_MOTION_RESTITUTION",
            "enum": "SliderJointParam"
          },
          {
            "value": "7",
            "name": "SLIDER_JOINT_LINEAR_MOTION_DAMPING",
            "enum": "SliderJointParam"
          },
          {
            "value": "8",
            "name": "SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS",
            "enum": "SliderJointParam"
          },
          {
            "value": "9",
            "name": "SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION",
            "enum": "SliderJointParam"
          },
          {
            "value": "10",
            "name": "SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING",
            "enum": "SliderJointParam"
          },
          {
            "value": "11",
            "name": "SLIDER_JOINT_ANGULAR_LIMIT_UPPER",
            "enum": "SliderJointParam"
          },
          {
            "value": "12",
            "name": "SLIDER_JOINT_ANGULAR_LIMIT_LOWER",
            "enum": "SliderJointParam"
          },
          {
            "value": "13",
            "name": "SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS",
            "enum": "SliderJointParam"
          },
          {
            "value": "14",
            "name": "SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION",
            "enum": "SliderJointParam"
          },
          {
            "value": "15",
            "name": "SLIDER_JOINT_ANGULAR_LIMIT_DAMPING",
            "enum": "SliderJointParam"
          },
          {
            "value": "16",
            "name": "SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS",
            "enum": "SliderJointParam"
          },
          {
            "value": "17",
            "name": "SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION",
            "enum": "SliderJointParam"
          },
          {
            "value": "18",
            "name": "SLIDER_JOINT_ANGULAR_MOTION_DAMPING",
            "enum": "SliderJointParam"
          },
          {
            "value": "19",
            "name": "SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS",
            "enum": "SliderJointParam"
          },
          {
            "value": "20",
            "name": "SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION",
            "enum": "SliderJointParam"
          },
          {
            "value": "21",
            "name": "SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING",
            "enum": "SliderJointParam"
          },
          {
            "value": "22",
            "name": "SLIDER_JOINT_MAX",
            "enum": "SliderJointParam"
          },
          {
            "value": "0",
            "name": "CONE_TWIST_JOINT_SWING_SPAN",
            "enum": "ConeTwistJointParam"
          },
          {
            "value": "1",
            "name": "CONE_TWIST_JOINT_TWIST_SPAN",
            "enum": "ConeTwistJointParam"
          },
          {
            "value": "2",
            "name": "CONE_TWIST_JOINT_BIAS",
            "enum": "ConeTwistJointParam"
          },
          {
            "value": "3",
            "name": "CONE_TWIST_JOINT_SOFTNESS",
            "enum": "ConeTwistJointParam"
          },
          {
            "value": "4",
            "name": "CONE_TWIST_JOINT_RELAXATION",
            "enum": "ConeTwistJointParam"
          },
          {
            "value": "0",
            "name": "G6DOF_JOINT_LINEAR_LOWER_LIMIT",
            "enum": "G6DOFJointAxisParam"
          },
          {
            "value": "1",
            "name": "G6DOF_JOINT_LINEAR_UPPER_LIMIT",
            "enum": "G6DOFJointAxisParam"
          },
          {
            "value": "2",
            "name": "G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS",
            "enum": "G6DOFJointAxisParam"
          },
          {
            "value": "3",
            "name": "G6DOF_JOINT_LINEAR_RESTITUTION",
            "enum": "G6DOFJointAxisParam"
          },
          {
            "value": "4",
            "name": "G6DOF_JOINT_LINEAR_DAMPING",
            "enum": "G6DOFJointAxisParam"
          },
          {
            "value": "5",
            "name": "G6DOF_JOINT_LINEAR_MOTOR_TARGET_VELOCITY",
            "enum": "G6DOFJointAxisParam"
          },
          {
            "value": "6",
            "name": "G6DOF_JOINT_LINEAR_MOTOR_FORCE_LIMIT",
            "enum": "G6DOFJointAxisParam"
          },
          {
            "value": "10",
            "name": "G6DOF_JOINT_ANGULAR_LOWER_LIMIT",
            "enum": "G6DOFJointAxisParam"
          },
          {
            "value": "11",
            "name": "G6DOF_JOINT_ANGULAR_UPPER_LIMIT",
            "enum": "G6DOFJointAxisParam"
          },
          {
            "value": "12",
            "name": "G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS",
            "enum": "G6DOFJointAxisParam"
          },
          {
            "value": "13",
            "name": "G6DOF_JOINT_ANGULAR_DAMPING",
            "enum": "G6DOFJointAxisParam"
          },
          {
            "value": "14",
            "name": "G6DOF_JOINT_ANGULAR_RESTITUTION",
            "enum": "G6DOFJointAxisParam"
          },
          {
            "value": "15",
            "name": "G6DOF_JOINT_ANGULAR_FORCE_LIMIT",
            "enum": "G6DOFJointAxisParam"
          },
          {
            "value": "16",
            "name": "G6DOF_JOINT_ANGULAR_ERP",
            "enum": "G6DOFJointAxisParam"
          },
          {
            "value": "17",
            "name": "G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY",
            "enum": "G6DOFJointAxisParam"
          },
          {
            "value": "18",
            "name": "G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT",
            "enum": "G6DOFJointAxisParam"
          },
          {
            "value": "0",
            "name": "G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT",
            "enum": "G6DOFJointAxisFlag"
          },
          {
            "value": "1",
            "name": "G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT",
            "enum": "G6DOFJointAxisFlag"
          },
          {
            "value": "4",
            "name": "G6DOF_JOINT_FLAG_ENABLE_MOTOR",
            "enum": "G6DOFJointAxisFlag"
          },
          {
            "value": "5",
            "name": "G6DOF_JOINT_FLAG_ENABLE_LINEAR_MOTOR",
            "enum": "G6DOFJointAxisFlag"
          },
          {
            "value": "0",
            "name": "SHAPE_PLANE",
            "enum": "ShapeType"
          },
          {
            "value": "1",
            "name": "SHAPE_RAY",
            "enum": "ShapeType"
          },
          {
            "value": "2",
            "name": "SHAPE_SPHERE",
            "enum": "ShapeType"
          },
          {
            "value": "3",
            "name": "SHAPE_BOX",
            "enum": "ShapeType"
          },
          {
            "value": "4",
            "name": "SHAPE_CAPSULE",
            "enum": "ShapeType"
          },
          {
            "value": "5",
            "name": "SHAPE_CYLINDER",
            "enum": "ShapeType"
          },
          {
            "value": "6",
            "name": "SHAPE_CONVEX_POLYGON",
            "enum": "ShapeType"
          },
          {
            "value": "7",
            "name": "SHAPE_CONCAVE_POLYGON",
            "enum": "ShapeType"
          },
          {
            "value": "8",
            "name": "SHAPE_HEIGHTMAP",
            "enum": "ShapeType"
          },
          {
            "value": "9",
            "name": "SHAPE_CUSTOM",
            "enum": "ShapeType"
          },
          {
            "value": "0",
            "name": "AREA_PARAM_GRAVITY",
            "enum": "AreaParameter"
          },
          {
            "value": "1",
            "name": "AREA_PARAM_GRAVITY_VECTOR",
            "enum": "AreaParameter"
          },
          {
            "value": "2",
            "name": "AREA_PARAM_GRAVITY_IS_POINT",
            "enum": "AreaParameter"
          },
          {
            "value": "3",
            "name": "AREA_PARAM_GRAVITY_DISTANCE_SCALE",
            "enum": "AreaParameter"
          },
          {
            "value": "4",
            "name": "AREA_PARAM_GRAVITY_POINT_ATTENUATION",
            "enum": "AreaParameter"
          },
          {
            "value": "5",
            "name": "AREA_PARAM_LINEAR_DAMP",
            "enum": "AreaParameter"
          },
          {
            "value": "6",
            "name": "AREA_PARAM_ANGULAR_DAMP",
            "enum": "AreaParameter"
          },
          {
            "value": "7",
            "name": "AREA_PARAM_PRIORITY",
            "enum": "AreaParameter"
          },
          {
            "value": "0",
            "name": "AREA_SPACE_OVERRIDE_DISABLED",
            "enum": "AreaSpaceOverrideMode"
          },
          {
            "value": "1",
            "name": "AREA_SPACE_OVERRIDE_COMBINE",
            "enum": "AreaSpaceOverrideMode"
          },
          {
            "value": "2",
            "name": "AREA_SPACE_OVERRIDE_COMBINE_REPLACE",
            "enum": "AreaSpaceOverrideMode"
          },
          {
            "value": "3",
            "name": "AREA_SPACE_OVERRIDE_REPLACE",
            "enum": "AreaSpaceOverrideMode"
          },
          {
            "value": "4",
            "name": "AREA_SPACE_OVERRIDE_REPLACE_COMBINE",
            "enum": "AreaSpaceOverrideMode"
          },
          {
            "value": "0",
            "name": "BODY_MODE_STATIC",
            "enum": "BodyMode"
          },
          {
            "value": "1",
            "name": "BODY_MODE_KINEMATIC",
            "enum": "BodyMode"
          },
          {
            "value": "2",
            "name": "BODY_MODE_RIGID",
            "enum": "BodyMode"
          },
          {
            "value": "3",
            "name": "BODY_MODE_CHARACTER",
            "enum": "BodyMode"
          },
          {
            "value": "0",
            "name": "BODY_PARAM_BOUNCE",
            "enum": "BodyParameter"
          },
          {
            "value": "1",
            "name": "BODY_PARAM_FRICTION",
            "enum": "BodyParameter"
          },
          {
            "value": "2",
            "name": "BODY_PARAM_MASS",
            "enum": "BodyParameter"
          },
          {
            "value": "3",
            "name": "BODY_PARAM_GRAVITY_SCALE",
            "enum": "BodyParameter"
          },
          {
            "value": "4",
            "name": "BODY_PARAM_LINEAR_DAMP",
            "enum": "BodyParameter"
          },
          {
            "value": "5",
            "name": "BODY_PARAM_ANGULAR_DAMP",
            "enum": "BodyParameter"
          },
          {
            "value": "6",
            "name": "BODY_PARAM_MAX",
            "enum": "BodyParameter"
          },
          {
            "value": "0",
            "name": "BODY_STATE_TRANSFORM",
            "enum": "BodyState"
          },
          {
            "value": "1",
            "name": "BODY_STATE_LINEAR_VELOCITY",
            "enum": "BodyState"
          },
          {
            "value": "2",
            "name": "BODY_STATE_ANGULAR_VELOCITY",
            "enum": "BodyState"
          },
          {
            "value": "3",
            "name": "BODY_STATE_SLEEPING",
            "enum": "BodyState"
          },
          {
            "value": "4",
            "name": "BODY_STATE_CAN_SLEEP",
            "enum": "BodyState"
          },
          {
            "value": "0",
            "name": "AREA_BODY_ADDED",
            "enum": "AreaBodyStatus"
          },
          {
            "value": "1",
            "name": "AREA_BODY_REMOVED",
            "enum": "AreaBodyStatus"
          },
          {
            "value": "0",
            "name": "INFO_ACTIVE_OBJECTS",
            "enum": "ProcessInfo"
          },
          {
            "value": "1",
            "name": "INFO_COLLISION_PAIRS",
            "enum": "ProcessInfo"
          },
          {
            "value": "2",
            "name": "INFO_ISLAND_COUNT",
            "enum": "ProcessInfo"
          },
          {
            "value": "0",
            "name": "SPACE_PARAM_CONTACT_RECYCLE_RADIUS",
            "enum": "SpaceParameter"
          },
          {
            "value": "1",
            "name": "SPACE_PARAM_CONTACT_MAX_SEPARATION",
            "enum": "SpaceParameter"
          },
          {
            "value": "2",
            "name": "SPACE_PARAM_BODY_MAX_ALLOWED_PENETRATION",
            "enum": "SpaceParameter"
          },
          {
            "value": "3",
            "name": "SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD",
            "enum": "SpaceParameter"
          },
          {
            "value": "4",
            "name": "SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD",
            "enum": "SpaceParameter"
          },
          {
            "value": "5",
            "name": "SPACE_PARAM_BODY_TIME_TO_SLEEP",
            "enum": "SpaceParameter"
          },
          {
            "value": "6",
            "name": "SPACE_PARAM_BODY_ANGULAR_VELOCITY_DAMP_RATIO",
            "enum": "SpaceParameter"
          },
          {
            "value": "7",
            "name": "SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS",
            "enum": "SpaceParameter"
          },
          {
            "value": "8",
            "name": "SPACE_PARAM_TEST_MOTION_MIN_CONTACT_DEPTH",
            "enum": "SpaceParameter"
          },
          {
            "value": "1",
            "name": "BODY_AXIS_LINEAR_X",
            "enum": "BodyAxis"
          },
          {
            "value": "2",
            "name": "BODY_AXIS_LINEAR_Y",
            "enum": "BodyAxis"
          },
          {
            "value": "4",
            "name": "BODY_AXIS_LINEAR_Z",
            "enum": "BodyAxis"
          },
          {
            "value": "8",
            "name": "BODY_AXIS_ANGULAR_X",
            "enum": "BodyAxis"
          },
          {
            "value": "16",
            "name": "BODY_AXIS_ANGULAR_Y",
            "enum": "BodyAxis"
          },
          {
            "value": "32",
            "name": "BODY_AXIS_ANGULAR_Z",
            "enum": "BodyAxis"
          }
        ]
      },
      "brief_description": "Server interface for low-level physics access.",
      "description": "PhysicsServer is the server responsible for all 3D physics. It can create many kinds of physics objects, but does not insert them on the node tree."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the query will take [Area]s into account.",
            "setter": "set_collide_with_areas",
            "name": "collide_with_areas",
            "getter": "is_collide_with_areas_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the query will take [PhysicsBody]s into account.",
            "setter": "set_collide_with_bodies",
            "name": "collide_with_bodies",
            "getter": "is_collide_with_bodies_enabled",
            "type": "bool"
          },
          {
            "default": "2147483647",
            "value": "The physics layer(s) the query will take into account (as a bitmask). See [url=https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.",
            "setter": "set_collision_mask",
            "name": "collision_mask",
            "getter": "get_collision_mask",
            "type": "int"
          },
          {
            "default": "[  ]",
            "value": "The list of objects or object [RID]s that will be excluded from collisions.",
            "setter": "set_exclude",
            "name": "exclude",
            "getter": "get_exclude",
            "type": "Array"
          },
          {
            "default": "0.0",
            "value": "The collision margin for the shape.",
            "setter": "set_margin",
            "name": "margin",
            "getter": "get_margin",
            "type": "float"
          },
          {
            "value": "The queried shape's [RID]. See also [method set_shape].",
            "setter": "set_shape_rid",
            "name": "shape_rid",
            "getter": "get_shape_rid",
            "type": "RID"
          },
          {
            "default": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )",
            "value": "The queried shape's transform matrix.",
            "setter": "set_transform",
            "name": "transform",
            "getter": "get_transform",
            "type": "Transform"
          }
        ]
      },
      "inherits": "Reference",
      "methods": {
        "method": {
          "return": {
            "type": "void"
          },
          "argument": {
            "name": "shape",
            "type": "Resource",
            "index": "0"
          },
          "name": "set_shape",
          "description": "Sets the [Shape] that will be used for collision/intersection queries."
        }
      },
      "name": "PhysicsShapeQueryParameters",
      "version": "3.3",
      "constants": {},
      "brief_description": "Parameters to be sent to a 3D shape physics query.",
      "description": "This class contains the shape and other parameters for 3D intersection/collision queries. See also [PhysicsShapeQueryResult]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_result_count",
            "description": "Returns the number of objects that intersected with the shape."
          },
          {
            "return": {
              "type": "Object"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_result_object",
            "description": "Returns the [Object] that intersected with the shape at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_result_object_id",
            "description": "Returns the instance ID of the [Object] that intersected with the shape at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_result_object_shape",
            "description": "Returns the child index of the object's [Shape] that intersected with the shape at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_result_rid",
            "description": "Returns the [RID] of the object that intersected with the shape at index [code]idx[/code]."
          }
        ]
      },
      "name": "PhysicsShapeQueryResult",
      "version": "3.3",
      "constants": {},
      "brief_description": "Result of a 3D shape query in [PhysicsServer].",
      "description": "The result of a 3D shape query in [PhysicsServer]. See also [PhysicsShapeQueryParameters]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "0.0",
          "value": "The higher this value, the more the bond to the pinned partner can flex.",
          "setter": "set_softness",
          "name": "softness",
          "getter": "get_softness",
          "type": "float"
        }
      },
      "inherits": "Joint2D",
      "methods": {},
      "name": "PinJoint2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Pin Joint for 2D shapes.",
      "description": "Pin Joint for 2D rigid bodies. It pins two bodies (rigid or static) together."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0.3",
            "value": "The force with which the pinned objects stay in positional relation to each other. The higher, the stronger.",
            "setter": "set_param",
            "name": "params/bias",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The force with which the pinned objects stay in velocity relation to each other. The higher, the stronger.",
            "setter": "set_param",
            "name": "params/damping",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "If above 0, this value is the maximum value for an impulse that this Joint produces.",
            "setter": "set_param",
            "name": "params/impulse_clamp",
            "getter": "get_param",
            "type": "float"
          }
        ]
      },
      "inherits": "Joint",
      "methods": {
        "method": [
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "param",
              "type": "int",
              "enum": "PinJoint.Param",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_param",
            "description": "Returns the value of the specified parameter."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "param",
                "type": "int",
                "enum": "PinJoint.Param",
                "index": "0"
              },
              {
                "name": "value",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_param",
            "description": "Sets the value of the specified parameter."
          }
        ]
      },
      "name": "PinJoint",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "PARAM_BIAS",
            "enum": "Param"
          },
          {
            "value": "1",
            "name": "PARAM_DAMPING",
            "enum": "Param"
          },
          {
            "value": "2",
            "name": "PARAM_IMPULSE_CLAMP",
            "enum": "Param"
          }
        ]
      },
      "brief_description": "Pin joint for 3D PhysicsBodies.",
      "description": "Pin joint for 3D rigid bodies. It pins 2 bodies (rigid or static) together. See also [Generic6DOFJoint]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "Vector2( 2, 2 )",
            "value": "Size of the generated plane.",
            "setter": "set_size",
            "name": "size",
            "getter": "get_size",
            "type": "Vector2"
          },
          {
            "default": "0",
            "value": "Number of subdivision along the Z axis.",
            "setter": "set_subdivide_depth",
            "name": "subdivide_depth",
            "getter": "get_subdivide_depth",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Number of subdivision along the X axis.",
            "setter": "set_subdivide_width",
            "name": "subdivide_width",
            "getter": "get_subdivide_width",
            "type": "int"
          }
        ]
      },
      "inherits": "PrimitiveMesh",
      "methods": {},
      "name": "PlaneMesh",
      "version": "3.3",
      "constants": {},
      "brief_description": "Class representing a planar [PrimitiveMesh].",
      "description": "Class representing a planar [PrimitiveMesh]. This flat mesh does not have a thickness. By default, this mesh is aligned on the X and Z axes; this default rotation isn't suited for use with billboarded materials. For billboarded materials, use [QuadMesh] instead.\n\t\t[b]Note:[/b] When using a large textured [PlaneMesh] (e.g. as a floor), you may stumble upon UV jittering issues depending on the camera angle. To solve this, increase [member subdivide_depth] and [member subdivide_width] until you no longer notice UV jittering."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "Plane( 0, 1, 0, 0 )",
          "value": "The [Plane] used by the [PlaneShape] for collision.",
          "setter": "set_plane",
          "name": "plane",
          "getter": "get_plane",
          "type": "Plane"
        }
      },
      "inherits": "Shape",
      "methods": {},
      "name": "PlaneShape",
      "version": "3.3",
      "constants": {},
      "brief_description": "Infinite plane shape for 3D collisions.",
      "description": "An infinite plane shape for 3D collisions. Note that the [Plane]'s normal matters; anything \"below\" the plane will collide with it. If the [PlaneShape] is used in a [PhysicsBody], it will cause colliding objects placed \"below\" it to teleport \"above\" the plane."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/math/index.html"
      },
      "members": {
        "member": [
          {
            "default": "0.0",
            "value": "The distance from the origin to the plane, in the direction of [member normal]. This value is typically non-negative.\n\t\t\tIn the scalar equation of the plane [code]ax + by + cz = d[/code], this is [code]d[/code], while the [code](a, b, c)[/code] coordinates are represented by the [member normal] property.",
            "setter": "",
            "name": "d",
            "getter": "",
            "type": "float"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "The normal of the plane, which must be normalized.\n\t\t\tIn the scalar equation of the plane [code]ax + by + cz = d[/code], this is the vector [code](a, b, c)[/code], where [code]d[/code] is the [member d] property.",
            "setter": "",
            "name": "normal",
            "getter": "",
            "type": "Vector3"
          },
          {
            "default": "0.0",
            "value": "The X component of the plane's [member normal] vector.",
            "setter": "",
            "name": "x",
            "getter": "",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The Y component of the plane's [member normal] vector.",
            "setter": "",
            "name": "y",
            "getter": "",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The Z component of the plane's [member normal] vector.",
            "setter": "",
            "name": "z",
            "getter": "",
            "type": "float"
          }
        ]
      },
      "methods": {
        "method": [
          {
            "return": {
              "type": "Plane"
            },
            "argument": [
              {
                "name": "a",
                "type": "float",
                "index": "0"
              },
              {
                "name": "b",
                "type": "float",
                "index": "1"
              },
              {
                "name": "c",
                "type": "float",
                "index": "2"
              },
              {
                "name": "d",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "Plane",
            "description": "Creates a plane from the four parameters. The three components of the resulting plane's [member normal] are [code]a[/code], [code]b[/code] and [code]c[/code], and the plane has a distance of [code]d[/code] from the origin."
          },
          {
            "return": {
              "type": "Plane"
            },
            "argument": [
              {
                "name": "v1",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "v2",
                "type": "Vector3",
                "index": "1"
              },
              {
                "name": "v3",
                "type": "Vector3",
                "index": "2"
              }
            ],
            "name": "Plane",
            "description": "Creates a plane from the three points, given in clockwise order."
          },
          {
            "return": {
              "type": "Plane"
            },
            "argument": [
              {
                "name": "normal",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "d",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "Plane",
            "description": "Creates a plane from the normal and the plane's distance to the origin."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "name": "center",
            "description": "Returns the center of the plane."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "point",
              "type": "Vector3",
              "index": "0"
            },
            "name": "distance_to",
            "description": "Returns the shortest distance from the plane to the position [code]point[/code]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "name": "get_any_point",
            "description": "Returns the center of the plane.\n\t\t\t\tThis method is deprecated, please use [method center] instead."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "point",
                "type": "Vector3",
                "index": "0"
              },
              {
                "default": "1e-05",
                "name": "epsilon",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "has_point",
            "description": "Returns [code]true[/code] if [code]point[/code] is inside the plane. Comparison uses a custom minimum [code]epsilon[/code] threshold."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": [
              {
                "name": "b",
                "type": "Plane",
                "index": "0"
              },
              {
                "name": "c",
                "type": "Plane",
                "index": "1"
              }
            ],
            "name": "intersect_3",
            "description": "Returns the intersection point of the three planes [code]b[/code], [code]c[/code] and this plane. If no intersection is found, [code]null[/code] is returned."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": [
              {
                "name": "from",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "dir",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "intersects_ray",
            "description": "Returns the intersection point of a ray consisting of the position [code]from[/code] and the direction normal [code]dir[/code] with this plane. If no intersection is found, [code]null[/code] is returned."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": [
              {
                "name": "begin",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "end",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "intersects_segment",
            "description": "Returns the intersection point of a segment from position [code]begin[/code] to position [code]end[/code] with this plane. If no intersection is found, [code]null[/code] is returned."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "plane",
              "type": "Plane",
              "index": "0"
            },
            "name": "is_equal_approx",
            "description": "Returns [code]true[/code] if this plane and [code]plane[/code] are approximately equal, by running [method @GDScript.is_equal_approx] on each component."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "point",
              "type": "Vector3",
              "index": "0"
            },
            "name": "is_point_over",
            "description": "Returns [code]true[/code] if [code]point[/code] is located above the plane."
          },
          {
            "return": {
              "type": "Plane"
            },
            "name": "normalized",
            "description": "Returns a copy of the plane, normalized."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "point",
              "type": "Vector3",
              "index": "0"
            },
            "name": "project",
            "description": "Returns the orthogonal projection of [code]point[/code] into a point in the plane."
          }
        ]
      },
      "name": "Plane",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "Plane( 1, 0, 0, 0 )",
            "name": "PLANE_YZ"
          },
          {
            "value": "Plane( 0, 1, 0, 0 )",
            "name": "PLANE_XZ"
          },
          {
            "value": "Plane( 0, 0, 1, 0 )",
            "name": "PLANE_XY"
          }
        ]
      },
      "brief_description": "Plane in hessian form.",
      "description": "Plane represents a normalized plane equation. Basically, \"normal\" is the normal of the plane (a,b,c normalized), and \"d\" is the distance from the origin to the plane (in the direction of \"normal\"). \"Over\" or \"Above\" the plane is considered the side of the plane towards where the normal is pointing."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "PrimitiveMesh",
      "methods": {},
      "name": "PointMesh",
      "version": "3.3",
      "constants": {},
      "brief_description": "Mesh with a single Point primitive.",
      "description": "The PointMesh is made from a single point. Instead of relying on triangles, points are rendered as a single rectangle on the screen with a constant size. They are intended to be used with Particle systems, but can be used as a cheap way to render constant size billboarded sprites (for example in a point cloud).\n\t\tPointMeshes, must be used with a material that has a point size. Point size can be accessed in a shader with [code]POINT_SIZE[/code], or in a [SpatialMaterial] by setting [member SpatialMaterial.flags_use_point_size] and the variable [member SpatialMaterial.params_point_size].\n\t\tWhen using PointMeshes, properties that normally alter vertices will be ignored, including billboard mode, grow, and cull face."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], polygon edges will be anti-aliased.",
            "setter": "set_antialiased",
            "name": "antialiased",
            "getter": "get_antialiased",
            "type": "bool"
          },
          {
            "default": "[  ]",
            "setter": "_set_bones",
            "name": "bones",
            "getter": "_get_bones",
            "type": "Array"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "The polygon's fill color. If [code]texture[/code] is defined, it will be multiplied by this color. It will also be the default color for vertices not set in [code]vertex_colors[/code].",
            "setter": "set_color",
            "name": "color",
            "getter": "get_color",
            "type": "Color"
          },
          {
            "default": "0",
            "setter": "set_internal_vertex_count",
            "name": "internal_vertex_count",
            "getter": "get_internal_vertex_count",
            "type": "int"
          },
          {
            "default": "100.0",
            "value": "Added padding applied to the bounding box when using [code]invert[/code]. Setting this value too small may result in a \"Bad Polygon\" error.",
            "setter": "set_invert_border",
            "name": "invert_border",
            "getter": "get_invert_border",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], polygon will be inverted, containing the area outside the defined points and extending to the [code]invert_border[/code].",
            "setter": "set_invert",
            "name": "invert_enable",
            "getter": "get_invert",
            "type": "bool"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The offset applied to each vertex.",
            "setter": "set_offset",
            "name": "offset",
            "getter": "get_offset",
            "type": "Vector2"
          },
          {
            "default": "PoolVector2Array(  )",
            "value": "The polygon's list of vertices. The final point will be connected to the first.\n\t\t\t[b]Note:[/b] This returns a copy of the [PoolVector2Array] rather than a reference.",
            "setter": "set_polygon",
            "name": "polygon",
            "getter": "get_polygon",
            "type": "PoolVector2Array"
          },
          {
            "default": "[  ]",
            "setter": "set_polygons",
            "name": "polygons",
            "getter": "get_polygons",
            "type": "Array"
          },
          {
            "default": "NodePath(\"\")",
            "setter": "set_skeleton",
            "name": "skeleton",
            "getter": "get_skeleton",
            "type": "NodePath"
          },
          {
            "value": "The polygon's fill texture. Use [code]uv[/code] to set texture coordinates.",
            "setter": "set_texture",
            "name": "texture",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "Amount to offset the polygon's [code]texture[/code]. If [code](0, 0)[/code] the texture's origin (its top-left corner) will be placed at the polygon's [code]position[/code].",
            "setter": "set_texture_offset",
            "name": "texture_offset",
            "getter": "get_texture_offset",
            "type": "Vector2"
          },
          {
            "value": "The texture's rotation in radians.",
            "setter": "set_texture_rotation",
            "name": "texture_rotation",
            "getter": "get_texture_rotation",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The texture's rotation in degrees.",
            "setter": "set_texture_rotation_degrees",
            "name": "texture_rotation_degrees",
            "getter": "get_texture_rotation_degrees",
            "type": "float"
          },
          {
            "default": "Vector2( 1, 1 )",
            "value": "Amount to multiply the [code]uv[/code] coordinates when using a [code]texture[/code]. Larger values make the texture smaller, and vice versa.",
            "setter": "set_texture_scale",
            "name": "texture_scale",
            "getter": "get_texture_scale",
            "type": "Vector2"
          },
          {
            "default": "PoolVector2Array(  )",
            "value": "Texture coordinates for each vertex of the polygon. There should be one [code]uv[/code] per polygon vertex. If there are fewer, undefined vertices will use [code](0, 0)[/code].",
            "setter": "set_uv",
            "name": "uv",
            "getter": "get_uv",
            "type": "PoolVector2Array"
          },
          {
            "default": "PoolColorArray(  )",
            "value": "Color for each vertex. Colors are interpolated between vertices, resulting in smooth gradients. There should be one per polygon vertex. If there are fewer, undefined vertices will use [code]color[/code].",
            "setter": "set_vertex_colors",
            "name": "vertex_colors",
            "getter": "get_vertex_colors",
            "type": "PoolColorArray"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "path",
                "type": "NodePath",
                "index": "0"
              },
              {
                "name": "weights",
                "type": "PoolRealArray",
                "index": "1"
              }
            ],
            "name": "add_bone",
            "description": "Adds a bone with the specified [code]path[/code] and [code]weights[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_bones",
            "description": "Removes all bones from this [Polygon2D]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "name": "erase_bone",
            "description": "Removes the specified bone from this [Polygon2D]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_bone_count",
            "description": "Returns the number of bones in this [Polygon2D]."
          },
          {
            "return": {
              "type": "NodePath"
            },
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_bone_path",
            "description": "Returns the path to the node associated with the specified bone."
          },
          {
            "return": {
              "type": "PoolRealArray"
            },
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_bone_weights",
            "description": "Returns the height values of the specified bone."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "index",
                "type": "int",
                "index": "0"
              },
              {
                "name": "path",
                "type": "NodePath",
                "index": "1"
              }
            ],
            "name": "set_bone_path",
            "description": "Sets the path to the node associated with the specified bone."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "index",
                "type": "int",
                "index": "0"
              },
              {
                "name": "weights",
                "type": "PoolRealArray",
                "index": "1"
              }
            ],
            "name": "set_bone_weights",
            "description": "Sets the weight values for the specified bone."
          }
        ]
      },
      "name": "Polygon2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "A 2D polygon.",
      "description": "A Polygon2D is defined by a set of points. Each point is connected to the next, with the final point being connected to the first, resulting in a closed polygon. Polygon2Ds can be filled with color (solid or gradient) or filled with a given texture.\n\t\t[b]Note:[/b] By default, Godot can only draw up to 4,096 polygon points at a time. To increase this limit, open the Project Settings and increase [member ProjectSettings.rendering/limits/buffers/canvas_polygon_buffer_size_kb] and [member ProjectSettings.rendering/limits/buffers/canvas_polygon_index_buffer_size_kb]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "PoolVector2Array"
            },
            "argument": [
              {
                "name": "from",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "to",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "find_path",
            "description": {}
          },
          {
            "return": {
              "type": "Rect2"
            },
            "qualifiers": "const",
            "name": "get_bounds",
            "description": {}
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "point",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_closest_point",
            "description": {}
          },
          {
            "return": {
              "type": "PoolVector2Array"
            },
            "argument": [
              {
                "name": "from",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "to",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_intersections",
            "description": {}
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_point_penalty",
            "description": {}
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "point",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_point_inside",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "penalty",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_point_penalty",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "points",
                "type": "PoolVector2Array",
                "index": "0"
              },
              {
                "name": "connections",
                "type": "PoolIntArray",
                "index": "1"
              }
            ],
            "name": "setup",
            "description": {}
          }
        ]
      },
      "name": "PolygonPathFinder",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "methods": {
        "method": [
          {
            "return": {
              "type": "PoolByteArray"
            },
            "argument": {
              "name": "from",
              "type": "Array",
              "index": "0"
            },
            "name": "PoolByteArray",
            "description": "Constructs a new [PoolByteArray]. Optionally, you can pass in a generic [Array] that will be converted."
          },
          {
            "argument": {
              "name": "byte",
              "type": "int",
              "index": "0"
            },
            "name": "append",
            "description": "Appends an element at the end of the array (alias of [method push_back])."
          },
          {
            "argument": {
              "name": "array",
              "type": "PoolByteArray",
              "index": "0"
            },
            "name": "append_array",
            "description": "Appends a [PoolByteArray] at the end of this array."
          },
          {
            "return": {
              "type": "PoolByteArray"
            },
            "argument": {
              "default": "0",
              "name": "compression_mode",
              "type": "int",
              "index": "0"
            },
            "name": "compress",
            "description": "Returns a new [PoolByteArray] with the data compressed. Set the compression mode using one of [enum File.CompressionMode]'s constants."
          },
          {
            "return": {
              "type": "PoolByteArray"
            },
            "argument": [
              {
                "name": "buffer_size",
                "type": "int",
                "index": "0"
              },
              {
                "default": "0",
                "name": "compression_mode",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "decompress",
            "description": "Returns a new [PoolByteArray] with the data decompressed. Set [code]buffer_size[/code] to the size of the uncompressed data. Set the compression mode using one of [enum File.CompressionMode]'s constants."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "empty",
            "description": "Returns [code]true[/code] if the array is empty."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "get_string_from_ascii",
            "description": "Returns a copy of the array's contents as [String]. Fast alternative to [method get_string_from_utf8] if the content is ASCII-only. Unlike the UTF-8 function this function maps every byte to a character in the array. Multibyte sequences will not be interpreted correctly. For parsing user input always use [method get_string_from_utf8]."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "get_string_from_utf8",
            "description": "Returns a copy of the array's contents as [String]. Slower than [method get_string_from_ascii] but supports UTF-8 encoded data. Use this function if you are unsure about the source of the data. For user input this function should always be preferred."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "hex_encode",
            "description": "Returns a hexadecimal representation of this array as a [String].\n\t\t\t\t[codeblock]\n\t\t\t\tvar array = PoolByteArray([11, 46, 255])\n\t\t\t\tprint(array.hex_encode()) # Prints: 0b2eff\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "byte",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "insert",
            "description": "Inserts a new element at a given position in the array. The position must be valid, or at the end of the array ([code]idx == size()[/code])."
          },
          {
            "name": "invert",
            "description": "Reverses the order of the elements in the array."
          },
          {
            "argument": {
              "name": "byte",
              "type": "int",
              "index": "0"
            },
            "name": "push_back",
            "description": "Appends an element at the end of the array."
          },
          {
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "remove",
            "description": "Removes an element from the array by index."
          },
          {
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "resize",
            "description": "Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size."
          },
          {
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "byte",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set",
            "description": "Changes the byte at the given index."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "size",
            "description": "Returns the size of the array."
          },
          {
            "return": {
              "type": "PoolByteArray"
            },
            "argument": [
              {
                "name": "from",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "subarray",
            "description": "Returns the slice of the [PoolByteArray] between indices (inclusive) as a new [PoolByteArray]. Any negative index is considered to be from the end of the array."
          }
        ]
      },
      "name": "PoolByteArray",
      "version": "3.3",
      "constants": {},
      "brief_description": "A pooled [Array] of bytes.",
      "description": "An [Array] specifically designed to hold bytes. Optimized for memory usage, does not fragment the memory.\n\t\t[b]Note:[/b] This type is passed by value and not by reference."
    }
  },
  {
    "class": {
      "tutorials": {},
      "methods": {
        "method": [
          {
            "return": {
              "type": "PoolColorArray"
            },
            "argument": {
              "name": "from",
              "type": "Array",
              "index": "0"
            },
            "name": "PoolColorArray",
            "description": "Constructs a new [PoolColorArray]. Optionally, you can pass in a generic [Array] that will be converted."
          },
          {
            "argument": {
              "name": "color",
              "type": "Color",
              "index": "0"
            },
            "name": "append",
            "description": "Appends an element at the end of the array (alias of [method push_back])."
          },
          {
            "argument": {
              "name": "array",
              "type": "PoolColorArray",
              "index": "0"
            },
            "name": "append_array",
            "description": "Appends a [PoolColorArray] at the end of this array."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "empty",
            "description": "Returns [code]true[/code] if the array is empty."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "insert",
            "description": "Inserts a new element at a given position in the array. The position must be valid, or at the end of the array ([code]idx == size()[/code])."
          },
          {
            "name": "invert",
            "description": "Reverses the order of the elements in the array."
          },
          {
            "argument": {
              "name": "color",
              "type": "Color",
              "index": "0"
            },
            "name": "push_back",
            "description": "Appends a value to the array."
          },
          {
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "remove",
            "description": "Removes an element from the array by index."
          },
          {
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "resize",
            "description": "Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size."
          },
          {
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "set",
            "description": "Changes the [Color] at the given index."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "size",
            "description": "Returns the size of the array."
          }
        ]
      },
      "name": "PoolColorArray",
      "version": "3.3",
      "constants": {},
      "brief_description": "A pooled [Array] of [Color].",
      "description": "An [Array] specifically designed to hold [Color]. Optimized for memory usage, does not fragment the memory.\n\t\t[b]Note:[/b] This type is passed by value and not by reference."
    }
  },
  {
    "class": {
      "tutorials": {},
      "methods": {
        "method": [
          {
            "return": {
              "type": "PoolIntArray"
            },
            "argument": {
              "name": "from",
              "type": "Array",
              "index": "0"
            },
            "name": "PoolIntArray",
            "description": "Constructs a new [PoolIntArray]. Optionally, you can pass in a generic [Array] that will be converted."
          },
          {
            "argument": {
              "name": "integer",
              "type": "int",
              "index": "0"
            },
            "name": "append",
            "description": "Appends an element at the end of the array (alias of [method push_back])."
          },
          {
            "argument": {
              "name": "array",
              "type": "PoolIntArray",
              "index": "0"
            },
            "name": "append_array",
            "description": "Appends a [PoolIntArray] at the end of this array."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "empty",
            "description": "Returns [code]true[/code] if the array is empty."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "integer",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "insert",
            "description": "Inserts a new int at a given position in the array. The position must be valid, or at the end of the array ([code]idx == size()[/code])."
          },
          {
            "name": "invert",
            "description": "Reverses the order of the elements in the array."
          },
          {
            "argument": {
              "name": "integer",
              "type": "int",
              "index": "0"
            },
            "name": "push_back",
            "description": "Appends a value to the array."
          },
          {
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "remove",
            "description": "Removes an element from the array by index."
          },
          {
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "resize",
            "description": "Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size."
          },
          {
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "integer",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set",
            "description": "Changes the int at the given index."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "size",
            "description": "Returns the array size."
          }
        ]
      },
      "name": "PoolIntArray",
      "version": "3.3",
      "constants": {},
      "brief_description": "A pooled [Array] of integers ([int]).",
      "description": "An [Array] specifically designed to hold integer values ([int]). Optimized for memory usage, does not fragment the memory.\n\t\t[b]Note:[/b] This type is passed by value and not by reference.\n\t\t[b]Note:[/b] This type is limited to signed 32-bit integers, which means it can only take values in the interval [code][-2^31, 2^31 - 1][/code], i.e. [code][-2147483648, 2147483647][/code]. Exceeding those bounds will wrap around. In comparison, [int] uses signed 64-bit integers which can hold much larger values."
    }
  },
  {
    "class": {
      "tutorials": {},
      "methods": {
        "method": [
          {
            "return": {
              "type": "PoolRealArray"
            },
            "argument": {
              "name": "from",
              "type": "Array",
              "index": "0"
            },
            "name": "PoolRealArray",
            "description": "Constructs a new [PoolRealArray]. Optionally, you can pass in a generic [Array] that will be converted."
          },
          {
            "argument": {
              "name": "value",
              "type": "float",
              "index": "0"
            },
            "name": "append",
            "description": "Appends an element at the end of the array (alias of [method push_back])."
          },
          {
            "argument": {
              "name": "array",
              "type": "PoolRealArray",
              "index": "0"
            },
            "name": "append_array",
            "description": "Appends a [PoolRealArray] at the end of this array."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "empty",
            "description": "Returns [code]true[/code] if the array is empty."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "insert",
            "description": "Inserts a new element at a given position in the array. The position must be valid, or at the end of the array ([code]idx == size()[/code])."
          },
          {
            "name": "invert",
            "description": "Reverses the order of the elements in the array."
          },
          {
            "argument": {
              "name": "value",
              "type": "float",
              "index": "0"
            },
            "name": "push_back",
            "description": "Appends an element at the end of the array."
          },
          {
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "remove",
            "description": "Removes an element from the array by index."
          },
          {
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "resize",
            "description": "Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size."
          },
          {
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set",
            "description": "Changes the float at the given index."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "size",
            "description": "Returns the size of the array."
          }
        ]
      },
      "name": "PoolRealArray",
      "version": "3.3",
      "constants": {},
      "brief_description": "A pooled [Array] of reals ([float]).",
      "description": "An [Array] specifically designed to hold floating-point values. Optimized for memory usage, does not fragment the memory.\n\t\t[b]Note:[/b] This type is passed by value and not by reference.\n\t\t[b]Note:[/b] Unlike primitive [float]s which are 64-bit, numbers stored in [PoolRealArray] are 32-bit floats. This means values stored in [PoolRealArray] have lower precision compared to primitive [float]s. If you need to store 64-bit floats in an array, use a generic [Array] with [float] elements as these will still be 64-bit. However, using a generic [Array] to store [float]s will use roughly 6 times more memory compared to a [PoolRealArray]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/677",
          "title": "OS Test Demo"
        }
      },
      "methods": {
        "method": [
          {
            "return": {
              "type": "PoolStringArray"
            },
            "argument": {
              "name": "from",
              "type": "Array",
              "index": "0"
            },
            "name": "PoolStringArray",
            "description": "Constructs a new [PoolStringArray]. Optionally, you can pass in a generic [Array] that will be converted."
          },
          {
            "argument": {
              "name": "string",
              "type": "String",
              "index": "0"
            },
            "name": "append",
            "description": "Appends an element at the end of the array (alias of [method push_back])."
          },
          {
            "argument": {
              "name": "array",
              "type": "PoolStringArray",
              "index": "0"
            },
            "name": "append_array",
            "description": "Appends a [PoolStringArray] at the end of this array."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "empty",
            "description": "Returns [code]true[/code] if the array is empty."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "string",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "insert",
            "description": "Inserts a new element at a given position in the array. The position must be valid, or at the end of the array ([code]idx == size()[/code])."
          },
          {
            "name": "invert",
            "description": "Reverses the order of the elements in the array."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "delimiter",
              "type": "String",
              "index": "0"
            },
            "name": "join",
            "description": "Returns a [String] with each element of the array joined with the given [code]delimiter[/code]."
          },
          {
            "argument": {
              "name": "string",
              "type": "String",
              "index": "0"
            },
            "name": "push_back",
            "description": "Appends a string element at end of the array."
          },
          {
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "remove",
            "description": "Removes an element from the array by index."
          },
          {
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "resize",
            "description": "Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size."
          },
          {
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "string",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set",
            "description": "Changes the [String] at the given index."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "size",
            "description": "Returns the size of the array."
          }
        ]
      },
      "name": "PoolStringArray",
      "version": "3.3",
      "constants": {},
      "brief_description": "A pooled [Array] of [String].",
      "description": "An [Array] specifically designed to hold [String]s. Optimized for memory usage, does not fragment the memory.\n\t\t[b]Note:[/b] This type is passed by value and not by reference."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/519",
          "title": "2D Navigation Astar Demo"
        }
      },
      "methods": {
        "method": [
          {
            "return": {
              "type": "PoolVector2Array"
            },
            "argument": {
              "name": "from",
              "type": "Array",
              "index": "0"
            },
            "name": "PoolVector2Array",
            "description": "Constructs a new [PoolVector2Array]. Optionally, you can pass in a generic [Array] that will be converted."
          },
          {
            "argument": {
              "name": "vector2",
              "type": "Vector2",
              "index": "0"
            },
            "name": "append",
            "description": "Appends an element at the end of the array (alias of [method push_back])."
          },
          {
            "argument": {
              "name": "array",
              "type": "PoolVector2Array",
              "index": "0"
            },
            "name": "append_array",
            "description": "Appends a [PoolVector2Array] at the end of this array."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "empty",
            "description": "Returns [code]true[/code] if the array is empty."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "vector2",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "insert",
            "description": "Inserts a new element at a given position in the array. The position must be valid, or at the end of the array ([code]idx == size()[/code])."
          },
          {
            "name": "invert",
            "description": "Reverses the order of the elements in the array."
          },
          {
            "argument": {
              "name": "vector2",
              "type": "Vector2",
              "index": "0"
            },
            "name": "push_back",
            "description": "Inserts a [Vector2] at the end."
          },
          {
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "remove",
            "description": "Removes an element from the array by index."
          },
          {
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "resize",
            "description": "Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size."
          },
          {
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "vector2",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "set",
            "description": "Changes the [Vector2] at the given index."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "size",
            "description": "Returns the size of the array."
          }
        ]
      },
      "name": "PoolVector2Array",
      "version": "3.3",
      "constants": {},
      "brief_description": "A pooled [Array] of [Vector2].",
      "description": "An [Array] specifically designed to hold [Vector2]. Optimized for memory usage, does not fragment the memory.\n\t\t[b]Note:[/b] This type is passed by value and not by reference."
    }
  },
  {
    "class": {
      "tutorials": {},
      "methods": {
        "method": [
          {
            "return": {
              "type": "PoolVector3Array"
            },
            "argument": {
              "name": "from",
              "type": "Array",
              "index": "0"
            },
            "name": "PoolVector3Array",
            "description": "Constructs a new [PoolVector3Array]. Optionally, you can pass in a generic [Array] that will be converted."
          },
          {
            "argument": {
              "name": "vector3",
              "type": "Vector3",
              "index": "0"
            },
            "name": "append",
            "description": "Appends an element at the end of the array (alias of [method push_back])."
          },
          {
            "argument": {
              "name": "array",
              "type": "PoolVector3Array",
              "index": "0"
            },
            "name": "append_array",
            "description": "Appends a [PoolVector3Array] at the end of this array."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "empty",
            "description": "Returns [code]true[/code] if the array is empty."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "vector3",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "insert",
            "description": "Inserts a new element at a given position in the array. The position must be valid, or at the end of the array ([code]idx == size()[/code])."
          },
          {
            "name": "invert",
            "description": "Reverses the order of the elements in the array."
          },
          {
            "argument": {
              "name": "vector3",
              "type": "Vector3",
              "index": "0"
            },
            "name": "push_back",
            "description": "Inserts a [Vector3] at the end."
          },
          {
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "remove",
            "description": "Removes an element from the array by index."
          },
          {
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "resize",
            "description": "Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size."
          },
          {
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "vector3",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "set",
            "description": "Changes the [Vector3] at the given index."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "size",
            "description": "Returns the size of the array."
          }
        ]
      },
      "name": "PoolVector3Array",
      "version": "3.3",
      "constants": {},
      "brief_description": "A pooled [Array] of [Vector3].",
      "description": "An [Array] specifically designed to hold [Vector3]. Optimized for memory usage, does not fragment the memory.\n\t\t[b]Note:[/b] This type is passed by value and not by reference."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": {
          "value": "Sets a custom [StyleBox] for the panel of the [PopupDialog].",
          "name": "panel",
          "type": "StyleBox"
        }
      },
      "inherits": "Popup",
      "methods": {},
      "name": "PopupDialog",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base class for popup dialogs.",
      "description": "PopupDialog is a base class for popup dialogs, along with [WindowDialog]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "value": "[Texture] icon for the checked checkbox items.",
            "name": "checked",
            "type": "Texture"
          },
          {
            "value": "[Font] used for the menu items.",
            "name": "font",
            "type": "Font"
          },
          {
            "default": "Color( 0.88, 0.88, 0.88, 1 )",
            "value": "The default text [Color] for menu items' names.",
            "name": "font_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.7, 0.7, 0.7, 0.8 )",
            "value": "The text [Color] used for shortcuts and accelerators that show next to the menu item name when defined. See [method get_item_accelerator] for more info on accelerators.",
            "name": "font_color_accel",
            "type": "Color"
          },
          {
            "default": "Color( 0.4, 0.4, 0.4, 0.8 )",
            "value": "[Color] used for disabled menu items' text.",
            "name": "font_color_disabled",
            "type": "Color"
          },
          {
            "default": "Color( 0.88, 0.88, 0.88, 1 )",
            "value": "[Color] used for the hovered text.",
            "name": "font_color_hover",
            "type": "Color"
          },
          {
            "default": "Color( 0.88, 0.88, 0.88, 1 )",
            "value": "[Color] used for labeled separators' text. See [method add_separator].",
            "name": "font_color_separator",
            "type": "Color"
          },
          {
            "value": "[StyleBox] displayed when the [PopupMenu] item is hovered.",
            "name": "hover",
            "type": "StyleBox"
          },
          {
            "default": "4",
            "value": "The horizontal space between the item's name and the shortcut text/submenu arrow.",
            "name": "hseparation",
            "type": "int"
          },
          {
            "value": "[StyleBox] for the left side of labeled separator. See [method add_separator].",
            "name": "labeled_separator_left",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] for the right side of labeled separator. See [method add_separator].",
            "name": "labeled_separator_right",
            "type": "StyleBox"
          },
          {
            "value": "Default [StyleBox] of the [PopupMenu] items.",
            "name": "panel",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] used when the [PopupMenu] item is disabled.",
            "name": "panel_disabled",
            "type": "StyleBox"
          },
          {
            "value": "[Texture] icon for the checked radio button items.",
            "name": "radio_checked",
            "type": "Texture"
          },
          {
            "value": "[Texture] icon for the unchecked radio button items.",
            "name": "radio_unchecked",
            "type": "Texture"
          },
          {
            "value": "[StyleBox] used for the separators. See [method add_separator].",
            "name": "separator",
            "type": "StyleBox"
          },
          {
            "value": "[Texture] icon for the submenu arrow.",
            "name": "submenu",
            "type": "Texture"
          },
          {
            "value": "[Texture] icon for the unchecked checkbox items.",
            "name": "unchecked",
            "type": "Texture"
          },
          {
            "default": "4",
            "value": "The vertical space between each menu item.",
            "name": "vseparation",
            "type": "int"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], allows navigating [PopupMenu] with letter keys.",
            "setter": "set_allow_search",
            "name": "allow_search",
            "getter": "get_allow_search",
            "type": "bool"
          },
          {
            "default": "2",
            "setter": "set_focus_mode",
            "override": "true",
            "name": "focus_mode",
            "getter": "get_focus_mode",
            "type": "int",
            "enum": "Control.FocusMode"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], hides the [PopupMenu] when a checkbox or radio button is selected.",
            "setter": "set_hide_on_checkable_item_selection",
            "name": "hide_on_checkable_item_selection",
            "getter": "is_hide_on_checkable_item_selection",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], hides the [PopupMenu] when an item is selected.",
            "setter": "set_hide_on_item_selection",
            "name": "hide_on_item_selection",
            "getter": "is_hide_on_item_selection",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], hides the [PopupMenu] when a state item is selected.",
            "setter": "set_hide_on_state_item_selection",
            "name": "hide_on_state_item_selection",
            "getter": "is_hide_on_state_item_selection",
            "type": "bool"
          },
          {
            "default": "0.3",
            "value": "Sets the delay time in seconds for the submenu item to popup on mouse hovering. If the popup menu is added as a child of another (acting as a submenu), it will inherit the delay time of the parent menu item.",
            "setter": "set_submenu_popup_delay",
            "name": "submenu_popup_delay",
            "getter": "get_submenu_popup_delay",
            "type": "float"
          }
        ]
      },
      "inherits": "Popup",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "label",
                "type": "String",
                "index": "0"
              },
              {
                "default": "-1",
                "name": "id",
                "type": "int",
                "index": "1"
              },
              {
                "default": "0",
                "name": "accel",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "add_check_item",
            "description": "Adds a new checkable item with text [code]label[/code].\n\t\t\t\tAn [code]id[/code] can optionally be provided, as well as an accelerator ([code]accel[/code]). If no [code]id[/code] is provided, one will be created from the index. If no [code]accel[/code] is provided then the default [code]0[/code] will be assigned to it. See [method get_item_accelerator] for more info on accelerators.\n\t\t\t\t[b]Note:[/b] Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See [method set_item_checked] for more info on how to control it."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "shortcut",
                "type": "ShortCut",
                "index": "0"
              },
              {
                "default": "-1",
                "name": "id",
                "type": "int",
                "index": "1"
              },
              {
                "default": "false",
                "name": "global",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "add_check_shortcut",
            "description": "Adds a new checkable item and assigns the specified [ShortCut] to it. Sets the label of the checkbox to the [ShortCut]'s name.\n\t\t\t\tAn [code]id[/code] can optionally be provided. If no [code]id[/code] is provided, one will be created from the index.\n\t\t\t\t[b]Note:[/b] Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See [method set_item_checked] for more info on how to control it."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "texture",
                "type": "Texture",
                "index": "0"
              },
              {
                "name": "label",
                "type": "String",
                "index": "1"
              },
              {
                "default": "-1",
                "name": "id",
                "type": "int",
                "index": "2"
              },
              {
                "default": "0",
                "name": "accel",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "add_icon_check_item",
            "description": "Adds a new checkable item with text [code]label[/code] and icon [code]texture[/code].\n\t\t\t\tAn [code]id[/code] can optionally be provided, as well as an accelerator ([code]accel[/code]). If no [code]id[/code] is provided, one will be created from the index. If no [code]accel[/code] is provided then the default [code]0[/code] will be assigned to it. See [method get_item_accelerator] for more info on accelerators.\n\t\t\t\t[b]Note:[/b] Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See [method set_item_checked] for more info on how to control it."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "texture",
                "type": "Texture",
                "index": "0"
              },
              {
                "name": "shortcut",
                "type": "ShortCut",
                "index": "1"
              },
              {
                "default": "-1",
                "name": "id",
                "type": "int",
                "index": "2"
              },
              {
                "default": "false",
                "name": "global",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "add_icon_check_shortcut",
            "description": "Adds a new checkable item and assigns the specified [ShortCut] and icon [code]texture[/code] to it. Sets the label of the checkbox to the [ShortCut]'s name.\n\t\t\t\tAn [code]id[/code] can optionally be provided. If no [code]id[/code] is provided, one will be created from the index.\n\t\t\t\t[b]Note:[/b] Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See [method set_item_checked] for more info on how to control it."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "texture",
                "type": "Texture",
                "index": "0"
              },
              {
                "name": "label",
                "type": "String",
                "index": "1"
              },
              {
                "default": "-1",
                "name": "id",
                "type": "int",
                "index": "2"
              },
              {
                "default": "0",
                "name": "accel",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "add_icon_item",
            "description": "Adds a new item with text [code]label[/code] and icon [code]texture[/code].\n\t\t\t\tAn [code]id[/code] can optionally be provided, as well as an accelerator ([code]accel[/code]). If no [code]id[/code] is provided, one will be created from the index. If no [code]accel[/code] is provided then the default [code]0[/code] will be assigned to it. See [method get_item_accelerator] for more info on accelerators."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "texture",
                "type": "Texture",
                "index": "0"
              },
              {
                "name": "label",
                "type": "String",
                "index": "1"
              },
              {
                "default": "-1",
                "name": "id",
                "type": "int",
                "index": "2"
              },
              {
                "default": "0",
                "name": "accel",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "add_icon_radio_check_item",
            "description": "Same as [method add_icon_check_item], but uses a radio check button."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "texture",
                "type": "Texture",
                "index": "0"
              },
              {
                "name": "shortcut",
                "type": "ShortCut",
                "index": "1"
              },
              {
                "default": "-1",
                "name": "id",
                "type": "int",
                "index": "2"
              },
              {
                "default": "false",
                "name": "global",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "add_icon_radio_check_shortcut",
            "description": "Same as [method add_icon_check_shortcut], but uses a radio check button."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "texture",
                "type": "Texture",
                "index": "0"
              },
              {
                "name": "shortcut",
                "type": "ShortCut",
                "index": "1"
              },
              {
                "default": "-1",
                "name": "id",
                "type": "int",
                "index": "2"
              },
              {
                "default": "false",
                "name": "global",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "add_icon_shortcut",
            "description": "Adds a new item and assigns the specified [ShortCut] and icon [code]texture[/code] to it. Sets the label of the checkbox to the [ShortCut]'s name.\n\t\t\t\tAn [code]id[/code] can optionally be provided. If no [code]id[/code] is provided, one will be created from the index."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "label",
                "type": "String",
                "index": "0"
              },
              {
                "default": "-1",
                "name": "id",
                "type": "int",
                "index": "1"
              },
              {
                "default": "0",
                "name": "accel",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "add_item",
            "description": "Adds a new item with text [code]label[/code].\n\t\t\t\tAn [code]id[/code] can optionally be provided, as well as an accelerator ([code]accel[/code]). If no [code]id[/code] is provided, one will be created from the index. If no [code]accel[/code] is provided then the default [code]0[/code] will be assigned to it. See [method get_item_accelerator] for more info on accelerators."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "label",
                "type": "String",
                "index": "0"
              },
              {
                "name": "max_states",
                "type": "int",
                "index": "1"
              },
              {
                "default": "0",
                "name": "default_state",
                "type": "int",
                "index": "2"
              },
              {
                "default": "-1",
                "name": "id",
                "type": "int",
                "index": "3"
              },
              {
                "default": "0",
                "name": "accel",
                "type": "int",
                "index": "4"
              }
            ],
            "name": "add_multistate_item",
            "description": "Adds a new multistate item with text [code]label[/code].\n\t\t\t\tContrarily to normal binary items, multistate items can have more than two states, as defined by [code]max_states[/code]. Each press or activate of the item will increase the state by one. The default value is defined by [code]default_state[/code].\n\t\t\t\tAn [code]id[/code] can optionally be provided, as well as an accelerator ([code]accel[/code]). If no [code]id[/code] is provided, one will be created from the index. If no [code]accel[/code] is provided then the default [code]0[/code] will be assigned to it. See [method get_item_accelerator] for more info on accelerators."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "label",
                "type": "String",
                "index": "0"
              },
              {
                "default": "-1",
                "name": "id",
                "type": "int",
                "index": "1"
              },
              {
                "default": "0",
                "name": "accel",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "add_radio_check_item",
            "description": "Adds a new radio check button with text [code]label[/code].\n\t\t\t\tAn [code]id[/code] can optionally be provided, as well as an accelerator ([code]accel[/code]). If no [code]id[/code] is provided, one will be created from the index. If no [code]accel[/code] is provided then the default [code]0[/code] will be assigned to it. See [method get_item_accelerator] for more info on accelerators.\n\t\t\t\t[b]Note:[/b] Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See [method set_item_checked] for more info on how to control it."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "shortcut",
                "type": "ShortCut",
                "index": "0"
              },
              {
                "default": "-1",
                "name": "id",
                "type": "int",
                "index": "1"
              },
              {
                "default": "false",
                "name": "global",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "add_radio_check_shortcut",
            "description": "Adds a new radio check button and assigns a [ShortCut] to it. Sets the label of the checkbox to the [ShortCut]'s name.\n\t\t\t\tAn [code]id[/code] can optionally be provided. If no [code]id[/code] is provided, one will be created from the index.\n\t\t\t\t[b]Note:[/b] Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See [method set_item_checked] for more info on how to control it."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "default": "\"\"",
                "name": "label",
                "type": "String",
                "index": "0"
              },
              {
                "default": "-1",
                "name": "id",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "add_separator",
            "description": "Adds a separator between items. Separators also occupy an index, which you can set by using the [code]id[/code] parameter.\n\t\t\t\tA [code]label[/code] can optionally be provided, which will appear at the center of the separator."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "shortcut",
                "type": "ShortCut",
                "index": "0"
              },
              {
                "default": "-1",
                "name": "id",
                "type": "int",
                "index": "1"
              },
              {
                "default": "false",
                "name": "global",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "add_shortcut",
            "description": "Adds a [ShortCut].\n\t\t\t\tAn [code]id[/code] can optionally be provided. If no [code]id[/code] is provided, one will be created from the index."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "label",
                "type": "String",
                "index": "0"
              },
              {
                "name": "submenu",
                "type": "String",
                "index": "1"
              },
              {
                "default": "-1",
                "name": "id",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "add_submenu_item",
            "description": "Adds an item that will act as a submenu of the parent [PopupMenu] node when clicked. The [code]submenu[/code] argument is the name of the child [PopupMenu] node that will be shown when the item is clicked.\n\t\t\t\tAn [code]id[/code] can optionally be provided. If no [code]id[/code] is provided, one will be created from the index."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Removes all items from the [PopupMenu]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_current_index",
            "description": "Returns the index of the currently focused item. Returns [code]-1[/code] if no item is focused."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_accelerator",
            "description": "Returns the accelerator of the item at index [code]idx[/code]. Accelerators are special combinations of keys that activate the item, no matter which control is focused."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_item_count",
            "description": "Returns the number of items in the [PopupMenu]."
          },
          {
            "return": {
              "type": "Texture"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_icon",
            "description": "Returns the icon of the item at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_id",
            "description": "Returns the id of the item at index [code]idx[/code]. [code]id[/code] can be manually assigned, while index can not."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_index",
            "description": "Returns the index of the item containing the specified [code]id[/code]. Index is automatically assigned to each item by the engine. Index can not be set manually."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_metadata",
            "description": "Returns the metadata of the specified item, which might be of any type. You can set it with [method set_item_metadata], which provides a simple way of assigning context data to items."
          },
          {
            "return": {
              "type": "ShortCut"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_shortcut",
            "description": "Returns the [ShortCut] associated with the specified [code]idx[/code] item."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_submenu",
            "description": "Returns the submenu name of the item at index [code]idx[/code]. See [method add_submenu_item] for more info on how to add a submenu."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_text",
            "description": "Returns the text of the item at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_tooltip",
            "description": "Returns the tooltip associated with the specified index index [code]idx[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_hide_on_window_lose_focus",
            "description": "Returns [code]true[/code] if the popup will be hidden when the window loses focus or not."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_item_checkable",
            "description": "Returns [code]true[/code] if the item at index [code]idx[/code] is checkable in some way, i.e. if it has a checkbox or radio button.\n\t\t\t\t[b]Note:[/b] Checkable items just display a checkmark or radio button, but don't have any built-in checking behavior and must be checked/unchecked manually."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_item_checked",
            "description": "Returns [code]true[/code] if the item at index [code]idx[/code] is checked."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_item_disabled",
            "description": "Returns [code]true[/code] if the item at index [code]idx[/code] is disabled. When it is disabled it can't be selected, or its action invoked.\n\t\t\t\tSee [method set_item_disabled] for more info on how to disable an item."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_item_radio_checkable",
            "description": "Returns [code]true[/code] if the item at index [code]idx[/code] has radio button-style checkability.\n\t\t\t\t[b]Note:[/b] This is purely cosmetic; you must add the logic for checking/unchecking items in radio groups."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_item_separator",
            "description": "Returns [code]true[/code] if the item is a separator. If it is, it will be displayed as a line. See [method add_separator] for more info on how to add a separator."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_item_shortcut_disabled",
            "description": "Returns [code]true[/code] if the specified item's shortcut is disabled."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "remove_item",
            "description": "Removes the item at index [code]idx[/code] from the menu.\n\t\t\t\t[b]Note:[/b] The indices of items after the removed item will be shifted by one."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enable",
              "type": "bool",
              "index": "0"
            },
            "name": "set_hide_on_window_lose_focus",
            "description": "Hides the [PopupMenu] when the window loses focus."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "accel",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set_item_accelerator",
            "description": "Sets the accelerator of the item at index [code]idx[/code]. Accelerators are special combinations of keys that activate the item, no matter which control is focused."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_item_as_checkable",
            "description": "Sets whether the item at index [code]idx[/code] has a checkbox. If [code]false[/code], sets the type of the item to plain text.\n\t\t\t\t[b]Note:[/b] Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_item_as_radio_checkable",
            "description": "Sets the type of the item at the specified index [code]idx[/code] to radio button. If [code]false[/code], sets the type of the item to plain text."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_item_as_separator",
            "description": "Mark the item at index [code]idx[/code] as a separator, which means that it would be displayed as a line. If [code]false[/code], sets the type of the item to plain text."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "checked",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_item_checked",
            "description": "Sets the checkstate status of the item at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "disabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_item_disabled",
            "description": "Enables/disables the item at index [code]idx[/code]. When it is disabled, it can't be selected and its action can't be invoked."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "icon",
                "type": "Texture",
                "index": "1"
              }
            ],
            "name": "set_item_icon",
            "description": "Replaces the [Texture] icon of the specified [code]idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "id",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set_item_id",
            "description": "Sets the [code]id[/code] of the item at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "metadata",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "set_item_metadata",
            "description": "Sets the metadata of an item, which may be of any type. You can later get it with [method get_item_metadata], which provides a simple way of assigning context data to items."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "state",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set_item_multistate",
            "description": "Sets the state of a multistate item. See [method add_multistate_item] for details."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shortcut",
                "type": "ShortCut",
                "index": "1"
              },
              {
                "default": "false",
                "name": "global",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "set_item_shortcut",
            "description": "Sets a [ShortCut] for the specified item [code]idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "disabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_item_shortcut_disabled",
            "description": "Disables the [ShortCut] of the specified index [code]idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "submenu",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set_item_submenu",
            "description": "Sets the submenu of the item at index [code]idx[/code]. The submenu is the name of a child [PopupMenu] node that would be shown when the item is clicked."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "text",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set_item_text",
            "description": "Sets the text of the item at index [code]idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "tooltip",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set_item_tooltip",
            "description": "Sets the [String] tooltip of the item at the specified index [code]idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "toggle_item_checked",
            "description": "Toggles the check state of the item of the specified index [code]idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "toggle_item_multistate",
            "description": "Cycle to the next state of a multistate item. See [method add_multistate_item] for details."
          }
        ]
      },
      "name": "PopupMenu",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "id_focused",
            "description": "Emitted when user navigated to an item of some [code]id[/code] using [code]ui_up[/code] or [code]ui_down[/code] action."
          },
          {
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "id_pressed",
            "description": "Emitted when an item of some [code]id[/code] is pressed or its accelerator is activated."
          },
          {
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "name": "index_pressed",
            "description": "Emitted when an item of some [code]index[/code] is pressed or its accelerator is activated."
          }
        ]
      },
      "constants": {},
      "brief_description": "PopupMenu displays a list of options.",
      "description": "[PopupMenu] is a [Control] that displays a list of options. They are popular in toolbars or context menus."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": {
          "value": "The background panel style of this [PopupPanel].",
          "name": "panel",
          "type": "StyleBox"
        }
      },
      "inherits": "Popup",
      "methods": {},
      "name": "PopupPanel",
      "version": "3.3",
      "constants": {},
      "brief_description": "Class for displaying popups with a panel background.",
      "description": "Class for displaying popups with a panel background. In some cases it might be simpler to use than [Popup], since it provides a configurable background. If you are making windows, better check [WindowDialog]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the popup will not be hidden when a click event occurs outside of it, or when it receives the [code]ui_cancel[/code] action event.\n\t\t\t[b]Note:[/b] Enabling this property doesn't affect the Close or Cancel buttons' behavior in dialogs that inherit from this class. As a workaround, you can use [method WindowDialog.get_close_button] or [method ConfirmationDialog.get_cancel] and hide the buttons in question by setting their [member CanvasItem.visible] property to [code]false[/code].",
            "setter": "set_exclusive",
            "name": "popup_exclusive",
            "getter": "is_exclusive",
            "type": "bool"
          },
          {
            "default": "false",
            "setter": "set_visible",
            "override": "true",
            "name": "visible",
            "getter": "is_visible",
            "type": "bool"
          }
        ]
      },
      "inherits": "Control",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "Rect2( 0, 0, 0, 0 )",
              "name": "bounds",
              "type": "Rect2",
              "index": "0"
            },
            "name": "popup",
            "description": "Popup (show the control in modal form)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "Vector2( 0, 0 )",
              "name": "size",
              "type": "Vector2",
              "index": "0"
            },
            "name": "popup_centered",
            "description": "Popup (show the control in modal form) in the center of the screen relative to its current canvas transform, at the current size, or at a size determined by [code]size[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "default": "Vector2( 0, 0 )",
                "name": "size",
                "type": "Vector2",
                "index": "0"
              },
              {
                "default": "0.75",
                "name": "fallback_ratio",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "popup_centered_clamped",
            "description": "Popup (show the control in modal form) in the center of the screen relative to the current canvas transform, clamping the size to [code]size[/code], then ensuring the popup is no larger than the viewport size multiplied by [code]fallback_ratio[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "Vector2( 0, 0 )",
              "name": "minsize",
              "type": "Vector2",
              "index": "0"
            },
            "name": "popup_centered_minsize",
            "description": "Popup (show the control in modal form) in the center of the screen relative to the current canvas transform, ensuring the size is never smaller than [code]minsize[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "0.75",
              "name": "ratio",
              "type": "float",
              "index": "0"
            },
            "name": "popup_centered_ratio",
            "description": "Popup (show the control in modal form) in the center of the screen relative to the current canvas transform, scaled at a ratio of size of the screen."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "set_as_minsize",
            "description": "Shrink popup to keep to the minimum size of content."
          }
        ]
      },
      "name": "Popup",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "about_to_show",
            "description": "Emitted when a popup is about to be shown. This is often used in [PopupMenu] to clear the list of options then create a new one according to the current context."
          },
          {
            "name": "popup_hide",
            "description": "Emitted when a popup is hidden."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "80",
            "name": "NOTIFICATION_POST_POPUP"
          },
          {
            "value": "81",
            "name": "NOTIFICATION_POPUP_HIDE"
          }
        ]
      },
      "brief_description": "Base container control for popups and dialogs.",
      "description": "Popup is a base [Control] used to show dialogs and popups. It's a subwindow and modal by default (see [Control]) and has helpers for custom popup behavior. All popup methods ensure correct placement within the viewport."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Node2D",
      "methods": {},
      "name": "Position2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Generic 2D position hint for editing.",
      "description": "Generic 2D position hint for editing. It's just like a plain [Node2D], but it displays as a cross in the 2D editor at all times. You can set cross' visual size by using the gizmo in the 2D editor while the node is selected."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Spatial",
      "methods": {},
      "name": "Position3D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Generic 3D position hint for editing.",
      "description": "Generic 3D position hint for editing. It's just like a plain [Spatial], but it displays as a cross in the 3D editor at all times."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "AABB( 0, 0, 0, 0, 0, 0 )",
            "value": "Overrides the [AABB] with one defined by user for use with frustum culling. Especially useful to avoid unexpected culling when  using a shader to offset vertices.",
            "setter": "set_custom_aabb",
            "name": "custom_aabb",
            "getter": "get_custom_aabb",
            "type": "AABB"
          },
          {
            "default": "false",
            "value": "If set, the order of the vertices in each triangle are reversed resulting in the backside of the mesh being drawn.\n\t\t\tThis gives the same result as using [constant SpatialMaterial.CULL_BACK] in [member SpatialMaterial.params_cull_mode].",
            "setter": "set_flip_faces",
            "name": "flip_faces",
            "getter": "get_flip_faces",
            "type": "bool"
          },
          {
            "value": "The current [Material] of the primitive mesh.",
            "setter": "set_material",
            "name": "material",
            "getter": "get_material",
            "type": "Material"
          }
        ]
      },
      "inherits": "Mesh",
      "methods": {
        "method": {
          "return": {
            "type": "Array"
          },
          "qualifiers": "const",
          "name": "get_mesh_arrays",
          "description": "Returns mesh arrays used to constitute surface of [Mesh]. The result can be passed to [method ArrayMesh.add_surface_from_arrays] to create a new surface. For example:\n\t\t\t\t[codeblock]\n\t\t\t\tvar c := CylinderMesh.new()\n\t\t\t\tvar arr_mesh := ArrayMesh.new()\n\t\t\t\tarr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, c.get_mesh_arrays())\n\t\t\t\t[/codeblock]"
        }
      },
      "name": "PrimitiveMesh",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base class for all primitive meshes. Handles applying a [Material] to a primitive mesh.",
      "description": "Base class for all primitive meshes. Handles applying a [Material] to a primitive mesh. Examples include [CapsuleMesh], [CubeMesh], [CylinderMesh], [PlaneMesh], [PrismMesh], [QuadMesh], and [SphereMesh]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0.5",
            "value": "Displacement of the upper edge along the X axis. 0.0 positions edge straight above the bottom-left edge.",
            "setter": "set_left_to_right",
            "name": "left_to_right",
            "getter": "get_left_to_right",
            "type": "float"
          },
          {
            "default": "Vector3( 2, 2, 2 )",
            "value": "Size of the prism.",
            "setter": "set_size",
            "name": "size",
            "getter": "get_size",
            "type": "Vector3"
          },
          {
            "default": "0",
            "value": "Number of added edge loops along the Z axis.",
            "setter": "set_subdivide_depth",
            "name": "subdivide_depth",
            "getter": "get_subdivide_depth",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Number of added edge loops along the Y axis.",
            "setter": "set_subdivide_height",
            "name": "subdivide_height",
            "getter": "get_subdivide_height",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Number of added edge loops along the X axis.",
            "setter": "set_subdivide_width",
            "name": "subdivide_width",
            "getter": "get_subdivide_width",
            "type": "int"
          }
        ]
      },
      "inherits": "PrimitiveMesh",
      "methods": {},
      "name": "PrismMesh",
      "version": "3.3",
      "constants": {},
      "brief_description": "Class representing a prism-shaped [PrimitiveMesh].",
      "description": "Class representing a prism-shaped [PrimitiveMesh]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "Color( 0.156863, 0.184314, 0.211765, 1 )",
            "value": "Color of the ground at the bottom.",
            "setter": "set_ground_bottom_color",
            "name": "ground_bottom_color",
            "getter": "get_ground_bottom_color",
            "type": "Color"
          },
          {
            "default": "0.02",
            "value": "How quickly the [member ground_horizon_color] fades into the [member ground_bottom_color].",
            "setter": "set_ground_curve",
            "name": "ground_curve",
            "getter": "get_ground_curve",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Amount of energy contribution from the ground.",
            "setter": "set_ground_energy",
            "name": "ground_energy",
            "getter": "get_ground_energy",
            "type": "float"
          },
          {
            "default": "Color( 0.423529, 0.396078, 0.372549, 1 )",
            "value": "Color of the ground at the horizon.",
            "setter": "set_ground_horizon_color",
            "name": "ground_horizon_color",
            "getter": "get_ground_horizon_color",
            "type": "Color"
          },
          {
            "default": "0.09",
            "value": "How quickly the [member sky_horizon_color] fades into the [member sky_top_color].",
            "setter": "set_sky_curve",
            "name": "sky_curve",
            "getter": "get_sky_curve",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Amount of energy contribution from the sky.",
            "setter": "set_sky_energy",
            "name": "sky_energy",
            "getter": "get_sky_energy",
            "type": "float"
          },
          {
            "default": "Color( 0.839216, 0.917647, 0.980392, 1 )",
            "value": "Color of the sky at the horizon.",
            "setter": "set_sky_horizon_color",
            "name": "sky_horizon_color",
            "getter": "get_sky_horizon_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.647059, 0.839216, 0.945098, 1 )",
            "value": "Color of the sky at the top.",
            "setter": "set_sky_top_color",
            "name": "sky_top_color",
            "getter": "get_sky_top_color",
            "type": "Color"
          },
          {
            "default": "100.0",
            "value": "Distance from center of sun where it fades out completely.",
            "setter": "set_sun_angle_max",
            "name": "sun_angle_max",
            "getter": "get_sun_angle_max",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Distance from sun where it goes from solid to starting to fade.",
            "setter": "set_sun_angle_min",
            "name": "sun_angle_min",
            "getter": "get_sun_angle_min",
            "type": "float"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "The sun's color.",
            "setter": "set_sun_color",
            "name": "sun_color",
            "getter": "get_sun_color",
            "type": "Color"
          },
          {
            "default": "0.05",
            "value": "How quickly the sun fades away between [member sun_angle_min] and [member sun_angle_max].",
            "setter": "set_sun_curve",
            "name": "sun_curve",
            "getter": "get_sun_curve",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Amount of energy contribution from the sun.",
            "setter": "set_sun_energy",
            "name": "sun_energy",
            "getter": "get_sun_energy",
            "type": "float"
          },
          {
            "default": "35.0",
            "value": "The sun's height using polar coordinates.",
            "setter": "set_sun_latitude",
            "name": "sun_latitude",
            "getter": "get_sun_latitude",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The direction of the sun using polar coordinates.",
            "setter": "set_sun_longitude",
            "name": "sun_longitude",
            "getter": "get_sun_longitude",
            "type": "float"
          },
          {
            "default": "2",
            "value": "Size of [Texture] that the ProceduralSky will generate. The size is set using [enum TextureSize].",
            "setter": "set_texture_size",
            "name": "texture_size",
            "getter": "get_texture_size",
            "type": "int",
            "enum": "ProceduralSky.TextureSize"
          }
        ]
      },
      "inherits": "Sky",
      "methods": {},
      "name": "ProceduralSky",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "TEXTURE_SIZE_256",
            "enum": "TextureSize"
          },
          {
            "value": "1",
            "name": "TEXTURE_SIZE_512",
            "enum": "TextureSize"
          },
          {
            "value": "2",
            "name": "TEXTURE_SIZE_1024",
            "enum": "TextureSize"
          },
          {
            "value": "3",
            "name": "TEXTURE_SIZE_2048",
            "enum": "TextureSize"
          },
          {
            "value": "4",
            "name": "TEXTURE_SIZE_4096",
            "enum": "TextureSize"
          },
          {
            "value": "5",
            "name": "TEXTURE_SIZE_MAX",
            "enum": "TextureSize"
          }
        ]
      },
      "brief_description": "Type of [Sky] that is generated procedurally based on user input parameters.",
      "description": "ProceduralSky provides a way to create an effective background quickly by defining procedural parameters for the sun, the sky and the ground. The sky and ground are very similar, they are defined by a color at the horizon, another color, and finally an easing curve to interpolate between these two colors. Similarly, the sun is described by a position in the sky, a color, and an easing curve. However, the sun also defines a minimum and maximum angle, these two values define at what distance the easing curve begins and ends from the sun, and thus end up defining the size of the sun in the sky.\n\t\tThe ProceduralSky is updated on the CPU after the parameters change. It is stored in a texture and then displayed as a background in the scene. This makes it relatively unsuitable for real-time updates during gameplay. However, with a small enough texture size, it can still be updated relatively frequently, as it is updated on a background thread when multi-threading is available."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "value": "The style of the background.",
            "name": "bg",
            "type": "StyleBox"
          },
          {
            "value": "The style of the progress (i.e. the part that fills the bar).",
            "name": "fg",
            "type": "StyleBox"
          },
          {
            "value": "Font used to draw the fill percentage if [member percent_visible] is [code]true[/code].",
            "name": "font",
            "type": "Font"
          },
          {
            "default": "Color( 0.94, 0.94, 0.94, 1 )",
            "value": "The color of the text.",
            "name": "font_color",
            "type": "Color"
          },
          {
            "default": "Color( 0, 0, 0, 1 )",
            "value": "The color of the text's shadow.",
            "name": "font_color_shadow",
            "type": "Color"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "true",
            "value": "If [code]true[/code], the fill percentage is displayed on the bar.",
            "setter": "set_percent_visible",
            "name": "percent_visible",
            "getter": "is_percent_visible",
            "type": "bool"
          },
          {
            "default": "0",
            "setter": "set_v_size_flags",
            "override": "true",
            "name": "size_flags_vertical",
            "getter": "get_v_size_flags",
            "type": "int"
          },
          {
            "default": "0.01",
            "setter": "set_step",
            "override": "true",
            "name": "step",
            "getter": "get_step",
            "type": "float"
          }
        ]
      },
      "inherits": "Range",
      "methods": {},
      "name": "ProgressBar",
      "version": "3.3",
      "constants": {},
      "brief_description": "General-purpose progress bar.",
      "description": "General-purpose progress bar. Shows fill percentage from right to left."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://godotengine.org/asset-library/asset/675",
            "title": "3D Physics Tests Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/125",
            "title": "3D Platformer Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/677",
            "title": "OS Test Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "\"\"",
            "value": "Comma-separated list of custom Android modules (which must have been built in the Android export templates) using their Java package path, e.g. [code]\"org/godotengine/godot/MyCustomSingleton,com/example/foo/FrenchFriesFactory\"[/code].\n\t\t\t[b]Note:[/b] Since Godot 3.2.2, the [code]org/godotengine/godot/GodotPaymentV3[/code] module was deprecated and replaced by the [code]GodotPayment[/code] plugin which should be enabled in the Android export preset under [code]Plugins[/code] section. The singleton to access in code was also renamed to [code]GodotPayment[/code].",
            "setter": "",
            "name": "android/modules",
            "getter": "",
            "type": "String"
          },
          {
            "default": "Color( 0.14, 0.14, 0.14, 1 )",
            "value": "Background color for the boot splash.",
            "setter": "",
            "name": "application/boot_splash/bg_color",
            "getter": "",
            "type": "Color"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], scale the boot splash image to the full window length when engine starts. If [code]false[/code], the engine will leave it at the default pixel size.",
            "setter": "",
            "name": "application/boot_splash/fullsize",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "\"\"",
            "value": "Path to an image used as the boot splash.",
            "setter": "",
            "name": "application/boot_splash/image",
            "getter": "",
            "type": "String"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], applies linear filtering when scaling the image (recommended for high resolution artwork). If [code]false[/code], uses nearest-neighbor interpolation (recommended for pixel art).",
            "setter": "",
            "name": "application/boot_splash/use_filter",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "\"\"",
            "value": "This user directory is used for storing persistent data ([code]user://[/code] filesystem). If left empty, [code]user://[/code] resolves to a project-specific folder in Godot's own configuration folder (see [method OS.get_user_data_dir]). If a custom directory name is defined, this name will be used instead and appended to the system-specific user data directory (same parent folder as the Godot configuration folder documented in [method OS.get_user_data_dir]).\n\t\t\tThe [member application/config/use_custom_user_dir] setting must be enabled for this to take effect.",
            "setter": "",
            "name": "application/config/custom_user_dir_name",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "The project's description, displayed as a tooltip in the Project Manager when hovering the project.",
            "setter": "",
            "name": "application/config/description",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Icon used for the project, set when project loads. Exporters will also use this icon when possible.",
            "setter": "",
            "name": "application/config/icon",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Icon set in [code].icns[/code] format used on macOS to set the game's icon. This is done automatically on start by calling [method OS.set_native_icon].",
            "setter": "",
            "name": "application/config/macos_native_icon",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "The project's name. It is used both by the Project Manager and by exporters. The project name can be translated by translating its value in localization files. The window title will be set to match the project name automatically on startup.\n\t\t\t[b]Note:[/b] Changing this value will also change the user data folder's path if [member application/config/use_custom_user_dir] is [code]false[/code]. After renaming the project, you will no longer be able to access existing data in [code]user://[/code] unless you rename the old folder to match the new project name. See [url=https://docs.godotengine.org/en/3.3/tutorials/io/data_paths.html]Data paths[/url] in the documentation for more information.",
            "setter": "",
            "name": "application/config/name",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Specifies a file to override project settings. For example: [code]user://custom_settings.cfg[/code]. See \"Overriding\" in the [ProjectSettings] class description at the top for more information.\n\t\t\t[b]Note:[/b] Regardless of this setting's value, [code]res://override.cfg[/code] will still be read to override the project settings.",
            "setter": "",
            "name": "application/config/project_settings_override",
            "getter": "",
            "type": "String"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the project will save user data to its own user directory (see [member application/config/custom_user_dir_name]). This setting is only effective on desktop platforms. A name must be set in the [member application/config/custom_user_dir_name] setting for this to take effect. If [code]false[/code], the project will save user data to [code](OS user data directory)/Godot/app_userdata/(project name)[/code].",
            "setter": "",
            "name": "application/config/use_custom_user_dir",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "\"\"",
            "value": "Icon set in [code].ico[/code] format used on Windows to set the game's icon. This is done automatically on start by calling [method OS.set_native_icon].",
            "setter": "",
            "name": "application/config/windows_native_icon",
            "getter": "",
            "type": "String"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], disables printing to standard error. If [code]true[/code], this also hides error and warning messages printed by [method @GDScript.push_error] and [method @GDScript.push_warning]. See also [member application/run/disable_stdout].\n\t\t\tChanges to this setting will only be applied upon restarting the application.",
            "setter": "",
            "name": "application/run/disable_stderr",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], disables printing to standard output. This is equivalent to starting the editor or project with the [code]--quiet[/code] command line argument. See also [member application/run/disable_stderr].\n\t\t\tChanges to this setting will only be applied upon restarting the application.",
            "setter": "",
            "name": "application/run/disable_stdout",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], flushes the standard output stream every time a line is printed. This affects both terminal logging and file logging.\n\t\t\tWhen running a project, this setting must be enabled if you want logs to be collected by service managers such as systemd/journalctl. This setting is disabled by default on release builds, since flushing on every printed line will negatively affect performance if lots of lines are printed in a rapid succession. Also, if this setting is enabled, logged files will still be written successfully if the application crashes or is otherwise killed by the user (without being closed \"normally\").\n\t\t\t[b]Note:[/b] Regardless of this setting, the standard error stream ([code]stderr[/code]) is always flushed when a line is printed to it.\n\t\t\tChanges to this setting will only be applied upon restarting the application.",
            "setter": "",
            "name": "application/run/flush_stdout_on_print",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "Debug build override for [member application/run/flush_stdout_on_print], as performance is less important during debugging.\n\t\t\tChanges to this setting will only be applied upon restarting the application.",
            "setter": "",
            "name": "application/run/flush_stdout_on_print.debug",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "Forces a delay between frames in the main loop (in milliseconds). This may be useful if you plan to disable vertical synchronization.",
            "setter": "",
            "name": "application/run/frame_delay_msec",
            "getter": "",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], enables low-processor usage mode. This setting only works on desktop platforms. The screen is not redrawn if nothing changes visually. This is meant for writing applications and editors, but is pretty useless (and can hurt performance) in most games.",
            "setter": "",
            "name": "application/run/low_processor_mode",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "6900",
            "value": "Amount of sleeping between frames when the low-processor usage mode is enabled (in microseconds). Higher values will result in lower CPU usage.",
            "setter": "",
            "name": "application/run/low_processor_mode_sleep_usec",
            "getter": "",
            "type": "int"
          },
          {
            "default": "\"\"",
            "value": "Path to the main scene file that will be loaded when the project runs.",
            "setter": "",
            "name": "application/run/main_scene",
            "getter": "",
            "type": "String"
          },
          {
            "default": "-60.0",
            "value": "Audio buses will disable automatically when sound goes below a given dB threshold for a given time. This saves CPU as effects assigned to that bus will no longer do any processing.",
            "setter": "",
            "name": "audio/channel_disable_threshold_db",
            "getter": "",
            "type": "float"
          },
          {
            "default": "2.0",
            "value": "Audio buses will disable automatically when sound goes below a given dB threshold for a given time. This saves CPU as effects assigned to that bus will no longer do any processing.",
            "setter": "",
            "name": "audio/channel_disable_time",
            "getter": "",
            "type": "float"
          },
          {
            "default": "\"res://default_bus_layout.tres\"",
            "value": "Default [AudioBusLayout] resource file to use in the project, unless overridden by the scene.",
            "setter": "",
            "name": "audio/default_bus_layout",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"PulseAudio\"",
            "value": "Specifies the audio driver to use. This setting is platform-dependent as each platform supports different audio drivers. If left empty, the default audio driver will be used.",
            "setter": "",
            "name": "audio/driver",
            "getter": "",
            "type": "String"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], microphone input will be allowed. This requires appropriate permissions to be set when exporting to Android or iOS.",
            "setter": "",
            "name": "audio/enable_audio_input",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "44100",
            "value": "Mixing rate used for audio. In general, it's better to not touch this and leave it to the host operating system.",
            "setter": "",
            "name": "audio/mix_rate",
            "getter": "",
            "type": "int"
          },
          {
            "default": "15",
            "value": "Output latency in milliseconds for audio. Lower values will result in lower audio latency at the cost of increased CPU usage. Low values may result in audible cracking on slower hardware.",
            "setter": "",
            "name": "audio/output_latency",
            "getter": "",
            "type": "int"
          },
          {
            "default": "50",
            "value": "Safer override for [member audio/output_latency] in the Web platform, to avoid audio issues especially on mobile devices.",
            "setter": "",
            "name": "audio/output_latency.web",
            "getter": "",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Setting to hardcode audio delay when playing video. Best to leave this untouched unless you know what you are doing.",
            "setter": "",
            "name": "audio/video_delay_compensation_ms",
            "getter": "",
            "type": "int"
          },
          {
            "default": "-1",
            "value": "The default compression level for gzip. Affects compressed scenes and resources. Higher levels result in smaller files at the cost of compression speed. Decompression speed is mostly unaffected by the compression level. [code]-1[/code] uses the default gzip compression level, which is identical to [code]6[/code] but could change in the future due to underlying zlib updates.",
            "setter": "",
            "name": "compression/formats/gzip/compression_level",
            "getter": "",
            "type": "int"
          },
          {
            "default": "-1",
            "value": "The default compression level for Zlib. Affects compressed scenes and resources. Higher levels result in smaller files at the cost of compression speed. Decompression speed is mostly unaffected by the compression level. [code]-1[/code] uses the default gzip compression level, which is identical to [code]6[/code] but could change in the future due to underlying zlib updates.",
            "setter": "",
            "name": "compression/formats/zlib/compression_level",
            "getter": "",
            "type": "int"
          },
          {
            "default": "3",
            "value": "The default compression level for Zstandard. Affects compressed scenes and resources. Higher levels result in smaller files at the cost of compression speed. Decompression speed is mostly unaffected by the compression level.",
            "setter": "",
            "name": "compression/formats/zstd/compression_level",
            "getter": "",
            "type": "int"
          },
          {
            "default": "false",
            "value": "Enables [url=https://github.com/facebook/zstd/releases/tag/v1.3.2]long-distance matching[/url] in Zstandard.",
            "setter": "",
            "name": "compression/formats/zstd/long_distance_matching",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "27",
            "value": "Largest size limit (in power of 2) allowed when compressing using long-distance matching with Zstandard. Higher values can result in better compression, but will require more memory when compressing and decompressing.",
            "setter": "",
            "name": "compression/formats/zstd/window_log_size",
            "getter": "",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], displays getters and setters in autocompletion results in the script editor. This setting is meant to be used when porting old projects (Godot 2), as using member variables is the preferred style from Godot 3 onwards.",
            "setter": "",
            "name": "debug/gdscript/completion/autocomplete_setters_and_getters",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when a constant is used as a function.",
            "setter": "",
            "name": "debug/gdscript/warnings/constant_used_as_function",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when deprecated keywords such as [code]slave[/code] are used.",
            "setter": "",
            "name": "debug/gdscript/warnings/deprecated_keyword",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables specific GDScript warnings (see [code]debug/gdscript/warnings/*[/code] settings). If [code]false[/code], disables all GDScript warnings.",
            "setter": "",
            "name": "debug/gdscript/warnings/enable",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], scripts in the [code]res://addons[/code] folder will not generate warnings.",
            "setter": "",
            "name": "debug/gdscript/warnings/exclude_addons",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when a function is declared with the same name as a constant.",
            "setter": "",
            "name": "debug/gdscript/warnings/function_conflicts_constant",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when a function is declared with the same name as a variable. This will turn into an error in a future version when first-class functions become supported in GDScript.",
            "setter": "",
            "name": "debug/gdscript/warnings/function_conflicts_variable",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when a function assigned to a variable may yield and return a function state instead of a value.",
            "setter": "",
            "name": "debug/gdscript/warnings/function_may_yield",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when using a function as if it was a property.",
            "setter": "",
            "name": "debug/gdscript/warnings/function_used_as_property",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when a ternary operator may emit values with incompatible types.",
            "setter": "",
            "name": "debug/gdscript/warnings/incompatible_ternary",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when dividing an integer by another integer (the decimal part will be discarded).",
            "setter": "",
            "name": "debug/gdscript/warnings/integer_division",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when passing a floating-point value to a function that expects an integer (it will be converted and lose precision).",
            "setter": "",
            "name": "debug/gdscript/warnings/narrowing_conversion",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when using a property as if it was a function.",
            "setter": "",
            "name": "debug/gdscript/warnings/property_used_as_function",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when calling a function without using its return value (by assigning it to a variable or using it as a function argument). Such return values are sometimes used to denote possible errors using the [enum Error] enum.",
            "setter": "",
            "name": "debug/gdscript/warnings/return_value_discarded",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when defining a local or subclass member variable that would shadow a variable at an upper level (such as a member variable).",
            "setter": "",
            "name": "debug/gdscript/warnings/shadowed_variable",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when calling an expression that has no effect on the surrounding code, such as writing [code]2 + 2[/code] as a statement.",
            "setter": "",
            "name": "debug/gdscript/warnings/standalone_expression",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when calling a ternary expression that has no effect on the surrounding code, such as writing [code]42 if active else 0[/code] as a statement.",
            "setter": "",
            "name": "debug/gdscript/warnings/standalone_ternary",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], all warnings will be reported as if they were errors.",
            "setter": "",
            "name": "debug/gdscript/warnings/treat_warnings_as_errors",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when using a variable that wasn't previously assigned.",
            "setter": "",
            "name": "debug/gdscript/warnings/unassigned_variable",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when assigning a variable using an assignment operator like [code]+=[/code] if the variable wasn't previously assigned.",
            "setter": "",
            "name": "debug/gdscript/warnings/unassigned_variable_op_assign",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when unreachable code is detected (such as after a [code]return[/code] statement that will always be executed).",
            "setter": "",
            "name": "debug/gdscript/warnings/unreachable_code",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], enables warnings when using an expression whose type may not be compatible with the function parameter expected.",
            "setter": "",
            "name": "debug/gdscript/warnings/unsafe_call_argument",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], enables warnings when performing an unsafe cast.",
            "setter": "",
            "name": "debug/gdscript/warnings/unsafe_cast",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], enables warnings when calling a method whose presence is not guaranteed at compile-time in the class.",
            "setter": "",
            "name": "debug/gdscript/warnings/unsafe_method_access",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], enables warnings when accessing a property whose presence is not guaranteed at compile-time in the class.",
            "setter": "",
            "name": "debug/gdscript/warnings/unsafe_property_access",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when a function parameter is unused.",
            "setter": "",
            "name": "debug/gdscript/warnings/unused_argument",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], enables warnings when a member variable is unused.",
            "setter": "",
            "name": "debug/gdscript/warnings/unused_class_variable",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when a signal is unused.",
            "setter": "",
            "name": "debug/gdscript/warnings/unused_signal",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when a local variable is unused.",
            "setter": "",
            "name": "debug/gdscript/warnings/unused_variable",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when a variable is declared with the same name as a function. This will turn into an error in a future version when first-class functions become supported in GDScript.",
            "setter": "",
            "name": "debug/gdscript/warnings/variable_conflicts_function",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables warnings when assigning the result of a function that returns [code]void[/code] to a variable.",
            "setter": "",
            "name": "debug/gdscript/warnings/void_assignment",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "\"Please include this when reporting the bug on https://github.com/godotengine/godot/issues\"",
            "value": "Message to be displayed before the backtrace when the engine crashes.",
            "setter": "",
            "name": "debug/settings/crash_handler/message",
            "getter": "",
            "type": "String"
          },
          {
            "default": "0",
            "value": "Maximum number of frames per second allowed. The actual number of frames per second may still be below this value if the game is lagging.\n\t\t\tIf [member display/window/vsync/use_vsync] is enabled, it takes precedence and the forced FPS number cannot exceed the monitor's refresh rate.\n\t\t\tThis setting is therefore mostly relevant for lowering the maximum FPS below VSync, e.g. to perform non-real-time rendering of static frames, or test the project under lag conditions.",
            "setter": "",
            "name": "debug/settings/fps/force_fps",
            "getter": "",
            "type": "int"
          },
          {
            "default": "1024",
            "value": "Maximum call stack allowed for debugging GDScript.",
            "setter": "",
            "name": "debug/settings/gdscript/max_call_stack",
            "getter": "",
            "type": "int"
          },
          {
            "default": "16384",
            "value": "Maximum amount of functions per frame allowed when profiling.",
            "setter": "",
            "name": "debug/settings/profiler/max_functions",
            "getter": "",
            "type": "int"
          },
          {
            "default": "false",
            "value": "Print frames per second to standard output every second.",
            "setter": "",
            "name": "debug/settings/stdout/print_fps",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Print more information to standard output when running. It displays information such as memory leaks, which scenes and resources are being loaded, etc.",
            "setter": "",
            "name": "debug/settings/stdout/verbose_stdout",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "1024",
            "value": "Maximum call stack in visual scripting, to avoid infinite recursion.",
            "setter": "",
            "name": "debug/settings/visual_script/max_call_stack",
            "getter": "",
            "type": "int"
          },
          {
            "default": "Color( 1, 0.2, 0.1, 0.8 )",
            "value": "Color of the contact points between collision shapes, visible when \"Visible Collision Shapes\" is enabled in the Debug menu.",
            "setter": "",
            "name": "debug/shapes/collision/contact_color",
            "getter": "",
            "type": "Color"
          },
          {
            "default": "true",
            "value": "Sets whether 2D physics will display collision outlines in game when \"Visible Collision Shapes\" is enabled in the Debug menu.",
            "setter": "",
            "name": "debug/shapes/collision/draw_2d_outlines",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "10000",
            "value": "Maximum number of contact points between collision shapes to display when \"Visible Collision Shapes\" is enabled in the Debug menu.",
            "setter": "",
            "name": "debug/shapes/collision/max_contacts_displayed",
            "getter": "",
            "type": "int"
          },
          {
            "default": "Color( 0, 0.6, 0.7, 0.42 )",
            "value": "Color of the collision shapes, visible when \"Visible Collision Shapes\" is enabled in the Debug menu.",
            "setter": "",
            "name": "debug/shapes/collision/shape_color",
            "getter": "",
            "type": "Color"
          },
          {
            "default": "Color( 1, 0.7, 0.1, 0.4 )",
            "value": "Color of the disabled navigation geometry, visible when \"Visible Navigation\" is enabled in the Debug menu.",
            "setter": "",
            "name": "debug/shapes/navigation/disabled_geometry_color",
            "getter": "",
            "type": "Color"
          },
          {
            "default": "Color( 0.1, 1, 0.7, 0.4 )",
            "value": "Color of the navigation geometry, visible when \"Visible Navigation\" is enabled in the Debug menu.",
            "setter": "",
            "name": "debug/shapes/navigation/geometry_color",
            "getter": "",
            "type": "Color"
          },
          {
            "default": "\"\"",
            "value": "Custom image for the mouse cursor (limited to 256×256).",
            "setter": "",
            "name": "display/mouse_cursor/custom_image",
            "getter": "",
            "type": "String"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "Hotspot for the custom mouse cursor image.",
            "setter": "",
            "name": "display/mouse_cursor/custom_image_hotspot",
            "getter": "",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 10, 10 )",
            "value": "Position offset for tooltips, relative to the mouse cursor's hotspot.",
            "setter": "",
            "name": "display/mouse_cursor/tooltip_position_offset",
            "getter": "",
            "type": "Vector2"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], allows HiDPI display on Windows, macOS, and the HTML5 platform. This setting has no effect on desktop Linux, as DPI-awareness fallbacks are not supported there.",
            "setter": "",
            "name": "display/window/dpi/allow_hidpi",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], keeps the screen on (even in case of inactivity), so the screensaver does not take over. Works on desktop and mobile platforms.",
            "setter": "",
            "name": "display/window/energy_saving/keep_screen_on",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "\"landscape\"",
            "value": "The default screen orientation to use on mobile devices.\n\t\t\t[b]Note:[/b] When set to a portrait orientation, this project setting does not flip the project resolution's width and height automatically. Instead, you have to set [member display/window/size/width] and [member display/window/size/height] accordingly.",
            "setter": "",
            "name": "display/window/handheld/orientation",
            "getter": "",
            "type": "String"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the home indicator is hidden automatically. This only affects iOS devices without a physical home button.",
            "setter": "",
            "name": "display/window/ios/hide_home_indicator",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], allows per-pixel transparency in a desktop window. This affects performance, so leave it on [code]false[/code] unless you need it.",
            "setter": "",
            "name": "display/window/per_pixel_transparency/allowed",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Sets the window background to transparent when it starts.",
            "setter": "",
            "name": "display/window/per_pixel_transparency/enabled",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Forces the main window to be always on top.\n\t\t\t[b]Note:[/b] This setting is ignored on iOS, Android, and HTML5.",
            "setter": "",
            "name": "display/window/size/always_on_top",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Forces the main window to be borderless.\n\t\t\t[b]Note:[/b] This setting is ignored on iOS, Android, and HTML5.",
            "setter": "",
            "name": "display/window/size/borderless",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Sets the main window to full screen when the project starts. Note that this is not [i]exclusive[/i] fullscreen. On Windows and Linux, a borderless window is used to emulate fullscreen. On macOS, a new desktop is used to display the running project.\n\t\t\tRegardless of the platform, enabling fullscreen will change the window size to match the monitor's size. Therefore, make sure your project supports [url=https://docs.godotengine.org/en/3.3/tutorials/rendering/multiple_resolutions.html]multiple resolutions[/url] when enabling fullscreen mode.\n\t\t\t[b]Note:[/b] This setting is ignored on iOS, Android, and HTML5.",
            "setter": "",
            "name": "display/window/size/fullscreen",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "600",
            "value": "Sets the game's main viewport height. On desktop platforms, this is the default window size. Stretch mode settings also use this as a reference when enabled.",
            "setter": "",
            "name": "display/window/size/height",
            "getter": "",
            "type": "int"
          },
          {
            "default": "true",
            "value": "Allows the window to be resizable by default.\n\t\t\t[b]Note:[/b] This setting is ignored on iOS and Android.",
            "setter": "",
            "name": "display/window/size/resizable",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "If greater than zero, overrides the window height when running the game. Useful for testing stretch modes.",
            "setter": "",
            "name": "display/window/size/test_height",
            "getter": "",
            "type": "int"
          },
          {
            "default": "0",
            "value": "If greater than zero, overrides the window width when running the game. Useful for testing stretch modes.",
            "setter": "",
            "name": "display/window/size/test_width",
            "getter": "",
            "type": "int"
          },
          {
            "default": "1024",
            "value": "Sets the game's main viewport width. On desktop platforms, this is the default window size. Stretch mode settings also use this as a reference when enabled.",
            "setter": "",
            "name": "display/window/size/width",
            "getter": "",
            "type": "int"
          },
          {
            "default": "\"\"",
            "value": "Specifies the tablet driver to use. If left empty, the default driver will be used.",
            "setter": "",
            "name": "display/window/tablet_driver",
            "getter": "",
            "type": "String"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables vertical synchronization. This eliminates tearing that may appear in moving scenes, at the cost of higher input latency and stuttering at lower framerates. If [code]false[/code], vertical synchronization will be disabled, however, many platforms will enforce it regardless (such as mobile platforms and HTML5).",
            "setter": "",
            "name": "display/window/vsync/use_vsync",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]Use Vsync[/code] is enabled and this setting is [code]true[/code], enables vertical synchronization via the operating system's window compositor when in windowed mode and the compositor is enabled. This will prevent stutter in certain situations. (Windows only.)\n\t\t\t[b]Note:[/b] This option is experimental and meant to alleviate stutter experienced by some users. However, some users have experienced a Vsync framerate halving (e.g. from 60 FPS to 30 FPS) when using it.",
            "setter": "",
            "name": "display/window/vsync/vsync_via_compositor",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "\"res://script_templates\"",
            "value": "Search path for project-specific script templates. Godot will search for script templates both in the editor-specific path and in this project-specific path.",
            "setter": "",
            "name": "editor/script_templates_search_path",
            "getter": "",
            "type": "String"
          },
          {
            "default": "PoolStringArray( \"gd\", \"gdshader\", \"shader\" )",
            "value": "Text-based file extensions to include in the script editor's \"Find in Files\" feature. You can add e.g. [code]tscn[/code] if you wish to also parse your scene files, especially if you use built-in scripts which are serialized in the scene files.",
            "setter": "",
            "name": "editor/search_in_file_extensions",
            "getter": "",
            "type": "PoolStringArray"
          },
          {
            "default": "0",
            "value": "Default value for [member ScrollContainer.scroll_deadzone], which will be used for all [ScrollContainer]s unless overridden.",
            "setter": "",
            "name": "gui/common/default_scroll_deadzone",
            "getter": "",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], swaps OK and Cancel buttons in dialogs on Windows and UWP to follow interface conventions.",
            "setter": "",
            "name": "gui/common/swap_ok_cancel",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "1024",
            "setter": "",
            "name": "gui/common/text_edit_undo_stack_max_size",
            "getter": "",
            "type": "int"
          },
          {
            "default": "\"\"",
            "value": "Path to a custom [Theme] resource file to use for the project ([code]theme[/code] or generic [code]tres[/code]/[code]res[/code] extension).",
            "setter": "",
            "name": "gui/theme/custom",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Path to a custom [Font] resource to use as default for all GUI elements of the project.",
            "setter": "",
            "name": "gui/theme/custom_font",
            "getter": "",
            "type": "String"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], makes sure the theme used works with HiDPI.",
            "setter": "",
            "name": "gui/theme/use_hidpi",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "2000",
            "value": "Timer setting for incremental search in [Tree], [ItemList], etc. controls (in milliseconds).",
            "setter": "",
            "name": "gui/timers/incremental_search_max_interval_msec",
            "getter": "",
            "type": "int"
          },
          {
            "default": "3",
            "value": "Timer for detecting idle in [TextEdit] (in seconds).",
            "setter": "",
            "name": "gui/timers/text_edit_idle_detect_sec",
            "getter": "",
            "type": "float"
          },
          {
            "default": "0.5",
            "value": "Default delay for tooltips (in seconds).",
            "setter": "",
            "name": "gui/timers/tooltip_delay_sec",
            "getter": "",
            "type": "float"
          },
          {
            "value": "Default [InputEventAction] to confirm a focused button, menu or list item, or validate input.\n\t\t\t[b]Note:[/b] Default [code]ui_*[/code] actions cannot be removed as they are necessary for the internal logic of several [Control]s. The events assigned to the action can however be modified.",
            "setter": "",
            "name": "input/ui_accept",
            "getter": "",
            "type": "Dictionary"
          },
          {
            "value": "Default [InputEventAction] to discard a modal or pending input.\n\t\t\t[b]Note:[/b] Default [code]ui_*[/code] actions cannot be removed as they are necessary for the internal logic of several [Control]s. The events assigned to the action can however be modified.",
            "setter": "",
            "name": "input/ui_cancel",
            "getter": "",
            "type": "Dictionary"
          },
          {
            "value": "Default [InputEventAction] to move down in the UI.\n\t\t\t[b]Note:[/b] Default [code]ui_*[/code] actions cannot be removed as they are necessary for the internal logic of several [Control]s. The events assigned to the action can however be modified.",
            "setter": "",
            "name": "input/ui_down",
            "getter": "",
            "type": "Dictionary"
          },
          {
            "value": "Default [InputEventAction] to go to the end position of a [Control] (e.g. last item in an [ItemList] or a [Tree]), matching the behavior of [constant KEY_END] on typical desktop UI systems.\n\t\t\t[b]Note:[/b] Default [code]ui_*[/code] actions cannot be removed as they are necessary for the internal logic of several [Control]s. The events assigned to the action can however be modified.",
            "setter": "",
            "name": "input/ui_end",
            "getter": "",
            "type": "Dictionary"
          },
          {
            "value": "Default [InputEventAction] to focus the next [Control] in the scene. The focus behavior can be configured via [member Control.focus_next].\n\t\t\t[b]Note:[/b] Default [code]ui_*[/code] actions cannot be removed as they are necessary for the internal logic of several [Control]s. The events assigned to the action can however be modified.",
            "setter": "",
            "name": "input/ui_focus_next",
            "getter": "",
            "type": "Dictionary"
          },
          {
            "value": "Default [InputEventAction] to focus the previous [Control] in the scene. The focus behavior can be configured via [member Control.focus_previous].\n\t\t\t[b]Note:[/b] Default [code]ui_*[/code] actions cannot be removed as they are necessary for the internal logic of several [Control]s. The events assigned to the action can however be modified.",
            "setter": "",
            "name": "input/ui_focus_prev",
            "getter": "",
            "type": "Dictionary"
          },
          {
            "value": "Default [InputEventAction] to go to the start position of a [Control] (e.g. first item in an [ItemList] or a [Tree]), matching the behavior of [constant KEY_HOME] on typical desktop UI systems.\n\t\t\t[b]Note:[/b] Default [code]ui_*[/code] actions cannot be removed as they are necessary for the internal logic of several [Control]s. The events assigned to the action can however be modified.",
            "setter": "",
            "name": "input/ui_home",
            "getter": "",
            "type": "Dictionary"
          },
          {
            "value": "Default [InputEventAction] to move left in the UI.\n\t\t\t[b]Note:[/b] Default [code]ui_*[/code] actions cannot be removed as they are necessary for the internal logic of several [Control]s. The events assigned to the action can however be modified.",
            "setter": "",
            "name": "input/ui_left",
            "getter": "",
            "type": "Dictionary"
          },
          {
            "value": "Default [InputEventAction] to go down a page in a [Control] (e.g. in an [ItemList] or a [Tree]), matching the behavior of [constant KEY_PAGEDOWN] on typical desktop UI systems.\n\t\t\t[b]Note:[/b] Default [code]ui_*[/code] actions cannot be removed as they are necessary for the internal logic of several [Control]s. The events assigned to the action can however be modified.",
            "setter": "",
            "name": "input/ui_page_down",
            "getter": "",
            "type": "Dictionary"
          },
          {
            "value": "Default [InputEventAction] to go up a page in a [Control] (e.g. in an [ItemList] or a [Tree]), matching the behavior of [constant KEY_PAGEUP] on typical desktop UI systems.\n\t\t\t[b]Note:[/b] Default [code]ui_*[/code] actions cannot be removed as they are necessary for the internal logic of several [Control]s. The events assigned to the action can however be modified.",
            "setter": "",
            "name": "input/ui_page_up",
            "getter": "",
            "type": "Dictionary"
          },
          {
            "value": "Default [InputEventAction] to move right in the UI.\n\t\t\t[b]Note:[/b] Default [code]ui_*[/code] actions cannot be removed as they are necessary for the internal logic of several [Control]s. The events assigned to the action can however be modified.",
            "setter": "",
            "name": "input/ui_right",
            "getter": "",
            "type": "Dictionary"
          },
          {
            "value": "Default [InputEventAction] to select an item in a [Control] (e.g. in an [ItemList] or a [Tree]).\n\t\t\t[b]Note:[/b] Default [code]ui_*[/code] actions cannot be removed as they are necessary for the internal logic of several [Control]s. The events assigned to the action can however be modified.",
            "setter": "",
            "name": "input/ui_select",
            "getter": "",
            "type": "Dictionary"
          },
          {
            "value": "Default [InputEventAction] to move up in the UI.\n\t\t\t[b]Note:[/b] Default [code]ui_*[/code] actions cannot be removed as they are necessary for the internal logic of several [Control]s. The events assigned to the action can however be modified.",
            "setter": "",
            "name": "input/ui_up",
            "getter": "",
            "type": "Dictionary"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], sends mouse input events when tapping or swiping on the touchscreen.",
            "setter": "",
            "name": "input_devices/pointing/emulate_mouse_from_touch",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], sends touch input events when clicking or dragging the mouse.",
            "setter": "",
            "name": "input_devices/pointing/emulate_touch_from_mouse",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "0.15",
            "value": "Default delay for touch events. This only affects iOS devices.",
            "setter": "",
            "name": "input_devices/pointing/ios/touch_delay",
            "getter": "",
            "type": "float"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D physics layer 1.",
            "setter": "",
            "name": "layer_names/2d_physics/layer_1",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D physics layer 10.",
            "setter": "",
            "name": "layer_names/2d_physics/layer_10",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D physics layer 11.",
            "setter": "",
            "name": "layer_names/2d_physics/layer_11",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D physics layer 12.",
            "setter": "",
            "name": "layer_names/2d_physics/layer_12",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D physics layer 13.",
            "setter": "",
            "name": "layer_names/2d_physics/layer_13",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D physics layer 14.",
            "setter": "",
            "name": "layer_names/2d_physics/layer_14",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D physics layer 15.",
            "setter": "",
            "name": "layer_names/2d_physics/layer_15",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D physics layer 16.",
            "setter": "",
            "name": "layer_names/2d_physics/layer_16",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D physics layer 17.",
            "setter": "",
            "name": "layer_names/2d_physics/layer_17",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D physics layer 18.",
            "setter": "",
            "name": "layer_names/2d_physics/layer_18",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D physics layer 19.",
            "setter": "",
            "name": "layer_names/2d_physics/layer_19",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D physics layer 2.",
            "setter": "",
            "name": "layer_names/2d_physics/layer_2",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D physics layer 20.",
            "setter": "",
            "name": "layer_names/2d_physics/layer_20",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D physics layer 3.",
            "setter": "",
            "name": "layer_names/2d_physics/layer_3",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D physics layer 4.",
            "setter": "",
            "name": "layer_names/2d_physics/layer_4",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D physics layer 5.",
            "setter": "",
            "name": "layer_names/2d_physics/layer_5",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D physics layer 6.",
            "setter": "",
            "name": "layer_names/2d_physics/layer_6",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D physics layer 7.",
            "setter": "",
            "name": "layer_names/2d_physics/layer_7",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D physics layer 8.",
            "setter": "",
            "name": "layer_names/2d_physics/layer_8",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D physics layer 9.",
            "setter": "",
            "name": "layer_names/2d_physics/layer_9",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D render layer 1.",
            "setter": "",
            "name": "layer_names/2d_render/layer_1",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D render layer 10.",
            "setter": "",
            "name": "layer_names/2d_render/layer_10",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D render layer 11.",
            "setter": "",
            "name": "layer_names/2d_render/layer_11",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D render layer 12.",
            "setter": "",
            "name": "layer_names/2d_render/layer_12",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D render layer 13.",
            "setter": "",
            "name": "layer_names/2d_render/layer_13",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D render layer 14.",
            "setter": "",
            "name": "layer_names/2d_render/layer_14",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D render layer 15.",
            "setter": "",
            "name": "layer_names/2d_render/layer_15",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D render layer 16.",
            "setter": "",
            "name": "layer_names/2d_render/layer_16",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D render layer 17.",
            "setter": "",
            "name": "layer_names/2d_render/layer_17",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D render layer 18.",
            "setter": "",
            "name": "layer_names/2d_render/layer_18",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D render layer 19.",
            "setter": "",
            "name": "layer_names/2d_render/layer_19",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D render layer 2.",
            "setter": "",
            "name": "layer_names/2d_render/layer_2",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D render layer 20.",
            "setter": "",
            "name": "layer_names/2d_render/layer_20",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D render layer 3.",
            "setter": "",
            "name": "layer_names/2d_render/layer_3",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D render layer 4.",
            "setter": "",
            "name": "layer_names/2d_render/layer_4",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D render layer 5.",
            "setter": "",
            "name": "layer_names/2d_render/layer_5",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D render layer 6.",
            "setter": "",
            "name": "layer_names/2d_render/layer_6",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D render layer 7.",
            "setter": "",
            "name": "layer_names/2d_render/layer_7",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D render layer 8.",
            "setter": "",
            "name": "layer_names/2d_render/layer_8",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 2D render layer 9.",
            "setter": "",
            "name": "layer_names/2d_render/layer_9",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D physics layer 1.",
            "setter": "",
            "name": "layer_names/3d_physics/layer_1",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D physics layer 10.",
            "setter": "",
            "name": "layer_names/3d_physics/layer_10",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D physics layer 11.",
            "setter": "",
            "name": "layer_names/3d_physics/layer_11",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D physics layer 12.",
            "setter": "",
            "name": "layer_names/3d_physics/layer_12",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D physics layer 13.",
            "setter": "",
            "name": "layer_names/3d_physics/layer_13",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D physics layer 14.",
            "setter": "",
            "name": "layer_names/3d_physics/layer_14",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D physics layer 15.",
            "setter": "",
            "name": "layer_names/3d_physics/layer_15",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D physics layer 16.",
            "setter": "",
            "name": "layer_names/3d_physics/layer_16",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D physics layer 17.",
            "setter": "",
            "name": "layer_names/3d_physics/layer_17",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D physics layer 18.",
            "setter": "",
            "name": "layer_names/3d_physics/layer_18",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D physics layer 19.",
            "setter": "",
            "name": "layer_names/3d_physics/layer_19",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D physics layer 2.",
            "setter": "",
            "name": "layer_names/3d_physics/layer_2",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D physics layer 20.",
            "setter": "",
            "name": "layer_names/3d_physics/layer_20",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D physics layer 3.",
            "setter": "",
            "name": "layer_names/3d_physics/layer_3",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D physics layer 4.",
            "setter": "",
            "name": "layer_names/3d_physics/layer_4",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D physics layer 5.",
            "setter": "",
            "name": "layer_names/3d_physics/layer_5",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D physics layer 6.",
            "setter": "",
            "name": "layer_names/3d_physics/layer_6",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D physics layer 7.",
            "setter": "",
            "name": "layer_names/3d_physics/layer_7",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D physics layer 8.",
            "setter": "",
            "name": "layer_names/3d_physics/layer_8",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D physics layer 9.",
            "setter": "",
            "name": "layer_names/3d_physics/layer_9",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D render layer 1.",
            "setter": "",
            "name": "layer_names/3d_render/layer_1",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D render layer 10.",
            "setter": "",
            "name": "layer_names/3d_render/layer_10",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D render layer 11.",
            "setter": "",
            "name": "layer_names/3d_render/layer_11",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D render layer 12.",
            "setter": "",
            "name": "layer_names/3d_render/layer_12",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D render layer 13.",
            "setter": "",
            "name": "layer_names/3d_render/layer_13",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D render layer 14",
            "setter": "",
            "name": "layer_names/3d_render/layer_14",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D render layer 15.",
            "setter": "",
            "name": "layer_names/3d_render/layer_15",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D render layer 16.",
            "setter": "",
            "name": "layer_names/3d_render/layer_16",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D render layer 17.",
            "setter": "",
            "name": "layer_names/3d_render/layer_17",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D render layer 18.",
            "setter": "",
            "name": "layer_names/3d_render/layer_18",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D render layer 19.",
            "setter": "",
            "name": "layer_names/3d_render/layer_19",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D render layer 2.",
            "setter": "",
            "name": "layer_names/3d_render/layer_2",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D render layer 20.",
            "setter": "",
            "name": "layer_names/3d_render/layer_20",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D render layer 3.",
            "setter": "",
            "name": "layer_names/3d_render/layer_3",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D render layer 4.",
            "setter": "",
            "name": "layer_names/3d_render/layer_4",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D render layer 5.",
            "setter": "",
            "name": "layer_names/3d_render/layer_5",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D render layer 6.",
            "setter": "",
            "name": "layer_names/3d_render/layer_6",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D render layer 7.",
            "setter": "",
            "name": "layer_names/3d_render/layer_7",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D render layer 8.",
            "setter": "",
            "name": "layer_names/3d_render/layer_8",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Optional name for the 3D render layer 9.",
            "setter": "",
            "name": "layer_names/3d_render/layer_9",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"en\"",
            "value": "The locale to fall back to if a translation isn't available in a given language. If left empty, [code]en[/code] (English) will be used.",
            "setter": "",
            "name": "locale/fallback",
            "getter": "",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "If non-empty, this locale will be used when running the project from the editor.",
            "setter": "",
            "name": "locale/test",
            "getter": "",
            "type": "String"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], logs all output to files.",
            "setter": "",
            "name": "logging/file_logging/enable_file_logging",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "Desktop override for [member logging/file_logging/enable_file_logging], as log files are not readily accessible on mobile/Web platforms.",
            "setter": "",
            "name": "logging/file_logging/enable_file_logging.pc",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "\"user://logs/godot.log\"",
            "value": "Path to logs within the project. Using an [code]user://[/code] path is recommended.",
            "setter": "",
            "name": "logging/file_logging/log_path",
            "getter": "",
            "type": "String"
          },
          {
            "default": "5",
            "value": "Specifies the maximum amount of log files allowed (used for rotation).",
            "setter": "",
            "name": "logging/file_logging/max_log_files",
            "getter": "",
            "type": "int"
          },
          {
            "default": "256",
            "setter": "",
            "name": "memory/limits/command_queue/multithreading_queue_size_kb",
            "getter": "",
            "type": "int"
          },
          {
            "default": "4096",
            "value": "Godot uses a message queue to defer some function calls. If you run out of space on it (you will see an error), you can increase the size here.",
            "setter": "",
            "name": "memory/limits/message_queue/max_size_kb",
            "getter": "",
            "type": "int"
          },
          {
            "default": "60",
            "value": "This is used by servers when used in multi-threading mode (servers and visual). RIDs are preallocated to avoid stalling the server requesting them on threads. If servers get stalled too often when loading resources in a thread, increase this number.",
            "setter": "",
            "name": "memory/limits/multithreaded_server/rid_pool_prealloc",
            "getter": "",
            "type": "int"
          },
          {
            "default": "2048",
            "value": "Maximum amount of characters allowed to send as output from the debugger. Over this value, content is dropped. This helps not to stall the debugger connection.",
            "setter": "",
            "name": "network/limits/debugger_stdout/max_chars_per_second",
            "getter": "",
            "type": "int"
          },
          {
            "default": "100",
            "value": "Maximum number of errors allowed to be sent as output from the debugger. Over this value, content is dropped. This helps not to stall the debugger connection.",
            "setter": "",
            "name": "network/limits/debugger_stdout/max_errors_per_second",
            "getter": "",
            "type": "int"
          },
          {
            "default": "10",
            "value": "Maximum amount of messages allowed to send as output from the debugger. Over this value, content is dropped. This helps not to stall the debugger connection.",
            "setter": "",
            "name": "network/limits/debugger_stdout/max_messages_per_frame",
            "getter": "",
            "type": "int"
          },
          {
            "default": "100",
            "value": "Maximum number of warnings allowed to be sent as output from the debugger. Over this value, content is dropped. This helps not to stall the debugger connection.",
            "setter": "",
            "name": "network/limits/debugger_stdout/max_warnings_per_second",
            "getter": "",
            "type": "int"
          },
          {
            "default": "16",
            "value": "Default size of packet peer stream for deserializing Godot data (in bytes, specified as a power of two). The default value [code]16[/code] is equal to 65,536 bytes. Over this size, data is dropped.",
            "setter": "",
            "name": "network/limits/packet_peer_stream/max_buffer_po2",
            "getter": "",
            "type": "int"
          },
          {
            "default": "30",
            "value": "Timeout (in seconds) for connection attempts using TCP.",
            "setter": "",
            "name": "network/limits/tcp/connect_timeout_seconds",
            "getter": "",
            "type": "int"
          },
          {
            "default": "64",
            "value": "Maximum size (in kiB) for the [WebRTCDataChannel] input buffer.",
            "setter": "",
            "name": "network/limits/webrtc/max_channel_in_buffer_kb",
            "getter": "",
            "type": "int"
          },
          {
            "default": "64",
            "value": "Maximum size (in kiB) for the [WebSocketClient] input buffer.",
            "setter": "",
            "name": "network/limits/websocket_client/max_in_buffer_kb",
            "getter": "",
            "type": "int"
          },
          {
            "default": "1024",
            "value": "Maximum number of concurrent input packets for [WebSocketClient].",
            "setter": "",
            "name": "network/limits/websocket_client/max_in_packets",
            "getter": "",
            "type": "int"
          },
          {
            "default": "64",
            "value": "Maximum size (in kiB) for the [WebSocketClient] output buffer.",
            "setter": "",
            "name": "network/limits/websocket_client/max_out_buffer_kb",
            "getter": "",
            "type": "int"
          },
          {
            "default": "1024",
            "value": "Maximum number of concurrent output packets for [WebSocketClient].",
            "setter": "",
            "name": "network/limits/websocket_client/max_out_packets",
            "getter": "",
            "type": "int"
          },
          {
            "default": "64",
            "value": "Maximum size (in kiB) for the [WebSocketServer] input buffer.",
            "setter": "",
            "name": "network/limits/websocket_server/max_in_buffer_kb",
            "getter": "",
            "type": "int"
          },
          {
            "default": "1024",
            "value": "Maximum number of concurrent input packets for [WebSocketServer].",
            "setter": "",
            "name": "network/limits/websocket_server/max_in_packets",
            "getter": "",
            "type": "int"
          },
          {
            "default": "64",
            "value": "Maximum size (in kiB) for the [WebSocketServer] output buffer.",
            "setter": "",
            "name": "network/limits/websocket_server/max_out_buffer_kb",
            "getter": "",
            "type": "int"
          },
          {
            "default": "1024",
            "value": "Maximum number of concurrent output packets for [WebSocketServer].",
            "setter": "",
            "name": "network/limits/websocket_server/max_out_packets",
            "getter": "",
            "type": "int"
          },
          {
            "default": "4",
            "value": "Amount of read ahead used by remote filesystem. Higher values decrease the effects of latency at the cost of higher bandwidth usage.",
            "setter": "",
            "name": "network/remote_fs/page_read_ahead",
            "getter": "",
            "type": "int"
          },
          {
            "default": "65536",
            "value": "Page size used by remote filesystem (in bytes).",
            "setter": "",
            "name": "network/remote_fs/page_size",
            "getter": "",
            "type": "int"
          },
          {
            "default": "\"\"",
            "value": "The CA certificates bundle to use for SSL connections. If this is set to a non-empty value, this will [i]override[/i] Godot's default [url=https://github.com/godotengine/godot/blob/master/thirdparty/certs/ca-certificates.crt]Mozilla certificate bundle[/url]. If left empty, the default certificate bundle will be used.\n\t\t\tIf in doubt, leave this setting empty.",
            "setter": "",
            "name": "network/ssl/certificates",
            "getter": "",
            "type": "String"
          },
          {
            "default": "0",
            "value": "When creating node names automatically, set the type of casing in this project. This is mostly an editor setting.",
            "setter": "",
            "name": "node/name_casing",
            "getter": "",
            "type": "int"
          },
          {
            "default": "0",
            "value": "What to use to separate node name from number. This is mostly an editor setting.",
            "setter": "",
            "name": "node/name_num_separator",
            "getter": "",
            "type": "int"
          },
          {
            "default": "4096",
            "value": "Size of the hash table used for the broad-phase 2D hash grid algorithm.",
            "setter": "",
            "name": "physics/2d/bp_hash_table_size",
            "getter": "",
            "type": "int"
          },
          {
            "default": "128",
            "value": "Cell size used for the broad-phase 2D hash grid algorithm (in pixels).",
            "setter": "",
            "name": "physics/2d/cell_size",
            "getter": "",
            "type": "int"
          },
          {
            "default": "1.0",
            "value": "The default angular damp in 2D.\n\t\t\t[b]Note:[/b] Good values are in the range [code]0[/code] to [code]1[/code]. At value [code]0[/code] objects will keep moving with the same velocity. Values greater than [code]1[/code] will aim to reduce the velocity to [code]0[/code] in less than a second e.g. a value of [code]2[/code] will aim to reduce the velocity to [code]0[/code] in half a second. A value equal to or greater than the physics frame rate ([member ProjectSettings.physics/common/physics_fps], [code]60[/code] by default) will bring the object to a stop in one iteration.",
            "setter": "",
            "name": "physics/2d/default_angular_damp",
            "getter": "",
            "type": "float"
          },
          {
            "default": "98",
            "value": "The default gravity strength in 2D (in pixels per second squared).\n\t\t\t[b]Note:[/b] This property is only read when the project starts. To change the default gravity at runtime, use the following code sample:\n\t\t\t[codeblock]\n\t\t\t# Set the default gravity strength to 98.\n\t\t\tPhysics2DServer.area_set_param(get_viewport().find_world_2d().get_space(), Physics2DServer.AREA_PARAM_GRAVITY, 98)\n\t\t\t[/codeblock]",
            "setter": "",
            "name": "physics/2d/default_gravity",
            "getter": "",
            "type": "int"
          },
          {
            "default": "Vector2( 0, 1 )",
            "value": "The default gravity direction in 2D.\n\t\t\t[b]Note:[/b] This property is only read when the project starts. To change the default gravity vector at runtime, use the following code sample:\n\t\t\t[codeblock]\n\t\t\t# Set the default gravity direction to `Vector2(0, 1)`.\n\t\t\tPhysics2DServer.area_set_param(get_viewport().find_world_2d().get_space(), Physics2DServer.AREA_PARAM_GRAVITY_VECTOR, Vector2(0, 1))\n\t\t\t[/codeblock]",
            "setter": "",
            "name": "physics/2d/default_gravity_vector",
            "getter": "",
            "type": "Vector2"
          },
          {
            "default": "0.1",
            "value": "The default linear damp in 2D.\n\t\t\t[b]Note:[/b] Good values are in the range [code]0[/code] to [code]1[/code]. At value [code]0[/code] objects will keep moving with the same velocity. Values greater than [code]1[/code] will aim to reduce the velocity to [code]0[/code] in less than a second e.g. a value of [code]2[/code] will aim to reduce the velocity to [code]0[/code] in half a second. A value equal to or greater than the physics frame rate ([member ProjectSettings.physics/common/physics_fps], [code]60[/code] by default) will bring the object to a stop in one iteration.",
            "setter": "",
            "name": "physics/2d/default_linear_damp",
            "getter": "",
            "type": "float"
          },
          {
            "default": "512",
            "value": "Threshold defining the surface size that constitutes a large object with regard to cells in the broad-phase 2D hash grid algorithm.",
            "setter": "",
            "name": "physics/2d/large_object_surface_threshold_in_cells",
            "getter": "",
            "type": "int"
          },
          {
            "default": "\"DEFAULT\"",
            "value": "Sets which physics engine to use for 2D physics.\n\t\t\t\"DEFAULT\" and \"GodotPhysics\" are the same, as there is currently no alternative 2D physics server implemented.",
            "setter": "",
            "name": "physics/2d/physics_engine",
            "getter": "",
            "type": "String"
          },
          {
            "default": "0.139626",
            "value": "Threshold angular velocity under which a 2D physics body will be considered inactive. See [constant Physics2DServer.SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD].",
            "setter": "",
            "name": "physics/2d/sleep_threshold_angular",
            "getter": "",
            "type": "float"
          },
          {
            "default": "2.0",
            "value": "Threshold linear velocity under which a 2D physics body will be considered inactive. See [constant Physics2DServer.SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD].",
            "setter": "",
            "name": "physics/2d/sleep_threshold_linear",
            "getter": "",
            "type": "float"
          },
          {
            "default": "1",
            "value": "Sets whether physics is run on the main thread or a separate one. Running the server on a thread increases performance, but restricts API access to only physics process.\n\t\t\t[b]Warning:[/b] As of Godot 3.2, there are mixed reports about the use of a Multi-Threaded thread model for physics. Be sure to assess whether it does give you extra performance and no regressions when using it.",
            "setter": "",
            "name": "physics/2d/thread_model",
            "getter": "",
            "type": "int"
          },
          {
            "default": "0.5",
            "value": "Time (in seconds) of inactivity before which a 2D physics body will put to sleep. See [constant Physics2DServer.SPACE_PARAM_BODY_TIME_TO_SLEEP].",
            "setter": "",
            "name": "physics/2d/time_before_sleep",
            "getter": "",
            "type": "float"
          },
          {
            "default": "true",
            "value": "Sets whether the 3D physics world will be created with support for [SoftBody] physics. Only applies to the Bullet physics engine.",
            "setter": "",
            "name": "physics/3d/active_soft_world",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "0.1",
            "value": "The default angular damp in 3D.\n\t\t\t[b]Note:[/b] Good values are in the range [code]0[/code] to [code]1[/code]. At value [code]0[/code] objects will keep moving with the same velocity. Values greater than [code]1[/code] will aim to reduce the velocity to [code]0[/code] in less than a second e.g. a value of [code]2[/code] will aim to reduce the velocity to [code]0[/code] in half a second. A value equal to or greater than the physics frame rate ([member ProjectSettings.physics/common/physics_fps], [code]60[/code] by default) will bring the object to a stop in one iteration.",
            "setter": "",
            "name": "physics/3d/default_angular_damp",
            "getter": "",
            "type": "float"
          },
          {
            "default": "9.8",
            "value": "The default gravity strength in 3D (in meters per second squared).\n\t\t\t[b]Note:[/b] This property is only read when the project starts. To change the default gravity at runtime, use the following code sample:\n\t\t\t[codeblock]\n\t\t\t# Set the default gravity strength to 9.8.\n\t\t\tPhysicsServer.area_set_param(get_viewport().find_world().get_space(), PhysicsServer.AREA_PARAM_GRAVITY, 9.8)\n\t\t\t[/codeblock]",
            "setter": "",
            "name": "physics/3d/default_gravity",
            "getter": "",
            "type": "float"
          },
          {
            "default": "Vector3( 0, -1, 0 )",
            "value": "The default gravity direction in 3D.\n\t\t\t[b]Note:[/b] This property is only read when the project starts. To change the default gravity vector at runtime, use the following code sample:\n\t\t\t[codeblock]\n\t\t\t# Set the default gravity direction to `Vector3(0, -1, 0)`.\n\t\t\tPhysicsServer.area_set_param(get_viewport().find_world().get_space(), PhysicsServer.AREA_PARAM_GRAVITY_VECTOR, Vector3(0, -1, 0))\n\t\t\t[/codeblock]",
            "setter": "",
            "name": "physics/3d/default_gravity_vector",
            "getter": "",
            "type": "Vector3"
          },
          {
            "default": "0.1",
            "value": "The default linear damp in 3D.\n\t\t\t[b]Note:[/b] Good values are in the range [code]0[/code] to [code]1[/code]. At value [code]0[/code] objects will keep moving with the same velocity. Values greater than [code]1[/code] will aim to reduce the velocity to [code]0[/code] in less than a second e.g. a value of [code]2[/code] will aim to reduce the velocity to [code]0[/code] in half a second. A value equal to or greater than the physics frame rate ([member ProjectSettings.physics/common/physics_fps], [code]60[/code] by default) will bring the object to a stop in one iteration.",
            "setter": "",
            "name": "physics/3d/default_linear_damp",
            "getter": "",
            "type": "float"
          },
          {
            "default": "true",
            "value": "Enables the use of bounding volume hierarchy instead of octree for physics spatial partitioning. This may give better performance.",
            "setter": "",
            "name": "physics/3d/godot_physics/use_bvh",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "\"DEFAULT\"",
            "value": "Sets which physics engine to use for 3D physics.\n\t\t\t\"DEFAULT\" is currently the [url=https://bulletphysics.org]Bullet[/url] physics engine. The \"GodotPhysics\" engine is still supported as an alternative.",
            "setter": "",
            "name": "physics/3d/physics_engine",
            "getter": "",
            "type": "String"
          },
          {
            "default": "true",
            "value": "Enables [member Viewport.physics_object_picking] on the root viewport.",
            "setter": "",
            "name": "physics/common/enable_object_picking",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If enabled, 2D and 3D physics picking behaves this way in relation to pause:\n\t\t\t- When pause is started, every collision object that is hovered or captured (3D only) is released from that condition, getting the relevant mouse-exit callback, unless its pause mode makes it immune to pause.\n\t\t\t- During pause, picking only considers collision objects immune to pause, sending input events and enter/exit callbacks to them as expected.\n\t\t\tIf disabled, the legacy behavior is used, which consists in queuing the picking input events during pause (so nodes won't get them) and flushing that queue on resume, against the state of the 2D/3D world at that point.",
            "setter": "",
            "name": "physics/common/enable_pause_aware_picking",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "60",
            "value": "The number of fixed iterations per second. This controls how often physics simulation and [method Node._physics_process] methods are run.\n\t\t\t[b]Note:[/b] This property is only read when the project starts. To change the physics FPS at runtime, set [member Engine.iterations_per_second] instead.",
            "setter": "",
            "name": "physics/common/physics_fps",
            "getter": "",
            "type": "int"
          },
          {
            "default": "0.5",
            "value": "Controls how much physics ticks are synchronized with real time. For 0 or less, the ticks are synchronized. Such values are recommended for network games, where clock synchronization matters. Higher values cause higher deviation of in-game clock and real clock, but allows smoothing out framerate jitters. The default value of 0.5 should be fine for most; values above 2 could cause the game to react to dropped frames with a noticeable delay and are not recommended.\n\t\t\t[b]Note:[/b] For best results, when using a custom physics interpolation solution, the physics jitter fix should be disabled by setting [member physics/common/physics_jitter_fix] to [code]0[/code].\n\t\t\t[b]Note:[/b] This property is only read when the project starts. To change the physics FPS at runtime, set [member Engine.physics_jitter_fix] instead.",
            "setter": "",
            "name": "physics/common/physics_jitter_fix",
            "getter": "",
            "type": "float"
          },
          {
            "default": "0",
            "value": "[b]Experimental[/b] Calls [code]glBufferData[/code] with NULL data prior to uploading batching data. This may not be necessary but can be used for safety.\n\t\t\t[b]Note:[/b] Use with care. You are advised to leave this as default for exports. A non-default setting that works better on your machine may adversely affect performance for end users.",
            "setter": "",
            "name": "rendering/2d/opengl/batching_send_null",
            "getter": "",
            "type": "int"
          },
          {
            "default": "0",
            "value": "[b]Experimental[/b] If set to on, uses the [code]GL_STREAM_DRAW[/code] flag for batching buffer uploads. If off, uses the [code]GL_DYNAMIC_DRAW[/code] flag.\n\t\t\t[b]Note:[/b] Use with care. You are advised to leave this as default for exports. A non-default setting that works better on your machine may adversely affect performance for end users.",
            "setter": "",
            "name": "rendering/2d/opengl/batching_stream",
            "getter": "",
            "type": "int"
          },
          {
            "default": "0",
            "value": "[b]Experimental[/b] If set to on, this applies buffer orphaning - [code]glBufferData[/code] is called with NULL data and the full buffer size prior to uploading new data. This can be important to avoid stalling on some hardware.\n\t\t\t[b]Note:[/b] Use with care. You are advised to leave this as default for exports. A non-default setting that works better on your machine may adversely affect performance for end users.",
            "setter": "",
            "name": "rendering/2d/opengl/legacy_orphan_buffers",
            "getter": "",
            "type": "int"
          },
          {
            "default": "0",
            "value": "[b]Experimental[/b] If set to on, uses the [code]GL_STREAM_DRAW[/code] flag for legacy buffer uploads. If off, uses the [code]GL_DYNAMIC_DRAW[/code] flag.\n\t\t\t[b]Note:[/b] Use with care. You are advised to leave this as default for exports. A non-default setting that works better on your machine may adversely affect performance for end users.",
            "setter": "",
            "name": "rendering/2d/opengl/legacy_stream",
            "getter": "",
            "type": "int"
          },
          {
            "default": "1",
            "value": "Choose between fixed mode where corner scalings are preserved matching the artwork, and scaling mode.\n\t\t\tNot available in GLES3 when [member rendering/batching/options/use_batching] is off.",
            "setter": "",
            "name": "rendering/2d/options/ninepatch_mode",
            "getter": "",
            "type": "int"
          },
          {
            "default": "false",
            "value": "Some NVIDIA GPU drivers have a bug which produces flickering issues for the [code]draw_rect[/code] method, especially as used in [TileMap]. Refer to [url=https://github.com/godotengine/godot/issues/9913]GitHub issue 9913[/url] for details.\n\t\t\tIf [code]true[/code], this option enables a \"safe\" code path for such NVIDIA GPUs at the cost of performance. This option affects GLES2 and GLES3 rendering, but only on desktop platforms.",
            "setter": "",
            "name": "rendering/2d/options/use_nvidia_rect_flicker_workaround",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], performs 2D skinning on the CPU rather than the GPU. This provides greater compatibility with a wide range of hardware, and also may be faster in some circumstances.\n\t\t\tCurrently only available when [member rendering/batching/options/use_batching] is active.\n\t\t\t[b]Note:[/b] Antialiased software skinned polys are not supported, and will be rendered without antialiasing.\n\t\t\t[b]Note:[/b] Custom shaders that use the [code]VERTEX[/code] built-in operate with [code]VERTEX[/code] position [i]after[/i] skinning, whereas with hardware skinning, [code]VERTEX[/code] is the position [i]before[/i] skinning.",
            "setter": "",
            "name": "rendering/2d/options/use_software_skinning",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], forces snapping of vertices to pixels in 2D rendering. May help in some pixel art styles.\n\t\t\tThis snapping is performed on the GPU in the vertex shader.\n\t\t\tConsider using the project setting [member rendering/batching/precision/uv_contract] to prevent artifacts.",
            "setter": "",
            "name": "rendering/2d/snapping/use_gpu_pixel_snap",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "When batching is on, this regularly prints a frame diagnosis log. Note that this will degrade performance.",
            "setter": "",
            "name": "rendering/batching/debug/diagnose_frame",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "[b]Experimental[/b] For regression testing against the old renderer. If this is switched on, and [code]use_batching[/code] is set, the renderer will swap alternately between using the old renderer, and the batched renderer, on each frame. This makes it easy to identify visual differences. Performance will be degraded.",
            "setter": "",
            "name": "rendering/batching/debug/flash_batching",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "32",
            "value": "Lights have the potential to prevent joining items, and break many of the performance benefits of batching. This setting enables some complex logic to allow joining items if their lighting is similar, and overlap tests pass. This can significantly improve performance in some games. Set to 0 to switch off. With large values the cost of overlap tests may lead to diminishing returns.",
            "setter": "",
            "name": "rendering/batching/lights/max_join_items",
            "getter": "",
            "type": "int"
          },
          {
            "default": "1.0",
            "value": "Sets the proportion of the total screen area (in pixels) that must be saved by a scissor operation in order to activate light scissoring. This can prevent parts of items being rendered outside the light area. Lower values scissor more aggressively. A value of 1 scissors none of the items, a value of 0 scissors every item. The power of 4 of the value is used, in order to emphasize the lower range, and multiplied by the total screen area in pixels to give the threshold. This can reduce fill rate requirements in scenes with a lot of lighting.",
            "setter": "",
            "name": "rendering/batching/lights/scissor_area_threshold",
            "getter": "",
            "type": "float"
          },
          {
            "default": "false",
            "value": "Enabling this setting uses the legacy method to draw batches containing only one rect. The legacy method is faster (approx twice as fast), but can cause flicker on some systems. In order to directly compare performance with the non-batching renderer you can set this to true, but it is recommended to turn this off unless you can guarantee your target hardware will work with this method.",
            "setter": "",
            "name": "rendering/batching/options/single_rect_fallback",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "Turns 2D batching on and off. Batching increases performance by reducing the amount of graphics API drawcalls.",
            "setter": "",
            "name": "rendering/batching/options/use_batching",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "Switches on 2D batching within the editor.",
            "setter": "",
            "name": "rendering/batching/options/use_batching_in_editor",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "16384",
            "value": "Size of buffer reserved for batched vertices. Larger size enables larger batches, but there are diminishing returns for the memory used. This should only have a minor effect on performance.",
            "setter": "",
            "name": "rendering/batching/parameters/batch_buffer_size",
            "getter": "",
            "type": "int"
          },
          {
            "default": "0.25",
            "value": "Including color in the vertex format has a cost, however, not including color prevents batching across color changes. This threshold determines the ratio of [code]number of vertex color changes / total number of vertices[/code] above which vertices will be translated to colored format. A value of 0 will always use colored vertices, 1 will never use colored vertices.",
            "setter": "",
            "name": "rendering/batching/parameters/colored_vertex_format_threshold",
            "getter": "",
            "type": "float"
          },
          {
            "default": "4",
            "value": "In certain circumstances, the batcher can reorder items in order to better join them. This may result in better performance. An overlap test is needed however for each item lookahead, so there is a trade off, with diminishing returns. If you are getting no benefit, setting this to 0 will switch it off.",
            "setter": "",
            "name": "rendering/batching/parameters/item_reordering_lookahead",
            "getter": "",
            "type": "int"
          },
          {
            "default": "16",
            "value": "Sets the number of commands to lookahead to determine whether to batch render items. A value of 1 can join items consisting of single commands, 0 turns off joining. Higher values are in theory more likely to join, however this has diminishing returns and has a runtime cost so a small value is recommended.",
            "setter": "",
            "name": "rendering/batching/parameters/max_join_item_commands",
            "getter": "",
            "type": "int"
          },
          {
            "default": "false",
            "value": "On some platforms (especially mobile), precision issues in shaders can lead to reading 1 texel outside of bounds, particularly where rects are scaled. This can particularly lead to border artifacts around tiles in tilemaps.\n\t\t\tThis adjustment corrects for this by making a small contraction to the UV coordinates used. Note that this can result in a slight squashing of border texels.",
            "setter": "",
            "name": "rendering/batching/precision/uv_contract",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "100",
            "value": "The amount of UV contraction. This figure is divided by 1000000, and is a proportion of the total texture dimensions, where the width and height are both ranged from 0.0 to 1.0.\n\t\t\tUse the default unless correcting for a problem on particular hardware.",
            "setter": "",
            "name": "rendering/batching/precision/uv_contract_amount",
            "getter": "",
            "type": "int"
          },
          {
            "default": "512",
            "value": "Amount of light samples taken when using [constant BakedLightmap.BAKE_QUALITY_HIGH].",
            "setter": "",
            "name": "rendering/cpu_lightmapper/quality/high_quality_ray_count",
            "getter": "",
            "type": "int"
          },
          {
            "default": "64",
            "value": "Amount of light samples taken when using [constant BakedLightmap.BAKE_QUALITY_LOW].",
            "setter": "",
            "name": "rendering/cpu_lightmapper/quality/low_quality_ray_count",
            "getter": "",
            "type": "int"
          },
          {
            "default": "256",
            "value": "Amount of light samples taken when using [constant BakedLightmap.BAKE_QUALITY_MEDIUM].",
            "setter": "",
            "name": "rendering/cpu_lightmapper/quality/medium_quality_ray_count",
            "getter": "",
            "type": "int"
          },
          {
            "default": "1024",
            "value": "Amount of light samples taken when using [constant BakedLightmap.BAKE_QUALITY_ULTRA].",
            "setter": "",
            "name": "rendering/cpu_lightmapper/quality/ultra_quality_ray_count",
            "getter": "",
            "type": "int"
          },
          {
            "default": "Color( 0.3, 0.3, 0.3, 1 )",
            "value": "Default background clear color. Overridable per [Viewport] using its [Environment]. See [member Environment.background_mode] and [member Environment.background_color] in particular. To change this default color programmatically, use [method VisualServer.set_default_clear_color].",
            "setter": "",
            "name": "rendering/environment/default_clear_color",
            "getter": "",
            "type": "Color"
          },
          {
            "default": "\"\"",
            "value": "[Environment] that will be used as a fallback environment in case a scene does not specify its own environment. The default environment is loaded in at scene load time regardless of whether you have set an environment or not. If you do not rely on the fallback environment, it is best to delete [code]default_env.tres[/code], or to specify a different default environment here.",
            "setter": "",
            "name": "rendering/environment/default_environment",
            "getter": "",
            "type": "String"
          },
          {
            "default": "false",
            "value": "The use of half-float vertex compression may be producing rendering errors on some platforms (especially iOS). These have been seen particularly in particles. Disabling half-float may resolve these problems.",
            "setter": "",
            "name": "rendering/gles2/compatibility/disable_half_float",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code] and available on the target device, enables high floating point precision for all shader computations in GLES2.\n\t\t\t[b]Warning:[/b] High floating point precision can be extremely slow on older devices and is often not available at all. Use with caution.",
            "setter": "",
            "name": "rendering/gles2/compatibility/enable_high_float.Android",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "4096",
            "value": "Max buffer size for blend shapes. Any blend shape bigger than this will not work.",
            "setter": "",
            "name": "rendering/limits/buffers/blend_shape_max_buffer_size_kb",
            "getter": "",
            "type": "int"
          },
          {
            "default": "128",
            "value": "Max buffer size for drawing polygons. Any polygon bigger than this will not work.",
            "setter": "",
            "name": "rendering/limits/buffers/canvas_polygon_buffer_size_kb",
            "getter": "",
            "type": "int"
          },
          {
            "default": "128",
            "value": "Max index buffer size for drawing polygons. Any polygon bigger than this will not work.",
            "setter": "",
            "name": "rendering/limits/buffers/canvas_polygon_index_buffer_size_kb",
            "getter": "",
            "type": "int"
          },
          {
            "default": "2048",
            "value": "Max buffer size for drawing immediate objects (ImmediateGeometry nodes). Nodes using more than this size will not work.",
            "setter": "",
            "name": "rendering/limits/buffers/immediate_buffer_size_kb",
            "getter": "",
            "type": "int"
          },
          {
            "default": "32",
            "value": "Max number of lights renderable per object. This is further limited by hardware support. Most devices only support 409 lights, while many devices (especially mobile) only support 102. Setting this low will slightly reduce memory usage and may decrease shader compile times.",
            "setter": "",
            "name": "rendering/limits/rendering/max_lights_per_object",
            "getter": "",
            "type": "int"
          },
          {
            "default": "65536",
            "value": "Max amount of elements renderable in a frame. If more elements than this are visible per frame, they will not be drawn. Keep in mind elements refer to mesh surfaces and not meshes themselves. Setting this low will slightly reduce memory usage and may decrease shader compile times, particularly on web. For most uses, the default value is suitable, but consider lowering as much as possible on web export.",
            "setter": "",
            "name": "rendering/limits/rendering/max_renderable_elements",
            "getter": "",
            "type": "int"
          },
          {
            "default": "4096",
            "value": "Max number of lights renderable in a frame. If more lights than this number are used, they will be ignored. Setting this low will slightly reduce memory usage and may decrease shader compile times, particularly on web. For most uses, the default value is suitable, but consider lowering as much as possible on web export.",
            "setter": "",
            "name": "rendering/limits/rendering/max_renderable_lights",
            "getter": "",
            "type": "int"
          },
          {
            "default": "1024",
            "value": "Max number of reflection probes renderable in a frame. If more reflection probes than this number are used, they will be ignored. Setting this low will slightly reduce memory usage and may decrease shader compile times, particularly on web. For most uses, the default value is suitable, but consider lowering as much as possible on web export.",
            "setter": "",
            "name": "rendering/limits/rendering/max_renderable_reflections",
            "getter": "",
            "type": "int"
          },
          {
            "default": "3600",
            "value": "Shaders have a time variable that constantly increases. At some point, it needs to be rolled back to zero to avoid precision errors on shader animations. This setting specifies when (in seconds).",
            "setter": "",
            "name": "rendering/limits/time/time_rollover_secs",
            "getter": "",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], allocates the main framebuffer with high dynamic range. High dynamic range allows the use of [Color] values greater than 1.\n\t\t\t[b]Note:[/b] Only available on the GLES3 backend.",
            "setter": "",
            "name": "rendering/quality/depth/hdr",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Lower-end override for [member rendering/quality/depth/hdr] on mobile devices, due to performance concerns or driver support.",
            "setter": "",
            "name": "rendering/quality/depth/hdr.mobile",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "\"PowerVR,Mali,Adreno,Apple\"",
            "value": "Disables depth pre-pass for some GPU vendors (usually mobile), as their architecture already does this.",
            "setter": "",
            "name": "rendering/quality/depth_prepass/disable_for_vendors",
            "getter": "",
            "type": "String"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], performs a previous depth pass before rendering materials. This increases performance in scenes with high overdraw, when complex materials and lighting are used.",
            "setter": "",
            "name": "rendering/quality/depth_prepass/enable",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "4096",
            "value": "The directional shadow's size in pixels. Higher values will result in sharper shadows, at the cost of performance. The value will be rounded up to the nearest power of 2.",
            "setter": "",
            "name": "rendering/quality/directional_shadow/size",
            "getter": "",
            "type": "int"
          },
          {
            "default": "2048",
            "value": "Lower-end override for [member rendering/quality/directional_shadow/size] on mobile devices, due to performance concerns or driver support.",
            "setter": "",
            "name": "rendering/quality/directional_shadow/size.mobile",
            "getter": "",
            "type": "int"
          },
          {
            "default": "\"GLES3\"",
            "value": "The video driver to use (\"GLES2\" or \"GLES3\").\n\t\t\t[b]Note:[/b] The backend in use can be overridden at runtime via the [code]--video-driver[/code] command line argument, or by the [member rendering/quality/driver/fallback_to_gles2] option if the target system does not support GLES3 and falls back to GLES2. In such cases, this property is not updated, so use [method OS.get_current_video_driver] to query it at run-time.",
            "setter": "",
            "name": "rendering/quality/driver/driver_name",
            "getter": "",
            "type": "String"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], allows falling back to the GLES2 driver if the GLES3 driver is not supported.\n\t\t\t[b]Note:[/b] The two video drivers are not drop-in replacements for each other, so a game designed for GLES3 might not work properly when falling back to GLES2. In particular, some features of the GLES3 backend are not available in GLES2. Enabling this setting also means that both ETC and ETC2 VRAM-compressed textures will be exported on Android and iOS, increasing the data pack's size.",
            "setter": "",
            "name": "rendering/quality/driver/fallback_to_gles2",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "4",
            "value": "Maximum anisotropic filter level used for textures with anisotropy enabled. Higher values will result in sharper textures when viewed from oblique angles, at the cost of performance. Only power-of-two values are valid (2, 4, 8, 16).",
            "setter": "",
            "name": "rendering/quality/filters/anisotropic_filter_level",
            "getter": "",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Sets the number of MSAA samples to use. MSAA is used to reduce aliasing around the edges of polygons. A higher MSAA value results in smoother edges but can be significantly slower on some hardware.\n\t\t\t[b]Note:[/b] MSAA is not available on HTML5 export using the GLES2 backend.",
            "setter": "",
            "name": "rendering/quality/filters/msaa",
            "getter": "",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], uses a fast post-processing filter to make banding significantly less visible. In some cases, debanding may introduce a slightly noticeable dithering pattern. It's recommended to enable debanding only when actually needed since the dithering pattern will make lossless-compressed screenshots larger.\n\t\t\t[b]Note:[/b] Only available on the GLES3 backend. [member rendering/quality/depth/hdr] must also be [code]true[/code] for debanding to be effective.\n\t\t\t[b]Note:[/b] There are known issues with debanding breaking rendering on mobile platforms. Due to this, it is recommended to leave this option disabled when targeting mobile platforms.",
            "setter": "",
            "name": "rendering/quality/filters/use_debanding",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Enables FXAA in the root Viewport. FXAA is a popular screen-space antialiasing method, which is fast but will make the image look blurry, especially at lower resolutions. It can still work relatively well at large resolutions such as 1440p and 4K.",
            "setter": "",
            "name": "rendering/quality/filters/use_fxaa",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], uses nearest-neighbor mipmap filtering when using mipmaps (also called \"bilinear filtering\"), which will result in visible seams appearing between mipmap stages. This may increase performance in mobile as less memory bandwidth is used. If [code]false[/code], linear mipmap filtering (also called \"trilinear filtering\") is used.",
            "setter": "",
            "name": "rendering/quality/filters/use_nearest_mipmap_filter",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "2",
            "value": "Strategy used for framebuffer allocation. The simpler it is, the less resources it uses (but the less features it supports). If set to \"2D Without Sampling\" or \"3D Without Effects\", sample buffers will not be allocated. This means [code]SCREEN_TEXTURE[/code] and [code]DEPTH_TEXTURE[/code] will not be available in shaders and post-processing effects will not be available in the [Environment].",
            "setter": "",
            "name": "rendering/quality/intended_usage/framebuffer_allocation",
            "getter": "",
            "type": "int"
          },
          {
            "default": "3",
            "value": "Lower-end override for [member rendering/quality/intended_usage/framebuffer_allocation] on mobile devices, due to performance concerns or driver support.",
            "setter": "",
            "name": "rendering/quality/intended_usage/framebuffer_allocation.mobile",
            "getter": "",
            "type": "int"
          },
          {
            "default": "true",
            "value": "Enable usage of bicubic sampling in baked lightmaps. This results in smoother looking lighting at the expense of more bandwidth usage. On GLES2, changes to this setting will only be applied upon restarting the application.",
            "setter": "",
            "name": "rendering/quality/lightmapping/use_bicubic_sampling",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Lower-end override for [member rendering/quality/lightmapping/use_bicubic_sampling] on mobile devices, in order to reduce bandwidth usage.",
            "setter": "",
            "name": "rendering/quality/lightmapping/use_bicubic_sampling.mobile",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "2048",
            "value": "Size of the atlas used by reflection probes. A larger size can result in higher visual quality, while a smaller size will be faster and take up less memory.",
            "setter": "",
            "name": "rendering/quality/reflections/atlas_size",
            "getter": "",
            "type": "int"
          },
          {
            "default": "8",
            "value": "Number of subdivisions to use for the reflection atlas. A higher number lowers the quality of each atlas, but allows you to use more.",
            "setter": "",
            "name": "rendering/quality/reflections/atlas_subdiv",
            "getter": "",
            "type": "int"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], uses a high amount of samples to create blurred variants of reflection probes and panorama backgrounds (sky). Those blurred variants are used by rough materials.",
            "setter": "",
            "name": "rendering/quality/reflections/high_quality_ggx",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Lower-end override for [member rendering/quality/reflections/high_quality_ggx] on mobile devices, due to performance concerns or driver support.",
            "setter": "",
            "name": "rendering/quality/reflections/high_quality_ggx.mobile",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "128",
            "value": "Limits the size of the irradiance map which is normally determined by [member Sky.radiance_size]. A higher size results in a higher quality irradiance map similarly to [member rendering/quality/reflections/high_quality_ggx]. Use a higher value when using high-frequency HDRI maps, otherwise keep this as low as possible.\n\t\t\t[b]Note:[/b] Low and mid range hardware do not support complex irradiance maps well and may crash if this is set too high.",
            "setter": "",
            "name": "rendering/quality/reflections/irradiance_max_size",
            "getter": "",
            "type": "int"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], uses texture arrays instead of mipmaps for reflection probes and panorama backgrounds (sky). This reduces jitter noise on reflections, but costs more performance and memory.",
            "setter": "",
            "name": "rendering/quality/reflections/texture_array_reflections",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Lower-end override for [member rendering/quality/reflections/texture_array_reflections] on mobile devices, due to performance concerns or driver support.",
            "setter": "",
            "name": "rendering/quality/reflections/texture_array_reflections.mobile",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], uses faster but lower-quality Blinn model to generate blurred reflections instead of the GGX model.",
            "setter": "",
            "name": "rendering/quality/shading/force_blinn_over_ggx",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "Lower-end override for [member rendering/quality/shading/force_blinn_over_ggx] on mobile devices, due to performance concerns or driver support.",
            "setter": "",
            "name": "rendering/quality/shading/force_blinn_over_ggx.mobile",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], uses faster but lower-quality Lambert material lighting model instead of Burley.",
            "setter": "",
            "name": "rendering/quality/shading/force_lambert_over_burley",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "Lower-end override for [member rendering/quality/shading/force_lambert_over_burley] on mobile devices, due to performance concerns or driver support.",
            "setter": "",
            "name": "rendering/quality/shading/force_lambert_over_burley.mobile",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], forces vertex shading for all rendering. This can increase performance a lot, but also reduces quality immensely. Can be used to optimize performance on low-end mobile devices.",
            "setter": "",
            "name": "rendering/quality/shading/force_vertex_shading",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "Lower-end override for [member rendering/quality/shading/force_vertex_shading] on mobile devices, due to performance concerns or driver support.",
            "setter": "",
            "name": "rendering/quality/shading/force_vertex_shading.mobile",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "512",
            "value": "Size for cubemap into which the shadow is rendered before being copied into the shadow atlas. A higher number can result in higher resolution shadows when used with a higher [member rendering/quality/shadow_atlas/size]. Setting higher than a quarter of the [member rendering/quality/shadow_atlas/size] will not result in a perceptible increase in visual quality.",
            "setter": "",
            "name": "rendering/quality/shadow_atlas/cubemap_size",
            "getter": "",
            "type": "int"
          },
          {
            "default": "1",
            "value": "Subdivision quadrant size for shadow mapping. See shadow mapping documentation.",
            "setter": "",
            "name": "rendering/quality/shadow_atlas/quadrant_0_subdiv",
            "getter": "",
            "type": "int"
          },
          {
            "default": "2",
            "value": "Subdivision quadrant size for shadow mapping. See shadow mapping documentation.",
            "setter": "",
            "name": "rendering/quality/shadow_atlas/quadrant_1_subdiv",
            "getter": "",
            "type": "int"
          },
          {
            "default": "3",
            "value": "Subdivision quadrant size for shadow mapping. See shadow mapping documentation.",
            "setter": "",
            "name": "rendering/quality/shadow_atlas/quadrant_2_subdiv",
            "getter": "",
            "type": "int"
          },
          {
            "default": "4",
            "value": "Subdivision quadrant size for shadow mapping. See shadow mapping documentation.",
            "setter": "",
            "name": "rendering/quality/shadow_atlas/quadrant_3_subdiv",
            "getter": "",
            "type": "int"
          },
          {
            "default": "4096",
            "value": "Size for shadow atlas (used for OmniLights and SpotLights). See documentation.",
            "setter": "",
            "name": "rendering/quality/shadow_atlas/size",
            "getter": "",
            "type": "int"
          },
          {
            "default": "2048",
            "value": "Lower-end override for [member rendering/quality/shadow_atlas/size] on mobile devices, due to performance concerns or driver support.",
            "setter": "",
            "name": "rendering/quality/shadow_atlas/size.mobile",
            "getter": "",
            "type": "int"
          },
          {
            "default": "1",
            "value": "Shadow filter mode. Higher-quality settings result in smoother shadows that flicker less when moving. \"Disabled\" is the fastest option, but also has the lowest quality. \"PCF5\" is smoother but is also slower. \"PCF13\" is the smoothest option, but is also the slowest.\n\t\t\t[b]Note:[/b] When using the GLES2 backend, the \"PCF13\" option actually uses 16 samples to emulate linear filtering in the shader. This results in a shadow appearance similar to the one produced by the GLES3 backend.",
            "setter": "",
            "name": "rendering/quality/shadows/filter_mode",
            "getter": "",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Lower-end override for [member rendering/quality/shadows/filter_mode] on mobile devices, due to performance concerns or driver support.",
            "setter": "",
            "name": "rendering/quality/shadows/filter_mode.mobile",
            "getter": "",
            "type": "int"
          },
          {
            "default": "false",
            "value": "Forces [MeshInstance] to always perform skinning on the CPU (applies to both GLES2 and GLES3).\n\t\t\tSee also [member rendering/quality/skinning/software_skinning_fallback].",
            "setter": "",
            "name": "rendering/quality/skinning/force_software_skinning",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "Allows [MeshInstance] to perform skinning on the CPU when the hardware doesn't support the default GPU skinning process with GLES2.\n\t\t\tIf [code]false[/code], an alternative skinning process on the GPU is used in this case (slower in most cases).\n\t\t\tSee also [member rendering/quality/skinning/force_software_skinning].\n\t\t\t[b]Note:[/b] When the software skinning fallback is triggered, custom vertex shaders will behave in a different way, because the bone transform will be already applied to the modelview matrix.",
            "setter": "",
            "name": "rendering/quality/skinning/software_skinning_fallback",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "The rendering octree balance can be changed to favor smaller ([code]0[/code]), or larger ([code]1[/code]) branches.\n\t\t\tLarger branches can increase performance significantly in some projects.",
            "setter": "",
            "name": "rendering/quality/spatial_partitioning/render_tree_balance",
            "getter": "",
            "type": "float"
          },
          {
            "default": "true",
            "value": "Enables the use of bounding volume hierarchy instead of octree for rendering spatial partitioning. This may give better performance.",
            "setter": "",
            "name": "rendering/quality/spatial_partitioning/use_bvh",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Improves quality of subsurface scattering, but cost significantly increases.",
            "setter": "",
            "name": "rendering/quality/subsurface_scattering/follow_surface",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "1",
            "value": "Quality setting for subsurface scattering (samples taken).",
            "setter": "",
            "name": "rendering/quality/subsurface_scattering/quality",
            "getter": "",
            "type": "int"
          },
          {
            "default": "1.0",
            "value": "Max radius used for subsurface scattering samples.",
            "setter": "",
            "name": "rendering/quality/subsurface_scattering/scale",
            "getter": "",
            "type": "int"
          },
          {
            "default": "true",
            "value": "Weight subsurface scattering samples. Helps to avoid reading samples from unrelated parts of the screen.",
            "setter": "",
            "name": "rendering/quality/subsurface_scattering/weight_samples",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Use high-quality voxel cone tracing. This results in better-looking reflections, but is much more expensive on the GPU.",
            "setter": "",
            "name": "rendering/quality/voxel_cone_tracing/high_quality",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "1",
            "value": "Thread model for rendering. Rendering on a thread can vastly improve performance, but synchronizing to the main thread can cause a bit more jitter.",
            "setter": "",
            "name": "rendering/threads/thread_model",
            "getter": "",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the texture importer will import VRAM-compressed textures using the BPTC algorithm. This texture compression algorithm is only supported on desktop platforms, and only when using the GLES3 renderer.\n\t\t\t[b]Note:[/b] Changing this setting does [i]not[/i] impact textures that were already imported before. To make this setting apply to textures that were already imported, exit the editor, remove the [code].import/[/code] folder located inside the project folder then restart the editor.",
            "setter": "",
            "name": "rendering/vram_compression/import_bptc",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the texture importer will import VRAM-compressed textures using the Ericsson Texture Compression algorithm. This algorithm doesn't support alpha channels in textures.\n\t\t\t[b]Note:[/b] Changing this setting does [i]not[/i] impact textures that were already imported before. To make this setting apply to textures that were already imported, exit the editor, remove the [code].import/[/code] folder located inside the project folder then restart the editor.",
            "setter": "",
            "name": "rendering/vram_compression/import_etc",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the texture importer will import VRAM-compressed textures using the Ericsson Texture Compression 2 algorithm. This texture compression algorithm is only supported when using the GLES3 renderer.\n\t\t\t[b]Note:[/b] Changing this setting does [i]not[/i] impact textures that were already imported before. To make this setting apply to textures that were already imported, exit the editor, remove the [code].import/[/code] folder located inside the project folder then restart the editor.",
            "setter": "",
            "name": "rendering/vram_compression/import_etc2",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the texture importer will import VRAM-compressed textures using the PowerVR Texture Compression algorithm. This texture compression algorithm is only supported on iOS.\n\t\t\t[b]Note:[/b] Changing this setting does [i]not[/i] impact textures that were already imported before. To make this setting apply to textures that were already imported, exit the editor, remove the [code].import/[/code] folder located inside the project folder then restart the editor.",
            "setter": "",
            "name": "rendering/vram_compression/import_pvrtc",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the texture importer will import VRAM-compressed textures using the S3 Texture Compression algorithm. This algorithm is only supported on desktop platforms and consoles.\n\t\t\t[b]Note:[/b] Changing this setting does [i]not[/i] impact textures that were already imported before. To make this setting apply to textures that were already imported, exit the editor, remove the [code].import/[/code] folder located inside the project folder then restart the editor.",
            "setter": "",
            "name": "rendering/vram_compression/import_s3tc",
            "getter": "",
            "type": "bool"
          },
          {
            "default": "100",
            "value": "Cell size used for the 2D hash grid that [VisibilityNotifier2D] uses (in pixels).",
            "setter": "",
            "name": "world/2d/cell_size",
            "getter": "",
            "type": "int"
          }
        ]
      },
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "hint",
              "type": "Dictionary",
              "index": "0"
            },
            "name": "add_property_info",
            "description": "Adds a custom property info to a property. The dictionary must contain:\n\t\t\t\t- [code]name[/code]: [String] (the property's name)\n\t\t\t\t- [code]type[/code]: [int] (see [enum Variant.Type])\n\t\t\t\t- optionally [code]hint[/code]: [int] (see [enum PropertyHint]) and [code]hint_string[/code]: [String]\n\t\t\t\t[b]Example:[/b]\n\t\t\t\t[codeblock]\n\t\t\t\tProjectSettings.set(\"category/property_name\", 0)\n\n\t\t\t\tvar property_info = {\n\t\t\t\t    \"name\": \"category/property_name\",\n\t\t\t\t    \"type\": TYPE_INT,\n\t\t\t\t    \"hint\": PROPERTY_HINT_ENUM,\n\t\t\t\t    \"hint_string\": \"one,two,three\"\n\t\t\t\t}\n\n\t\t\t\tProjectSettings.add_property_info(property_info)\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "clear",
            "description": "Clears the whole configuration (not recommended, may break things)."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_order",
            "description": "Returns the order of a configuration value (influences when saved to the config file)."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_setting",
            "description": "Returns the value of a setting.\n\t\t\t\t[b]Example:[/b]\n\t\t\t\t[codeblock]\n\t\t\t\tprint(ProjectSettings.get_setting(\"application/config/name\"))\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "globalize_path",
            "description": "Returns the absolute, native OS path corresponding to the localized [code]path[/code] (starting with [code]res://[/code] or [code]user://[/code]). The returned path will vary depending on the operating system and user preferences. See [url=https://docs.godotengine.org/en/3.3/tutorials/io/data_paths.html]File paths in Godot projects[/url] to see what those paths convert to. See also [method localize_path].\n\t\t\t\t[b]Note:[/b] [method globalize_path] with [code]res://[/code] will not work in an exported project. Instead, prepend the executable's base directory to the path when running from an exported project:\n\t\t\t\t[codeblock]\n\t\t\t\tvar path = \"\"\n\t\t\t\tif OS.has_feature(\"editor\"):\n\t\t\t\t    # Running from an editor binary.\n\t\t\t\t    # `path` will contain the absolute path to `hello.txt` located in the project root.\n\t\t\t\t    path = ProjectSettings.globalize_path(\"res://hello.txt\")\n\t\t\t\telse:\n\t\t\t\t    # Running from an exported project.\n\t\t\t\t    # `path` will contain the absolute path to `hello.txt` next to the executable.\n\t\t\t\t    # This is *not* identical to using `ProjectSettings.globalize_path()` with a `res://` path,\n\t\t\t\t    # but is close enough in spirit.\n\t\t\t\t    path = OS.get_executable_path().get_base_dir().plus_file(\"hello.txt\")\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_setting",
            "description": "Returns [code]true[/code] if a configuration value is present."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "pack",
                "type": "String",
                "index": "0"
              },
              {
                "default": "true",
                "name": "replace_files",
                "type": "bool",
                "index": "1"
              },
              {
                "default": "0",
                "name": "offset",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "load_resource_pack",
            "description": "Loads the contents of the .pck or .zip file specified by [code]pack[/code] into the resource filesystem ([code]res://[/code]). Returns [code]true[/code] on success.\n\t\t\t\t[b]Note:[/b] If a file from [code]pack[/code] shares the same path as a file already in the resource filesystem, any attempts to load that file will use the file from [code]pack[/code] unless [code]replace_files[/code] is set to [code]false[/code].\n\t\t\t\t[b]Note:[/b] The optional [code]offset[/code] parameter can be used to specify the offset in bytes to the start of the resource pack. This is only supported for .pck files."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "localize_path",
            "description": "Returns the localized path (starting with [code]res://[/code]) corresponding to the absolute, native OS [code]path[/code]. See also [method globalize_path]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "property_can_revert",
            "description": "Returns [code]true[/code] if the specified property exists and its initial value differs from the current value."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "property_get_revert",
            "description": "Returns the specified property's initial value. Returns [code]null[/code] if the property does not exist."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "name": "save",
            "description": "Saves the configuration to the [code]project.godot[/code] file.\n\t\t\t\t[b]Note:[/b] This method is intended to be used by editor plugins, as modified [ProjectSettings] can't be loaded back in the running app. If you want to change project settings in exported projects, use [method save_custom] to save [code]override.cfg[/code] file."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "file",
              "type": "String",
              "index": "0"
            },
            "name": "save_custom",
            "description": "Saves the configuration to a custom file. The file extension must be [code].godot[/code] (to save in text-based [ConfigFile] format) or [code].binary[/code] (to save in binary format). You can also save [code]override.cfg[/code] file, which is also text, but can be used in exported projects unlike other formats."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "set_initial_value",
            "description": "Sets the specified property's initial value. This is the value the property reverts to."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "position",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set_order",
            "description": "Sets the order of a configuration value (influences when saved to the config file)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "set_setting",
            "description": "Sets the value of a setting.\n\t\t\t\t[b]Example:[/b]\n\t\t\t\t[codeblock]\n\t\t\t\tProjectSettings.set_setting(\"application/config/name\", \"Example\")\n\t\t\t\t[/codeblock]"
          }
        ]
      },
      "name": "ProjectSettings",
      "version": "3.3",
      "constants": {},
      "brief_description": "Contains global variables accessible from everywhere.",
      "description": "Contains global variables accessible from everywhere. Use [method get_setting], [method set_setting] or [method has_setting] to access them. Variables stored in [code]project.godot[/code] are also loaded into ProjectSettings, making this object very useful for reading custom game configuration options.\n\t\tWhen naming a Project Settings property, use the full path to the setting including the category. For example, [code]\"application/config/name\"[/code] for the project name. Category and property names can be viewed in the Project Settings dialog.\n\t\t[b]Feature tags:[/b] Project settings can be overridden for specific platforms and configurations (debug, release, ...) using [url=https://docs.godotengine.org/en/latest/tutorials/export/feature_tags.html]feature tags[/url].\n\t\t[b]Overriding:[/b] Any project setting can be overridden by creating a file named [code]override.cfg[/code] in the project's root directory. This can also be used in exported projects by placing this file in the same directory as the project binary. Overriding will still take the base project settings' [url=https://docs.godotengine.org/en/latest/tutorials/export/feature_tags.html]feature tags[/url] in account. Therefore, make sure to [i]also[/i] override the setting with the desired feature tags if you want them to override base project settings on all platforms and configurations."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0",
            "setter": "set_dispatch_mode",
            "name": "dispatch_mode",
            "getter": "get_dispatch_mode",
            "type": "int",
            "enum": "ProximityGroup.DispatchMode"
          },
          {
            "default": "Vector3( 1, 1, 1 )",
            "setter": "set_grid_radius",
            "name": "grid_radius",
            "getter": "get_grid_radius",
            "type": "Vector3"
          },
          {
            "default": "\"\"",
            "setter": "set_group_name",
            "name": "group_name",
            "getter": "get_group_name",
            "type": "String"
          }
        ]
      },
      "inherits": "Spatial",
      "methods": {
        "method": {
          "return": {
            "type": "void"
          },
          "argument": [
            {
              "name": "method",
              "type": "String",
              "index": "0"
            },
            {
              "name": "parameters",
              "type": "Variant",
              "index": "1"
            }
          ],
          "name": "broadcast",
          "description": {}
        }
      },
      "name": "ProximityGroup",
      "version": "3.3",
      "signals": {
        "signal": {
          "argument": [
            {
              "name": "method",
              "type": "String",
              "index": "0"
            },
            {
              "name": "parameters",
              "type": "Array",
              "index": "1"
            }
          ],
          "name": "broadcast",
          "description": {}
        }
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "MODE_PROXY",
            "enum": "DispatchMode"
          },
          {
            "value": "1",
            "name": "MODE_SIGNAL",
            "enum": "DispatchMode"
          }
        ]
      },
      "brief_description": "General-purpose proximity detection node.",
      "description": "General-purpose proximity detection node."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "setter": "set_base",
            "name": "base",
            "getter": "get_base",
            "type": "Texture"
          },
          {
            "default": "0",
            "setter": "set_flags",
            "override": "true",
            "name": "flags",
            "getter": "get_flags",
            "type": "int"
          }
        ]
      },
      "inherits": "Texture",
      "methods": {},
      "name": "ProxyTexture",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://godotengine.org/asset-library/asset/127",
            "title": "GUI in 3D Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/129",
            "title": "2D in 3D Demo"
          }
        ]
      },
      "members": {
        "member": {
          "default": "Vector2( 1, 1 )",
          "value": "Size on the X and Y axes.",
          "setter": "set_size",
          "name": "size",
          "getter": "get_size",
          "type": "Vector2"
        }
      },
      "inherits": "PrimitiveMesh",
      "methods": {},
      "name": "QuadMesh",
      "version": "3.3",
      "constants": {},
      "brief_description": "Class representing a square mesh.",
      "description": "Class representing a square [PrimitiveMesh]. This flat mesh does not have a thickness. By default, this mesh is aligned on the X and Y axes; this default rotation is more suited for use with billboarded materials. Unlike [PlaneMesh], this mesh doesn't provide subdivision options."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/3d/using_transforms.html#interpolating-with-quaternions",
            "title": "Using 3D transforms"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "1.0",
            "value": "W component of the quaternion (real part).\n\t\t\tQuaternion components should usually not be manipulated directly.",
            "setter": "",
            "name": "w",
            "getter": "",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "X component of the quaternion (imaginary [code]i[/code] axis part).\n\t\t\tQuaternion components should usually not be manipulated directly.",
            "setter": "",
            "name": "x",
            "getter": "",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Y component of the quaternion (imaginary [code]j[/code] axis part).\n\t\t\tQuaternion components should usually not be manipulated directly.",
            "setter": "",
            "name": "y",
            "getter": "",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Z component of the quaternion (imaginary [code]k[/code] axis part).\n\t\t\tQuaternion components should usually not be manipulated directly.",
            "setter": "",
            "name": "z",
            "getter": "",
            "type": "float"
          }
        ]
      },
      "methods": {
        "method": [
          {
            "return": {
              "type": "Quat"
            },
            "argument": {
              "name": "from",
              "type": "Basis",
              "index": "0"
            },
            "name": "Quat",
            "description": "Constructs a quaternion from the given [Basis]."
          },
          {
            "return": {
              "type": "Quat"
            },
            "argument": {
              "name": "euler",
              "type": "Vector3",
              "index": "0"
            },
            "name": "Quat",
            "description": "Constructs a quaternion that will perform a rotation specified by Euler angles (in the YXZ convention: when decomposing, first Z, then X, and Y last), given in the vector format as (X angle, Y angle, Z angle)."
          },
          {
            "return": {
              "type": "Quat"
            },
            "argument": [
              {
                "name": "axis",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "angle",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "Quat",
            "description": "Constructs a quaternion that will rotate around the given axis by the specified angle. The axis must be a normalized vector."
          },
          {
            "return": {
              "type": "Quat"
            },
            "argument": [
              {
                "name": "x",
                "type": "float",
                "index": "0"
              },
              {
                "name": "y",
                "type": "float",
                "index": "1"
              },
              {
                "name": "z",
                "type": "float",
                "index": "2"
              },
              {
                "name": "w",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "Quat",
            "description": "Constructs a quaternion defined by the given values."
          },
          {
            "return": {
              "type": "Quat"
            },
            "argument": [
              {
                "name": "b",
                "type": "Quat",
                "index": "0"
              },
              {
                "name": "pre_a",
                "type": "Quat",
                "index": "1"
              },
              {
                "name": "post_b",
                "type": "Quat",
                "index": "2"
              },
              {
                "name": "weight",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "cubic_slerp",
            "description": "Performs a cubic spherical interpolation between quaternions [code]pre_a[/code], this vector, [code]b[/code], and [code]post_b[/code], by the given amount [code]weight[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "b",
              "type": "Quat",
              "index": "0"
            },
            "name": "dot",
            "description": "Returns the dot product of two quaternions."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "name": "get_euler",
            "description": "Returns Euler angles (in the YXZ convention: when decomposing, first Z, then X, and Y last) corresponding to the rotation represented by the unit quaternion. Returned vector contains the rotation angles in the format (X angle, Y angle, Z angle)."
          },
          {
            "return": {
              "type": "Quat"
            },
            "name": "inverse",
            "description": "Returns the inverse of the quaternion."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "quat",
              "type": "Quat",
              "index": "0"
            },
            "name": "is_equal_approx",
            "description": "Returns [code]true[/code] if this quaternion and [code]quat[/code] are approximately equal, by running [method @GDScript.is_equal_approx] on each component."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_normalized",
            "description": "Returns whether the quaternion is normalized or not."
          },
          {
            "return": {
              "type": "float"
            },
            "name": "length",
            "description": "Returns the length of the quaternion."
          },
          {
            "return": {
              "type": "float"
            },
            "name": "length_squared",
            "description": "Returns the length of the quaternion, squared."
          },
          {
            "return": {
              "type": "Quat"
            },
            "name": "normalized",
            "description": "Returns a copy of the quaternion, normalized to unit length."
          },
          {
            "argument": [
              {
                "name": "axis",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "angle",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_axis_angle",
            "description": "Sets the quaternion to a rotation which rotates around axis by the specified angle, in radians. The axis must be a normalized vector."
          },
          {
            "argument": {
              "name": "euler",
              "type": "Vector3",
              "index": "0"
            },
            "name": "set_euler",
            "description": "Sets the quaternion to a rotation specified by Euler angles (in the YXZ convention: when decomposing, first Z, then X, and Y last), given in the vector format as (X angle, Y angle, Z angle)."
          },
          {
            "return": {
              "type": "Quat"
            },
            "argument": [
              {
                "name": "to",
                "type": "Quat",
                "index": "0"
              },
              {
                "name": "weight",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "slerp",
            "description": "Returns the result of the spherical linear interpolation between this quaternion and [code]to[/code] by amount [code]weight[/code].\n\t\t\t\t[b]Note:[/b] Both quaternions must be normalized."
          },
          {
            "return": {
              "type": "Quat"
            },
            "argument": [
              {
                "name": "to",
                "type": "Quat",
                "index": "0"
              },
              {
                "name": "weight",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "slerpni",
            "description": "Returns the result of the spherical linear interpolation between this quaternion and [code]to[/code] by amount [code]weight[/code], but without checking if the rotation path is not bigger than 90 degrees."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "v",
              "type": "Vector3",
              "index": "0"
            },
            "name": "xform",
            "description": "Returns a vector transformed (multiplied) by this quaternion."
          }
        ]
      },
      "name": "Quat",
      "version": "3.3",
      "constants": {
        "constant": {
          "value": "Quat( 0, 0, 0, 1 )",
          "name": "IDENTITY"
        }
      },
      "brief_description": "Quaternion.",
      "description": "A unit quaternion used for representing 3D rotations. Quaternions need to be normalized to be used for rotation.\n\t\tIt is similar to Basis, which implements matrix representation of rotations, and can be parametrized using both an axis-angle pair or Euler angles. Basis stores rotation, scale, and shearing, while Quat only stores rotation.\n\t\tDue to its compactness and the way it is stored in memory, certain operations (obtaining axis-angle and performing SLERP, in particular) are more efficient and robust against floating-point errors."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://docs.godotengine.org/en/3.3/tutorials/math/random_number_generation.html",
          "title": "Random number generation"
        }
      },
      "members": {
        "member": [
          {
            "default": "0",
            "value": "Initializes the random number generator state based on the given seed value. A given seed will give a reproducible sequence of pseudo-random numbers.\n\t\t\t[b]Note:[/b] The RNG does not have an avalanche effect, and can output similar random streams given similar seeds. Consider using a hash function to improve your seed quality if they're sourced externally.\n\t\t\t[b]Note:[/b] Setting this property produces a side effect of changing the internal [member state], so make sure to initialize the seed [i]before[/i] modifying the [member state]:\n\t\t\t[codeblock]\n\t\t\tvar rng = RandomNumberGenerator.new()\n\t\t\trng.seed = hash(\"Godot\")\n\t\t\trng.state = 100 # Restore to some previously saved state.\n\t\t\t[/codeblock]\n\t\t\t[b]Warning:[/b] the getter of this property returns the previous [member state], and not the initial seed value, which is going to be fixed in Godot 4.0.",
            "setter": "set_seed",
            "name": "seed",
            "getter": "get_seed",
            "type": "int"
          },
          {
            "default": "0",
            "value": "The current state of the random number generator. Save and restore this property to restore the generator to a previous state:\n\t\t\t[codeblock]\n\t\t\tvar rng = RandomNumberGenerator.new()\n\t\t\tprint(rng.randf())\n\t\t\tvar saved_state = rng.state # Store current state.\n\t\t\tprint(rng.randf()) # Advance internal state.\n\t\t\trng.state = saved_state # Restore the state.\n\t\t\tprint(rng.randf()) # Prints the same value as in previous.\n\t\t\t[/codeblock]\n\t\t\t[b]Note:[/b] Do not set state to arbitrary values, since the random number generator requires the state to have certain qualities to behave properly. It should only be set to values that came from the state property itself. To initialize the random number generator with arbitrary input, use [member seed] instead.",
            "setter": "set_state",
            "name": "state",
            "getter": "get_state",
            "type": "int"
          }
        ]
      },
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "float"
            },
            "name": "randf",
            "description": "Generates a pseudo-random float between [code]0.0[/code] and [code]1.0[/code] (inclusive)."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "from",
                "type": "float",
                "index": "0"
              },
              {
                "name": "to",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "randf_range",
            "description": "Generates a pseudo-random float between [code]from[/code] and [code]to[/code] (inclusive)."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "default": "0.0",
                "name": "mean",
                "type": "float",
                "index": "0"
              },
              {
                "default": "1.0",
                "name": "deviation",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "randfn",
            "description": "Generates a [url=https://en.wikipedia.org/wiki/Normal_distribution]normally-distributed[/url] pseudo-random number, using Box-Muller transform with the specified [code]mean[/code] and a standard [code]deviation[/code]. This is also called Gaussian distribution."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "randi",
            "description": "Generates a pseudo-random 32-bit unsigned integer between [code]0[/code] and [code]4294967295[/code] (inclusive)."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "from",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "randi_range",
            "description": "Generates a pseudo-random 32-bit signed integer between [code]from[/code] and [code]to[/code] (inclusive)."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "randomize",
            "description": "Setups a time-based seed to generator."
          }
        ]
      },
      "name": "RandomNumberGenerator",
      "version": "3.3",
      "constants": {},
      "brief_description": "A class for generating pseudo-random numbers.",
      "description": "RandomNumberGenerator is a class for generating pseudo-random numbers. It currently uses [url=http://www.pcg-random.org/]PCG32[/url].\n\t\t[b]Note:[/b] The underlying algorithm is an implementation detail. As a result, it should not be depended upon for reproducible random streams across Godot versions.\n\t\tTo generate a random float number (within a given range) based on a time-dependant seed:\n\t\t[codeblock]\n\t\tvar rng = RandomNumberGenerator.new()\n\t\tfunc _ready():\n\t\t    rng.randomize()\n\t\t    var my_random_number = rng.randf_range(-10.0, 10.0)\n\t\t[/codeblock]\n\t\t[b]Note:[/b] The default values of [member seed] and [member state] properties are pseudo-random, and changes when calling [method randomize]. The [code]0[/code] value documented here is a placeholder, and not the actual default seed."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], [member value] may be greater than [member max_value].",
            "setter": "set_allow_greater",
            "name": "allow_greater",
            "getter": "is_greater_allowed",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], [member value] may be less than [member min_value].",
            "setter": "set_allow_lesser",
            "name": "allow_lesser",
            "getter": "is_lesser_allowed",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], and [code]min_value[/code] is greater than 0, [code]value[/code] will be represented exponentially rather than linearly.",
            "setter": "set_exp_ratio",
            "name": "exp_edit",
            "getter": "is_ratio_exp",
            "type": "bool"
          },
          {
            "default": "100.0",
            "value": "Maximum value. Range is clamped if [code]value[/code] is greater than [code]max_value[/code].",
            "setter": "set_max",
            "name": "max_value",
            "getter": "get_max",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Minimum value. Range is clamped if [code]value[/code] is less than [code]min_value[/code].",
            "setter": "set_min",
            "name": "min_value",
            "getter": "get_min",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Page size. Used mainly for [ScrollBar]. ScrollBar's length is its size multiplied by [code]page[/code] over the difference between [code]min_value[/code] and [code]max_value[/code].",
            "setter": "set_page",
            "name": "page",
            "getter": "get_page",
            "type": "float"
          },
          {
            "value": "The value mapped between 0 and 1.",
            "setter": "set_as_ratio",
            "name": "ratio",
            "getter": "get_as_ratio",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], [code]value[/code] will always be rounded to the nearest integer.",
            "setter": "set_use_rounded_values",
            "name": "rounded",
            "getter": "is_using_rounded_values",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "If greater than 0, [code]value[/code] will always be rounded to a multiple of [code]step[/code]. If [code]rounded[/code] is also [code]true[/code], [code]value[/code] will first be rounded to a multiple of [code]step[/code] then rounded to the nearest integer.",
            "setter": "set_step",
            "name": "step",
            "getter": "get_step",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Range's current value.",
            "setter": "set_value",
            "name": "value",
            "getter": "get_value",
            "type": "float"
          }
        ]
      },
      "inherits": "Control",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "with",
              "type": "Node",
              "index": "0"
            },
            "name": "share",
            "description": "Binds two ranges together along with any ranges previously grouped with either of them. When any of range's member variables change, it will share the new value with all other ranges in its group."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "unshare",
            "description": "Stops range from sharing its member variables with any other."
          }
        ]
      },
      "name": "Range",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "changed",
            "description": "Emitted when [member min_value], [member max_value], [member page], or [member step] change."
          },
          {
            "argument": {
              "name": "value",
              "type": "float",
              "index": "0"
            },
            "name": "value_changed",
            "description": "Emitted when [member value] changes."
          }
        ]
      },
      "constants": {},
      "brief_description": "Abstract base class for range-based controls.",
      "description": "Range is a base class for [Control] nodes that change a floating-point [i]value[/i] between a [i]minimum[/i] and a [i]maximum[/i], using [i]step[/i] and [i]page[/i], for example a [ScrollBar]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/physics/ray-casting.html"
      },
      "members": {
        "member": [
          {
            "default": "Vector2( 0, 50 )",
            "value": "The ray's destination point, relative to the RayCast's [code]position[/code].",
            "setter": "set_cast_to",
            "name": "cast_to",
            "getter": "get_cast_to",
            "type": "Vector2"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], collision with [Area2D]s will be reported.",
            "setter": "set_collide_with_areas",
            "name": "collide_with_areas",
            "getter": "is_collide_with_areas_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], collision with [PhysicsBody2D]s will be reported.",
            "setter": "set_collide_with_bodies",
            "name": "collide_with_bodies",
            "getter": "is_collide_with_bodies_enabled",
            "type": "bool"
          },
          {
            "default": "1",
            "value": "The ray's collision mask. Only objects in at least one collision layer enabled in the mask will be detected. See [url=https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.",
            "setter": "set_collision_mask",
            "name": "collision_mask",
            "getter": "get_collision_mask",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], collisions will be reported.",
            "setter": "set_enabled",
            "name": "enabled",
            "getter": "is_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the parent node will be excluded from collision detection.",
            "setter": "set_exclude_parent_body",
            "name": "exclude_parent",
            "getter": "get_exclude_parent_body",
            "type": "bool"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "node",
              "type": "Object",
              "index": "0"
            },
            "name": "add_exception",
            "description": "Adds a collision exception so the ray does not report collisions with the specified node."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "rid",
              "type": "RID",
              "index": "0"
            },
            "name": "add_exception_rid",
            "description": "Adds a collision exception so the ray does not report collisions with the specified [RID]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_exceptions",
            "description": "Removes all collision exceptions for this ray."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "force_raycast_update",
            "description": "Updates the collision information for the ray. Use this method to update the collision information immediately instead of waiting for the next [code]_physics_process[/code] call, for example if the ray or its parent has changed state.\n\t\t\t\t[b]Note:[/b] [code]enabled[/code] is not required for this to work."
          },
          {
            "return": {
              "type": "Object"
            },
            "qualifiers": "const",
            "name": "get_collider",
            "description": "Returns the first object that the ray intersects, or [code]null[/code] if no object is intersecting the ray (i.e. [method is_colliding] returns [code]false[/code])."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_collider_shape",
            "description": "Returns the shape ID of the first object that the ray intersects, or [code]0[/code] if no object is intersecting the ray (i.e. [method is_colliding] returns [code]false[/code])."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "bit",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_collision_mask_bit",
            "description": "Returns an individual bit on the collision mask."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_collision_normal",
            "description": "Returns the normal of the intersecting object's shape at the collision point."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_collision_point",
            "description": "Returns the collision point at which the ray intersects the closest object.\n\t\t\t\t[b]Note:[/b] this point is in the [b]global[/b] coordinate system."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_colliding",
            "description": "Returns whether any object is intersecting with the ray's vector (considering the vector length)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "node",
              "type": "Object",
              "index": "0"
            },
            "name": "remove_exception",
            "description": "Removes a collision exception so the ray does report collisions with the specified node."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "rid",
              "type": "RID",
              "index": "0"
            },
            "name": "remove_exception_rid",
            "description": "Removes a collision exception so the ray does report collisions with the specified [RID]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bit",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_collision_mask_bit",
            "description": "Sets or clears individual bits on the collision mask. This makes selecting the areas scanned easier."
          }
        ]
      },
      "name": "RayCast2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Query the closest object intersecting a ray.",
      "description": "A RayCast represents a line from its origin to its destination position, [code]cast_to[/code]. It is used to query the 2D space in order to find the closest object along the path of the ray.\n\t\tRayCast2D can ignore some objects by adding them to the exception list via [code]add_exception[/code], by setting proper filtering with collision layers, or by filtering object types with type masks.\n\t\tRayCast2D can be configured to report collisions with [Area2D]s ([member collide_with_areas]) and/or [PhysicsBody2D]s ([member collide_with_bodies]).\n\t\tOnly enabled raycasts will be able to query the space and report collisions.\n\t\tRayCast2D calculates intersection every physics frame (see [Node]), and the result is cached so it can be used later until the next frame. If multiple queries are required between physics frames (or during the same frame) use [method force_raycast_update] after adjusting the raycast."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/physics/ray-casting.html",
            "title": "Ray-casting"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/676",
            "title": "3D Voxel Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "Vector3( 0, -1, 0 )",
            "value": "The ray's destination point, relative to the RayCast's [code]position[/code].",
            "setter": "set_cast_to",
            "name": "cast_to",
            "getter": "get_cast_to",
            "type": "Vector3"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], collision with [Area]s will be reported.",
            "setter": "set_collide_with_areas",
            "name": "collide_with_areas",
            "getter": "is_collide_with_areas_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], collision with [PhysicsBody]s will be reported.",
            "setter": "set_collide_with_bodies",
            "name": "collide_with_bodies",
            "getter": "is_collide_with_bodies_enabled",
            "type": "bool"
          },
          {
            "default": "1",
            "value": "The ray's collision mask. Only objects in at least one collision layer enabled in the mask will be detected. See [url=https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.",
            "setter": "set_collision_mask",
            "name": "collision_mask",
            "getter": "get_collision_mask",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], collisions will be reported.",
            "setter": "set_enabled",
            "name": "enabled",
            "getter": "is_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], collisions will be ignored for this RayCast's immediate parent.",
            "setter": "set_exclude_parent_body",
            "name": "exclude_parent",
            "getter": "get_exclude_parent_body",
            "type": "bool"
          }
        ]
      },
      "inherits": "Spatial",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "node",
              "type": "Object",
              "index": "0"
            },
            "name": "add_exception",
            "description": "Adds a collision exception so the ray does not report collisions with the specified node."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "rid",
              "type": "RID",
              "index": "0"
            },
            "name": "add_exception_rid",
            "description": "Adds a collision exception so the ray does not report collisions with the specified [RID]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_exceptions",
            "description": "Removes all collision exceptions for this ray."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "force_raycast_update",
            "description": "Updates the collision information for the ray.\n\t\t\t\tUse this method to update the collision information immediately instead of waiting for the next [code]_physics_process[/code] call, for example if the ray or its parent has changed state.\n\t\t\t\t[b]Note:[/b] [code]enabled[/code] is not required for this to work."
          },
          {
            "return": {
              "type": "Object"
            },
            "qualifiers": "const",
            "name": "get_collider",
            "description": "Returns the first object that the ray intersects, or [code]null[/code] if no object is intersecting the ray (i.e. [method is_colliding] returns [code]false[/code])."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_collider_shape",
            "description": "Returns the shape ID of the first object that the ray intersects, or [code]0[/code] if no object is intersecting the ray (i.e. [method is_colliding] returns [code]false[/code])."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "bit",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_collision_mask_bit",
            "description": "Returns [code]true[/code] if the bit index passed is turned on.\n\t\t\t\t[b]Note:[/b] Bit indices range from 0-19."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "qualifiers": "const",
            "name": "get_collision_normal",
            "description": "Returns the normal of the intersecting object's shape at the collision point."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "qualifiers": "const",
            "name": "get_collision_point",
            "description": "Returns the collision point at which the ray intersects the closest object.\n\t\t\t\t[b]Note:[/b] This point is in the [b]global[/b] coordinate system."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_colliding",
            "description": "Returns whether any object is intersecting with the ray's vector (considering the vector length)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "node",
              "type": "Object",
              "index": "0"
            },
            "name": "remove_exception",
            "description": "Removes a collision exception so the ray does report collisions with the specified node."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "rid",
              "type": "RID",
              "index": "0"
            },
            "name": "remove_exception_rid",
            "description": "Removes a collision exception so the ray does report collisions with the specified [RID]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bit",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_collision_mask_bit",
            "description": "Sets the bit index passed to the [code]value[/code] passed.\n\t\t\t\t[b]Note:[/b] Bit indexes range from 0-19."
          }
        ]
      },
      "name": "RayCast",
      "version": "3.3",
      "constants": {},
      "brief_description": "Query the closest object intersecting a ray.",
      "description": "A RayCast represents a line from its origin to its destination position, [code]cast_to[/code]. It is used to query the 3D space in order to find the closest object along the path of the ray.\n\t\tRayCast can ignore some objects by adding them to the exception list via [code]add_exception[/code] or by setting proper filtering with collision layers and masks.\n\t\tRayCast can be configured to report collisions with [Area]s ([member collide_with_areas]) and/or [PhysicsBody]s ([member collide_with_bodies]).\n\t\tOnly enabled raycasts will be able to query the space and report collisions.\n\t\tRayCast calculates intersection every physics frame (see [Node]), and the result is cached so it can be used later until the next frame. If multiple queries are required between physics frames (or during the same frame), use [method force_raycast_update] after adjusting the raycast."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "20.0",
            "value": "The ray's length.",
            "setter": "set_length",
            "name": "length",
            "getter": "get_length",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], allow the shape to return the correct normal.",
            "setter": "set_slips_on_slope",
            "name": "slips_on_slope",
            "getter": "get_slips_on_slope",
            "type": "bool"
          }
        ]
      },
      "inherits": "Shape2D",
      "methods": {},
      "name": "RayShape2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Ray shape for 2D collisions.",
      "description": "Ray shape for 2D collisions. A ray is not really a collision body; instead, it tries to separate itself from whatever is touching its far endpoint. It's often useful for characters."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "1.0",
            "value": "The ray's length.",
            "setter": "set_length",
            "name": "length",
            "getter": "get_length",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], allow the shape to return the correct normal.",
            "setter": "set_slips_on_slope",
            "name": "slips_on_slope",
            "getter": "get_slips_on_slope",
            "type": "bool"
          }
        ]
      },
      "inherits": "Shape",
      "methods": {},
      "name": "RayShape",
      "version": "3.3",
      "constants": {},
      "brief_description": "Ray shape for 3D collisions.",
      "description": "Ray shape for 3D collisions, which can be set into a [PhysicsBody] or [Area]. A ray is not really a collision body; instead, it tries to separate itself from whatever is touching its far endpoint. It's often useful for characters."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/math/index.html",
            "title": "Math tutorial index"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/math/vector_math.html",
            "title": "Vector math"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/math/vectors_advanced.html",
            "title": "Advanced vector math"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "Vector2( 0, 0 )",
            "value": "Ending corner. This is calculated as [code]position + size[/code]. Setting this value will change the size.",
            "setter": "",
            "name": "end",
            "getter": "",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "Beginning corner. Typically has values lower than [member end].",
            "setter": "",
            "name": "position",
            "getter": "",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "Size from [member position] to [member end]. Typically, all components are positive.\n\t\t\tIf the size is negative, you can use [method abs] to fix it.",
            "setter": "",
            "name": "size",
            "getter": "",
            "type": "Vector2"
          }
        ]
      },
      "methods": {
        "method": [
          {
            "return": {
              "type": "Rect2"
            },
            "argument": [
              {
                "name": "position",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "size",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "Rect2",
            "description": "Constructs a [Rect2] by position and size."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "argument": [
              {
                "name": "x",
                "type": "float",
                "index": "0"
              },
              {
                "name": "y",
                "type": "float",
                "index": "1"
              },
              {
                "name": "width",
                "type": "float",
                "index": "2"
              },
              {
                "name": "height",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "Rect2",
            "description": "Constructs a [Rect2] by x, y, width, and height."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "name": "abs",
            "description": "Returns a [Rect2] with equivalent position and area, modified so that the top-left corner is the origin and [code]width[/code] and [code]height[/code] are positive."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "argument": {
              "name": "b",
              "type": "Rect2",
              "index": "0"
            },
            "name": "clip",
            "description": "Returns the intersection of this [Rect2] and b."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "b",
              "type": "Rect2",
              "index": "0"
            },
            "name": "encloses",
            "description": "Returns [code]true[/code] if this [Rect2] completely encloses another one."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "argument": {
              "name": "to",
              "type": "Vector2",
              "index": "0"
            },
            "name": "expand",
            "description": "Returns this [Rect2] expanded to include a given point."
          },
          {
            "return": {
              "type": "float"
            },
            "name": "get_area",
            "description": "Returns the area of the [Rect2]."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "argument": {
              "name": "by",
              "type": "float",
              "index": "0"
            },
            "name": "grow",
            "description": "Returns a copy of the [Rect2] grown a given amount of units towards all the sides."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "argument": [
              {
                "name": "left",
                "type": "float",
                "index": "0"
              },
              {
                "name": "top",
                "type": "float",
                "index": "1"
              },
              {
                "name": "right",
                "type": "float",
                "index": "2"
              },
              {
                "name": " bottom",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "grow_individual",
            "description": "Returns a copy of the [Rect2] grown a given amount of units towards each direction individually."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "argument": [
              {
                "name": "margin",
                "type": "int",
                "index": "0"
              },
              {
                "name": "by",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "grow_margin",
            "description": "Returns a copy of the [Rect2] grown a given amount of units towards the [enum Margin] direction."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "has_no_area",
            "description": "Returns [code]true[/code] if the [Rect2] is flat or empty."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "point",
              "type": "Vector2",
              "index": "0"
            },
            "name": "has_point",
            "description": "Returns [code]true[/code] if the [Rect2] contains a point."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "b",
                "type": "Rect2",
                "index": "0"
              },
              {
                "default": "false",
                "name": "include_borders",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "intersects",
            "description": "Returns [code]true[/code] if the [Rect2] overlaps with [code]b[/code] (i.e. they have at least one point in common).\n\t\t\t\tIf [code]include_borders[/code] is [code]true[/code], they will also be considered overlapping if their borders touch, even without intersection."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "rect",
              "type": "Rect2",
              "index": "0"
            },
            "name": "is_equal_approx",
            "description": "Returns [code]true[/code] if this [Rect2] and [code]rect[/code] are approximately equal, by calling [code]is_equal_approx[/code] on each component."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "argument": {
              "name": "b",
              "type": "Rect2",
              "index": "0"
            },
            "name": "merge",
            "description": "Returns a larger [Rect2] that contains this [Rect2] and [code]b[/code]."
          }
        ]
      },
      "name": "Rect2",
      "version": "3.3",
      "constants": {},
      "brief_description": "2D axis-aligned bounding box.",
      "description": "[Rect2] consists of a position, a size, and several utility functions. It is typically used for fast overlap tests.\n\t\tIt uses floating-point coordinates.\n\t\tThe 3D counterpart to [Rect2] is [AABB]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://godotengine.org/asset-library/asset/121",
            "title": "2D Pong Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/113",
            "title": "2D Kinematic Character Demo"
          }
        ]
      },
      "members": {
        "member": {
          "default": "Vector2( 10, 10 )",
          "value": "The rectangle's half extents. The width and height of this shape is twice the half extents.",
          "setter": "set_extents",
          "name": "extents",
          "getter": "get_extents",
          "type": "Vector2"
        }
      },
      "inherits": "Shape2D",
      "methods": {},
      "name": "RectangleShape2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Rectangle shape for 2D collisions.",
      "description": "Rectangle shape for 2D collisions. This shape is useful for modeling box-like 2D objects."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "Color( 1, 0, 0, 1 )",
            "value": "Sets the border [Color] of the [ReferenceRect].",
            "setter": "set_border_color",
            "name": "border_color",
            "getter": "get_border_color",
            "type": "Color"
          },
          {
            "default": "1.0",
            "value": "Sets the border width of the [ReferenceRect]. The border grows both inwards and outwards with respect to the rectangle box.",
            "setter": "set_border_width",
            "name": "border_width",
            "getter": "get_border_width",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If set to [code]true[/code], the [ReferenceRect] will only be visible while in editor. Otherwise, [ReferenceRect] will be visible in game.",
            "setter": "set_editor_only",
            "name": "editor_only",
            "getter": "get_editor_only",
            "type": "bool"
          }
        ]
      },
      "inherits": "Control",
      "methods": {},
      "name": "ReferenceRect",
      "version": "3.3",
      "constants": {},
      "brief_description": "Reference frame for GUI.",
      "description": "A rectangle box that displays only a [member border_color] border color around its rectangle. [ReferenceRect] has no fill [Color]. If you need to display a rectangle filled with a solid color, consider using [ColorRect] instead."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://docs.godotengine.org/en/3.3/getting_started/workflow/best_practices/node_alternatives.html",
          "title": "When and how to avoid using nodes for everything"
        }
      },
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "name": "init_ref",
            "description": "Initializes the internal reference counter. Use this only if you really know what you are doing.\n\t\t\t\tReturns whether the initialization was successful."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "reference",
            "description": "Increments the internal reference counter. Use this only if you really know what you are doing.\n\t\t\t\tReturns [code]true[/code] if the increment was successful, [code]false[/code] otherwise."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "unreference",
            "description": "Decrements the internal reference counter. Use this only if you really know what you are doing.\n\t\t\t\tReturns [code]true[/code] if the decrement was successful, [code]false[/code] otherwise."
          }
        ]
      },
      "name": "Reference",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base class for reference-counted objects.",
      "description": "Base class for any object that keeps a reference count. [Resource] and many other helper objects inherit this class.\n\t\tUnlike other [Object] types, References keep an internal reference counter so that they are automatically released when no longer in use, and only then. References therefore do not need to be freed manually with [method Object.free].\n\t\tIn the vast majority of use cases, instantiating and using [Reference]-derived types is all you need to do. The methods provided in this class are only for advanced users, and can cause issues if misused.\n\t\t[b]Note:[/b] In C#, references will not be freed instantly after they are no longer in use. Instead, garbage collection will run periodically and will free references that are no longer in use. This means that unused references will linger on for a while before being removed."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/3d/reflection_probes.html"
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], enables box projection. This makes reflections look more correct in rectangle-shaped rooms by offsetting the reflection center depending on the camera's location.",
            "setter": "set_enable_box_projection",
            "name": "box_projection",
            "getter": "is_box_projection_enabled",
            "type": "bool"
          },
          {
            "default": "1048575",
            "value": "Sets the cull mask which determines what objects are drawn by this probe. Every [VisualInstance] with a layer included in this cull mask will be rendered by the probe. It is best to only include large objects which are likely to take up a lot of space in the reflection in order to save on rendering cost.",
            "setter": "set_cull_mask",
            "name": "cull_mask",
            "getter": "get_cull_mask",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], computes shadows in the reflection probe. This makes the reflection probe slower to render; you may want to disable this if using the [constant UPDATE_ALWAYS] [member update_mode].",
            "setter": "set_enable_shadows",
            "name": "enable_shadows",
            "getter": "are_shadows_enabled",
            "type": "bool"
          },
          {
            "default": "Vector3( 1, 1, 1 )",
            "value": "The size of the reflection probe. The larger the extents the more space covered by the probe which will lower the perceived resolution. It is best to keep the extents only as large as you need them.",
            "setter": "set_extents",
            "name": "extents",
            "getter": "get_extents",
            "type": "Vector3"
          },
          {
            "default": "1.0",
            "value": "Defines the reflection intensity. Intensity modulates the strength of the reflection.",
            "setter": "set_intensity",
            "name": "intensity",
            "getter": "get_intensity",
            "type": "float"
          },
          {
            "default": "Color( 0, 0, 0, 1 )",
            "value": "Sets the ambient light color to be used when this probe is set to [member interior_enable].",
            "setter": "set_interior_ambient",
            "name": "interior_ambient_color",
            "getter": "get_interior_ambient",
            "type": "Color"
          },
          {
            "default": "0.0",
            "value": "Sets the contribution value for how much the reflection affects the ambient light for this reflection probe when set to [member interior_enable]. Useful so that ambient light matches the color of the room.",
            "setter": "set_interior_ambient_probe_contribution",
            "name": "interior_ambient_contrib",
            "getter": "get_interior_ambient_probe_contribution",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Sets the energy multiplier for this reflection probe's ambient light contribution when set to [member interior_enable].",
            "setter": "set_interior_ambient_energy",
            "name": "interior_ambient_energy",
            "getter": "get_interior_ambient_energy",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], reflections will ignore sky contribution. Ambient lighting is then controlled by the [code]interior_ambient_*[/code] properties.",
            "setter": "set_as_interior",
            "name": "interior_enable",
            "getter": "is_set_as_interior",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "Sets the max distance away from the probe an object can be before it is culled.",
            "setter": "set_max_distance",
            "name": "max_distance",
            "getter": "get_max_distance",
            "type": "float"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "Sets the origin offset to be used when this reflection probe is in box project mode.",
            "setter": "set_origin_offset",
            "name": "origin_offset",
            "getter": "get_origin_offset",
            "type": "Vector3"
          },
          {
            "default": "0",
            "value": "Sets how frequently the probe is updated. Can be [constant UPDATE_ONCE] or [constant UPDATE_ALWAYS].",
            "setter": "set_update_mode",
            "name": "update_mode",
            "getter": "get_update_mode",
            "type": "int",
            "enum": "ReflectionProbe.UpdateMode"
          }
        ]
      },
      "inherits": "VisualInstance",
      "methods": {},
      "name": "ReflectionProbe",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "UPDATE_ONCE",
            "enum": "UpdateMode"
          },
          {
            "value": "1",
            "name": "UPDATE_ALWAYS",
            "enum": "UpdateMode"
          }
        ]
      },
      "brief_description": "Captures its surroundings to create reflections.",
      "description": "Capture its surroundings as a dual paraboloid image, and stores versions of it with increasing levels of blur to simulate different material roughnesses.\n\t\tThe [ReflectionProbe] is used to create high-quality reflections at the cost of performance. It can be combined with [GIProbe]s and Screen Space Reflections to achieve high quality reflections. [ReflectionProbe]s render all objects within their [member cull_mask], so updating them can be quite expensive. It is best to update them once with the important static objects and then leave them.\n\t\tNote: By default Godot will only render 16 reflection probes. If you need more, increase the number of atlas subdivisions. This setting can be found in [member ProjectSettings.rendering/quality/reflections/atlas_subdiv]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "NodePath(\"\")",
            "value": "The [NodePath] to the remote node, relative to the RemoteTransform2D's position in the scene.",
            "setter": "set_remote_node",
            "name": "remote_path",
            "getter": "get_remote_node",
            "type": "NodePath"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the remote node's position is updated.",
            "setter": "set_update_position",
            "name": "update_position",
            "getter": "get_update_position",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the remote node's rotation is updated.",
            "setter": "set_update_rotation",
            "name": "update_rotation",
            "getter": "get_update_rotation",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the remote node's scale is updated.",
            "setter": "set_update_scale",
            "name": "update_scale",
            "getter": "get_update_scale",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], global coordinates are used. If [code]false[/code], local coordinates are used.",
            "setter": "set_use_global_coordinates",
            "name": "use_global_coordinates",
            "getter": "get_use_global_coordinates",
            "type": "bool"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {
        "method": {
          "return": {
            "type": "void"
          },
          "name": "force_update_cache",
          "description": "[RemoteTransform2D] caches the remote node. It may not notice if the remote node disappears; [method force_update_cache] forces it to update the cache again."
        }
      },
      "name": "RemoteTransform2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "RemoteTransform2D pushes its own [Transform2D] to another [CanvasItem] derived Node in the scene.",
      "description": "RemoteTransform2D pushes its own [Transform2D] to another [CanvasItem] derived Node (called the remote node) in the scene.\n\t\tIt can be set to update another Node's position, rotation and/or scale. It can use either global or local coordinates."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "NodePath(\"\")",
            "value": "The [NodePath] to the remote node, relative to the RemoteTransform's position in the scene.",
            "setter": "set_remote_node",
            "name": "remote_path",
            "getter": "get_remote_node",
            "type": "NodePath"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the remote node's position is updated.",
            "setter": "set_update_position",
            "name": "update_position",
            "getter": "get_update_position",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the remote node's rotation is updated.",
            "setter": "set_update_rotation",
            "name": "update_rotation",
            "getter": "get_update_rotation",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the remote node's scale is updated.",
            "setter": "set_update_scale",
            "name": "update_scale",
            "getter": "get_update_scale",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], global coordinates are used. If [code]false[/code], local coordinates are used.",
            "setter": "set_use_global_coordinates",
            "name": "use_global_coordinates",
            "getter": "get_use_global_coordinates",
            "type": "bool"
          }
        ]
      },
      "inherits": "Spatial",
      "methods": {
        "method": {
          "return": {
            "type": "void"
          },
          "name": "force_update_cache",
          "description": "[RemoteTransform] caches the remote node. It may not notice if the remote node disappears; [method force_update_cache] forces it to update the cache again."
        }
      },
      "name": "RemoteTransform",
      "version": "3.3",
      "constants": {},
      "brief_description": "RemoteTransform pushes its own [Transform] to another [Spatial] derived Node in the scene.",
      "description": "RemoteTransform pushes its own [Transform] to another [Spatial] derived Node (called the remote node) in the scene.\n\t\tIt can be set to update another Node's position, rotation and/or scale. It can use either global or local coordinates."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "add_types",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "get_dependencies",
            "description": "If implemented, gets the dependencies of a given resource. If [code]add_types[/code] is [code]true[/code], paths should be appended [code]::TypeName[/code], where [code]TypeName[/code] is the class name of the dependency.\n\t\t\t\t[b]Note:[/b] Custom resource types defined by scripts aren't known by the [ClassDB], so you might just return [code]\"Resource\"[/code] for them."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "qualifiers": "virtual",
            "name": "get_recognized_extensions",
            "description": "Gets the list of extensions for files this loader is able to read."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "get_resource_type",
            "description": "Gets the class name of the resource associated with the given path. If the loader cannot handle it, it should return [code]\"\"[/code].\n\t\t\t\t[b]Note:[/b] Custom resource types defined by scripts aren't known by the [ClassDB], so you might just return [code]\"Resource\"[/code] for them."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "typename",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "handles_type",
            "description": "Tells which resource class this loader can load.\n\t\t\t\t[b]Note:[/b] Custom resource types defined by scripts aren't known by the [ClassDB], so you might just handle [code]\"Resource\"[/code] for them."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "original_path",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "load",
            "description": "Loads a resource when the engine finds this loader to be compatible. If the loaded resource is the result of an import, [code]original_path[/code] will target the source file. Returns a [Resource] object on success, or an [enum Error] constant in case of failure."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "renames",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "rename_dependencies",
            "description": "If implemented, renames dependencies within the given resource and saves it. [code]renames[/code] is a dictionary [code]{ String => String }[/code] mapping old dependency paths to new paths.\n\t\t\t\tReturns [constant OK] on success, or an [enum Error] constant in case of failure."
          }
        ]
      },
      "name": "ResourceFormatLoader",
      "version": "3.3",
      "constants": {},
      "brief_description": "Loads a specific resource type from a file.",
      "description": "Godot loads resources in the editor or in exported games using ResourceFormatLoaders. They are queried automatically via the [ResourceLoader] singleton, or when a resource with internal dependencies is loaded. Each file type may load as a different resource type, so multiple ResourceFormatLoaders are registered in the engine.\n\t\tExtending this class allows you to define your own loader. Be sure to respect the documented return types and values. You should give it a global class name with [code]class_name[/code] for it to be registered. Like built-in ResourceFormatLoaders, it will be called automatically when loading resources of its handled type(s). You may also implement a [ResourceFormatSaver].\n\t\t[b]Note:[/b] You can also extend [EditorImportPlugin] if the resource type you need exists but Godot is unable to load its format. Choosing one way over another depends on if the format is suitable or not for the final exported game. For example, it's better to import [code].png[/code] textures as [code].stex[/code] ([StreamTexture]) first, so they can be loaded with better efficiency on the graphics card."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "PoolStringArray"
            },
            "argument": {
              "name": "resource",
              "type": "Resource",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "get_recognized_extensions",
            "description": "Returns the list of extensions available for saving the resource object, provided it is recognized (see [method recognize])."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "resource",
              "type": "Resource",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "recognize",
            "description": "Returns whether the given resource object can be saved by this saver."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "resource",
                "type": "Resource",
                "index": "1"
              },
              {
                "name": "flags",
                "type": "int",
                "index": "2"
              }
            ],
            "qualifiers": "virtual",
            "name": "save",
            "description": "Saves the given resource object to a file at the target [code]path[/code]. [code]flags[/code] is a bitmask composed with [enum ResourceSaver.SaverFlags] constants.\n\t\t\t\tReturns [constant OK] on success, or an [enum Error] constant in case of failure."
          }
        ]
      },
      "name": "ResourceFormatSaver",
      "version": "3.3",
      "constants": {},
      "brief_description": "Saves a specific resource type to a file.",
      "description": "The engine can save resources when you do it from the editor, or when you use the [ResourceSaver] singleton. This is accomplished thanks to multiple [ResourceFormatSaver]s, each handling its own format and called automatically by the engine.\n\t\tBy default, Godot saves resources as [code].tres[/code] (text-based), [code].res[/code] (binary) or another built-in format, but you can choose to create your own format by extending this class. Be sure to respect the documented return types and values. You should give it a global class name with [code]class_name[/code] for it to be registered. Like built-in ResourceFormatSavers, it will be called automatically when saving resources of its recognized type(s). You may also implement a [ResourceFormatLoader]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {},
      "name": "ResourceImporter",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Resource"
            },
            "name": "get_resource",
            "description": "Returns the loaded resource if the load operation completed successfully, [code]null[/code] otherwise."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_stage",
            "description": "Returns the load stage. The total amount of stages can be queried with [method get_stage_count]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_stage_count",
            "description": "Returns the total amount of stages (calls to [method poll]) needed to completely load this resource."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "name": "poll",
            "description": "Polls the loading operation, i.e. loads a data chunk up to the next stage.\n\t\t\t\tReturns [constant OK] if the poll is successful but the load operation has not finished yet (intermediate stage). This means [method poll] will have to be called again until the last stage is completed.\n\t\t\t\tReturns [constant ERR_FILE_EOF] if the load operation has completed successfully. The loaded resource can be obtained by calling [method get_resource].\n\t\t\t\tReturns another [enum Error] code if the poll has failed."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "name": "wait",
            "description": "Polls the loading operation successively until the resource is completely loaded or a [method poll] fails.\n\t\t\t\tReturns [constant ERR_FILE_EOF] if the load operation has completed successfully. The loaded resource can be obtained by calling [method get_resource].\n\t\t\t\tReturns another [enum Error] code if a poll has failed, aborting the operation."
          }
        ]
      },
      "name": "ResourceInteractiveLoader",
      "version": "3.3",
      "constants": {},
      "brief_description": "Interactive [Resource] loader.",
      "description": "Interactive [Resource] loader. This object is returned by [ResourceLoader] when performing an interactive load. It allows loading resources with high granularity, which makes it mainly useful for displaying loading bars or percentages."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/677",
          "title": "OS Test Demo"
        }
      },
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "default": "\"\"",
                "name": "type_hint",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "exists",
            "description": "Returns whether a recognized resource exists for the given [code]path[/code].\n\t\t\t\tAn optional [code]type_hint[/code] can be used to further specify the [Resource] type that should be handled by the [ResourceFormatLoader]."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "get_dependencies",
            "description": "Returns the dependencies for the resource at the given [code]path[/code]."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "argument": {
              "name": "type",
              "type": "String",
              "index": "0"
            },
            "name": "get_recognized_extensions_for_type",
            "description": "Returns the list of recognized extensions for a resource type."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "has",
            "description": "[i]Deprecated method.[/i] Use [method has_cached] or [method exists] instead."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "has_cached",
            "description": "Returns whether a cached resource is available for the given [code]path[/code].\n\t\t\t\tOnce a resource has been loaded by the engine, it is cached in memory for faster access, and future calls to the [method load] or [method load_interactive] methods will use the cached version. The cached resource can be overridden by using [method Resource.take_over_path] on a new resource for that same path."
          },
          {
            "return": {
              "type": "Resource"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "default": "\"\"",
                "name": "type_hint",
                "type": "String",
                "index": "1"
              },
              {
                "default": "false",
                "name": "no_cache",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "load",
            "description": "Loads a resource at the given [code]path[/code], caching the result for further access.\n\t\t\t\tThe registered [ResourceFormatLoader]s are queried sequentially to find the first one which can handle the file's extension, and then attempt loading. If loading fails, the remaining ResourceFormatLoaders are also attempted.\n\t\t\t\tAn optional [code]type_hint[/code] can be used to further specify the [Resource] type that should be handled by the [ResourceFormatLoader]. Anything that inherits from [Resource] can be used as a type hint, for example [Image].\n\t\t\t\tIf [code]no_cache[/code] is [code]true[/code], the resource cache will be bypassed and the resource will be loaded anew. Otherwise, the cached resource will be returned if it exists.\n\t\t\t\tReturns an empty resource if no [ResourceFormatLoader] could handle the file.\n\t\t\t\tGDScript has a simplified [method @GDScript.load] built-in method which can be used in most situations, leaving the use of [ResourceLoader] for more advanced scenarios."
          },
          {
            "return": {
              "type": "ResourceInteractiveLoader"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "default": "\"\"",
                "name": "type_hint",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "load_interactive",
            "description": "Starts loading a resource interactively. The returned [ResourceInteractiveLoader] object allows to load with high granularity, calling its [method ResourceInteractiveLoader.poll] method successively to load chunks.\n\t\t\t\tAn optional [code]type_hint[/code] can be used to further specify the [Resource] type that should be handled by the [ResourceFormatLoader]. Anything that inherits from [Resource] can be used as a type hint, for example [Image]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "abort",
              "type": "bool",
              "index": "0"
            },
            "name": "set_abort_on_missing_resources",
            "description": "Changes the behavior on missing sub-resources. The default behavior is to abort loading."
          }
        ]
      },
      "name": "ResourceLoader",
      "version": "3.3",
      "constants": {},
      "brief_description": "Singleton used to load resource files.",
      "description": "Singleton used to load resource files from the filesystem.\n\t\tIt uses the many [ResourceFormatLoader] classes registered in the engine (either built-in or from a plugin) to load files into memory and convert them to a format that can be used by the engine."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Node",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "resource",
                "type": "Resource",
                "index": "1"
              }
            ],
            "name": "add_resource",
            "description": "Adds a resource to the preloader with the given [code]name[/code]. If a resource with the given [code]name[/code] already exists, the new resource will be renamed to \"[code]name[/code] N\" where N is an incrementing number starting from 2."
          },
          {
            "return": {
              "type": "Resource"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_resource",
            "description": "Returns the resource associated to [code]name[/code]."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "qualifiers": "const",
            "name": "get_resource_list",
            "description": "Returns the list of resources inside the preloader."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_resource",
            "description": "Returns [code]true[/code] if the preloader contains a resource associated to [code]name[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "remove_resource",
            "description": "Removes the resource associated to [code]name[/code] from the preloader."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "newname",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "rename_resource",
            "description": "Renames a resource inside the preloader from [code]name[/code] to [code]newname[/code]."
          }
        ]
      },
      "name": "ResourcePreloader",
      "version": "3.3",
      "constants": {},
      "brief_description": "Resource Preloader Node.",
      "description": "This node is used to preload sub-resources inside a scene, so when the scene is loaded, all the resources are ready to use and can be retrieved from the preloader.\n\t\tGDScript has a simplified [method @GDScript.preload] built-in method which can be used in most situations, leaving the use of [ResourcePreloader] for more advanced scenarios."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "PoolStringArray"
            },
            "argument": {
              "name": "type",
              "type": "Resource",
              "index": "0"
            },
            "name": "get_recognized_extensions",
            "description": "Returns the list of extensions available for saving a resource of a given type."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "path",
                "type": "String",
                "index": "0"
              },
              {
                "name": "resource",
                "type": "Resource",
                "index": "1"
              },
              {
                "default": "0",
                "name": "flags",
                "type": "int",
                "enum": "ResourceSaver.SaverFlags",
                "index": "2"
              }
            ],
            "name": "save",
            "description": "Saves a resource to disk to the given path, using a [ResourceFormatSaver] that recognizes the resource object.\n\t\t\t\tThe [code]flags[/code] bitmask can be specified to customize the save behavior.\n\t\t\t\tReturns [constant OK] on success."
          }
        ]
      },
      "name": "ResourceSaver",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "1",
            "name": "FLAG_RELATIVE_PATHS",
            "enum": "SaverFlags"
          },
          {
            "value": "2",
            "name": "FLAG_BUNDLE_RESOURCES",
            "enum": "SaverFlags"
          },
          {
            "value": "4",
            "name": "FLAG_CHANGE_PATH",
            "enum": "SaverFlags"
          },
          {
            "value": "8",
            "name": "FLAG_OMIT_EDITOR_PROPERTIES",
            "enum": "SaverFlags"
          },
          {
            "value": "16",
            "name": "FLAG_SAVE_BIG_ENDIAN",
            "enum": "SaverFlags"
          },
          {
            "value": "32",
            "name": "FLAG_COMPRESS",
            "enum": "SaverFlags"
          },
          {
            "value": "64",
            "name": "FLAG_REPLACE_SUBRESOURCE_PATHS",
            "enum": "SaverFlags"
          }
        ]
      },
      "brief_description": "Singleton for saving Godot-specific resource types.",
      "description": "Singleton for saving Godot-specific resource types to the filesystem.\n\t\tIt uses the many [ResourceFormatSaver] classes registered in the engine (either built-in or from a plugin) to save engine-specific resource data to text-based (e.g. [code].tres[/code] or [code].tscn[/code]) or binary files (e.g. [code].res[/code] or [code].scn[/code])."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/getting_started/step_by_step/resources.html",
            "title": "Resources"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/getting_started/workflow/best_practices/node_alternatives.html",
            "title": "When and how to avoid using nodes for everything"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the resource will be made unique in each instance of its local scene. It can thus be modified in a scene instance without impacting other instances of that same scene.",
            "setter": "set_local_to_scene",
            "name": "resource_local_to_scene",
            "getter": "is_local_to_scene",
            "type": "bool"
          },
          {
            "default": "\"\"",
            "value": "The name of the resource. This is an optional identifier. If [member resource_name] is not empty, its value will be displayed to represent the current resource in the editor inspector. For built-in scripts, the [member resource_name] will be displayed as the tab name in the script editor.",
            "setter": "set_name",
            "name": "resource_name",
            "getter": "get_name",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "The path to the resource. In case it has its own file, it will return its filepath. If it's tied to the scene, it will return the scene's path, followed by the resource's index.",
            "setter": "set_path",
            "name": "resource_path",
            "getter": "get_path",
            "type": "String"
          }
        ]
      },
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "qualifiers": "virtual",
            "name": "_setup_local_to_scene",
            "description": "Virtual function which can be overridden to customize the behavior value of [method setup_local_to_scene]."
          },
          {
            "return": {
              "type": "Resource"
            },
            "argument": {
              "default": "false",
              "name": "subresources",
              "type": "bool",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "duplicate",
            "description": "Duplicates the resource, returning a new resource. By default, sub-resources are shared between resource copies for efficiency. This can be changed by passing [code]true[/code] to the [code]subresources[/code] argument which will copy the subresources.\n\t\t\t\t[b]Note:[/b] If [code]subresources[/code] is [code]true[/code], this method will only perform a shallow copy. Nested resources within subresources will not be duplicated and will still be shared.\n\t\t\t\t[b]Note:[/b] When duplicating a resource, only [code]export[/code]ed properties are copied. Other properties will be set to their default value in the new resource."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "emit_changed",
            "description": "Emits the [signal changed] signal.\n\t\t\t\tIf external objects which depend on this resource should be updated, this method must be called manually whenever the state of this resource has changed (such as modification of properties).\n\t\t\t\tThe method is equivalent to:\n\t\t\t\t[codeblock]\n\t\t\t\temit_signal(\"changed\")\n\t\t\t\t[/codeblock]\n\t\t\t\t[b]Note:[/b] This method is called automatically for built-in resources."
          },
          {
            "return": {
              "type": "Node"
            },
            "qualifiers": "const",
            "name": "get_local_scene",
            "description": "If [member resource_local_to_scene] is enabled and the resource was loaded from a [PackedScene] instantiation, returns the local scene where this resource's unique copy is in use. Otherwise, returns [code]null[/code]."
          },
          {
            "return": {
              "type": "RID"
            },
            "qualifiers": "const",
            "name": "get_rid",
            "description": "Returns the RID of the resource (or an empty RID). Many resources (such as [Texture], [Mesh], etc) are high-level abstractions of resources stored in a server, so this function will return the original RID."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "setup_local_to_scene",
            "description": "This method is called when a resource with [member resource_local_to_scene] enabled is loaded from a [PackedScene] instantiation. Its behavior can be customized by overriding [method _setup_local_to_scene] from script.\n\t\t\t\tFor most resources, this method performs no base logic. [ViewportTexture] performs custom logic to properly set the proxy texture and flags in the local viewport."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "take_over_path",
            "description": "Sets the path of the resource, potentially overriding an existing cache entry for this path. This differs from setting [member resource_path], as the latter would error out if another resource was already cached for the given path."
          }
        ]
      },
      "name": "Resource",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "changed",
          "description": "Emitted whenever the resource changes.\n\t\t\t\t[b]Note:[/b] This signal is not emitted automatically for custom resources, which means that you need to create a setter and emit the signal yourself."
        }
      },
      "constants": {},
      "brief_description": "Base class for all resources.",
      "description": "Resource is the base class for all Godot-specific resource types, serving primarily as data containers. Since they inherit from [Reference], resources are reference-counted and freed when no longer in use. They are also cached once loaded from disk, so that any further attempts to load a resource from a given path will return the same reference (all this in contrast to a [Node], which is not reference-counted and can be instanced from disk as many times as desired). Resources can be saved externally on disk or bundled into another object, such as a [Node] or another resource.\n\t\t[b]Note:[/b] In C#, resources will not be freed instantly after they are no longer in use. Instead, garbage collection will run periodically and will free resources that are no longer in use. This means that unused resources will linger on for a while before being removed."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          "https://docs.godotengine.org/en/3.3/tutorials/gui/bbcode_in_richtextlabel.html",
          "https://github.com/Eoin-ONeill-Yokai/Godot-Rich-Text-Effect-Test-Project"
        ]
      },
      "inherits": "Resource",
      "methods": {
        "method": {
          "return": {
            "type": "bool"
          },
          "argument": {
            "name": "char_fx",
            "type": "CharFXTransform",
            "index": "0"
          },
          "qualifiers": "virtual",
          "name": "_process_custom_fx",
          "description": "Override this method to modify properties in [code]char_fx[/code]. The method must return [code]true[/code] if the character could be transformed successfully. If the method returns [code]false[/code], it will skip transformation to avoid displaying broken text."
        }
      },
      "name": "RichTextEffect",
      "version": "3.3",
      "constants": {},
      "brief_description": "A custom effect for use with [RichTextLabel].",
      "description": "A custom effect for use with [RichTextLabel].\n\t\t[b]Note:[/b] For a [RichTextEffect] to be usable, a BBCode tag must be defined as a member variable called [code]bbcode[/code] in the script.\n\t\t[codeblock]\n\t\t# The RichTextEffect will be usable like this: `[example]Some text[/example]`\n\t\tvar bbcode = \"example\"\n\t\t[/codeblock]\n\t\t[b]Note:[/b] As soon as a [RichTextLabel] contains at least one [RichTextEffect], it will continuously process the effect unless the project is paused. This may impact battery life negatively."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/gui/bbcode_in_richtextlabel.html",
            "title": "BBCode in RichTextLabel"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/132",
            "title": "GUI Rich Text/BBcode Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/677",
            "title": "OS Test Demo"
          }
        ]
      },
      "theme_items": {
        "theme_item": [
          {
            "value": "The font used for bold text.",
            "name": "bold_font",
            "type": "Font"
          },
          {
            "value": "The font used for bold italics text.",
            "name": "bold_italics_font",
            "type": "Font"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "The default text color.",
            "name": "default_color",
            "type": "Color"
          },
          {
            "value": "The background The background used when the [RichTextLabel] is focused.",
            "name": "focus",
            "type": "StyleBox"
          },
          {
            "default": "Color( 0.49, 0.49, 0.49, 1 )",
            "value": "The color of selected text, used when [member selection_enabled] is [code]true[/code].",
            "name": "font_color_selected",
            "type": "Color"
          },
          {
            "default": "Color( 0, 0, 0, 0 )",
            "value": "The color of the font's shadow.",
            "name": "font_color_shadow",
            "type": "Color"
          },
          {
            "value": "The font used for italics text.",
            "name": "italics_font",
            "type": "Font"
          },
          {
            "default": "1",
            "value": "The vertical space between lines.",
            "name": "line_separation",
            "type": "int"
          },
          {
            "value": "The font used for monospace text.",
            "name": "mono_font",
            "type": "Font"
          },
          {
            "value": "The normal background for the [RichTextLabel].",
            "name": "normal",
            "type": "StyleBox"
          },
          {
            "value": "The default text font.",
            "name": "normal_font",
            "type": "Font"
          },
          {
            "default": "Color( 0.1, 0.1, 1, 0.8 )",
            "value": "The color of the selection box.",
            "name": "selection_color",
            "type": "Color"
          },
          {
            "default": "0",
            "value": "Boolean value. If 1 ([code]true[/code]), the shadow will be displayed around the whole text as an outline.",
            "name": "shadow_as_outline",
            "type": "int"
          },
          {
            "default": "1",
            "value": "The horizontal offset of the font's shadow.",
            "name": "shadow_offset_x",
            "type": "int"
          },
          {
            "default": "1",
            "value": "The vertical offset of the font's shadow.",
            "name": "shadow_offset_y",
            "type": "int"
          },
          {
            "default": "3",
            "value": "The horizontal separation of elements in a table.",
            "name": "table_hseparation",
            "type": "int"
          },
          {
            "default": "3",
            "value": "The vertical separation of elements in a table.",
            "name": "table_vseparation",
            "type": "int"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the label uses BBCode formatting.\n\t\t\t[b]Note:[/b] Trying to alter the [RichTextLabel]'s text with [method add_text] will reset this to [code]false[/code]. Use instead [method append_bbcode] to preserve BBCode formatting.",
            "setter": "set_use_bbcode",
            "name": "bbcode_enabled",
            "getter": "is_using_bbcode",
            "type": "bool"
          },
          {
            "default": "\"\"",
            "value": "The label's text in BBCode format. Is not representative of manual modifications to the internal tag stack. Erases changes made by other methods when edited.\n\t\t\t[b]Note:[/b] It is unadvised to use the [code]+=[/code] operator with [code]bbcode_text[/code] (e.g. [code]bbcode_text += \"some string\"[/code]) as it replaces the whole text and can cause slowdowns. Use [method append_bbcode] for adding text instead, unless you absolutely need to close a tag that was opened in an earlier method call.",
            "setter": "set_bbcode",
            "name": "bbcode_text",
            "getter": "get_bbcode",
            "type": "String"
          },
          {
            "default": "[  ]",
            "value": "The currently installed custom effects. This is an array of [RichTextEffect]s.\n\t\t\tTo add a custom effect, it's more convenient to use [method install_effect].",
            "setter": "set_effects",
            "name": "custom_effects",
            "getter": "get_effects",
            "type": "Array"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the label's height will be automatically updated to fit its content.\n\t\t\t[b]Note:[/b] This property is used as a workaround to fix issues with [RichTextLabel] in [Container]s, but it's unreliable in some cases and will be removed in future versions.",
            "setter": "set_fit_content_height",
            "name": "fit_content_height",
            "getter": "is_fit_content_height_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the label underlines meta tags such as [code][url]{text}[/url][/code].",
            "setter": "set_meta_underline",
            "name": "meta_underlined",
            "getter": "is_meta_underlined",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the label uses the custom font color.",
            "setter": "set_override_selected_font_color",
            "name": "override_selected_font_color",
            "getter": "is_overriding_selected_font_color",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "The range of characters to display, as a [float] between 0.0 and 1.0. When assigned an out of range value, it's the same as assigning 1.0.\n\t\t\t[b]Note:[/b] Setting this property updates [member visible_characters] based on current [method get_total_character_count].",
            "setter": "set_percent_visible",
            "name": "percent_visible",
            "getter": "get_percent_visible",
            "type": "float"
          },
          {
            "default": "true",
            "setter": "set_clip_contents",
            "override": "true",
            "name": "rect_clip_content",
            "getter": "is_clipping_contents",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the scrollbar is visible. Setting this to [code]false[/code] does not block scrolling completely. See [method scroll_to_line].",
            "setter": "set_scroll_active",
            "name": "scroll_active",
            "getter": "is_scroll_active",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the window scrolls down to display new content automatically.",
            "setter": "set_scroll_follow",
            "name": "scroll_following",
            "getter": "is_scroll_following",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the label allows text selection.",
            "setter": "set_selection_enabled",
            "name": "selection_enabled",
            "getter": "is_selection_enabled",
            "type": "bool"
          },
          {
            "default": "4",
            "value": "The number of spaces associated with a single tab length. Does not affect [code]\\t[/code] in text tags, only indent tags.",
            "setter": "set_tab_size",
            "name": "tab_size",
            "getter": "get_tab_size",
            "type": "int"
          },
          {
            "default": "\"\"",
            "value": "The raw text of the label.\n\t\t\tWhen set, clears the tag stack and adds a raw text tag to the top of it. Does not parse BBCodes. Does not modify [member bbcode_text].",
            "setter": "set_text",
            "name": "text",
            "getter": "get_text",
            "type": "String"
          },
          {
            "default": "-1",
            "value": "The restricted number of characters to display in the label. If [code]-1[/code], all characters will be displayed.\n\t\t\t[b]Note:[/b] Setting this property updates [member percent_visible] based on current [method get_total_character_count].",
            "setter": "set_visible_characters",
            "name": "visible_characters",
            "getter": "get_visible_characters",
            "type": "int"
          }
        ]
      },
      "inherits": "Control",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "image",
                "type": "Texture",
                "index": "0"
              },
              {
                "default": "0",
                "name": "width",
                "type": "int",
                "index": "1"
              },
              {
                "default": "0",
                "name": "height",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "add_image",
            "description": "Adds an image's opening and closing tags to the tag stack, optionally providing a [code]width[/code] and [code]height[/code] to resize the image.\n\t\t\t\tIf [code]width[/code] or [code]height[/code] is set to 0, the image size will be adjusted in order to keep the original aspect ratio."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "text",
              "type": "String",
              "index": "0"
            },
            "name": "add_text",
            "description": "Adds raw non-BBCode-parsed text to the tag stack."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "bbcode",
              "type": "String",
              "index": "0"
            },
            "name": "append_bbcode",
            "description": "Parses [code]bbcode[/code] and adds tags to the tag stack as needed. Returns the result of the parsing, [constant OK] if successful.\n\t\t\t\t[b]Note:[/b] Using this method, you can't close a tag that was opened in a previous [method append_bbcode] call. This is done to improve performance, especially when updating large RichTextLabels since rebuilding the whole BBCode every time would be slower. If you absolutely need to close a tag in a future method call, append the [member bbcode_text] instead of using [method append_bbcode]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Clears the tag stack and sets [member bbcode_text] to an empty string."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_content_height",
            "description": "Returns the height of the content."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_line_count",
            "description": "Returns the total number of newlines in the tag stack's text tags. Considers wrapped text as one line."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_total_character_count",
            "description": "Returns the total number of characters from text tags. Does not include BBCodes."
          },
          {
            "return": {
              "type": "VScrollBar"
            },
            "name": "get_v_scroll",
            "description": "Returns the vertical scrollbar."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_visible_line_count",
            "description": "Returns the number of visible lines."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "effect",
              "type": "Variant",
              "index": "0"
            },
            "name": "install_effect",
            "description": "Installs a custom effect. [code]effect[/code] should be a valid [RichTextEffect]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "newline",
            "description": "Adds a newline tag to the tag stack."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "bbcode",
              "type": "String",
              "index": "0"
            },
            "name": "parse_bbcode",
            "description": "The assignment version of [method append_bbcode]. Clears the tag stack and inserts the new content. Returns [constant OK] if parses [code]bbcode[/code] successfully."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "argument": {
              "name": "expressions",
              "type": "PoolStringArray",
              "index": "0"
            },
            "name": "parse_expressions_for_values",
            "description": "Parses BBCode parameter [code]expressions[/code] into a dictionary."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "pop",
            "description": "Terminates the current tag. Use after [code]push_*[/code] methods to close BBCodes manually. Does not need to follow [code]add_*[/code] methods."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "align",
              "type": "int",
              "enum": "RichTextLabel.Align",
              "index": "0"
            },
            "name": "push_align",
            "description": "Adds an [code][align][/code] tag based on the given [code]align[/code] value. See [enum Align] for possible values."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "push_bold",
            "description": "Adds a [code][font][/code] tag with a bold font to the tag stack. This is the same as adding a [code][b][/code] tag if not currently in a [code][i][/code] tag."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "push_bold_italics",
            "description": "Adds a [code][font][/code] tag with a bold italics font to the tag stack."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "push_cell",
            "description": "Adds a [code][cell][/code] tag to the tag stack. Must be inside a [code][table][/code] tag. See [method push_table] for details."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "color",
              "type": "Color",
              "index": "0"
            },
            "name": "push_color",
            "description": "Adds a [code][color][/code] tag to the tag stack."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "font",
              "type": "Font",
              "index": "0"
            },
            "name": "push_font",
            "description": "Adds a [code][font][/code] tag to the tag stack. Overrides default fonts for its duration."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "level",
              "type": "int",
              "index": "0"
            },
            "name": "push_indent",
            "description": "Adds an [code][indent][/code] tag to the tag stack. Multiplies [code]level[/code] by current [member tab_size] to determine new margin length."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "push_italics",
            "description": "Adds a [code][font][/code] tag with a italics font to the tag stack. This is the same as adding a [code][i][/code] tag if not currently in a [code][b][/code] tag."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "type",
              "type": "int",
              "enum": "RichTextLabel.ListType",
              "index": "0"
            },
            "name": "push_list",
            "description": "Adds a [code][list][/code] tag to the tag stack. Similar to the BBCodes [code][ol][/code] or [code][ul][/code], but supports more list types. Not fully implemented!"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "data",
              "type": "Variant",
              "index": "0"
            },
            "name": "push_meta",
            "description": "Adds a [code][meta][/code] tag to the tag stack. Similar to the BBCode [code][url=something]{text}[/url][/code], but supports non-[String] metadata types."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "push_mono",
            "description": "Adds a [code][font][/code] tag with a monospace font to the tag stack."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "push_normal",
            "description": "Adds a [code][font][/code] tag with a normal font to the tag stack."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "push_strikethrough",
            "description": "Adds a [code][s][/code] tag to the tag stack."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "columns",
              "type": "int",
              "index": "0"
            },
            "name": "push_table",
            "description": "Adds a [code][table=columns][/code] tag to the tag stack."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "push_underline",
            "description": "Adds a [code][u][/code] tag to the tag stack."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "line",
              "type": "int",
              "index": "0"
            },
            "name": "remove_line",
            "description": "Removes a line of content from the label. Returns [code]true[/code] if the line exists.\n\t\t\t\tThe [code]line[/code] argument is the index of the line to remove, it can take values in the interval [code][0, get_line_count() - 1][/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "line",
              "type": "int",
              "index": "0"
            },
            "name": "scroll_to_line",
            "description": "Scrolls the window's top line to match [code]line[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "expand",
                "type": "bool",
                "index": "1"
              },
              {
                "name": "ratio",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "set_table_column_expand",
            "description": "Edits the selected column's expansion options. If [code]expand[/code] is [code]true[/code], the column expands in proportion to its expansion ratio versus the other columns' ratios.\n\t\t\t\tFor example, 2 columns with ratios 3 and 4 plus 70 pixels in available width would expand 30 and 40 pixels, respectively.\n\t\t\t\tIf [code]expand[/code] is [code]false[/code], the column will not contribute to the total ratio."
          }
        ]
      },
      "name": "RichTextLabel",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "meta",
              "type": "Variant",
              "index": "0"
            },
            "name": "meta_clicked",
            "description": "Triggered when the user clicks on content between meta tags. If the meta is defined in text, e.g. [code][url={\"data\"=\"hi\"}]hi[/url][/code], then the parameter for this signal will be a [String] type. If a particular type or an object is desired, the [method push_meta] method must be used to manually insert the data into the tag stack."
          },
          {
            "argument": {
              "name": "meta",
              "type": "Variant",
              "index": "0"
            },
            "name": "meta_hover_ended",
            "description": "Triggers when the mouse exits a meta tag."
          },
          {
            "argument": {
              "name": "meta",
              "type": "Variant",
              "index": "0"
            },
            "name": "meta_hover_started",
            "description": "Triggers when the mouse enters a meta tag."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "ALIGN_LEFT",
            "enum": "Align"
          },
          {
            "value": "1",
            "name": "ALIGN_CENTER",
            "enum": "Align"
          },
          {
            "value": "2",
            "name": "ALIGN_RIGHT",
            "enum": "Align"
          },
          {
            "value": "3",
            "name": "ALIGN_FILL",
            "enum": "Align"
          },
          {
            "value": "0",
            "name": "LIST_NUMBERS",
            "enum": "ListType"
          },
          {
            "value": "1",
            "name": "LIST_LETTERS",
            "enum": "ListType"
          },
          {
            "value": "2",
            "name": "LIST_DOTS",
            "enum": "ListType"
          },
          {
            "value": "0",
            "name": "ITEM_FRAME",
            "enum": "ItemType"
          },
          {
            "value": "1",
            "name": "ITEM_TEXT",
            "enum": "ItemType"
          },
          {
            "value": "2",
            "name": "ITEM_IMAGE",
            "enum": "ItemType"
          },
          {
            "value": "3",
            "name": "ITEM_NEWLINE",
            "enum": "ItemType"
          },
          {
            "value": "4",
            "name": "ITEM_FONT",
            "enum": "ItemType"
          },
          {
            "value": "5",
            "name": "ITEM_COLOR",
            "enum": "ItemType"
          },
          {
            "value": "6",
            "name": "ITEM_UNDERLINE",
            "enum": "ItemType"
          },
          {
            "value": "7",
            "name": "ITEM_STRIKETHROUGH",
            "enum": "ItemType"
          },
          {
            "value": "8",
            "name": "ITEM_ALIGN",
            "enum": "ItemType"
          },
          {
            "value": "9",
            "name": "ITEM_INDENT",
            "enum": "ItemType"
          },
          {
            "value": "10",
            "name": "ITEM_LIST",
            "enum": "ItemType"
          },
          {
            "value": "11",
            "name": "ITEM_TABLE",
            "enum": "ItemType"
          },
          {
            "value": "12",
            "name": "ITEM_FADE",
            "enum": "ItemType"
          },
          {
            "value": "13",
            "name": "ITEM_SHAKE",
            "enum": "ItemType"
          },
          {
            "value": "14",
            "name": "ITEM_WAVE",
            "enum": "ItemType"
          },
          {
            "value": "15",
            "name": "ITEM_TORNADO",
            "enum": "ItemType"
          },
          {
            "value": "16",
            "name": "ITEM_RAINBOW",
            "enum": "ItemType"
          },
          {
            "value": "18",
            "name": "ITEM_CUSTOMFX",
            "enum": "ItemType"
          },
          {
            "value": "17",
            "name": "ITEM_META",
            "enum": "ItemType"
          }
        ]
      },
      "brief_description": "Label that displays rich text.",
      "description": "Rich text can contain custom text, fonts, images and some basic formatting. The label manages these as an internal tag stack. It also adapts itself to given width/heights.\n\t\t[b]Note:[/b] Assignments to [member bbcode_text] clear the tag stack and reconstruct it from the property's contents. Any edits made to [member bbcode_text] will erase previous edits made from other manual sources such as [method append_bbcode] and the [code]push_*[/code] / [method pop] methods.\n\t\t[b]Note:[/b] RichTextLabel doesn't support entangled BBCode tags. For example, instead of using [code][b]bold[i]bold italic[/b]italic[/i][/code], use [code][b]bold[i]bold italic[/i][/b][i]italic[/i][/code].\n\t\t[b]Note:[/b] Unlike [Label], RichTextLabel doesn't have a [i]property[/i] to horizontally align text to the center. Instead, enable [member bbcode_enabled] and surround the text in a [code][center][/code] tag as follows: [code][center]Example[/center][/code]. There is currently no built-in way to vertically align text either, but this can be emulated by relying on anchors/containers and the [member fit_content_height] property."
    }
  },
  {
    "class": {
      "tutorials": {},
      "methods": {
        "method": [
          {
            "return": {
              "type": "RID"
            },
            "argument": {
              "name": "from",
              "type": "Object",
              "index": "0"
            },
            "name": "RID",
            "description": "Creates a new RID instance with the ID of a given resource. When not handed a valid resource, silently stores the unused ID 0."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_id",
            "description": "Returns the ID of the referenced resource."
          }
        ]
      },
      "name": "RID",
      "version": "3.3",
      "constants": {},
      "brief_description": "Handle for a [Resource]'s unique ID.",
      "description": "The RID type is used to access the unique integer ID of a resource. They are opaque, which means they do not grant access to the associated resource by themselves. They are used by and with the low-level Server classes such as [VisualServer]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://godotengine.org/asset-library/asset/119",
            "title": "2D Physics Platformer Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/148",
            "title": "Instancing Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "-1.0",
            "value": "Damps the body's [member angular_velocity]. If [code]-1[/code], the body will use the [b]Default Angular Damp[/b] defined in [b]Project > Project Settings > Physics > 2d[/b].\n\t\t\tSee [member ProjectSettings.physics/2d/default_angular_damp] for more details about damping.",
            "setter": "set_angular_damp",
            "name": "angular_damp",
            "getter": "get_angular_damp",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The body's rotational velocity.",
            "setter": "set_angular_velocity",
            "name": "angular_velocity",
            "getter": "get_angular_velocity",
            "type": "float"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The body's total applied force.",
            "setter": "set_applied_force",
            "name": "applied_force",
            "getter": "get_applied_force",
            "type": "Vector2"
          },
          {
            "default": "0.0",
            "value": "The body's total applied torque.",
            "setter": "set_applied_torque",
            "name": "applied_torque",
            "getter": "get_applied_torque",
            "type": "float"
          },
          {
            "value": "The body's bounciness. Values range from [code]0[/code] (no bounce) to [code]1[/code] (full bounciness).\n\t\t\tDeprecated, use [member PhysicsMaterial.bounce] instead via [member physics_material_override].",
            "setter": "set_bounce",
            "name": "bounce",
            "getter": "get_bounce",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the body can enter sleep mode when there is no movement. See [member sleeping].\n\t\t\t[b]Note:[/b] A RigidBody2D will never enter sleep mode automatically if its [member mode] is [constant MODE_CHARACTER]. It can still be put to sleep manually by setting its [member sleeping] property to [code]true[/code].",
            "setter": "set_can_sleep",
            "name": "can_sleep",
            "getter": "is_able_to_sleep",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the body will emit signals when it collides with another RigidBody2D. See also [member contacts_reported].",
            "setter": "set_contact_monitor",
            "name": "contact_monitor",
            "getter": "is_contact_monitor_enabled",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "The maximum number of contacts that will be recorded. Requires [member contact_monitor] to be set to [code]true[/code].\n\t\t\t[b]Note:[/b] The number of contacts is different from the number of collisions. Collisions between parallel edges will result in two contacts (one at each end).",
            "setter": "set_max_contacts_reported",
            "name": "contacts_reported",
            "getter": "get_max_contacts_reported",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Continuous collision detection mode.\n\t\t\tContinuous collision detection tries to predict where a moving body will collide instead of moving it and correcting its movement after collision. Continuous collision detection is slower, but more precise and misses fewer collisions with small, fast-moving objects. Raycasting and shapecasting methods are available. See [enum CCDMode] for details.",
            "setter": "set_continuous_collision_detection_mode",
            "name": "continuous_cd",
            "getter": "get_continuous_collision_detection_mode",
            "type": "int",
            "enum": "RigidBody2D.CCDMode"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], internal force integration is disabled for this body. Aside from collision response, the body will only move as determined by the [method _integrate_forces] function.",
            "setter": "set_use_custom_integrator",
            "name": "custom_integrator",
            "getter": "is_using_custom_integrator",
            "type": "bool"
          },
          {
            "value": "The body's friction. Values range from [code]0[/code] (frictionless) to [code]1[/code] (maximum friction).\n\t\t\tDeprecated, use [member PhysicsMaterial.friction] instead via [member physics_material_override].",
            "setter": "set_friction",
            "name": "friction",
            "getter": "get_friction",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Multiplies the gravity applied to the body. The body's gravity is calculated from the [b]Default Gravity[/b] value in [b]Project > Project Settings > Physics > 2d[/b] and/or any additional gravity vector applied by [Area2D]s.",
            "setter": "set_gravity_scale",
            "name": "gravity_scale",
            "getter": "get_gravity_scale",
            "type": "float"
          },
          {
            "value": "The body's moment of inertia. This is like mass, but for rotation: it determines how much torque it takes to rotate the body. The moment of inertia is usually computed automatically from the mass and the shapes, but this function allows you to set a custom value. Set 0 inertia to return to automatically computing it.",
            "setter": "set_inertia",
            "name": "inertia",
            "getter": "get_inertia",
            "type": "float"
          },
          {
            "default": "-1.0",
            "value": "Damps the body's [member linear_velocity]. If [code]-1[/code], the body will use the [b]Default Linear Damp[/b] in [b]Project > Project Settings > Physics > 2d[/b].\n\t\t\tSee [member ProjectSettings.physics/2d/default_linear_damp] for more details about damping.",
            "setter": "set_linear_damp",
            "name": "linear_damp",
            "getter": "get_linear_damp",
            "type": "float"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The body's linear velocity.",
            "setter": "set_linear_velocity",
            "name": "linear_velocity",
            "getter": "get_linear_velocity",
            "type": "Vector2"
          },
          {
            "default": "1.0",
            "value": "The body's mass.",
            "setter": "set_mass",
            "name": "mass",
            "getter": "get_mass",
            "type": "float"
          },
          {
            "default": "0",
            "value": "The body's mode. See [enum Mode] for possible values.",
            "setter": "set_mode",
            "name": "mode",
            "getter": "get_mode",
            "type": "int",
            "enum": "RigidBody2D.Mode"
          },
          {
            "value": "The physics material override for the body.\n\t\t\tIf a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one.",
            "setter": "set_physics_material_override",
            "name": "physics_material_override",
            "getter": "get_physics_material_override",
            "type": "PhysicsMaterial"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the body will not move and will not calculate forces until woken up by another body through, for example, a collision, or by using the [method apply_impulse] or [method add_force] methods.",
            "setter": "set_sleeping",
            "name": "sleeping",
            "getter": "is_sleeping",
            "type": "bool"
          },
          {
            "default": "9.8",
            "value": "The body's weight based on its mass and the [b]Default Gravity[/b] value in [b]Project > Project Settings > Physics > 2d[/b].",
            "setter": "set_weight",
            "name": "weight",
            "getter": "get_weight",
            "type": "float"
          }
        ]
      },
      "inherits": "PhysicsBody2D",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "state",
              "type": "Physics2DDirectBodyState",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_integrate_forces",
            "description": "Allows you to read and safely modify the simulation state for the object. Use this instead of [method Node._physics_process] if you need to directly change the body's [code]position[/code] or other physics properties. By default, it works in addition to the usual physics behavior, but [member custom_integrator] allows you to disable the default behavior and write custom force integration for a body."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "force",
              "type": "Vector2",
              "index": "0"
            },
            "name": "add_central_force",
            "description": "Adds a constant directional force without affecting rotation."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "offset",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "force",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "add_force",
            "description": "Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "torque",
              "type": "float",
              "index": "0"
            },
            "name": "add_torque",
            "description": "Adds a constant rotational force."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "impulse",
              "type": "Vector2",
              "index": "0"
            },
            "name": "apply_central_impulse",
            "description": "Applies a directional impulse without affecting rotation."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "offset",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "impulse",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "apply_impulse",
            "description": "Applies a positioned impulse to the body. An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason it should only be used when simulating one-time impacts (use the \"_force\" functions otherwise). The position uses the rotation of the global coordinate system, but is centered at the object's origin."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "torque",
              "type": "float",
              "index": "0"
            },
            "name": "apply_torque_impulse",
            "description": "Applies a rotational impulse to the body."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_colliding_bodies",
            "description": "Returns a list of the bodies colliding with this one. Requires [member contact_monitor] to be set to [code]true[/code] and [member contacts_reported] to be set high enough to detect all the collisions.\n\t\t\t\t[b]Note:[/b] The result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "axis_velocity",
              "type": "Vector2",
              "index": "0"
            },
            "name": "set_axis_velocity",
            "description": "Sets the body's velocity on the given axis. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "motion",
                "type": "Vector2",
                "index": "0"
              },
              {
                "default": "true",
                "name": "infinite_inertia",
                "type": "bool",
                "index": "1"
              },
              {
                "default": "0.08",
                "name": "margin",
                "type": "float",
                "index": "2"
              },
              {
                "default": "null",
                "name": "result",
                "type": "Physics2DTestMotionResult",
                "index": "3"
              }
            ],
            "name": "test_motion",
            "description": "Returns [code]true[/code] if a collision would result from moving in the given vector. [code]margin[/code] increases the size of the shapes involved in the collision detection, and [code]result[/code] is an object of type [Physics2DTestMotionResult], which contains additional information about the collision (should there be one)."
          }
        ]
      },
      "name": "RigidBody2D",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "body",
              "type": "Node",
              "index": "0"
            },
            "name": "body_entered",
            "description": "Emitted when a collision with another [PhysicsBody2D] or [TileMap] occurs. Requires [member contact_monitor] to be set to [code]true[/code] and [member contacts_reported] to be set high enough to detect all the collisions. [TileMap]s are detected if the [TileSet] has Collision [Shape2D]s.\n\t\t\t\t[code]body[/code] the [Node], if it exists in the tree, of the other [PhysicsBody2D] or [TileMap]."
          },
          {
            "argument": {
              "name": "body",
              "type": "Node",
              "index": "0"
            },
            "name": "body_exited",
            "description": "Emitted when the collision with another [PhysicsBody2D] or [TileMap] ends. Requires [member contact_monitor] to be set to [code]true[/code] and [member contacts_reported] to be set high enough to detect all the collisions. [TileMap]s are detected if the [TileSet] has Collision [Shape2D]s.\n\t\t\t\t[code]body[/code] the [Node], if it exists in the tree, of the other [PhysicsBody2D] or [TileMap]."
          },
          {
            "argument": [
              {
                "name": "body_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "body",
                "type": "Node",
                "index": "1"
              },
              {
                "name": "body_shape",
                "type": "int",
                "index": "2"
              },
              {
                "name": "local_shape",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "body_shape_entered",
            "description": "Emitted when one of this RigidBody2D's [Shape2D]s collides with another [PhysicsBody2D] or [TileMap]'s [Shape2D]s. Requires [member contact_monitor] to be set to [code]true[/code] and [member contacts_reported] to be set high enough to detect all the collisions. [TileMap]s are detected if the [TileSet] has Collision [Shape2D]s.\n\t\t\t\t[code]body_id[/code] the [RID] of the other [PhysicsBody2D] or [TileSet]'s [CollisionObject2D] used by the [Physics2DServer].\n\t\t\t\t[code]body[/code] the [Node], if it exists in the tree, of the other [PhysicsBody2D] or [TileMap].\n\t\t\t\t[code]body_shape[/code] the index of the [Shape2D] of the other [PhysicsBody2D] or [TileMap] used by the [Physics2DServer].\n\t\t\t\t[code]local_shape[/code] the index of the [Shape2D] of this RigidBody2D used by the [Physics2DServer]."
          },
          {
            "argument": [
              {
                "name": "body_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "body",
                "type": "Node",
                "index": "1"
              },
              {
                "name": "body_shape",
                "type": "int",
                "index": "2"
              },
              {
                "name": "local_shape",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "body_shape_exited",
            "description": "Emitted when the collision between one of this RigidBody2D's [Shape2D]s and another [PhysicsBody2D] or [TileMap]'s [Shape2D]s ends. Requires [member contact_monitor] to be set to [code]true[/code] and [member contacts_reported] to be set high enough to detect all the collisions. [TileMap]s are detected if the [TileSet] has Collision [Shape2D]s.\n\t\t\t\t[code]body_id[/code] the [RID] of the other [PhysicsBody2D] or [TileSet]'s [CollisionObject2D] used by the [Physics2DServer].\n\t\t\t\t[code]body[/code] the [Node], if it exists in the tree, of the other [PhysicsBody2D] or [TileMap].\n\t\t\t\t[code]body_shape[/code] the index of the [Shape2D] of the other [PhysicsBody2D] or [TileMap] used by the [Physics2DServer].\n\t\t\t\t[code]local_shape[/code] the index of the [Shape2D] of this RigidBody2D used by the [Physics2DServer]."
          },
          {
            "name": "sleeping_state_changed",
            "description": "Emitted when the physics engine changes the body's sleeping state.\n\t\t\t\t[b]Note:[/b] Changing the value [member sleeping] will not trigger this signal. It is only emitted if the sleeping state is changed by the physics engine or [code]emit_signal(\"sleeping_state_changed\")[/code] is used."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "MODE_RIGID",
            "enum": "Mode"
          },
          {
            "value": "1",
            "name": "MODE_STATIC",
            "enum": "Mode"
          },
          {
            "value": "2",
            "name": "MODE_CHARACTER",
            "enum": "Mode"
          },
          {
            "value": "3",
            "name": "MODE_KINEMATIC",
            "enum": "Mode"
          },
          {
            "value": "0",
            "name": "CCD_MODE_DISABLED",
            "enum": "CCDMode"
          },
          {
            "value": "1",
            "name": "CCD_MODE_CAST_RAY",
            "enum": "CCDMode"
          },
          {
            "value": "2",
            "name": "CCD_MODE_CAST_SHAPE",
            "enum": "CCDMode"
          }
        ]
      },
      "brief_description": "A body that is controlled by the 2D physics engine.",
      "description": "This node implements simulated 2D physics. You do not control a RigidBody2D directly. Instead, you apply forces to it (gravity, impulses, etc.) and the physics simulation calculates the resulting movement based on its mass, friction, and other physical properties.\n\t\tA RigidBody2D has 4 behavior [member mode]s: Rigid, Static, Character, and Kinematic.\n\t\t[b]Note:[/b] You should not change a RigidBody2D's [code]position[/code] or [code]linear_velocity[/code] every frame or even very often. If you need to directly affect the body's state, use [method _integrate_forces], which allows you to directly access the physics state.\n\t\tPlease also keep in mind that physics bodies manage their own transform which overwrites the ones you set. So any direct or indirect transformation (including scaling of the node or its parent) will be visible in the editor only, and immediately reset at runtime.\n\t\tIf you need to override the default physics behavior or add a transformation at runtime, you can write a custom force integration. See [member custom_integrator].\n\t\tThe center of mass is always located at the node's origin without taking into account the [CollisionShape2D] centroid offsets."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html",
            "title": "Physics introduction"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/524",
            "title": "3D Truck Town Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/675",
            "title": "3D Physics Tests Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "-1.0",
            "value": "Damps RigidBody's rotational forces.\n\t\t\tSee [member ProjectSettings.physics/3d/default_angular_damp] for more details about damping.",
            "setter": "set_angular_damp",
            "name": "angular_damp",
            "getter": "get_angular_damp",
            "type": "float"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "RigidBody's rotational velocity.",
            "setter": "set_angular_velocity",
            "name": "angular_velocity",
            "getter": "get_angular_velocity",
            "type": "Vector3"
          },
          {
            "default": "false",
            "value": "Lock the body's rotation in the X axis.",
            "setter": "set_axis_lock",
            "name": "axis_lock_angular_x",
            "getter": "get_axis_lock",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Lock the body's rotation in the Y axis.",
            "setter": "set_axis_lock",
            "name": "axis_lock_angular_y",
            "getter": "get_axis_lock",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Lock the body's rotation in the Z axis.",
            "setter": "set_axis_lock",
            "name": "axis_lock_angular_z",
            "getter": "get_axis_lock",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Lock the body's movement in the X axis.",
            "setter": "set_axis_lock",
            "name": "axis_lock_linear_x",
            "getter": "get_axis_lock",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Lock the body's movement in the Y axis.",
            "setter": "set_axis_lock",
            "name": "axis_lock_linear_y",
            "getter": "get_axis_lock",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Lock the body's movement in the Z axis.",
            "setter": "set_axis_lock",
            "name": "axis_lock_linear_z",
            "getter": "get_axis_lock",
            "type": "bool"
          },
          {
            "value": "The body's bounciness. Values range from [code]0[/code] (no bounce) to [code]1[/code] (full bounciness).\n\t\t\tDeprecated, use [member PhysicsMaterial.bounce] instead via [member physics_material_override].",
            "setter": "set_bounce",
            "name": "bounce",
            "getter": "get_bounce",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the body can enter sleep mode when there is no movement. See [member sleeping].\n\t\t\t[b]Note:[/b] A RigidBody3D will never enter sleep mode automatically if its [member mode] is [constant MODE_CHARACTER]. It can still be put to sleep manually by setting its [member sleeping] property to [code]true[/code].",
            "setter": "set_can_sleep",
            "name": "can_sleep",
            "getter": "is_able_to_sleep",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the RigidBody will emit signals when it collides with another RigidBody. See also [member contacts_reported].",
            "setter": "set_contact_monitor",
            "name": "contact_monitor",
            "getter": "is_contact_monitor_enabled",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "The maximum number of contacts that will be recorded. Requires [member contact_monitor] to be set to [code]true[/code].\n\t\t\t[b]Note:[/b] The number of contacts is different from the number of collisions. Collisions between parallel edges will result in two contacts (one at each end), and collisions between parallel faces will result in four contacts (one at each corner).",
            "setter": "set_max_contacts_reported",
            "name": "contacts_reported",
            "getter": "get_max_contacts_reported",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], continuous collision detection is used.\n\t\t\tContinuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. Continuous collision detection is more precise, and misses fewer impacts by small, fast-moving objects. Not using continuous collision detection is faster to compute, but can miss small, fast-moving objects.",
            "setter": "set_use_continuous_collision_detection",
            "name": "continuous_cd",
            "getter": "is_using_continuous_collision_detection",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], internal force integration will be disabled (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the [method _integrate_forces] function, if defined.",
            "setter": "set_use_custom_integrator",
            "name": "custom_integrator",
            "getter": "is_using_custom_integrator",
            "type": "bool"
          },
          {
            "value": "The body's friction, from 0 (frictionless) to 1 (max friction).\n\t\t\tDeprecated, use [member PhysicsMaterial.friction] instead via [member physics_material_override].",
            "setter": "set_friction",
            "name": "friction",
            "getter": "get_friction",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "This is multiplied by the global 3D gravity setting found in [b]Project > Project Settings > Physics > 3d[/b] to produce RigidBody's gravity. For example, a value of 1 will be normal gravity, 2 will apply double gravity, and 0.5 will apply half gravity to this object.",
            "setter": "set_gravity_scale",
            "name": "gravity_scale",
            "getter": "get_gravity_scale",
            "type": "float"
          },
          {
            "default": "-1.0",
            "value": "The body's linear damp. Cannot be less than -1.0. If this value is different from -1.0, any linear damp derived from the world or areas will be overridden.\n\t\t\tSee [member ProjectSettings.physics/3d/default_linear_damp] for more details about damping.",
            "setter": "set_linear_damp",
            "name": "linear_damp",
            "getter": "get_linear_damp",
            "type": "float"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "The body's linear velocity. Can be used sporadically, but [b]don't set this every frame[/b], because physics may run in another thread and runs at a different granularity. Use [method _integrate_forces] as your process loop for precise control of the body state.",
            "setter": "set_linear_velocity",
            "name": "linear_velocity",
            "getter": "get_linear_velocity",
            "type": "Vector3"
          },
          {
            "default": "1.0",
            "value": "The body's mass.",
            "setter": "set_mass",
            "name": "mass",
            "getter": "get_mass",
            "type": "float"
          },
          {
            "default": "0",
            "value": "The body mode. See [enum Mode] for possible values.",
            "setter": "set_mode",
            "name": "mode",
            "getter": "get_mode",
            "type": "int",
            "enum": "RigidBody.Mode"
          },
          {
            "value": "The physics material override for the body.\n\t\t\tIf a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one.",
            "setter": "set_physics_material_override",
            "name": "physics_material_override",
            "getter": "get_physics_material_override",
            "type": "PhysicsMaterial"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the body will not move and will not calculate forces until woken up by another body through, for example, a collision, or by using the [method apply_impulse] or [method add_force] methods.",
            "setter": "set_sleeping",
            "name": "sleeping",
            "getter": "is_sleeping",
            "type": "bool"
          },
          {
            "default": "9.8",
            "value": "The body's weight based on its mass and the global 3D gravity. Global values are set in [b]Project > Project Settings > Physics > 3d[/b].",
            "setter": "set_weight",
            "name": "weight",
            "getter": "get_weight",
            "type": "float"
          }
        ]
      },
      "inherits": "PhysicsBody",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "state",
              "type": "PhysicsDirectBodyState",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_integrate_forces",
            "description": "Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default, it works in addition to the usual physics behavior, but the [member custom_integrator] property allows you to disable the default behavior and do fully custom force integration for a body."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "force",
              "type": "Vector3",
              "index": "0"
            },
            "name": "add_central_force",
            "description": "Adds a constant directional force (i.e. acceleration) without affecting rotation.\n\t\t\t\tThis is equivalent to [code]add_force(force, Vector3(0,0,0))[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "force",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "add_force",
            "description": "Adds a constant directional force (i.e. acceleration).\n\t\t\t\tThe position uses the rotation of the global coordinate system, but is centered at the object's origin."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "torque",
              "type": "Vector3",
              "index": "0"
            },
            "name": "add_torque",
            "description": "Adds a constant rotational force (i.e. a motor) without affecting position."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "impulse",
              "type": "Vector3",
              "index": "0"
            },
            "name": "apply_central_impulse",
            "description": "Applies a directional impulse without affecting rotation.\n\t\t\t\tThis is equivalent to [code]apply_impulse(Vector3(0,0,0), impulse)[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "position",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "impulse",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "apply_impulse",
            "description": "Applies a positioned impulse to the body. An impulse is time independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason it should only be used when simulating one-time impacts. The position uses the rotation of the global coordinate system, but is centered at the object's origin."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "impulse",
              "type": "Vector3",
              "index": "0"
            },
            "name": "apply_torque_impulse",
            "description": "Applies a torque impulse which will be affected by the body mass and shape. This will rotate the body around the [code]impulse[/code] vector passed."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "axis",
              "type": "int",
              "enum": "PhysicsServer.BodyAxis",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_axis_lock",
            "description": "Returns [code]true[/code] if the specified linear or rotational axis is locked."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_colliding_bodies",
            "description": "Returns a list of the bodies colliding with this one. Requires [member contact_monitor] to be set to [code]true[/code] and [member contacts_reported] to be set high enough to detect all the collisions.\n\t\t\t\t[b]Note:[/b] The result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead."
          },
          {
            "return": {
              "type": "Basis"
            },
            "name": "get_inverse_inertia_tensor",
            "description": "Returns the inverse inertia tensor basis. This is used to calculate the angular acceleration resulting from a torque applied to the RigidBody."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "axis",
                "type": "int",
                "enum": "PhysicsServer.BodyAxis",
                "index": "0"
              },
              {
                "name": "lock",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_axis_lock",
            "description": "Locks the specified linear or rotational axis."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "axis_velocity",
              "type": "Vector3",
              "index": "0"
            },
            "name": "set_axis_velocity",
            "description": "Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior."
          }
        ]
      },
      "name": "RigidBody",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "body",
              "type": "Node",
              "index": "0"
            },
            "name": "body_entered",
            "description": "Emitted when a collision with another [PhysicsBody] or [GridMap] occurs. Requires [member contact_monitor] to be set to [code]true[/code] and [member contacts_reported] to be set high enough to detect all the collisions. [GridMap]s are detected if the [MeshLibrary] has Collision [Shape]s.\n\t\t\t\t[code]body[/code] the [Node], if it exists in the tree, of the other [PhysicsBody] or [GridMap]."
          },
          {
            "argument": {
              "name": "body",
              "type": "Node",
              "index": "0"
            },
            "name": "body_exited",
            "description": "Emitted when the collision with another [PhysicsBody] or [GridMap] ends. Requires [member contact_monitor] to be set to [code]true[/code] and [member contacts_reported] to be set high enough to detect all the collisions. [GridMap]s are detected if the [MeshLibrary] has Collision [Shape]s.\n\t\t\t\t[code]body[/code] the [Node], if it exists in the tree, of the other [PhysicsBody] or [GridMap]."
          },
          {
            "argument": [
              {
                "name": "body_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "body",
                "type": "Node",
                "index": "1"
              },
              {
                "name": "body_shape",
                "type": "int",
                "index": "2"
              },
              {
                "name": "local_shape",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "body_shape_entered",
            "description": "Emitted when one of this RigidBody's [Shape]s collides with another [PhysicsBody] or [GridMap]'s [Shape]s. Requires [member contact_monitor] to be set to [code]true[/code] and [member contacts_reported] to be set high enough to detect all the collisions. [GridMap]s are detected if the [MeshLibrary] has Collision [Shape]s.\n\t\t\t\t[code]body_id[/code] the [RID] of the other [PhysicsBody] or [MeshLibrary]'s [CollisionObject] used by the [PhysicsServer].\n\t\t\t\t[code]body[/code] the [Node], if it exists in the tree, of the other [PhysicsBody] or [GridMap].\n\t\t\t\t[code]body_shape[/code] the index of the [Shape] of the other [PhysicsBody] or [GridMap] used by the [PhysicsServer].\n\t\t\t\t[code]local_shape[/code] the index of the [Shape] of this RigidBody used by the [PhysicsServer].\n\t\t\t\t[b]Note:[/b] Bullet physics cannot identify the shape index when using a [ConcavePolygonShape]. Don't use multiple [CollisionShape]s when using a [ConcavePolygonShape] with Bullet physics if you need shape indices."
          },
          {
            "argument": [
              {
                "name": "body_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "body",
                "type": "Node",
                "index": "1"
              },
              {
                "name": "body_shape",
                "type": "int",
                "index": "2"
              },
              {
                "name": "local_shape",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "body_shape_exited",
            "description": "Emitted when the collision between one of this RigidBody's [Shape]s and another [PhysicsBody] or [GridMap]'s [Shape]s ends. Requires [member contact_monitor] to be set to [code]true[/code] and [member contacts_reported] to be set high enough to detect all the collisions. [GridMap]s are detected if the [MeshLibrary] has Collision [Shape]s.\n\t\t\t\t[code]body_id[/code] the [RID] of the other [PhysicsBody] or [MeshLibrary]'s [CollisionObject] used by the [PhysicsServer]. [GridMap]s are detected if the Meshes have [Shape]s.\n\t\t\t\t[code]body[/code] the [Node], if it exists in the tree, of the other [PhysicsBody] or [GridMap].\n\t\t\t\t[code]body_shape[/code] the index of the [Shape] of the other [PhysicsBody] or [GridMap] used by the [PhysicsServer].\n\t\t\t\t[code]local_shape[/code] the index of the [Shape] of this RigidBody used by the [PhysicsServer].\n\t\t\t\t[b]Note:[/b] Bullet physics cannot identify the shape index when using a [ConcavePolygonShape]. Don't use multiple [CollisionShape]s when using a [ConcavePolygonShape] with Bullet physics if you need shape indices."
          },
          {
            "name": "sleeping_state_changed",
            "description": "Emitted when the physics engine changes the body's sleeping state.\n\t\t\t\t[b]Note:[/b] Changing the value [member sleeping] will not trigger this signal. It is only emitted if the sleeping state is changed by the physics engine or [code]emit_signal(\"sleeping_state_changed\")[/code] is used."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "MODE_RIGID",
            "enum": "Mode"
          },
          {
            "value": "1",
            "name": "MODE_STATIC",
            "enum": "Mode"
          },
          {
            "value": "2",
            "name": "MODE_CHARACTER",
            "enum": "Mode"
          },
          {
            "value": "3",
            "name": "MODE_KINEMATIC",
            "enum": "Mode"
          }
        ]
      },
      "brief_description": "Physics Body whose position is determined through physics simulation in 3D space.",
      "description": "This is the node that implements full 3D physics. This means that you do not control a RigidBody directly. Instead, you can apply forces to it (gravity, impulses, etc.), and the physics simulation will calculate the resulting movement, collision, bouncing, rotating, etc.\n\t\tA RigidBody has 4 behavior [member mode]s: Rigid, Static, Character, and Kinematic.\n\t\t[b]Note:[/b] Don't change a RigidBody's position every frame or very often. Sporadic changes work fine, but physics runs at a different granularity (fixed Hz) than usual rendering (process callback) and maybe even in a separate thread, so changing this from a process loop may result in strange behavior. If you need to directly affect the body's state, use [method _integrate_forces], which allows you to directly access the physics state.\n\t\tIf you need to override the default physics behavior, you can write a custom force integration function. See [member custom_integrator].\n\t\tWith Bullet physics (the default), the center of mass is the RigidBody3D center. With GodotPhysics, the center of mass is the average of the [CollisionShape] centers."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://docs.godotengine.org/en/latest/tutorials/animation/animation_tree.html#root-motion",
          "title": "Using AnimationTree - Root motion"
        }
      },
      "members": {
        "member": [
          {
            "value": "Path to an [AnimationTree] node to use as a basis for root motion.",
            "setter": "set_animation_path",
            "name": "animation_path",
            "getter": "get_animation_path",
            "type": "NodePath"
          },
          {
            "value": "The grid's cell size in 3D units.",
            "setter": "set_cell_size",
            "name": "cell_size",
            "getter": "get_cell_size",
            "type": "float"
          },
          {
            "value": "The grid's color.",
            "setter": "set_color",
            "name": "color",
            "getter": "get_color",
            "type": "Color"
          },
          {
            "value": "The grid's radius in 3D units. The grid's opacity will fade gradually as the distance from the origin increases until this [member radius] is reached.",
            "setter": "set_radius",
            "name": "radius",
            "getter": "get_radius",
            "type": "float"
          },
          {
            "value": "If [code]true[/code], the grid's points will all be on the same Y coordinate ([i]local[/i] Y = 0). If [code]false[/code], the points' original Y coordinate is preserved.",
            "setter": "set_zero_y",
            "name": "zero_y",
            "getter": "get_zero_y",
            "type": "bool"
          }
        ]
      },
      "inherits": "VisualInstance",
      "methods": {},
      "name": "RootMotionView",
      "version": "3.3",
      "constants": {},
      "brief_description": "Editor-only helper for setting up root motion in [AnimationTree].",
      "description": "[i]Root motion[/i] refers to an animation technique where a mesh's skeleton is used to give impulse to a character. When working with 3D animations, a popular technique is for animators to use the root skeleton bone to give motion to the rest of the skeleton. This allows animating characters in a way where steps actually match the floor below. It also allows precise interaction with objects during cinematics. See also [AnimationTree].\n\t\t[b]Note:[/b] [RootMotionView] is only visible in the editor. It will be hidden automatically in the running project, and will also be converted to a plain [Node] in the running project. This means a script attached to a [RootMotionView] node [i]must[/i] have [code]extends Node[/code] instead of [code]extends RootMotionView[/code]. Additionally, it must not be a [code]@tool[/code] script."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_connection_binds",
            "description": "Returns the list of bound parameters for the signal at [code]idx[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_connection_count",
            "description": "Returns the number of signal connections in the scene.\n\t\t\t\tThe [code]idx[/code] argument used to query connection metadata in other [code]get_connection_*[/code] methods in the interval [code][0, get_connection_count() - 1][/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_connection_flags",
            "description": "Returns the connection flags for the signal at [code]idx[/code]. See [enum Object.ConnectFlags] constants."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_connection_method",
            "description": "Returns the method connected to the signal at [code]idx[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_connection_signal",
            "description": "Returns the name of the signal at [code]idx[/code]."
          },
          {
            "return": {
              "type": "NodePath"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_connection_source",
            "description": "Returns the path to the node that owns the signal at [code]idx[/code], relative to the root node."
          },
          {
            "return": {
              "type": "NodePath"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_connection_target",
            "description": "Returns the path to the node that owns the method connected to the signal at [code]idx[/code], relative to the root node."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_node_count",
            "description": "Returns the number of nodes in the scene.\n\t\t\t\tThe [code]idx[/code] argument used to query node data in other [code]get_node_*[/code] methods in the interval [code][0, get_node_count() - 1][/code]."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_node_groups",
            "description": "Returns the list of group names associated with the node at [code]idx[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_node_index",
            "description": "Returns the node's index, which is its position relative to its siblings. This is only relevant and saved in scenes for cases where new nodes are added to an instanced or inherited scene among siblings from the base scene. Despite the name, this index is not related to the [code]idx[/code] argument used here and in other methods."
          },
          {
            "return": {
              "type": "PackedScene"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_node_instance",
            "description": "Returns a [PackedScene] for the node at [code]idx[/code] (i.e. the whole branch starting at this node, with its child nodes and resources), or [code]null[/code] if the node is not an instance."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_node_instance_placeholder",
            "description": "Returns the path to the represented scene file if the node at [code]idx[/code] is an [InstancePlaceholder]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_node_name",
            "description": "Returns the name of the node at [code]idx[/code]."
          },
          {
            "return": {
              "type": "NodePath"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_node_owner_path",
            "description": "Returns the path to the owner of the node at [code]idx[/code], relative to the root node."
          },
          {
            "return": {
              "type": "NodePath"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "default": "false",
                "name": "for_parent",
                "type": "bool",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_node_path",
            "description": "Returns the path to the node at [code]idx[/code].\n\t\t\t\tIf [code]for_parent[/code] is [code]true[/code], returns the path of the [code]idx[/code] node's parent instead."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_node_property_count",
            "description": "Returns the number of exported or overridden properties for the node at [code]idx[/code].\n\t\t\t\tThe [code]prop_idx[/code] argument used to query node property data in other [code]get_node_property_*[/code] methods in the interval [code][0, get_node_property_count() - 1][/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "prop_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_node_property_name",
            "description": "Returns the name of the property at [code]prop_idx[/code] for the node at [code]idx[/code]."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "prop_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_node_property_value",
            "description": "Returns the value of the property at [code]prop_idx[/code] for the node at [code]idx[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_node_type",
            "description": "Returns the type of the node at [code]idx[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_node_instance_placeholder",
            "description": "Returns [code]true[/code] if the node at [code]idx[/code] is an [InstancePlaceholder]."
          }
        ]
      },
      "name": "SceneState",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "GEN_EDIT_STATE_DISABLED",
            "enum": "GenEditState"
          },
          {
            "value": "1",
            "name": "GEN_EDIT_STATE_INSTANCE",
            "enum": "GenEditState"
          },
          {
            "value": "2",
            "name": "GEN_EDIT_STATE_MAIN",
            "enum": "GenEditState"
          }
        ]
      },
      "brief_description": "A script interface to a scene file's data.",
      "description": "Maintains a list of resources, nodes, exported, and overridden properties, and built-in scripts associated with a scene.\n\t\tThis class cannot be instantiated directly, it is retrieved for a given scene as the result of [method PackedScene.get_state]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "value": "The time remaining.",
          "setter": "set_time_left",
          "name": "time_left",
          "getter": "get_time_left",
          "type": "float"
        }
      },
      "inherits": "Reference",
      "methods": {},
      "name": "SceneTreeTimer",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "timeout",
          "description": "Emitted when the timer reaches 0."
        }
      },
      "constants": {},
      "brief_description": "One-shot timer.",
      "description": "A one-shot timer managed by the scene tree, which emits [signal timeout] on completion. See also [method SceneTree.create_timer].\n\t\tAs opposed to [Timer], it does not require the instantiation of a node. Commonly used to create a one-shot delay timer as in the following example:\n\t\t[codeblock]\n\t\tfunc some_function():\n\t\t    print(\"Timer started.\")\n\t\t    yield(get_tree().create_timer(1.0), \"timeout\")\n\t\t    print(\"Timer ended.\")\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          "https://docs.godotengine.org/en/3.3/getting_started/step_by_step/scene_tree.html",
          "https://docs.godotengine.org/en/3.3/tutorials/viewports/multiple_resolutions.html"
        ]
      },
      "members": {
        "member": [
          {
            "value": "The current scene.",
            "setter": "set_current_scene",
            "name": "current_scene",
            "getter": "get_current_scene",
            "type": "Node"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], collision shapes will be visible when running the game from the editor for debugging purposes.",
            "setter": "set_debug_collisions_hint",
            "name": "debug_collisions_hint",
            "getter": "is_debugging_collisions_hint",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], navigation polygons will be visible when running the game from the editor for debugging purposes.",
            "setter": "set_debug_navigation_hint",
            "name": "debug_navigation_hint",
            "getter": "is_debugging_navigation_hint",
            "type": "bool"
          },
          {
            "value": "The root of the edited scene.",
            "setter": "set_edited_scene_root",
            "name": "edited_scene_root",
            "getter": "get_edited_scene_root",
            "type": "Node"
          },
          {
            "value": "The default [MultiplayerAPI] instance for this [SceneTree].",
            "setter": "set_multiplayer",
            "name": "multiplayer",
            "getter": "get_multiplayer",
            "type": "MultiplayerAPI"
          },
          {
            "default": "true",
            "value": "If [code]true[/code] (default value), enables automatic polling of the [MultiplayerAPI] for this SceneTree during [signal idle_frame].\n\t\t\tIf [code]false[/code], you need to manually call [method MultiplayerAPI.poll] to process network packets and deliver RPCs/RSETs. This allows running RPCs/RSETs in a different loop (e.g. physics, thread, specific time step) and for manual [Mutex] protection when accessing the [MultiplayerAPI] from threads.",
            "setter": "set_multiplayer_poll_enabled",
            "name": "multiplayer_poll",
            "getter": "is_multiplayer_poll_enabled",
            "type": "bool"
          },
          {
            "value": "The peer object to handle the RPC system (effectively enabling networking when set). Depending on the peer itself, the [SceneTree] will become a network server (check with [method is_network_server]) and will set the root node's network mode to master, or it will become a regular peer with the root node set to puppet. All child nodes are set to inherit the network mode by default. Handling of networking-related events (connection, disconnection, new clients) is done by connecting to [SceneTree]'s signals.",
            "setter": "set_network_peer",
            "name": "network_peer",
            "getter": "get_network_peer",
            "type": "NetworkedMultiplayerPeer"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the [SceneTree] is paused. Doing so will have the following behavior:\n\t\t\t- 2D and 3D physics will be stopped.\n\t\t\t- [method Node._process], [method Node._physics_process] and [method Node._input] will not be called anymore in nodes.",
            "setter": "set_pause",
            "name": "paused",
            "getter": "is_paused",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the [SceneTree]'s [member network_peer] refuses new incoming connections.",
            "setter": "set_refuse_new_network_connections",
            "name": "refuse_new_network_connections",
            "getter": "is_refusing_new_network_connections",
            "type": "bool"
          },
          {
            "value": "The [SceneTree]'s root [Viewport].",
            "setter": "",
            "name": "root",
            "getter": "get_root",
            "type": "Viewport"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], font oversampling is used.",
            "setter": "set_use_font_oversampling",
            "name": "use_font_oversampling",
            "getter": "is_using_font_oversampling",
            "type": "bool"
          }
        ]
      },
      "inherits": "MainLoop",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "group",
                "type": "String",
                "index": "0"
              },
              {
                "name": "method",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "vararg",
            "name": "call_group",
            "description": "Calls [code]method[/code] on each member of the given group. You can pass arguments to [code]method[/code] by specifying them at the end of the method call.\n\t\t\t\t[b]Note:[/b] [code]method[/code] may only have 5 arguments at most (7 arguments passed to this method in total).\n\t\t\t\t[b]Note:[/b] [method call_group] will always call methods with an one-frame delay, in a way similar to [method Object.call_deferred]. To call methods immediately, use [method call_group_flags] with the [constant GROUP_CALL_REALTIME] flag."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "flags",
                "type": "int",
                "index": "0"
              },
              {
                "name": "group",
                "type": "String",
                "index": "1"
              },
              {
                "name": "method",
                "type": "String",
                "index": "2"
              }
            ],
            "qualifiers": "vararg",
            "name": "call_group_flags",
            "description": "Calls [code]method[/code] on each member of the given group, respecting the given [enum GroupCallFlags]. You can pass arguments to [code]method[/code] by specifying them at the end of the method call.\n\t\t\t\t[b]Note:[/b] [code]method[/code] may only have 5 arguments at most (8 arguments passed to this method in total).\n\t\t\t\t[b]Note:[/b] Group call flags are used to control the method calling behavior. If the [constant GROUP_CALL_REALTIME] flag is present in the [code]flags[/code] argument, methods will be called immediately. If this flag isn't present in [code]flags[/code], methods will be called with a one-frame delay in a way similar to [method call_group]."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "change_scene",
            "description": "Changes the running scene to the one at the given [code]path[/code], after loading it into a [PackedScene] and creating a new instance.\n\t\t\t\tReturns [constant OK] on success, [constant ERR_CANT_OPEN] if the [code]path[/code] cannot be loaded into a [PackedScene], or [constant ERR_CANT_CREATE] if that scene cannot be instantiated.\n\t\t\t\t[b]Note:[/b] The scene change is deferred, which means that the new scene node is added on the next idle frame. You won't be able to access it immediately after the [method change_scene] call."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "packed_scene",
              "type": "PackedScene",
              "index": "0"
            },
            "name": "change_scene_to",
            "description": "Changes the running scene to a new instance of the given [PackedScene].\n\t\t\t\tReturns [constant OK] on success or [constant ERR_CANT_CREATE] if the scene cannot be instantiated.\n\t\t\t\t[b]Note:[/b] The scene change is deferred, which means that the new scene node is added on the next idle frame. You won't be able to access it immediately after the [method change_scene_to] call."
          },
          {
            "return": {
              "type": "SceneTreeTimer"
            },
            "argument": [
              {
                "name": "time_sec",
                "type": "float",
                "index": "0"
              },
              {
                "default": "true",
                "name": "pause_mode_process",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "create_timer",
            "description": "Returns a [SceneTreeTimer] which will [signal SceneTreeTimer.timeout] after the given time in seconds elapsed in this [SceneTree]. If [code]pause_mode_process[/code] is set to [code]false[/code], pausing the [SceneTree] will also pause the timer.\n\t\t\t\tCommonly used to create a one-shot delay timer as in the following example:\n\t\t\t\t[codeblock]\n\t\t\t\tfunc some_function():\n\t\t\t\t    print(\"start\")\n\t\t\t\t    yield(get_tree().create_timer(1.0), \"timeout\")\n\t\t\t\t    print(\"end\")\n\t\t\t\t[/codeblock]\n\t\t\t\tThe timer will be automatically freed after its time elapses."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_frame",
            "description": "Returns the current frame number, i.e. the total frame count since the application started."
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "qualifiers": "const",
            "name": "get_network_connected_peers",
            "description": "Returns the peer IDs of all connected peers of this [SceneTree]'s [member network_peer]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_network_unique_id",
            "description": "Returns the unique peer ID of this [SceneTree]'s [member network_peer]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_node_count",
            "description": "Returns the number of nodes in this [SceneTree]."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "group",
              "type": "String",
              "index": "0"
            },
            "name": "get_nodes_in_group",
            "description": "Returns a list of all nodes assigned to the given group."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_rpc_sender_id",
            "description": "Returns the sender's peer ID for the most recently received RPC call."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_group",
            "description": "Returns [code]true[/code] if the given group exists."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "has_network_peer",
            "description": "Returns [code]true[/code] if there is a [member network_peer] set."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_input_handled",
            "description": "Returns [code]true[/code] if the most recent [InputEvent] was marked as handled with [method set_input_as_handled]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_network_server",
            "description": "Returns [code]true[/code] if this [SceneTree]'s [member network_peer] is in server mode (listening for connections)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "group",
                "type": "String",
                "index": "0"
              },
              {
                "name": "notification",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "notify_group",
            "description": "Sends the given notification to all members of the [code]group[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "call_flags",
                "type": "int",
                "index": "0"
              },
              {
                "name": "group",
                "type": "String",
                "index": "1"
              },
              {
                "name": "notification",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "notify_group_flags",
            "description": "Sends the given notification to all members of the [code]group[/code], respecting the given [enum GroupCallFlags]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "obj",
              "type": "Object",
              "index": "0"
            },
            "name": "queue_delete",
            "description": "Queues the given object for deletion, delaying the call to [method Object.free] to after the current frame."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "-1",
              "name": "exit_code",
              "type": "int",
              "index": "0"
            },
            "name": "quit",
            "description": "Quits the application at the end of the current iteration. A process [code]exit_code[/code] can optionally be passed as an argument. If this argument is [code]0[/code] or greater, it will override the [member OS.exit_code] defined before quitting the application.\n\t\t\t\t[b]Note:[/b] On iOS this method doesn't work. Instead, as recommended by the iOS Human Interface Guidelines, the user is expected to close apps via the Home button."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "name": "reload_current_scene",
            "description": "Reloads the currently active scene.\n\t\t\t\tReturns [constant OK] on success, [constant ERR_UNCONFIGURED] if no [member current_scene] was defined yet, [constant ERR_CANT_OPEN] if [member current_scene] cannot be loaded into a [PackedScene], or [constant ERR_CANT_CREATE] if the scene cannot be instantiated."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enabled",
              "type": "bool",
              "index": "0"
            },
            "name": "set_auto_accept_quit",
            "description": "If [code]true[/code], the application automatically accepts quitting. Enabled by default.\n\t\t\t\tFor mobile platforms, see [method set_quit_on_go_back]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "group",
                "type": "String",
                "index": "0"
              },
              {
                "name": "property",
                "type": "String",
                "index": "1"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "2"
              }
            ],
            "name": "set_group",
            "description": "Sets the given [code]property[/code] to [code]value[/code] on all members of the given group."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "call_flags",
                "type": "int",
                "index": "0"
              },
              {
                "name": "group",
                "type": "String",
                "index": "1"
              },
              {
                "name": "property",
                "type": "String",
                "index": "2"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "3"
              }
            ],
            "name": "set_group_flags",
            "description": "Sets the given [code]property[/code] to [code]value[/code] on all members of the given group, respecting the given [enum GroupCallFlags]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "set_input_as_handled",
            "description": "Marks the most recent [InputEvent] as handled."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enabled",
              "type": "bool",
              "index": "0"
            },
            "name": "set_quit_on_go_back",
            "description": "If [code]true[/code], the application quits automatically on going back (e.g. on Android). Enabled by default.\n\t\t\t\tTo handle 'Go Back' button when this option is disabled, use [constant MainLoop.NOTIFICATION_WM_GO_BACK_REQUEST]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "mode",
                "type": "int",
                "enum": "SceneTree.StretchMode",
                "index": "0"
              },
              {
                "name": "aspect",
                "type": "int",
                "enum": "SceneTree.StretchAspect",
                "index": "1"
              },
              {
                "name": "minsize",
                "type": "Vector2",
                "index": "2"
              },
              {
                "default": "1",
                "name": "shrink",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "set_screen_stretch",
            "description": "Configures screen stretching to the given [enum StretchMode], [enum StretchAspect], minimum size and [code]shrink[/code] ratio."
          }
        ]
      },
      "name": "SceneTree",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "connected_to_server",
            "description": "Emitted whenever this [SceneTree]'s [member network_peer] successfully connected to a server. Only emitted on clients."
          },
          {
            "name": "connection_failed",
            "description": "Emitted whenever this [SceneTree]'s [member network_peer] fails to establish a connection to a server. Only emitted on clients."
          },
          {
            "argument": [
              {
                "name": "files",
                "type": "PoolStringArray",
                "index": "0"
              },
              {
                "name": "screen",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "files_dropped",
            "description": "Emitted when files are dragged from the OS file manager and dropped in the game window. The arguments are a list of file paths and the identifier of the screen where the drag originated."
          },
          {
            "argument": [
              {
                "name": "id",
                "type": "Variant",
                "index": "0"
              },
              {
                "name": "meta",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "global_menu_action",
            "description": "Emitted whenever global menu item is clicked."
          },
          {
            "name": "idle_frame",
            "description": "Emitted immediately before [method Node._process] is called on every node in the [SceneTree]."
          },
          {
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "network_peer_connected",
            "description": "Emitted whenever this [SceneTree]'s [member network_peer] connects with a new peer. ID is the peer ID of the new peer. Clients get notified when other clients connect to the same server. Upon connecting to a server, a client also receives this signal for the server (with ID being 1)."
          },
          {
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "network_peer_disconnected",
            "description": "Emitted whenever this [SceneTree]'s [member network_peer] disconnects from a peer. Clients get notified when other clients disconnect from the same server."
          },
          {
            "argument": {
              "name": "node",
              "type": "Node",
              "index": "0"
            },
            "name": "node_added",
            "description": "Emitted whenever a node is added to the [SceneTree]."
          },
          {
            "argument": {
              "name": "node",
              "type": "Node",
              "index": "0"
            },
            "name": "node_configuration_warning_changed",
            "description": "Emitted when a node's configuration changed. Only emitted in [code]tool[/code] mode."
          },
          {
            "argument": {
              "name": "node",
              "type": "Node",
              "index": "0"
            },
            "name": "node_removed",
            "description": "Emitted whenever a node is removed from the [SceneTree]."
          },
          {
            "argument": {
              "name": "node",
              "type": "Node",
              "index": "0"
            },
            "name": "node_renamed",
            "description": "Emitted whenever a node is renamed."
          },
          {
            "name": "physics_frame",
            "description": "Emitted immediately before [method Node._physics_process] is called on every node in the [SceneTree]."
          },
          {
            "name": "screen_resized",
            "description": "Emitted when the screen resolution (fullscreen) or window size (windowed) changes."
          },
          {
            "name": "server_disconnected",
            "description": "Emitted whenever this [SceneTree]'s [member network_peer] disconnected from server. Only emitted on clients."
          },
          {
            "name": "tree_changed",
            "description": "Emitted whenever the [SceneTree] hierarchy changed (children being moved or renamed, etc.)."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "GROUP_CALL_DEFAULT",
            "enum": "GroupCallFlags"
          },
          {
            "value": "1",
            "name": "GROUP_CALL_REVERSE",
            "enum": "GroupCallFlags"
          },
          {
            "value": "2",
            "name": "GROUP_CALL_REALTIME",
            "enum": "GroupCallFlags"
          },
          {
            "value": "4",
            "name": "GROUP_CALL_UNIQUE",
            "enum": "GroupCallFlags"
          },
          {
            "value": "0",
            "name": "STRETCH_MODE_DISABLED",
            "enum": "StretchMode"
          },
          {
            "value": "1",
            "name": "STRETCH_MODE_2D",
            "enum": "StretchMode"
          },
          {
            "value": "2",
            "name": "STRETCH_MODE_VIEWPORT",
            "enum": "StretchMode"
          },
          {
            "value": "0",
            "name": "STRETCH_ASPECT_IGNORE",
            "enum": "StretchAspect"
          },
          {
            "value": "1",
            "name": "STRETCH_ASPECT_KEEP",
            "enum": "StretchAspect"
          },
          {
            "value": "2",
            "name": "STRETCH_ASPECT_KEEP_WIDTH",
            "enum": "StretchAspect"
          },
          {
            "value": "3",
            "name": "STRETCH_ASPECT_KEEP_HEIGHT",
            "enum": "StretchAspect"
          },
          {
            "value": "4",
            "name": "STRETCH_ASPECT_EXPAND",
            "enum": "StretchAspect"
          }
        ]
      },
      "brief_description": "Manages the game loop via a hierarchy of nodes.",
      "description": "As one of the most important classes, the [SceneTree] manages the hierarchy of nodes in a scene as well as scenes themselves. Nodes can be added, retrieved and removed. The whole scene tree (and thus the current scene) can be paused. Scenes can be loaded, switched and reloaded.\n\t\tYou can also use the [SceneTree] to organize your nodes into groups: every node can be assigned as many groups as you want to create, e.g. an \"enemy\" group. You can then iterate these groups or even call methods and set properties on all the group's members at once.\n\t\t[SceneTree] is the default [MainLoop] implementation used by scenes, and is thus in charge of the game loop."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "false",
            "setter": "set_hide_on_ok",
            "override": "true",
            "name": "dialog_hide_on_ok",
            "getter": "get_hide_on_ok",
            "type": "bool"
          },
          {
            "default": "232.0",
            "setter": "set_margin",
            "override": "true",
            "name": "margin_bottom",
            "getter": "get_margin",
            "type": "float"
          },
          {
            "default": "361.0",
            "setter": "set_margin",
            "override": "true",
            "name": "margin_right",
            "getter": "get_margin",
            "type": "float"
          },
          {
            "default": "Vector2( 361, 232 )",
            "setter": "_set_size",
            "override": "true",
            "name": "rect_size",
            "getter": "get_size",
            "type": "Vector2"
          },
          {
            "default": "\"Attach Node Script\"",
            "setter": "set_title",
            "override": "true",
            "name": "window_title",
            "getter": "get_title",
            "type": "String"
          }
        ]
      },
      "inherits": "ConfirmationDialog",
      "methods": {
        "method": {
          "return": {
            "type": "void"
          },
          "argument": [
            {
              "name": "inherits",
              "type": "String",
              "index": "0"
            },
            {
              "name": "path",
              "type": "String",
              "index": "1"
            },
            {
              "default": "true",
              "name": "built_in_enabled",
              "type": "bool",
              "index": "2"
            },
            {
              "default": "true",
              "name": "load_enabled",
              "type": "bool",
              "index": "3"
            }
          ],
          "name": "config",
          "description": "Prefills required fields to configure the ScriptCreateDialog for use."
        }
      },
      "name": "ScriptCreateDialog",
      "version": "3.3",
      "signals": {
        "signal": {
          "argument": {
            "name": "script",
            "type": "Script",
            "index": "0"
          },
          "name": "script_created",
          "description": "Emitted when the user clicks the OK button."
        }
      },
      "constants": {},
      "brief_description": "The Editor's popup dialog for creating new [Script] files.",
      "description": "The [ScriptCreateDialog] creates script files according to a given template for a given scripting language. The standard use is to configure its fields prior to calling one of the [method Popup.popup] methods.\n\t\t[codeblock]\n\t\tfunc _ready():\n\t\t    dialog.config(\"Node\", \"res://new_node.gd\") # For in-engine types\n\t\t    dialog.config(\"\\\"res://base_node.gd\\\"\", \"res://derived_node.gd\") # For script types\n\t\t    dialog.popup_centered()\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "PanelContainer",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "point",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "data",
                "type": "Variant",
                "index": "1"
              },
              {
                "name": "from",
                "type": "Control",
                "index": "2"
              }
            ],
            "qualifiers": "const",
            "name": "can_drop_data_fw",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "point",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "data",
                "type": "Variant",
                "index": "1"
              },
              {
                "name": "from",
                "type": "Control",
                "index": "2"
              }
            ],
            "name": "drop_data_fw",
            "description": {}
          },
          {
            "return": {
              "type": "Script"
            },
            "name": "get_current_script",
            "description": "Returns a [Script] that is currently active in editor."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "point",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "from",
                "type": "Control",
                "index": "1"
              }
            ],
            "name": "get_drag_data_fw",
            "description": {}
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_open_scripts",
            "description": "Returns an array with all [Script] objects which are currently open in editor."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "line_number",
              "type": "int",
              "index": "0"
            },
            "name": "goto_line",
            "description": "Goes to the specified line in the current script."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "base_name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "base_path",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "open_script_create_dialog",
            "description": "Opens the script create dialog. The script will extend [code]base_name[/code]. The file extension can be omitted from [code]base_path[/code]. It will be added based on the selected scripting language."
          }
        ]
      },
      "name": "ScriptEditor",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "script",
              "type": "Script",
              "index": "0"
            },
            "name": "editor_script_changed",
            "description": "Emitted when user changed active script. Argument is a freshly activated [Script]."
          },
          {
            "argument": {
              "name": "script",
              "type": "Script",
              "index": "0"
            },
            "name": "script_close",
            "description": "Emitted when editor is about to close the active script. Argument is a [Script] that is going to be closed."
          }
        ]
      },
      "constants": {},
      "brief_description": "Godot editor's script editor.",
      "description": "[b]Note:[/b] This class shouldn't be instantiated directly. Instead, access the singleton using [method EditorInterface.get_script_editor]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/getting_started/step_by_step/scripting.html"
      },
      "members": {
        "member": {
          "value": "The script source code or an empty string if source code is not available. When set, does not reload the class implementation automatically.",
          "setter": "set_source_code",
          "name": "source_code",
          "getter": "get_source_code",
          "type": "String"
        }
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "can_instance",
            "description": "Returns [code]true[/code] if the script can be instanced."
          },
          {
            "return": {
              "type": "Script"
            },
            "qualifiers": "const",
            "name": "get_base_script",
            "description": "Returns the script directly inherited by this script."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_instance_base_type",
            "description": "Returns the script's base type."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "property",
              "type": "String",
              "index": "0"
            },
            "name": "get_property_default_value",
            "description": "Returns the default value of the specified property."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "name": "get_script_constant_map",
            "description": "Returns a dictionary containing constant names and their values."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "get_script_method_list",
            "description": "Returns the list of methods in this [Script]."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "get_script_property_list",
            "description": "Returns the list of properties in this [Script]."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "get_script_signal_list",
            "description": "Returns the list of user signals defined in this [Script]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "signal_name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_script_signal",
            "description": "Returns [code]true[/code] if the script, or a base class, defines a signal with the given name."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "has_source_code",
            "description": "Returns [code]true[/code] if the script contains non-empty source code."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "base_object",
              "type": "Object",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "instance_has",
            "description": "Returns [code]true[/code] if [code]base_object[/code] is an instance of this script."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_tool",
            "description": "Returns [code]true[/code] if the script is a tool script. A tool script can run in the editor."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "default": "false",
              "name": "keep_state",
              "type": "bool",
              "index": "0"
            },
            "name": "reload",
            "description": "Reloads the script's class implementation. Returns an error code."
          }
        ]
      },
      "name": "Script",
      "version": "3.3",
      "constants": {},
      "brief_description": "A class stored as a resource.",
      "description": "A class stored as a resource. A script extends the functionality of all objects that instance it.\n\t\tThe [code]new[/code] method of a script subclass creates a new instance. [method Object.set_script] extends an existing object, if that object's class matches one of the script's base classes."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "-1.0",
            "value": "Overrides the step used when clicking increment and decrement buttons or when using arrow keys when the [ScrollBar] is focused.",
            "setter": "set_custom_step",
            "name": "custom_step",
            "getter": "get_custom_step",
            "type": "float"
          },
          {
            "default": "0",
            "setter": "set_v_size_flags",
            "override": "true",
            "name": "size_flags_vertical",
            "getter": "get_v_size_flags",
            "type": "int"
          },
          {
            "default": "0.0",
            "setter": "set_step",
            "override": "true",
            "name": "step",
            "getter": "get_step",
            "type": "float"
          }
        ]
      },
      "inherits": "Range",
      "methods": {},
      "name": "ScrollBar",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "scrolling",
          "description": "Emitted when the scrollbar is being scrolled."
        }
      },
      "constants": {},
      "brief_description": "Base class for scroll bars.",
      "description": "Scrollbars are a [Range]-based [Control], that display a draggable area (the size of the page). Horizontal ([HScrollBar]) and Vertical ([VScrollBar]) versions are available."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": {
          "value": "The background [StyleBox] of the [ScrollContainer].",
          "name": "bg",
          "type": "StyleBox"
        }
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the ScrollContainer will automatically scroll to focused children (including indirect children) to make sure they are fully visible.",
            "setter": "set_follow_focus",
            "name": "follow_focus",
            "getter": "is_following_focus",
            "type": "bool"
          },
          {
            "default": "true",
            "setter": "set_clip_contents",
            "override": "true",
            "name": "rect_clip_content",
            "getter": "is_clipping_contents",
            "type": "bool"
          },
          {
            "default": "0",
            "setter": "set_deadzone",
            "name": "scroll_deadzone",
            "getter": "get_deadzone",
            "type": "int"
          },
          {
            "default": "0",
            "value": "The current horizontal scroll value.",
            "setter": "set_h_scroll",
            "name": "scroll_horizontal",
            "getter": "get_h_scroll",
            "type": "int"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables horizontal scrolling.",
            "setter": "set_enable_h_scroll",
            "name": "scroll_horizontal_enabled",
            "getter": "is_h_scroll_enabled",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "The current vertical scroll value.",
            "setter": "set_v_scroll",
            "name": "scroll_vertical",
            "getter": "get_v_scroll",
            "type": "int"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], enables vertical scrolling.",
            "setter": "set_enable_v_scroll",
            "name": "scroll_vertical_enabled",
            "getter": "is_v_scroll_enabled",
            "type": "bool"
          }
        ]
      },
      "inherits": "Container",
      "methods": {
        "method": [
          {
            "return": {
              "type": "HScrollBar"
            },
            "name": "get_h_scrollbar",
            "description": "Returns the horizontal scrollbar [HScrollBar] of this [ScrollContainer]."
          },
          {
            "return": {
              "type": "VScrollBar"
            },
            "name": "get_v_scrollbar",
            "description": "Returns the vertical scrollbar [VScrollBar] of this [ScrollContainer]."
          }
        ]
      },
      "name": "ScrollContainer",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "scroll_ended",
            "description": "Emitted when scrolling stops."
          },
          {
            "name": "scroll_started",
            "description": "Emitted when scrolling is started."
          }
        ]
      },
      "constants": {},
      "brief_description": "A helper node for displaying scrollable elements such as lists.",
      "description": "A ScrollContainer node meant to contain a [Control] child. ScrollContainers will automatically create a scrollbar child ([HScrollBar], [VScrollBar], or both) when needed and will only draw the Control within the ScrollContainer area. Scrollbars will automatically be drawn at the right (for vertical) or bottom (for horizontal) and will enable dragging to move the viewable Control (and its children) within the ScrollContainer. Scrollbars will also automatically resize the grabber based on the [member Control.rect_min_size] of the Control relative to the ScrollContainer. Works great with a [Panel] control. You can set [code]EXPAND[/code] on the children's size flags, so they will upscale to the ScrollContainer's size if it's larger (scroll is invisible for the chosen dimension)."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "Vector2( 0, 0 )",
            "value": "The segment's first point position.",
            "setter": "set_a",
            "name": "a",
            "getter": "get_a",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 10 )",
            "value": "The segment's second point position.",
            "setter": "set_b",
            "name": "b",
            "getter": "get_b",
            "type": "Vector2"
          }
        ]
      },
      "inherits": "Shape2D",
      "methods": {},
      "name": "SegmentShape2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Segment shape for 2D collisions.",
      "description": "Segment shape for 2D collisions. Consists of two points, [code]a[/code] and [code]b[/code]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/threads/using_multiple_threads.html"
      },
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "name": "post",
            "description": "Lowers the [Semaphore], allowing one more thread in. Returns [constant OK] on success, [constant ERR_BUSY] otherwise."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "name": "wait",
            "description": "Tries to wait for the [Semaphore], if its value is zero, blocks until non-zero. Returns [constant OK] on success, [constant ERR_BUSY] otherwise."
          }
        ]
      },
      "name": "Semaphore",
      "version": "3.3",
      "constants": {},
      "brief_description": "A synchronization semaphore.",
      "description": "A synchronization semaphore which can be used to synchronize multiple [Thread]s. Initialized to zero on creation. Be careful to avoid deadlocks. For a binary version, see [Mutex]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Control",
      "methods": {},
      "name": "Separator",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base class for separators.",
      "description": "Separator is a [Control] used for separating other controls. It's purely a visual decoration. Horizontal ([HSeparator]) and Vertical ([VSeparator]) versions are available."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/shading/index.html"
      },
      "members": {
        "member": {
          "value": "The [Shader] program used to render this material.",
          "setter": "set_shader",
          "name": "shader",
          "getter": "get_shader",
          "type": "Shader"
        }
      },
      "inherits": "Material",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "param",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_shader_param",
            "description": "Returns the current value set for this material of a uniform in the shader."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "property_can_revert",
            "description": "Returns [code]true[/code] if the property identified by [code]name[/code] can be reverted to a default value."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "property_get_revert",
            "description": "Returns the default value of the material property with given [code]name[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "param",
                "type": "String",
                "index": "0"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "set_shader_param",
            "description": "Changes the value set for this material of a uniform in the shader. [b]Note:[/b] [code]param[/code] must match the name of the uniform in the code exactly."
          }
        ]
      },
      "name": "ShaderMaterial",
      "version": "3.3",
      "constants": {},
      "brief_description": "A material that uses a custom [Shader] program.",
      "description": "A material that uses a custom [Shader] program to render either items to screen or process particles. You can create multiple materials for the same shader but configure different values for the uniforms defined in the shader.\n\t\t[b]Note:[/b] Due to a renderer limitation, emissive [ShaderMaterial]s cannot emit light when used in a [GIProbe]. Only emissive [SpatialMaterial]s can emit light in a [GIProbe]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          "https://docs.godotengine.org/en/3.3/tutorials/shading/index.html",
          "https://docs.godotengine.org/en/3.3/tutorials/shading/your_first_shader/what_are_shaders.html"
        ]
      },
      "members": {
        "member": [
          {
            "default": "\"\"",
            "value": "Returns the shader's code as the user has written it, not the full generated code used internally.",
            "setter": "set_code",
            "name": "code",
            "getter": "get_code",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Returns the shader's custom defines. Custom defines can be used in Godot to add GLSL preprocessor directives (e.g: extensions) required for the shader logic.\n\t\t\t[b]Note:[/b] Custom defines are not validated by the Godot shader parser, so care should be taken when using them.",
            "setter": "set_custom_defines",
            "name": "custom_defines",
            "getter": "get_custom_defines",
            "type": "String"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Texture"
            },
            "argument": {
              "name": "param",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_default_texture_param",
            "description": "Returns the texture that is set as default for the specified parameter.\n\t\t\t\t[b]Note:[/b] [code]param[/code] must match the name of the uniform in the code exactly."
          },
          {
            "return": {
              "type": "int",
              "enum": "Shader.Mode"
            },
            "qualifiers": "const",
            "name": "get_mode",
            "description": "Returns the shader mode for the shader, either [constant MODE_CANVAS_ITEM], [constant MODE_SPATIAL] or [constant MODE_PARTICLES]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_param",
            "description": "Returns [code]true[/code] if the shader has this param defined as a uniform in its code.\n\t\t\t\t[b]Note:[/b] [code]param[/code] must match the name of the uniform in the code exactly."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "param",
                "type": "String",
                "index": "0"
              },
              {
                "name": "texture",
                "type": "Texture",
                "index": "1"
              }
            ],
            "name": "set_default_texture_param",
            "description": "Sets the default texture to be used with a texture uniform. The default is used if a texture is not set in the [ShaderMaterial].\n\t\t\t\t[b]Note:[/b] [code]param[/code] must match the name of the uniform in the code exactly."
          }
        ]
      },
      "name": "Shader",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "MODE_SPATIAL",
            "enum": "Mode"
          },
          {
            "value": "1",
            "name": "MODE_CANVAS_ITEM",
            "enum": "Mode"
          },
          {
            "value": "2",
            "name": "MODE_PARTICLES",
            "enum": "Mode"
          }
        ]
      },
      "brief_description": "A custom shader program.",
      "description": "This class allows you to define a custom shader program that can be used by a [ShaderMaterial]. Shaders allow you to write your own custom behavior for rendering objects or updating particle information. For a detailed explanation and usage, please see the tutorials linked below."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html"
      },
      "members": {
        "member": {
          "default": "0.0",
          "value": "The shape's custom solver bias.",
          "setter": "set_custom_solver_bias",
          "name": "custom_solver_bias",
          "getter": "get_custom_solver_bias",
          "type": "float"
        }
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "local_xform",
                "type": "Transform2D",
                "index": "0"
              },
              {
                "name": "with_shape",
                "type": "Shape2D",
                "index": "1"
              },
              {
                "name": "shape_xform",
                "type": "Transform2D",
                "index": "2"
              }
            ],
            "name": "collide",
            "description": "Returns [code]true[/code] if this shape is colliding with another.\n\t\t\t\tThis method needs the transformation matrix for this shape ([code]local_xform[/code]), the shape to check collisions with ([code]with_shape[/code]), and the transformation matrix of that shape ([code]shape_xform[/code])."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "local_xform",
                "type": "Transform2D",
                "index": "0"
              },
              {
                "name": "with_shape",
                "type": "Shape2D",
                "index": "1"
              },
              {
                "name": "shape_xform",
                "type": "Transform2D",
                "index": "2"
              }
            ],
            "name": "collide_and_get_contacts",
            "description": "Returns a list of the points where this shape touches another. If there are no collisions the list is empty.\n\t\t\t\tThis method needs the transformation matrix for this shape ([code]local_xform[/code]), the shape to check collisions with ([code]with_shape[/code]), and the transformation matrix of that shape ([code]shape_xform[/code])."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "local_xform",
                "type": "Transform2D",
                "index": "0"
              },
              {
                "name": "local_motion",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "with_shape",
                "type": "Shape2D",
                "index": "2"
              },
              {
                "name": "shape_xform",
                "type": "Transform2D",
                "index": "3"
              },
              {
                "name": "shape_motion",
                "type": "Vector2",
                "index": "4"
              }
            ],
            "name": "collide_with_motion",
            "description": "Returns whether this shape would collide with another, if a given movement was applied.\n\t\t\t\tThis method needs the transformation matrix for this shape ([code]local_xform[/code]), the movement to test on this shape ([code]local_motion[/code]), the shape to check collisions with ([code]with_shape[/code]), the transformation matrix of that shape ([code]shape_xform[/code]), and the movement to test onto the other object ([code]shape_motion[/code])."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "local_xform",
                "type": "Transform2D",
                "index": "0"
              },
              {
                "name": "local_motion",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "with_shape",
                "type": "Shape2D",
                "index": "2"
              },
              {
                "name": "shape_xform",
                "type": "Transform2D",
                "index": "3"
              },
              {
                "name": "shape_motion",
                "type": "Vector2",
                "index": "4"
              }
            ],
            "name": "collide_with_motion_and_get_contacts",
            "description": "Returns a list of the points where this shape would touch another, if a given movement was applied. If there are no collisions the list is empty.\n\t\t\t\tThis method needs the transformation matrix for this shape ([code]local_xform[/code]), the movement to test on this shape ([code]local_motion[/code]), the shape to check collisions with ([code]with_shape[/code]), the transformation matrix of that shape ([code]shape_xform[/code]), and the movement to test onto the other object ([code]shape_motion[/code])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "canvas_item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "draw",
            "description": "Draws a solid shape onto a [CanvasItem] with the [VisualServer] API filled with the specified [code]color[/code]. The exact drawing method is specific for each shape and cannot be configured."
          }
        ]
      },
      "name": "Shape2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base class for all 2D shapes.",
      "description": "Base class for all 2D shapes. All 2D shape types inherit from this."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html"
      },
      "members": {
        "member": {
          "default": "0.04",
          "value": "The collision margin for the shape. Used in Bullet Physics only.\n\t\t\tCollision margins allow collision detection to be more efficient by adding an extra shell around shapes. Collision algorithms are more expensive when objects overlap by more than their margin, so a higher value for margins is better for performance, at the cost of accuracy around edges as it makes them less sharp.",
          "setter": "set_margin",
          "name": "margin",
          "getter": "get_margin",
          "type": "float"
        }
      },
      "inherits": "Resource",
      "methods": {
        "method": {
          "return": {
            "type": "ArrayMesh"
          },
          "name": "get_debug_mesh",
          "description": "Returns the [ArrayMesh] used to draw the debug collision for this [Shape]."
        }
      },
      "name": "Shape",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base class for all 3D shape resources.",
      "description": "Base class for all 3D shape resources. Nodes that inherit from this can be used as shapes for a [PhysicsBody] or [Area] objects."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "value": "The shortcut's [InputEvent].\n\t\t\tGenerally the [InputEvent] is a keyboard key, though it can be any [InputEvent].",
          "setter": "set_shortcut",
          "name": "shortcut",
          "getter": "get_shortcut",
          "type": "InputEvent"
        }
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_as_text",
            "description": "Returns the shortcut's [InputEvent] as a [String]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "event",
              "type": "InputEvent",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_shortcut",
            "description": "Returns [code]true[/code] if the shortcut's [InputEvent] equals [code]event[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_valid",
            "description": "If [code]true[/code], this shortcut is valid."
          }
        ]
      },
      "name": "ShortCut",
      "version": "3.3",
      "constants": {},
      "brief_description": "A shortcut for binding input.",
      "description": "A shortcut for binding input.\n\t\tShortcuts are commonly used for interacting with a [Control] element from a [InputEvent]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/animation/2d_skeletons.html"
      },
      "inherits": "Node2D",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Bone2D"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "get_bone",
            "description": "Returns a [Bone2D] from the node hierarchy parented by Skeleton2D. The object to return is identified by the parameter [code]idx[/code]. Bones are indexed by descending the node hierarchy from top to bottom, adding the children of each branch before moving to the next sibling."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_bone_count",
            "description": "Returns the number of [Bone2D] nodes in the node hierarchy parented by Skeleton2D."
          },
          {
            "return": {
              "type": "RID"
            },
            "qualifiers": "const",
            "name": "get_skeleton",
            "description": "Returns the [RID] of a Skeleton2D instance."
          }
        ]
      },
      "name": "Skeleton2D",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "bone_setup_changed",
          "description": {}
        }
      },
      "constants": {},
      "brief_description": "Skeleton for 2D characters and animated objects.",
      "description": "Skeleton2D parents a hierarchy of [Bone2D] objects. It is a requirement of [Bone2D]. Skeleton2D holds a reference to the rest pose of its children and acts as a single point of access to its bones."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/523",
          "title": "3D Inverse Kinematics Demo"
        }
      },
      "members": {
        "member": [
          {
            "default": "1.0",
            "value": "Interpolation value for how much the IK results are applied to the current skeleton bone chain. A value of [code]1.0[/code] will overwrite all skeleton bone transforms completely while a value of [code]0.0[/code] will visually disable the SkeletonIK. A value at or below [code]0.01[/code] also calls [method Skeleton.clear_bones_global_pose_override].",
            "setter": "set_interpolation",
            "name": "interpolation",
            "getter": "get_interpolation",
            "type": "float"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "Secondary target position (first is [member target] property or [member target_node]) for the IK chain. Use magnet position (pole target) to control the bending of the IK chain. Only works if the bone chain has more than 2 bones. The middle chain bone position will be linearly interpolated with the magnet position.",
            "setter": "set_magnet_position",
            "name": "magnet",
            "getter": "get_magnet_position",
            "type": "Vector3"
          },
          {
            "default": "10",
            "value": "Number of iteration loops used by the IK solver to produce more accurate (and elegant) bone chain results.",
            "setter": "set_max_iterations",
            "name": "max_iterations",
            "getter": "get_max_iterations",
            "type": "int"
          },
          {
            "default": "0.01",
            "value": "The minimum distance between bone and goal target. If the distance is below this value, the IK solver stops further iterations.",
            "setter": "set_min_distance",
            "name": "min_distance",
            "getter": "get_min_distance",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code] overwrites the rotation of the tip bone with the rotation of the [member target] (or [member target_node] if defined).",
            "setter": "set_override_tip_basis",
            "name": "override_tip_basis",
            "getter": "is_override_tip_basis",
            "type": "bool"
          },
          {
            "default": "\"\"",
            "value": "The name of the current root bone, the first bone in the IK chain.",
            "setter": "set_root_bone",
            "name": "root_bone",
            "getter": "get_root_bone",
            "type": "String"
          },
          {
            "default": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )",
            "value": "First target of the IK chain where the tip bone is placed and, if [member override_tip_basis] is [code]true[/code], how the tip bone is rotated. If a [member target_node] path is available the nodes transform is used instead and this property is ignored.",
            "setter": "set_target_transform",
            "name": "target",
            "getter": "get_target_transform",
            "type": "Transform"
          },
          {
            "default": "NodePath(\"\")",
            "value": "Target node [NodePath] for the IK chain. If available, the node's current [Transform] is used instead of the [member target] property.",
            "setter": "set_target_node",
            "name": "target_node",
            "getter": "get_target_node",
            "type": "NodePath"
          },
          {
            "default": "\"\"",
            "value": "The name of the current tip bone, the last bone in the IK chain placed at the [member target] transform (or [member target_node] if defined).",
            "setter": "set_tip_bone",
            "name": "tip_bone",
            "getter": "get_tip_bone",
            "type": "String"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], instructs the IK solver to consider the secondary magnet target (pole target) when calculating the bone chain. Use the magnet position (pole target) to control the bending of the IK chain.",
            "setter": "set_use_magnet",
            "name": "use_magnet",
            "getter": "is_using_magnet",
            "type": "bool"
          }
        ]
      },
      "inherits": "Node",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Skeleton"
            },
            "qualifiers": "const",
            "name": "get_parent_skeleton",
            "description": "Returns the parent [Skeleton] Node that was present when SkeletonIK entered the [SceneTree]. Returns null if the parent node was not a [Skeleton] Node when SkeletonIK entered the [SceneTree]."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_running",
            "description": "Returns [code]true[/code] if SkeletonIK is applying IK effects on continues frames to the [Skeleton] bones. Returns [code]false[/code] if SkeletonIK is stopped or [method start] was used with the [code]one_time[/code] parameter set to [code]true[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "false",
              "name": "one_time",
              "type": "bool",
              "index": "0"
            },
            "name": "start",
            "description": "Starts applying IK effects on each frame to the [Skeleton] bones but will only take effect starting on the next frame. If [code]one_time[/code] is [code]true[/code], this will take effect immediately but also reset on the next frame."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "stop",
            "description": "Stops applying IK effects on each frame to the [Skeleton] bones and also calls [method Skeleton.clear_bones_global_pose_override] to remove existing overrides on all bones."
          }
        ]
      },
      "name": "SkeletonIK",
      "version": "3.3",
      "constants": {},
      "brief_description": "SkeletonIK is used to place the end bone of a [Skeleton] bone chain at a certain point in 3D by rotating all bones in the chain accordingly.",
      "description": "SkeletonIK is used to place the end bone of a [Skeleton] bone chain at a certain point in 3D by rotating all bones in the chain accordingly. A typical scenario for IK in games is to place a characters feet on the ground or a characters hands on a currently hold object. SkeletonIK uses FabrikInverseKinematic internally to solve the bone chain and applies the results to the [Skeleton] [code]bones_global_pose_override[/code] property for all affected bones in the chain. If fully applied this overwrites any bone transform from [Animation]s or bone custom poses set by users. The applied amount can be controlled with the [code]interpolation[/code] property.\n\t\t[codeblock]\n\t\t# Apply IK effect automatically on every new frame (not the current)\n\t\tskeleton_ik_node.start()\n\n\t\t# Apply IK effect only on the current frame\n\t\tskeleton_ik_node.start(true)\n\n\t\t# Stop IK effect and reset bones_global_pose_override on Skeleton\n\t\tskeleton_ik_node.stop()\n\n\t\t# Apply full IK effect\n\t\tskeleton_ik_node.set_interpolation(1.0)\n\n\t\t# Apply half IK effect\n\t\tskeleton_ik_node.set_interpolation(0.5)\n\n\t\t# Apply zero IK effect (a value at or below 0.01 also removes bones_global_pose_override on Skeleton)\n\t\tskeleton_ik_node.set_interpolation(0.0)\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://godotengine.org/asset-library/asset/523",
            "title": "3D Inverse Kinematics Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "inherits": "Spatial",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "name": "add_bone",
            "description": "Adds a bone, with name [code]name[/code]. [method get_bone_count] will become the bone index."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bone_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "node",
                "type": "Node",
                "index": "1"
              }
            ],
            "name": "bind_child_node_to_bone",
            "description": "[i]Deprecated soon.[/i]"
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_bones",
            "description": "Clear all the bones in this skeleton."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_bones_global_pose_override",
            "description": {}
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "find_bone",
            "description": "Returns the bone index that matches [code]name[/code] as its name."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_bone_count",
            "description": "Returns the amount of bones in the skeleton."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": {
              "name": "bone_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_bone_custom_pose",
            "description": "Returns the custom pose of the specified bone. Custom pose is applied on top of the rest pose."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": {
              "name": "bone_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_bone_global_pose",
            "description": "Returns the overall transform of the specified bone, with respect to the skeleton. Being relative to the skeleton frame, this is not the actual \"global\" transform of the bone."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": {
              "name": "bone_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_bone_global_pose_no_override",
            "description": "Returns the overall transform of the specified bone, with respect to the skeleton, but without any global pose overrides. Being relative to the skeleton frame, this is not the actual \"global\" transform of the bone."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "bone_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_bone_name",
            "description": "Returns the name of the bone at index [code]index[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "bone_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_bone_parent",
            "description": "Returns the bone index which is the parent of the bone at [code]bone_idx[/code]. If -1, then bone has no parent.\n\t\t\t\t[b]Note:[/b] The parent bone returned will always be less than [code]bone_idx[/code]."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": {
              "name": "bone_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_bone_pose",
            "description": "Returns the pose transform of the specified bone. Pose is applied on top of the custom pose, which is applied on top the rest pose."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": {
              "name": "bone_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_bone_rest",
            "description": "Returns the rest transform for a bone [code]bone_idx[/code]."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "bone_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_bound_child_nodes_to_bone",
            "description": "[i]Deprecated soon.[/i]"
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "bone_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_bone_rest_disabled",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "name": "localize_rests",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "exception",
              "type": "RID",
              "index": "0"
            },
            "name": "physical_bones_add_collision_exception",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "exception",
              "type": "RID",
              "index": "0"
            },
            "name": "physical_bones_remove_collision_exception",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "[  ]",
              "name": "bones",
              "type": "Array",
              "index": "0"
            },
            "name": "physical_bones_start_simulation",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "name": "physical_bones_stop_simulation",
            "description": {}
          },
          {
            "return": {
              "type": "SkinReference"
            },
            "argument": {
              "name": "skin",
              "type": "Skin",
              "index": "0"
            },
            "name": "register_skin",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bone_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "custom_pose",
                "type": "Transform",
                "index": "1"
              }
            ],
            "name": "set_bone_custom_pose",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bone_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "disable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_bone_disable_rest",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bone_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "pose",
                "type": "Transform",
                "index": "1"
              },
              {
                "name": "amount",
                "type": "float",
                "index": "2"
              },
              {
                "default": "false",
                "name": "persistent",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "set_bone_global_pose_override",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bone_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "parent_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set_bone_parent",
            "description": "Sets the bone index [code]parent_idx[/code] as the parent of the bone at [code]bone_idx[/code]. If -1, then bone has no parent.\n\t\t\t\t[b]Note:[/b] [code]parent_idx[/code] must be less than [code]bone_idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bone_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "pose",
                "type": "Transform",
                "index": "1"
              }
            ],
            "name": "set_bone_pose",
            "description": "Sets the pose transform for bone [code]bone_idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bone_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "rest",
                "type": "Transform",
                "index": "1"
              }
            ],
            "name": "set_bone_rest",
            "description": "Sets the rest transform for bone [code]bone_idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bone_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "node",
                "type": "Node",
                "index": "1"
              }
            ],
            "name": "unbind_child_node_from_bone",
            "description": "[i]Deprecated soon.[/i]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "bone_idx",
              "type": "int",
              "index": "0"
            },
            "name": "unparent_bone_and_rest",
            "description": {}
          }
        ]
      },
      "name": "Skeleton",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "skeleton_updated",
          "description": {}
        }
      },
      "constants": {
        "constant": {
          "value": "50",
          "name": "NOTIFICATION_UPDATE_SKELETON"
        }
      },
      "brief_description": "Skeleton for characters and animated objects.",
      "description": "Skeleton provides a hierarchical interface for managing bones, including pose, rest and animation (see [Animation]). It can also use ragdoll physics.\n\t\tThe overall transform of a bone with respect to the skeleton is determined by the following hierarchical order: rest pose, custom pose and pose.\n\t\tNote that \"global pose\" below refers to the overall transform of the bone with respect to skeleton, so it not the actual global/world transform of the bone."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "RID"
            },
            "qualifiers": "const",
            "name": "get_skeleton",
            "description": {}
          },
          {
            "return": {
              "type": "Skin"
            },
            "qualifiers": "const",
            "name": "get_skin",
            "description": {}
          }
        ]
      },
      "name": "SkinReference",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bone",
                "type": "int",
                "index": "0"
              },
              {
                "name": "pose",
                "type": "Transform",
                "index": "1"
              }
            ],
            "name": "add_bind",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_binds",
            "description": {}
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "bind_index",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_bind_bone",
            "description": {}
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_bind_count",
            "description": {}
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "bind_index",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_bind_name",
            "description": {}
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": {
              "name": "bind_index",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_bind_pose",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bind_index",
                "type": "int",
                "index": "0"
              },
              {
                "name": "bone",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set_bind_bone",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "bind_count",
              "type": "int",
              "index": "0"
            },
            "name": "set_bind_count",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bind_index",
                "type": "int",
                "index": "0"
              },
              {
                "name": "name",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set_bind_name",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bind_index",
                "type": "int",
                "index": "0"
              },
              {
                "name": "pose",
                "type": "Transform",
                "index": "1"
              }
            ],
            "name": "set_bind_pose",
            "description": {}
          }
        ]
      },
      "name": "Skin",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "2",
          "value": "The [Sky]'s radiance map size. The higher the radiance map size, the more detailed the lighting from the [Sky] will be.\n\t\t\tSee [enum RadianceSize] constants for values.\n\t\t\t[b]Note:[/b] You will only benefit from high radiance sizes if you have perfectly sharp reflective surfaces in your project and are not using [ReflectionProbe]s or [GIProbe]s. For most projects, keeping [member radiance_size] to the default value is the best compromise between visuals and performance. Be careful when using high radiance size values as these can cause crashes on low-end GPUs.",
          "setter": "set_radiance_size",
          "name": "radiance_size",
          "getter": "get_radiance_size",
          "type": "int",
          "enum": "Sky.RadianceSize"
        }
      },
      "inherits": "Resource",
      "methods": {},
      "name": "Sky",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "RADIANCE_SIZE_32",
            "enum": "RadianceSize"
          },
          {
            "value": "1",
            "name": "RADIANCE_SIZE_64",
            "enum": "RadianceSize"
          },
          {
            "value": "2",
            "name": "RADIANCE_SIZE_128",
            "enum": "RadianceSize"
          },
          {
            "value": "3",
            "name": "RADIANCE_SIZE_256",
            "enum": "RadianceSize"
          },
          {
            "value": "4",
            "name": "RADIANCE_SIZE_512",
            "enum": "RadianceSize"
          },
          {
            "value": "5",
            "name": "RADIANCE_SIZE_1024",
            "enum": "RadianceSize"
          },
          {
            "value": "6",
            "name": "RADIANCE_SIZE_2048",
            "enum": "RadianceSize"
          },
          {
            "value": "7",
            "name": "RADIANCE_SIZE_MAX",
            "enum": "RadianceSize"
          }
        ]
      },
      "brief_description": "The base class for [PanoramaSky] and [ProceduralSky].",
      "description": "The base class for [PanoramaSky] and [ProceduralSky]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0.0",
            "value": "The amount of damping of the rotation when the limit is surpassed.\n\t\t\tA lower damping value allows a rotation initiated by body A to travel to body B slower.",
            "setter": "set_param",
            "name": "angular_limit/damping",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The lower limit of rotation in the slider.",
            "setter": "_set_lower_limit_angular",
            "name": "angular_limit/lower_angle",
            "getter": "_get_lower_limit_angular",
            "type": "float"
          },
          {
            "default": "0.7",
            "value": "The amount of restitution of the rotation when the limit is surpassed.\n\t\t\tDoes not affect damping.",
            "setter": "set_param",
            "name": "angular_limit/restitution",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "A factor applied to the all rotation once the limit is surpassed.\n\t\t\tMakes all rotation slower when between 0 and 1.",
            "setter": "set_param",
            "name": "angular_limit/softness",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The upper limit of rotation in the slider.",
            "setter": "_set_upper_limit_angular",
            "name": "angular_limit/upper_angle",
            "getter": "_get_upper_limit_angular",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The amount of damping of the rotation in the limits.",
            "setter": "set_param",
            "name": "angular_motion/damping",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "0.7",
            "value": "The amount of restitution of the rotation in the limits.",
            "setter": "set_param",
            "name": "angular_motion/restitution",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "A factor applied to the all rotation in the limits.",
            "setter": "set_param",
            "name": "angular_motion/softness",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The amount of damping of the rotation across axes orthogonal to the slider.",
            "setter": "set_param",
            "name": "angular_ortho/damping",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "0.7",
            "value": "The amount of restitution of the rotation across axes orthogonal to the slider.",
            "setter": "set_param",
            "name": "angular_ortho/restitution",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "A factor applied to the all rotation across axes orthogonal to the slider.",
            "setter": "set_param",
            "name": "angular_ortho/softness",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The amount of damping that happens once the limit defined by [member linear_limit/lower_distance] and [member linear_limit/upper_distance] is surpassed.",
            "setter": "set_param",
            "name": "linear_limit/damping",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "-1.0",
            "value": "The minimum difference between the pivot points on their X axis before damping happens.",
            "setter": "set_param",
            "name": "linear_limit/lower_distance",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "0.7",
            "value": "The amount of restitution once the limits are surpassed. The lower, the more velocity-energy gets lost.",
            "setter": "set_param",
            "name": "linear_limit/restitution",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement.",
            "setter": "set_param",
            "name": "linear_limit/softness",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The maximum difference between the pivot points on their X axis before damping happens.",
            "setter": "set_param",
            "name": "linear_limit/upper_distance",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The amount of damping inside the slider limits.",
            "setter": "set_param",
            "name": "linear_motion/damping",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "0.7",
            "value": "The amount of restitution inside the slider limits.",
            "setter": "set_param",
            "name": "linear_motion/restitution",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement.",
            "setter": "set_param",
            "name": "linear_motion/softness",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The amount of damping when movement is across axes orthogonal to the slider.",
            "setter": "set_param",
            "name": "linear_ortho/damping",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "0.7",
            "value": "The amount of restitution when movement is across axes orthogonal to the slider.",
            "setter": "set_param",
            "name": "linear_ortho/restitution",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "A factor applied to the movement across axes orthogonal to the slider.",
            "setter": "set_param",
            "name": "linear_ortho/softness",
            "getter": "get_param",
            "type": "float"
          }
        ]
      },
      "inherits": "Joint",
      "methods": {
        "method": [
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "param",
              "type": "int",
              "enum": "SliderJoint.Param",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_param",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "param",
                "type": "int",
                "enum": "SliderJoint.Param",
                "index": "0"
              },
              {
                "name": "value",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_param",
            "description": {}
          }
        ]
      },
      "name": "SliderJoint",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "PARAM_LINEAR_LIMIT_UPPER",
            "enum": "Param"
          },
          {
            "value": "1",
            "name": "PARAM_LINEAR_LIMIT_LOWER",
            "enum": "Param"
          },
          {
            "value": "2",
            "name": "PARAM_LINEAR_LIMIT_SOFTNESS",
            "enum": "Param"
          },
          {
            "value": "3",
            "name": "PARAM_LINEAR_LIMIT_RESTITUTION",
            "enum": "Param"
          },
          {
            "value": "4",
            "name": "PARAM_LINEAR_LIMIT_DAMPING",
            "enum": "Param"
          },
          {
            "value": "5",
            "name": "PARAM_LINEAR_MOTION_SOFTNESS",
            "enum": "Param"
          },
          {
            "value": "6",
            "name": "PARAM_LINEAR_MOTION_RESTITUTION",
            "enum": "Param"
          },
          {
            "value": "7",
            "name": "PARAM_LINEAR_MOTION_DAMPING",
            "enum": "Param"
          },
          {
            "value": "8",
            "name": "PARAM_LINEAR_ORTHOGONAL_SOFTNESS",
            "enum": "Param"
          },
          {
            "value": "9",
            "name": "PARAM_LINEAR_ORTHOGONAL_RESTITUTION",
            "enum": "Param"
          },
          {
            "value": "10",
            "name": "PARAM_LINEAR_ORTHOGONAL_DAMPING",
            "enum": "Param"
          },
          {
            "value": "11",
            "name": "PARAM_ANGULAR_LIMIT_UPPER",
            "enum": "Param"
          },
          {
            "value": "12",
            "name": "PARAM_ANGULAR_LIMIT_LOWER",
            "enum": "Param"
          },
          {
            "value": "13",
            "name": "PARAM_ANGULAR_LIMIT_SOFTNESS",
            "enum": "Param"
          },
          {
            "value": "14",
            "name": "PARAM_ANGULAR_LIMIT_RESTITUTION",
            "enum": "Param"
          },
          {
            "value": "15",
            "name": "PARAM_ANGULAR_LIMIT_DAMPING",
            "enum": "Param"
          },
          {
            "value": "16",
            "name": "PARAM_ANGULAR_MOTION_SOFTNESS",
            "enum": "Param"
          },
          {
            "value": "17",
            "name": "PARAM_ANGULAR_MOTION_RESTITUTION",
            "enum": "Param"
          },
          {
            "value": "18",
            "name": "PARAM_ANGULAR_MOTION_DAMPING",
            "enum": "Param"
          },
          {
            "value": "19",
            "name": "PARAM_ANGULAR_ORTHOGONAL_SOFTNESS",
            "enum": "Param"
          },
          {
            "value": "20",
            "name": "PARAM_ANGULAR_ORTHOGONAL_RESTITUTION",
            "enum": "Param"
          },
          {
            "value": "21",
            "name": "PARAM_ANGULAR_ORTHOGONAL_DAMPING",
            "enum": "Param"
          },
          {
            "value": "22",
            "name": "PARAM_MAX",
            "enum": "Param"
          }
        ]
      },
      "brief_description": "Slider between two PhysicsBodies in 3D.",
      "description": "Slides across the X axis of the pivot object. See also [Generic6DOFJoint]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "true",
            "value": "If [code]true[/code], the slider can be interacted with. If [code]false[/code], the value can be changed only by code.",
            "setter": "set_editable",
            "name": "editable",
            "getter": "is_editable",
            "type": "bool"
          },
          {
            "default": "2",
            "setter": "set_focus_mode",
            "override": "true",
            "name": "focus_mode",
            "getter": "get_focus_mode",
            "type": "int",
            "enum": "Control.FocusMode"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the value can be changed using the mouse wheel.",
            "setter": "set_scrollable",
            "name": "scrollable",
            "getter": "is_scrollable",
            "type": "bool"
          },
          {
            "default": "0",
            "setter": "set_v_size_flags",
            "override": "true",
            "name": "size_flags_vertical",
            "getter": "get_v_size_flags",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Number of ticks displayed on the slider, including border ticks. Ticks are uniformly-distributed value markers.",
            "setter": "set_ticks",
            "name": "tick_count",
            "getter": "get_ticks",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the slider will display ticks for minimum and maximum values.",
            "setter": "set_ticks_on_borders",
            "name": "ticks_on_borders",
            "getter": "get_ticks_on_borders",
            "type": "bool"
          }
        ]
      },
      "inherits": "Range",
      "methods": {},
      "name": "Slider",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base class for GUI sliders.",
      "description": "Base class for GUI sliders.\n\t\t[b]Note:[/b] The [signal Range.changed] and [signal Range.value_changed] signals are part of the [Range] class which this class inherits from."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/physics/soft_body.html"
      },
      "members": {
        "member": [
          {
            "default": "0.5",
            "setter": "set_areaAngular_stiffness",
            "name": "areaAngular_stiffness",
            "getter": "get_areaAngular_stiffness",
            "type": "float"
          },
          {
            "default": "1",
            "value": "The physics layers this SoftBody is in.\n\t\t\tCollidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the collision_mask property.\n\t\t\tA contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A. See [url=https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.",
            "setter": "set_collision_layer",
            "name": "collision_layer",
            "getter": "get_collision_layer",
            "type": "int"
          },
          {
            "default": "1",
            "value": "The physics layers this SoftBody scans for collisions. See [url=https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.",
            "setter": "set_collision_mask",
            "name": "collision_mask",
            "getter": "get_collision_mask",
            "type": "int"
          },
          {
            "default": "0.01",
            "setter": "set_damping_coefficient",
            "name": "damping_coefficient",
            "getter": "get_damping_coefficient",
            "type": "float"
          },
          {
            "default": "0.0",
            "setter": "set_drag_coefficient",
            "name": "drag_coefficient",
            "getter": "get_drag_coefficient",
            "type": "float"
          },
          {
            "default": "0.5",
            "setter": "set_linear_stiffness",
            "name": "linear_stiffness",
            "getter": "get_linear_stiffness",
            "type": "float"
          },
          {
            "default": "NodePath(\"\")",
            "value": "[NodePath] to a [CollisionObject] this SoftBody should avoid clipping.",
            "setter": "set_parent_collision_ignore",
            "name": "parent_collision_ignore",
            "getter": "get_parent_collision_ignore",
            "type": "NodePath"
          },
          {
            "default": "0.0",
            "setter": "set_pose_matching_coefficient",
            "name": "pose_matching_coefficient",
            "getter": "get_pose_matching_coefficient",
            "type": "float"
          },
          {
            "default": "0.0",
            "setter": "set_pressure_coefficient",
            "name": "pressure_coefficient",
            "getter": "get_pressure_coefficient",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the [SoftBody] will respond to [RayCast]s.",
            "setter": "set_ray_pickable",
            "name": "ray_pickable",
            "getter": "is_ray_pickable",
            "type": "bool"
          },
          {
            "default": "5",
            "value": "Increasing this value will improve the resulting simulation, but can affect performance. Use with care.",
            "setter": "set_simulation_precision",
            "name": "simulation_precision",
            "getter": "get_simulation_precision",
            "type": "int"
          },
          {
            "default": "1.0",
            "value": "The SoftBody's mass.",
            "setter": "set_total_mass",
            "name": "total_mass",
            "getter": "get_total_mass",
            "type": "float"
          },
          {
            "default": "0.5",
            "setter": "set_volume_stiffness",
            "name": "volume_stiffness",
            "getter": "get_volume_stiffness",
            "type": "float"
          }
        ]
      },
      "inherits": "MeshInstance",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "body",
              "type": "Node",
              "index": "0"
            },
            "name": "add_collision_exception_with",
            "description": "Adds a body to the list of bodies that this body can't collide with."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "get_collision_exceptions",
            "description": "Returns an array of nodes that were added as collision exceptions for this body."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "bit",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_collision_layer_bit",
            "description": "Returns an individual bit on the collision mask."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "bit",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_collision_mask_bit",
            "description": "Returns an individual bit on the collision mask."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "body",
              "type": "Node",
              "index": "0"
            },
            "name": "remove_collision_exception_with",
            "description": "Removes a body from the list of bodies that this body can't collide with."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bit",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_collision_layer_bit",
            "description": "Sets individual bits on the layer mask. Use this if you only need to change one layer's value."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bit",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_collision_mask_bit",
            "description": "Sets individual bits on the collision mask. Use this if you only need to change one layer's value."
          }
        ]
      },
      "name": "SoftBody",
      "version": "3.3",
      "constants": {},
      "brief_description": "A soft mesh physics body.",
      "description": "A deformable physics body. Used to create elastic or deformable objects such as cloth, rubber, or other flexible materials."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {},
      "name": "SpatialGizmo",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/3d/spatial_material.html"
      },
      "members": {
        "member": [
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "The material's base color.",
            "setter": "set_albedo",
            "name": "albedo_color",
            "getter": "get_albedo",
            "type": "Color"
          },
          {
            "value": "Texture to multiply by [member albedo_color]. Used for basic texturing of objects.",
            "setter": "set_texture",
            "name": "albedo_texture",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "value": "The strength of the anisotropy effect.",
            "setter": "set_anisotropy",
            "name": "anisotropy",
            "getter": "get_anisotropy",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], anisotropy is enabled. Changes the shape of the specular blob and aligns it to tangent space. Mesh tangents are needed for this to work. If the mesh does not contain tangents the anisotropy effect will appear broken.",
            "setter": "set_feature",
            "name": "anisotropy_enabled",
            "getter": "get_feature",
            "type": "bool"
          },
          {
            "value": "Texture that offsets the tangent map for anisotropy calculations.",
            "setter": "set_texture",
            "name": "anisotropy_flowmap",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], ambient occlusion is enabled. Ambient occlusion darkens areas based on the [member ao_texture].",
            "setter": "set_feature",
            "name": "ao_enabled",
            "getter": "get_feature",
            "type": "bool"
          },
          {
            "value": "Amount that ambient occlusion affects lighting from lights. If [code]0[/code], ambient occlusion only affects ambient light. If [code]1[/code], ambient occlusion affects lights just as much as it affects ambient light. This can be used to impact the strength of the ambient occlusion effect, but typically looks unrealistic.",
            "setter": "set_ao_light_affect",
            "name": "ao_light_affect",
            "getter": "get_ao_light_affect",
            "type": "float"
          },
          {
            "value": "If [code]true[/code], use [code]UV2[/code] coordinates to look up from the [member ao_texture].",
            "setter": "set_flag",
            "name": "ao_on_uv2",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "value": "Texture that defines the amount of ambient occlusion for a given point on the object.",
            "setter": "set_texture",
            "name": "ao_texture",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "value": "Specifies the channel of the [member ao_texture] in which the ambient occlusion information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.",
            "setter": "set_ao_texture_channel",
            "name": "ao_texture_channel",
            "getter": "get_ao_texture_channel",
            "type": "int",
            "enum": "SpatialMaterial.TextureChannel"
          },
          {
            "value": "Sets the strength of the clearcoat effect. Setting to [code]0[/code] looks the same as disabling the clearcoat effect.",
            "setter": "set_clearcoat",
            "name": "clearcoat",
            "getter": "get_clearcoat",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], clearcoat rendering is enabled. Adds a secondary transparent pass to the lighting calculation resulting in an added specular blob. This makes materials appear as if they have a clear layer on them that can be either glossy or rough.\n\t\t\t[b]Note:[/b] Clearcoat rendering is not visible if the material has [member flags_unshaded] set to [code]true[/code].",
            "setter": "set_feature",
            "name": "clearcoat_enabled",
            "getter": "get_feature",
            "type": "bool"
          },
          {
            "value": "Sets the roughness of the clearcoat pass. A higher value results in a smoother clearcoat while a lower value results in a rougher clearcoat.",
            "setter": "set_clearcoat_gloss",
            "name": "clearcoat_gloss",
            "getter": "get_clearcoat_gloss",
            "type": "float"
          },
          {
            "value": "Texture that defines the strength of the clearcoat effect and the glossiness of the clearcoat. Strength is specified in the red channel while glossiness is specified in the green channel.",
            "setter": "set_texture",
            "name": "clearcoat_texture",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "value": "If [code]true[/code], the shader will read depth texture at multiple points along the view ray to determine occlusion and parrallax. This can be very performance demanding, but results in more realistic looking depth mapping.",
            "setter": "set_depth_deep_parallax",
            "name": "depth_deep_parallax",
            "getter": "is_depth_deep_parallax_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], depth mapping is enabled (also called \"parallax mapping\" or \"height mapping\"). See also [member normal_enabled].\n\t\t\t[b]Note:[/b] Depth mapping is not supported if triplanar mapping is used on the same material. The value of [member depth_enabled] will be ignored if [member uv1_triplanar] is enabled.",
            "setter": "set_feature",
            "name": "depth_enabled",
            "getter": "get_feature",
            "type": "bool"
          },
          {
            "value": "If [code]true[/code], direction of the binormal is flipped before using in the depth effect. This may be necessary if you have encoded your binormals in a way that is conflicting with the depth effect.",
            "setter": "set_depth_deep_parallax_flip_binormal",
            "name": "depth_flip_binormal",
            "getter": "get_depth_deep_parallax_flip_binormal",
            "type": "bool"
          },
          {
            "value": "If [code]true[/code], direction of the tangent is flipped before using in the depth effect. This may be necessary if you have encoded your tangents in a way that is conflicting with the depth effect.",
            "setter": "set_depth_deep_parallax_flip_tangent",
            "name": "depth_flip_tangent",
            "getter": "get_depth_deep_parallax_flip_tangent",
            "type": "bool"
          },
          {
            "value": "Number of layers to use when using [member depth_deep_parallax] and the view direction is perpendicular to the surface of the object. A higher number will be more performance demanding while a lower number may not look as crisp.",
            "setter": "set_depth_deep_parallax_max_layers",
            "name": "depth_max_layers",
            "getter": "get_depth_deep_parallax_max_layers",
            "type": "int"
          },
          {
            "value": "Number of layers to use when using [member depth_deep_parallax] and the view direction is parallel to the surface of the object. A higher number will be more performance demanding while a lower number may not look as crisp.",
            "setter": "set_depth_deep_parallax_min_layers",
            "name": "depth_min_layers",
            "getter": "get_depth_deep_parallax_min_layers",
            "type": "int"
          },
          {
            "value": "Scales the depth offset effect. A higher number will create a larger depth.",
            "setter": "set_depth_scale",
            "name": "depth_scale",
            "getter": "get_depth_scale",
            "type": "float"
          },
          {
            "value": "Texture used to determine depth at a given pixel. Depth is always stored in the red channel.",
            "setter": "set_texture",
            "name": "depth_texture",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "value": "Texture that specifies the color of the detail overlay.",
            "setter": "set_texture",
            "name": "detail_albedo",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "value": "Specifies how the [member detail_albedo] should blend with the current [code]ALBEDO[/code]. See [enum BlendMode] for options.",
            "setter": "set_detail_blend_mode",
            "name": "detail_blend_mode",
            "getter": "get_detail_blend_mode",
            "type": "int",
            "enum": "SpatialMaterial.BlendMode"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], enables the detail overlay. Detail is a second texture that gets mixed over the surface of the object based on [member detail_mask]. This can be used to add variation to objects, or to blend between two different albedo/normal textures.",
            "setter": "set_feature",
            "name": "detail_enabled",
            "getter": "get_feature",
            "type": "bool"
          },
          {
            "value": "Texture used to specify how the detail textures get blended with the base textures.",
            "setter": "set_texture",
            "name": "detail_mask",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "value": "Texture that specifies the per-pixel normal of the detail overlay.\n\t\t\t[b]Note:[/b] Godot expects the normal map to use X+, Y-, and Z+ coordinates. See [url=http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates]this page[/url] for a comparison of normal map coordinates expected by popular engines.",
            "setter": "set_texture",
            "name": "detail_normal",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "value": "Specifies whether to use [code]UV[/code] or [code]UV2[/code] for the detail layer. See [enum DetailUV] for options.",
            "setter": "set_detail_uv",
            "name": "detail_uv_layer",
            "getter": "get_detail_uv",
            "type": "int",
            "enum": "SpatialMaterial.DetailUV"
          },
          {
            "value": "Distance at which the object appears fully opaque.\n\t\t\t[b]Note:[/b] If [code]distance_fade_max_distance[/code] is less than [code]distance_fade_min_distance[/code], the behavior will be reversed. The object will start to fade away at [code]distance_fade_max_distance[/code] and will fully disappear once it reaches [code]distance_fade_min_distance[/code].",
            "setter": "set_distance_fade_max_distance",
            "name": "distance_fade_max_distance",
            "getter": "get_distance_fade_max_distance",
            "type": "float"
          },
          {
            "value": "Distance at which the object starts to become visible. If the object is less than this distance away, it will be invisible.\n\t\t\t[b]Note:[/b] If [code]distance_fade_min_distance[/code] is greater than [code]distance_fade_max_distance[/code], the behavior will be reversed. The object will start to fade away at [code]distance_fade_max_distance[/code] and will fully disappear once it reaches [code]distance_fade_min_distance[/code].",
            "setter": "set_distance_fade_min_distance",
            "name": "distance_fade_min_distance",
            "getter": "get_distance_fade_min_distance",
            "type": "float"
          },
          {
            "default": "0",
            "value": "Specifies which type of fade to use. Can be any of the [enum DistanceFadeMode]s.",
            "setter": "set_distance_fade",
            "name": "distance_fade_mode",
            "getter": "get_distance_fade",
            "type": "int",
            "enum": "SpatialMaterial.DistanceFadeMode"
          },
          {
            "value": "The emitted light's color. See [member emission_enabled].",
            "setter": "set_emission",
            "name": "emission",
            "getter": "get_emission",
            "type": "Color"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the body emits light. Emitting light makes the object appear brighter. The object can also cast light on other objects if a [GIProbe] or [BakedLightmap] is used and this object is used in baked lighting.",
            "setter": "set_feature",
            "name": "emission_enabled",
            "getter": "get_feature",
            "type": "bool"
          },
          {
            "value": "The emitted light's strength. See [member emission_enabled].",
            "setter": "set_emission_energy",
            "name": "emission_energy",
            "getter": "get_emission_energy",
            "type": "float"
          },
          {
            "value": "Use [code]UV2[/code] to read from the [member emission_texture].",
            "setter": "set_flag",
            "name": "emission_on_uv2",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "value": "Sets how [member emission] interacts with [member emission_texture]. Can either add or multiply. See [enum EmissionOperator] for options.",
            "setter": "set_emission_operator",
            "name": "emission_operator",
            "getter": "get_emission_operator",
            "type": "int",
            "enum": "SpatialMaterial.EmissionOperator"
          },
          {
            "value": "Texture that specifies how much surface emits light at a given point.",
            "setter": "set_texture",
            "name": "emission_texture",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "default": "false",
            "value": "Forces a conversion of the [member albedo_texture] from sRGB space to linear space.",
            "setter": "set_flag",
            "name": "flags_albedo_tex_force_srgb",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the object receives no ambient light.",
            "setter": "set_flag",
            "name": "flags_disable_ambient_light",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the object receives no shadow that would otherwise be cast onto it.",
            "setter": "set_flag",
            "name": "flags_do_not_receive_shadows",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the shader will compute extra operations to make sure the normal stays correct when using a non-uniform scale. Only enable if using non-uniform scaling.",
            "setter": "set_flag",
            "name": "flags_ensure_correct_normals",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the object is rendered at the same size regardless of distance.",
            "setter": "set_flag",
            "name": "flags_fixed_size",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], depth testing is disabled and the object will be drawn in render order.",
            "setter": "set_flag",
            "name": "flags_no_depth_test",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], transparency is enabled on the body. See also [member params_blend_mode].",
            "setter": "set_feature",
            "name": "flags_transparent",
            "getter": "get_feature",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the object is unaffected by lighting.",
            "setter": "set_flag",
            "name": "flags_unshaded",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], render point size can be changed.\n\t\t\t[b]Note:[/b] this is only effective for objects whose geometry is point-based rather than triangle-based. See also [member params_point_size].",
            "setter": "set_flag",
            "name": "flags_use_point_size",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], enables the \"shadow to opacity\" render mode where lighting modifies the alpha so shadowed areas are opaque and non-shadowed areas are transparent. Useful for overlaying shadows onto a camera feed in AR.",
            "setter": "set_flag",
            "name": "flags_use_shadow_to_opacity",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], lighting is calculated per vertex rather than per pixel. This may increase performance on low-end devices.",
            "setter": "set_flag",
            "name": "flags_vertex_lighting",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], triplanar mapping is calculated in world space rather than object local space. See also [member uv1_triplanar].",
            "setter": "set_flag",
            "name": "flags_world_triplanar",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "A high value makes the material appear more like a metal. Non-metals use their albedo as the diffuse color and add diffuse to the specular reflection. With non-metals, the reflection appears on top of the albedo color. Metals use their albedo as a multiplier to the specular reflection and set the diffuse color to black resulting in a tinted reflection. Materials work better when fully metal or fully non-metal, values between [code]0[/code] and [code]1[/code] should only be used for blending between metal and non-metal sections. To alter the amount of reflection use [member roughness].",
            "setter": "set_metallic",
            "name": "metallic",
            "getter": "get_metallic",
            "type": "float"
          },
          {
            "default": "0.5",
            "value": "Sets the size of the specular lobe. The specular lobe is the bright spot that is reflected from light sources.\n\t\t\t[b]Note:[/b] unlike [member metallic], this is not energy-conserving, so it should be left at [code]0.5[/code] in most cases. See also [member roughness].",
            "setter": "set_specular",
            "name": "metallic_specular",
            "getter": "get_specular",
            "type": "float"
          },
          {
            "value": "Texture used to specify metallic for an object. This is multiplied by [member metallic].",
            "setter": "set_texture",
            "name": "metallic_texture",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "default": "0",
            "value": "Specifies the channel of the [member metallic_texture] in which the metallic information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.",
            "setter": "set_metallic_texture_channel",
            "name": "metallic_texture_channel",
            "getter": "get_metallic_texture_channel",
            "type": "int",
            "enum": "SpatialMaterial.TextureChannel"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], normal mapping is enabled.",
            "setter": "set_feature",
            "name": "normal_enabled",
            "getter": "get_feature",
            "type": "bool"
          },
          {
            "value": "The strength of the normal map's effect.",
            "setter": "set_normal_scale",
            "name": "normal_scale",
            "getter": "get_normal_scale",
            "type": "float"
          },
          {
            "value": "Texture used to specify the normal at a given pixel. The [code]normal_texture[/code] only uses the red and green channels. The normal read from [code]normal_texture[/code] is oriented around the surface normal provided by the [Mesh].\n\t\t\t[b]Note:[/b] Godot expects the normal map to use X+, Y-, and Z+ coordinates. See [url=http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates]this page[/url] for a comparison of normal map coordinates expected by popular engines.",
            "setter": "set_texture",
            "name": "normal_texture",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "value": "Threshold at which the alpha scissor will discard values.",
            "setter": "set_alpha_scissor_threshold",
            "name": "params_alpha_scissor_threshold",
            "getter": "get_alpha_scissor_threshold",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the shader will keep the scale set for the mesh. Otherwise the scale is lost when billboarding. Only applies when [member params_billboard_mode] is [constant BILLBOARD_ENABLED].",
            "setter": "set_flag",
            "name": "params_billboard_keep_scale",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "Controls how the object faces the camera. See [enum BillboardMode].\n\t\t\t[b]Note:[/b] Billboard mode is not suitable for VR because the left-right vector of the camera is not horizontal when the screen is attached to your head instead of on the table. See [url=https://github.com/godotengine/godot/issues/41567]GitHub issue #41567[/url] for details.",
            "setter": "set_billboard_mode",
            "name": "params_billboard_mode",
            "getter": "get_billboard_mode",
            "type": "int",
            "enum": "SpatialMaterial.BillboardMode"
          },
          {
            "default": "0",
            "value": "The material's blend mode.\n\t\t\t[b]Note:[/b] Values other than [code]Mix[/code] force the object into the transparent pipeline. See [enum BlendMode].",
            "setter": "set_blend_mode",
            "name": "params_blend_mode",
            "getter": "get_blend_mode",
            "type": "int",
            "enum": "SpatialMaterial.BlendMode"
          },
          {
            "default": "0",
            "value": "Which side of the object is not drawn when backfaces are rendered. See [enum CullMode].",
            "setter": "set_cull_mode",
            "name": "params_cull_mode",
            "getter": "get_cull_mode",
            "type": "int",
            "enum": "SpatialMaterial.CullMode"
          },
          {
            "default": "0",
            "value": "Determines when depth rendering takes place. See [enum DepthDrawMode]. See also [member flags_transparent].",
            "setter": "set_depth_draw_mode",
            "name": "params_depth_draw_mode",
            "getter": "get_depth_draw_mode",
            "type": "int",
            "enum": "SpatialMaterial.DepthDrawMode"
          },
          {
            "default": "0",
            "value": "The algorithm used for diffuse light scattering. See [enum DiffuseMode].",
            "setter": "set_diffuse_mode",
            "name": "params_diffuse_mode",
            "getter": "get_diffuse_mode",
            "type": "int",
            "enum": "SpatialMaterial.DiffuseMode"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], enables the vertex grow setting. See [member params_grow_amount].",
            "setter": "set_grow_enabled",
            "name": "params_grow",
            "getter": "is_grow_enabled",
            "type": "bool"
          },
          {
            "value": "Grows object vertices in the direction of their normals.",
            "setter": "set_grow",
            "name": "params_grow_amount",
            "getter": "get_grow",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Currently unimplemented in Godot.",
            "setter": "set_line_width",
            "name": "params_line_width",
            "getter": "get_line_width",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The point size in pixels. See [member flags_use_point_size].",
            "setter": "set_point_size",
            "name": "params_point_size",
            "getter": "get_point_size",
            "type": "float"
          },
          {
            "default": "0",
            "value": "The method for rendering the specular blob. See [enum SpecularMode].",
            "setter": "set_specular_mode",
            "name": "params_specular_mode",
            "getter": "get_specular_mode",
            "type": "int",
            "enum": "SpatialMaterial.SpecularMode"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the shader will discard all pixels that have an alpha value less than [member params_alpha_scissor_threshold].",
            "setter": "set_flag",
            "name": "params_use_alpha_scissor",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "value": "The number of horizontal frames in the particle sprite sheet. Only enabled when using [constant BILLBOARD_PARTICLES]. See [member params_billboard_mode].",
            "setter": "set_particles_anim_h_frames",
            "name": "particles_anim_h_frames",
            "getter": "get_particles_anim_h_frames",
            "type": "int"
          },
          {
            "value": "If [code]true[/code], particle animations are looped. Only enabled when using [constant BILLBOARD_PARTICLES]. See [member params_billboard_mode].",
            "setter": "set_particles_anim_loop",
            "name": "particles_anim_loop",
            "getter": "get_particles_anim_loop",
            "type": "bool"
          },
          {
            "value": "The number of vertical frames in the particle sprite sheet. Only enabled when using [constant BILLBOARD_PARTICLES]. See [member params_billboard_mode].",
            "setter": "set_particles_anim_v_frames",
            "name": "particles_anim_v_frames",
            "getter": "get_particles_anim_v_frames",
            "type": "int"
          },
          {
            "value": "Distance over which the fade effect takes place. The larger the distance the longer it takes for an object to fade.",
            "setter": "set_proximity_fade_distance",
            "name": "proximity_fade_distance",
            "getter": "get_proximity_fade_distance",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the proximity fade effect is enabled. The proximity fade effect fades out each pixel based on its distance to another object.",
            "setter": "set_proximity_fade",
            "name": "proximity_fade_enable",
            "getter": "is_proximity_fade_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the refraction effect is enabled. Distorts transparency based on light from behind the object.",
            "setter": "set_feature",
            "name": "refraction_enabled",
            "getter": "get_feature",
            "type": "bool"
          },
          {
            "value": "The strength of the refraction effect.",
            "setter": "set_refraction",
            "name": "refraction_scale",
            "getter": "get_refraction",
            "type": "float"
          },
          {
            "value": "Texture that controls the strength of the refraction per-pixel. Multiplied by [member refraction_scale].",
            "setter": "set_texture",
            "name": "refraction_texture",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "value": "Specifies the channel of the [member ao_texture] in which the ambient occlusion information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.",
            "setter": "set_refraction_texture_channel",
            "name": "refraction_texture_channel",
            "getter": "get_refraction_texture_channel",
            "type": "int",
            "enum": "SpatialMaterial.TextureChannel"
          },
          {
            "value": "Sets the strength of the rim lighting effect.",
            "setter": "set_rim",
            "name": "rim",
            "getter": "get_rim",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], rim effect is enabled. Rim lighting increases the brightness at glancing angles on an object.\n\t\t\t[b]Note:[/b] Rim lighting is not visible if the material has [member flags_unshaded] set to [code]true[/code].",
            "setter": "set_feature",
            "name": "rim_enabled",
            "getter": "get_feature",
            "type": "bool"
          },
          {
            "value": "Texture used to set the strength of the rim lighting effect per-pixel. Multiplied by [member rim].",
            "setter": "set_texture",
            "name": "rim_texture",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "value": "The amount of to blend light and albedo color when rendering rim effect. If [code]0[/code] the light color is used, while [code]1[/code] means albedo color is used. An intermediate value generally works best.",
            "setter": "set_rim_tint",
            "name": "rim_tint",
            "getter": "get_rim_tint",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Surface reflection. A value of [code]0[/code] represents a perfect mirror while a value of [code]1[/code] completely blurs the reflection. See also [member metallic].",
            "setter": "set_roughness",
            "name": "roughness",
            "getter": "get_roughness",
            "type": "float"
          },
          {
            "value": "Texture used to control the roughness per-pixel. Multiplied by [member roughness].",
            "setter": "set_texture",
            "name": "roughness_texture",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "default": "0",
            "value": "Specifies the channel of the [member ao_texture] in which the ambient occlusion information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.",
            "setter": "set_roughness_texture_channel",
            "name": "roughness_texture_channel",
            "getter": "get_roughness_texture_channel",
            "type": "int",
            "enum": "SpatialMaterial.TextureChannel"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], subsurface scattering is enabled. Emulates light that penetrates an object's surface, is scattered, and then emerges.",
            "setter": "set_feature",
            "name": "subsurf_scatter_enabled",
            "getter": "get_feature",
            "type": "bool"
          },
          {
            "value": "The strength of the subsurface scattering effect.",
            "setter": "set_subsurface_scattering_strength",
            "name": "subsurf_scatter_strength",
            "getter": "get_subsurface_scattering_strength",
            "type": "float"
          },
          {
            "value": "Texture used to control the subsurface scattering strength. Stored in the red texture channel. Multiplied by [member subsurf_scatter_strength].",
            "setter": "set_texture",
            "name": "subsurf_scatter_texture",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "value": "The color used by the transmission effect. Represents the light passing through an object.",
            "setter": "set_transmission",
            "name": "transmission",
            "getter": "get_transmission",
            "type": "Color"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the transmission effect is enabled.",
            "setter": "set_feature",
            "name": "transmission_enabled",
            "getter": "get_feature",
            "type": "bool"
          },
          {
            "value": "Texture used to control the transmission effect per-pixel. Added to [member transmission].",
            "setter": "set_texture",
            "name": "transmission_texture",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "How much to offset the [code]UV[/code] coordinates. This amount will be added to [code]UV[/code] in the vertex function. This can be used to offset a texture.",
            "setter": "set_uv1_offset",
            "name": "uv1_offset",
            "getter": "get_uv1_offset",
            "type": "Vector3"
          },
          {
            "default": "Vector3( 1, 1, 1 )",
            "value": "How much to scale the [code]UV[/code] coordinates. This is multiplied by [code]UV[/code] in the vertex function.",
            "setter": "set_uv1_scale",
            "name": "uv1_scale",
            "getter": "get_uv1_scale",
            "type": "Vector3"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], instead of using [code]UV[/code] textures will use a triplanar texture lookup to determine how to apply textures. Triplanar uses the orientation of the object's surface to blend between texture coordinates. It reads from the source texture 3 times, once for each axis and then blends between the results based on how closely the pixel aligns with each axis. This is often used for natural features to get a realistic blend of materials. Because triplanar texturing requires many more texture reads per-pixel it is much slower than normal UV texturing. Additionally, because it is blending the texture between the three axes, it is unsuitable when you are trying to achieve crisp texturing.",
            "setter": "set_flag",
            "name": "uv1_triplanar",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "A lower number blends the texture more softly while a higher number blends the texture more sharply.",
            "setter": "set_uv1_triplanar_blend_sharpness",
            "name": "uv1_triplanar_sharpness",
            "getter": "get_uv1_triplanar_blend_sharpness",
            "type": "float"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "How much to offset the [code]UV2[/code] coordinates. This amount will be added to [code]UV2[/code] in the vertex function. This can be used to offset a texture.",
            "setter": "set_uv2_offset",
            "name": "uv2_offset",
            "getter": "get_uv2_offset",
            "type": "Vector3"
          },
          {
            "default": "Vector3( 1, 1, 1 )",
            "value": "How much to scale the [code]UV2[/code] coordinates. This is multiplied by [code]UV2[/code] in the vertex function.",
            "setter": "set_uv2_scale",
            "name": "uv2_scale",
            "getter": "get_uv2_scale",
            "type": "Vector3"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], instead of using [code]UV2[/code] textures will use a triplanar texture lookup to determine how to apply textures. Triplanar uses the orientation of the object's surface to blend between texture coordinates. It reads from the source texture 3 times, once for each axis and then blends between the results based on how closely the pixel aligns with each axis. This is often used for natural features to get a realistic blend of materials. Because triplanar texturing requires many more texture reads per-pixel it is much slower than normal UV texturing. Additionally, because it is blending the texture between the three axes, it is unsuitable when you are trying to achieve crisp texturing.",
            "setter": "set_flag",
            "name": "uv2_triplanar",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "default": "1.0",
            "value": "A lower number blends the texture more softly while a higher number blends the texture more sharply.",
            "setter": "set_uv2_triplanar_blend_sharpness",
            "name": "uv2_triplanar_sharpness",
            "getter": "get_uv2_triplanar_blend_sharpness",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the model's vertex colors are processed as sRGB mode.",
            "setter": "set_flag",
            "name": "vertex_color_is_srgb",
            "getter": "get_flag",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the vertex color is used as albedo color.",
            "setter": "set_flag",
            "name": "vertex_color_use_as_albedo",
            "getter": "get_flag",
            "type": "bool"
          }
        ]
      },
      "inherits": "Material",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "feature",
              "type": "int",
              "enum": "SpatialMaterial.Feature",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_feature",
            "description": "Returns [code]true[/code], if the specified [enum Feature] is enabled."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "flag",
              "type": "int",
              "enum": "SpatialMaterial.Flags",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_flag",
            "description": "Returns [code]true[/code], if the specified flag is enabled. See [enum Flags] enumerator for options."
          },
          {
            "return": {
              "type": "Texture"
            },
            "argument": {
              "name": "param",
              "type": "int",
              "enum": "SpatialMaterial.TextureParam",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_texture",
            "description": "Returns the [Texture] associated with the specified [enum TextureParam]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "feature",
                "type": "int",
                "enum": "SpatialMaterial.Feature",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_feature",
            "description": "If [code]true[/code], enables the specified [enum Feature]. Many features that are available in [SpatialMaterial]s need to be enabled before use. This way the cost for using the feature is only incurred when specified. Features can also be enabled by setting the corresponding member to [code]true[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "flag",
                "type": "int",
                "enum": "SpatialMaterial.Flags",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_flag",
            "description": "If [code]true[/code], enables the specified flag. Flags are optional behaviour that can be turned on and off. Only one flag can be enabled at a time with this function, the flag enumerators cannot be bit-masked together to enable or disable multiple flags at once. Flags can also be enabled by setting the corresponding member to [code]true[/code]. See [enum Flags] enumerator for options."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "param",
                "type": "int",
                "enum": "SpatialMaterial.TextureParam",
                "index": "0"
              },
              {
                "name": "texture",
                "type": "Texture",
                "index": "1"
              }
            ],
            "name": "set_texture",
            "description": "Sets the [Texture] to be used by the specified [enum TextureParam]. This function is called when setting members ending in [code]*_texture[/code]."
          }
        ]
      },
      "name": "SpatialMaterial",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "TEXTURE_ALBEDO",
            "enum": "TextureParam"
          },
          {
            "value": "1",
            "name": "TEXTURE_METALLIC",
            "enum": "TextureParam"
          },
          {
            "value": "2",
            "name": "TEXTURE_ROUGHNESS",
            "enum": "TextureParam"
          },
          {
            "value": "3",
            "name": "TEXTURE_EMISSION",
            "enum": "TextureParam"
          },
          {
            "value": "4",
            "name": "TEXTURE_NORMAL",
            "enum": "TextureParam"
          },
          {
            "value": "5",
            "name": "TEXTURE_RIM",
            "enum": "TextureParam"
          },
          {
            "value": "6",
            "name": "TEXTURE_CLEARCOAT",
            "enum": "TextureParam"
          },
          {
            "value": "7",
            "name": "TEXTURE_FLOWMAP",
            "enum": "TextureParam"
          },
          {
            "value": "8",
            "name": "TEXTURE_AMBIENT_OCCLUSION",
            "enum": "TextureParam"
          },
          {
            "value": "9",
            "name": "TEXTURE_DEPTH",
            "enum": "TextureParam"
          },
          {
            "value": "10",
            "name": "TEXTURE_SUBSURFACE_SCATTERING",
            "enum": "TextureParam"
          },
          {
            "value": "11",
            "name": "TEXTURE_TRANSMISSION",
            "enum": "TextureParam"
          },
          {
            "value": "12",
            "name": "TEXTURE_REFRACTION",
            "enum": "TextureParam"
          },
          {
            "value": "13",
            "name": "TEXTURE_DETAIL_MASK",
            "enum": "TextureParam"
          },
          {
            "value": "14",
            "name": "TEXTURE_DETAIL_ALBEDO",
            "enum": "TextureParam"
          },
          {
            "value": "15",
            "name": "TEXTURE_DETAIL_NORMAL",
            "enum": "TextureParam"
          },
          {
            "value": "16",
            "name": "TEXTURE_MAX",
            "enum": "TextureParam"
          },
          {
            "value": "0",
            "name": "DETAIL_UV_1",
            "enum": "DetailUV"
          },
          {
            "value": "1",
            "name": "DETAIL_UV_2",
            "enum": "DetailUV"
          },
          {
            "value": "0",
            "name": "FEATURE_TRANSPARENT",
            "enum": "Feature"
          },
          {
            "value": "1",
            "name": "FEATURE_EMISSION",
            "enum": "Feature"
          },
          {
            "value": "2",
            "name": "FEATURE_NORMAL_MAPPING",
            "enum": "Feature"
          },
          {
            "value": "3",
            "name": "FEATURE_RIM",
            "enum": "Feature"
          },
          {
            "value": "4",
            "name": "FEATURE_CLEARCOAT",
            "enum": "Feature"
          },
          {
            "value": "5",
            "name": "FEATURE_ANISOTROPY",
            "enum": "Feature"
          },
          {
            "value": "6",
            "name": "FEATURE_AMBIENT_OCCLUSION",
            "enum": "Feature"
          },
          {
            "value": "7",
            "name": "FEATURE_DEPTH_MAPPING",
            "enum": "Feature"
          },
          {
            "value": "8",
            "name": "FEATURE_SUBSURACE_SCATTERING",
            "enum": "Feature"
          },
          {
            "value": "9",
            "name": "FEATURE_TRANSMISSION",
            "enum": "Feature"
          },
          {
            "value": "10",
            "name": "FEATURE_REFRACTION",
            "enum": "Feature"
          },
          {
            "value": "11",
            "name": "FEATURE_DETAIL",
            "enum": "Feature"
          },
          {
            "value": "12",
            "name": "FEATURE_MAX",
            "enum": "Feature"
          },
          {
            "value": "0",
            "name": "BLEND_MODE_MIX",
            "enum": "BlendMode"
          },
          {
            "value": "1",
            "name": "BLEND_MODE_ADD",
            "enum": "BlendMode"
          },
          {
            "value": "2",
            "name": "BLEND_MODE_SUB",
            "enum": "BlendMode"
          },
          {
            "value": "3",
            "name": "BLEND_MODE_MUL",
            "enum": "BlendMode"
          },
          {
            "value": "0",
            "name": "DEPTH_DRAW_OPAQUE_ONLY",
            "enum": "DepthDrawMode"
          },
          {
            "value": "1",
            "name": "DEPTH_DRAW_ALWAYS",
            "enum": "DepthDrawMode"
          },
          {
            "value": "2",
            "name": "DEPTH_DRAW_DISABLED",
            "enum": "DepthDrawMode"
          },
          {
            "value": "3",
            "name": "DEPTH_DRAW_ALPHA_OPAQUE_PREPASS",
            "enum": "DepthDrawMode"
          },
          {
            "value": "0",
            "name": "CULL_BACK",
            "enum": "CullMode"
          },
          {
            "value": "1",
            "name": "CULL_FRONT",
            "enum": "CullMode"
          },
          {
            "value": "2",
            "name": "CULL_DISABLED",
            "enum": "CullMode"
          },
          {
            "value": "0",
            "name": "FLAG_UNSHADED",
            "enum": "Flags"
          },
          {
            "value": "1",
            "name": "FLAG_USE_VERTEX_LIGHTING",
            "enum": "Flags"
          },
          {
            "value": "2",
            "name": "FLAG_DISABLE_DEPTH_TEST",
            "enum": "Flags"
          },
          {
            "value": "3",
            "name": "FLAG_ALBEDO_FROM_VERTEX_COLOR",
            "enum": "Flags"
          },
          {
            "value": "4",
            "name": "FLAG_SRGB_VERTEX_COLOR",
            "enum": "Flags"
          },
          {
            "value": "5",
            "name": "FLAG_USE_POINT_SIZE",
            "enum": "Flags"
          },
          {
            "value": "6",
            "name": "FLAG_FIXED_SIZE",
            "enum": "Flags"
          },
          {
            "value": "7",
            "name": "FLAG_BILLBOARD_KEEP_SCALE",
            "enum": "Flags"
          },
          {
            "value": "8",
            "name": "FLAG_UV1_USE_TRIPLANAR",
            "enum": "Flags"
          },
          {
            "value": "9",
            "name": "FLAG_UV2_USE_TRIPLANAR",
            "enum": "Flags"
          },
          {
            "value": "11",
            "name": "FLAG_AO_ON_UV2",
            "enum": "Flags"
          },
          {
            "value": "12",
            "name": "FLAG_EMISSION_ON_UV2",
            "enum": "Flags"
          },
          {
            "value": "13",
            "name": "FLAG_USE_ALPHA_SCISSOR",
            "enum": "Flags"
          },
          {
            "value": "10",
            "name": "FLAG_TRIPLANAR_USE_WORLD",
            "enum": "Flags"
          },
          {
            "value": "14",
            "name": "FLAG_ALBEDO_TEXTURE_FORCE_SRGB",
            "enum": "Flags"
          },
          {
            "value": "15",
            "name": "FLAG_DONT_RECEIVE_SHADOWS",
            "enum": "Flags"
          },
          {
            "value": "17",
            "name": "FLAG_DISABLE_AMBIENT_LIGHT",
            "enum": "Flags"
          },
          {
            "value": "16",
            "name": "FLAG_ENSURE_CORRECT_NORMALS",
            "enum": "Flags"
          },
          {
            "value": "18",
            "name": "FLAG_USE_SHADOW_TO_OPACITY",
            "enum": "Flags"
          },
          {
            "value": "19",
            "name": "FLAG_MAX",
            "enum": "Flags"
          },
          {
            "value": "0",
            "name": "DIFFUSE_BURLEY",
            "enum": "DiffuseMode"
          },
          {
            "value": "1",
            "name": "DIFFUSE_LAMBERT",
            "enum": "DiffuseMode"
          },
          {
            "value": "2",
            "name": "DIFFUSE_LAMBERT_WRAP",
            "enum": "DiffuseMode"
          },
          {
            "value": "3",
            "name": "DIFFUSE_OREN_NAYAR",
            "enum": "DiffuseMode"
          },
          {
            "value": "4",
            "name": "DIFFUSE_TOON",
            "enum": "DiffuseMode"
          },
          {
            "value": "0",
            "name": "SPECULAR_SCHLICK_GGX",
            "enum": "SpecularMode"
          },
          {
            "value": "1",
            "name": "SPECULAR_BLINN",
            "enum": "SpecularMode"
          },
          {
            "value": "2",
            "name": "SPECULAR_PHONG",
            "enum": "SpecularMode"
          },
          {
            "value": "3",
            "name": "SPECULAR_TOON",
            "enum": "SpecularMode"
          },
          {
            "value": "4",
            "name": "SPECULAR_DISABLED",
            "enum": "SpecularMode"
          },
          {
            "value": "0",
            "name": "BILLBOARD_DISABLED",
            "enum": "BillboardMode"
          },
          {
            "value": "1",
            "name": "BILLBOARD_ENABLED",
            "enum": "BillboardMode"
          },
          {
            "value": "2",
            "name": "BILLBOARD_FIXED_Y",
            "enum": "BillboardMode"
          },
          {
            "value": "3",
            "name": "BILLBOARD_PARTICLES",
            "enum": "BillboardMode"
          },
          {
            "value": "0",
            "name": "TEXTURE_CHANNEL_RED",
            "enum": "TextureChannel"
          },
          {
            "value": "1",
            "name": "TEXTURE_CHANNEL_GREEN",
            "enum": "TextureChannel"
          },
          {
            "value": "2",
            "name": "TEXTURE_CHANNEL_BLUE",
            "enum": "TextureChannel"
          },
          {
            "value": "3",
            "name": "TEXTURE_CHANNEL_ALPHA",
            "enum": "TextureChannel"
          },
          {
            "value": "4",
            "name": "TEXTURE_CHANNEL_GRAYSCALE",
            "enum": "TextureChannel"
          },
          {
            "value": "0",
            "name": "EMISSION_OP_ADD",
            "enum": "EmissionOperator"
          },
          {
            "value": "1",
            "name": "EMISSION_OP_MULTIPLY",
            "enum": "EmissionOperator"
          },
          {
            "value": "0",
            "name": "DISTANCE_FADE_DISABLED",
            "enum": "DistanceFadeMode"
          },
          {
            "value": "1",
            "name": "DISTANCE_FADE_PIXEL_ALPHA",
            "enum": "DistanceFadeMode"
          },
          {
            "value": "2",
            "name": "DISTANCE_FADE_PIXEL_DITHER",
            "enum": "DistanceFadeMode"
          },
          {
            "value": "3",
            "name": "DISTANCE_FADE_OBJECT_DITHER",
            "enum": "DistanceFadeMode"
          }
        ]
      },
      "brief_description": "Default 3D rendering material.",
      "description": "This provides a default material with a wide variety of rendering features and properties without the need to write shader code. See the tutorial below for details."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "false",
          "setter": "set_track_physics_step",
          "name": "track_physics_step",
          "getter": "is_tracking_physics_step",
          "type": "bool"
        }
      },
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Vector3"
            },
            "qualifiers": "const",
            "name": "get_tracked_linear_velocity",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "position",
              "type": "Vector3",
              "index": "0"
            },
            "name": "reset",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "position",
              "type": "Vector3",
              "index": "0"
            },
            "name": "update_position",
            "description": {}
          }
        ]
      },
      "name": "SpatialVelocityTracker",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/3d/introduction_to_3d.html",
            "title": "Introduction to 3D"
          },
          {
            "value": "https://github.com/godotengine/godot-demo-projects/tree/master/3d",
            "title": "All 3D Demos"
          }
        ]
      },
      "members": {
        "member": [
          {
            "value": "The [SpatialGizmo] for this node. Used for example in [EditorSpatialGizmo] as custom visualization and editing handles in Editor.",
            "setter": "set_gizmo",
            "name": "gizmo",
            "getter": "get_gizmo",
            "type": "SpatialGizmo"
          },
          {
            "value": "World space (global) [Transform] of this node.",
            "setter": "set_global_transform",
            "name": "global_transform",
            "getter": "get_global_transform",
            "type": "Transform"
          },
          {
            "value": "Rotation part of the local transformation in radians, specified in terms of YXZ-Euler angles in the format (X angle, Y angle, Z angle).\n\t\t\t[b]Note:[/b] In the mathematical sense, rotation is a matrix and not a vector. The three Euler angles, which are the three independent parameters of the Euler-angle parametrization of the rotation matrix, are stored in a [Vector3] data structure not because the rotation is a vector, but only because [Vector3] exists as a convenient data-structure to store 3 floating-point numbers. Therefore, applying affine operations on the rotation \"vector\" is not meaningful.",
            "setter": "set_rotation",
            "name": "rotation",
            "getter": "get_rotation",
            "type": "Vector3"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "Rotation part of the local transformation in degrees, specified in terms of YXZ-Euler angles in the format (X angle, Y angle, Z angle).",
            "setter": "set_rotation_degrees",
            "name": "rotation_degrees",
            "getter": "get_rotation_degrees",
            "type": "Vector3"
          },
          {
            "default": "Vector3( 1, 1, 1 )",
            "value": "Scale part of the local transformation.",
            "setter": "set_scale",
            "name": "scale",
            "getter": "get_scale",
            "type": "Vector3"
          },
          {
            "default": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )",
            "value": "Local space [Transform] of this node, with respect to the parent node.",
            "setter": "set_transform",
            "name": "transform",
            "getter": "get_transform",
            "type": "Transform"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "Local translation of this node.",
            "setter": "set_translation",
            "name": "translation",
            "getter": "get_translation",
            "type": "Vector3"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], this node is drawn. The node is only visible if all of its antecedents are visible as well (in other words, [method is_visible_in_tree] must return [code]true[/code]).",
            "setter": "set_visible",
            "name": "visible",
            "getter": "is_visible",
            "type": "bool"
          }
        ]
      },
      "inherits": "Node",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "name": "force_update_transform",
            "description": "Forces the transform to update. Transform changes in physics are not instant for performance reasons. Transforms are accumulated and then set. Use this if you need an up-to-date transform when doing physics operations."
          },
          {
            "return": {
              "type": "Spatial"
            },
            "qualifiers": "const",
            "name": "get_parent_spatial",
            "description": "Returns the parent [Spatial], or an empty [Object] if no parent exists or parent is not of type [Spatial]."
          },
          {
            "return": {
              "type": "World"
            },
            "qualifiers": "const",
            "name": "get_world",
            "description": "Returns the current [World] resource this [Spatial] node is registered to."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "axis",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "angle",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "global_rotate",
            "description": "Rotates the global (world) transformation around axis, a unit [Vector3], by specified angle in radians. The rotation axis is in global coordinate system."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "scale",
              "type": "Vector3",
              "index": "0"
            },
            "name": "global_scale",
            "description": "Scales the global (world) transformation by the given [Vector3] scale factors."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "offset",
              "type": "Vector3",
              "index": "0"
            },
            "name": "global_translate",
            "description": "Moves the global (world) transformation by [Vector3] offset. The offset is in global coordinate system."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "hide",
            "description": "Disables rendering of this node. Changes [member visible] to [code]false[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_local_transform_notification_enabled",
            "description": "Returns whether node notifies about its local transformation changes. [Spatial] will not propagate this by default."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_scale_disabled",
            "description": "Returns whether this node uses a scale of [code](1, 1, 1)[/code] or its local transformation scale."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_set_as_toplevel",
            "description": "Returns whether this node is set as Toplevel, that is whether it ignores its parent nodes transformations."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_transform_notification_enabled",
            "description": "Returns whether the node notifies about its global and local transformation changes. [Spatial] will not propagate this by default."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_visible_in_tree",
            "description": "Returns [code]true[/code] if the node is present in the [SceneTree], its [member visible] property is [code]true[/code] and all its antecedents are also visible. If any antecedent is hidden, this node will not be visible in the scene tree."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "target",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "up",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "look_at",
            "description": "Rotates itself so that the local -Z axis points towards the [code]target[/code] position.\n\t\t\t\tThe transform will first be rotated around the given [code]up[/code] vector, and then fully aligned to the target by a further rotation around an axis perpendicular to both the [code]target[/code] and [code]up[/code] vectors.\n\t\t\t\tOperations take place in global space."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "position",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "target",
                "type": "Vector3",
                "index": "1"
              },
              {
                "name": "up",
                "type": "Vector3",
                "index": "2"
              }
            ],
            "name": "look_at_from_position",
            "description": "Moves the node to the specified [code]position[/code], and then rotates itself to point toward the [code]target[/code] as per [method look_at]. Operations take place in global space."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "orthonormalize",
            "description": "Resets this node's transformations (like scale, skew and taper) preserving its rotation and translation by performing Gram-Schmidt orthonormalization on this node's [Transform]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "axis",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "angle",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "rotate",
            "description": "Rotates the local transformation around axis, a unit [Vector3], by specified angle in radians."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "axis",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "angle",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "rotate_object_local",
            "description": "Rotates the local transformation around axis, a unit [Vector3], by specified angle in radians. The rotation axis is in object-local coordinate system."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "angle",
              "type": "float",
              "index": "0"
            },
            "name": "rotate_x",
            "description": "Rotates the local transformation around the X axis by angle in radians."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "angle",
              "type": "float",
              "index": "0"
            },
            "name": "rotate_y",
            "description": "Rotates the local transformation around the Y axis by angle in radians."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "angle",
              "type": "float",
              "index": "0"
            },
            "name": "rotate_z",
            "description": "Rotates the local transformation around the Z axis by angle in radians."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "scale",
              "type": "Vector3",
              "index": "0"
            },
            "name": "scale_object_local",
            "description": "Scales the local transformation by given 3D scale factors in object-local coordinate system."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enable",
              "type": "bool",
              "index": "0"
            },
            "name": "set_as_toplevel",
            "description": "Makes the node ignore its parents transformations. Node transformations are only in global space."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "disable",
              "type": "bool",
              "index": "0"
            },
            "name": "set_disable_scale",
            "description": "Sets whether the node uses a scale of [code](1, 1, 1)[/code] or its local transformation scale. Changes to the local transformation scale are preserved."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "set_identity",
            "description": "Reset all transformations for this node (sets its [Transform] to the identity matrix)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enabled",
              "type": "bool",
              "index": "0"
            },
            "name": "set_ignore_transform_notification",
            "description": "Sets whether the node ignores notification that its transformation (global or local) changed."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enable",
              "type": "bool",
              "index": "0"
            },
            "name": "set_notify_local_transform",
            "description": "Sets whether the node notifies about its local transformation changes. [Spatial] will not propagate this by default."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enable",
              "type": "bool",
              "index": "0"
            },
            "name": "set_notify_transform",
            "description": "Sets whether the node notifies about its global and local transformation changes. [Spatial] will not propagate this by default, unless it is in the editor context and it has a valid gizmo."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "show",
            "description": "Enables rendering of this node. Changes [member visible] to [code]true[/code]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "local_point",
              "type": "Vector3",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "to_global",
            "description": "Transforms [code]local_point[/code] from this node's local space to world space."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "global_point",
              "type": "Vector3",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "to_local",
            "description": "Transforms [code]global_point[/code] from world space to this node's local space."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "offset",
              "type": "Vector3",
              "index": "0"
            },
            "name": "translate",
            "description": "Changes the node's position by the given offset [Vector3].\n\t\t\t\tNote that the translation [code]offset[/code] is affected by the node's scale, so if scaled by e.g. [code](10, 1, 1)[/code], a translation by an offset of [code](2, 0, 0)[/code] would actually add 20 ([code]2 * 10[/code]) to the X coordinate."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "offset",
              "type": "Vector3",
              "index": "0"
            },
            "name": "translate_object_local",
            "description": "Changes the node's position by the given offset [Vector3] in local space."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "update_gizmo",
            "description": "Updates the [SpatialGizmo] of this node."
          }
        ]
      },
      "name": "Spatial",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "visibility_changed",
          "description": "Emitted when node visibility changes."
        }
      },
      "constants": {
        "constant": [
          {
            "value": "2000",
            "name": "NOTIFICATION_TRANSFORM_CHANGED"
          },
          {
            "value": "41",
            "name": "NOTIFICATION_ENTER_WORLD"
          },
          {
            "value": "42",
            "name": "NOTIFICATION_EXIT_WORLD"
          },
          {
            "value": "43",
            "name": "NOTIFICATION_VISIBILITY_CHANGED"
          }
        ]
      },
      "brief_description": "Most basic 3D game object, parent of all 3D-related nodes.",
      "description": "Most basic 3D game object, with a 3D [Transform] and visibility settings. All other 3D game objects inherit from Spatial. Use [Spatial] as a parent node to move, scale, rotate and show/hide children in a 3D project.\n\t\tAffine operations (rotate, scale, translate) happen in parent's local coordinate system, unless the [Spatial] object is set as top-level. Affine operations in this coordinate system correspond to direct affine operations on the [Spatial]'s transform. The word local below refers to this coordinate system. The coordinate system that is attached to the [Spatial] object itself is referred to as object-local coordinate system.\n\t\t[b]Note:[/b] Unless otherwise specified, all methods that have angle parameters must have angles specified as [i]radians[/i]. To convert degrees to radians, use [method @GDScript.deg2rad]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "2.0",
            "value": "Full height of the sphere.",
            "setter": "set_height",
            "name": "height",
            "getter": "get_height",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], a hemisphere is created rather than a full sphere.\n\t\t\t[b]Note:[/b] To get a regular hemisphere, the height and radius of the sphere must be equal.",
            "setter": "set_is_hemisphere",
            "name": "is_hemisphere",
            "getter": "get_is_hemisphere",
            "type": "bool"
          },
          {
            "default": "64",
            "value": "Number of radial segments on the sphere.",
            "setter": "set_radial_segments",
            "name": "radial_segments",
            "getter": "get_radial_segments",
            "type": "int"
          },
          {
            "default": "1.0",
            "value": "Radius of sphere.",
            "setter": "set_radius",
            "name": "radius",
            "getter": "get_radius",
            "type": "float"
          },
          {
            "default": "32",
            "value": "Number of segments along the height of the sphere.",
            "setter": "set_rings",
            "name": "rings",
            "getter": "get_rings",
            "type": "int"
          }
        ]
      },
      "inherits": "PrimitiveMesh",
      "methods": {},
      "name": "SphereMesh",
      "version": "3.3",
      "constants": {},
      "brief_description": "Class representing a spherical [PrimitiveMesh].",
      "description": "Class representing a spherical [PrimitiveMesh]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/675",
          "title": "3D Physics Tests Demo"
        }
      },
      "members": {
        "member": {
          "default": "1.0",
          "value": "The sphere's radius. The shape's diameter is double the radius.",
          "setter": "set_radius",
          "name": "radius",
          "getter": "get_radius",
          "type": "float"
        }
      },
      "inherits": "Shape",
      "methods": {},
      "name": "SphereShape",
      "version": "3.3",
      "constants": {},
      "brief_description": "Sphere shape for 3D collisions.",
      "description": "Sphere shape for 3D collisions, which can be set into a [PhysicsBody] or [Area]. This shape is useful for modeling sphere-like 3D objects."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": {
          "value": "Sets a custom [Texture] for up and down arrows of the [SpinBox].",
          "name": "updown",
          "type": "Texture"
        }
      },
      "members": {
        "member": [
          {
            "default": "0",
            "value": "Sets the text alignment of the [SpinBox].",
            "setter": "set_align",
            "name": "align",
            "getter": "get_align",
            "type": "int",
            "enum": "LineEdit.Align"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the [SpinBox] will be editable. Otherwise, it will be read only.",
            "setter": "set_editable",
            "name": "editable",
            "getter": "is_editable",
            "type": "bool"
          },
          {
            "default": "\"\"",
            "value": "Adds the specified [code]prefix[/code] string before the numerical value of the [SpinBox].",
            "setter": "set_prefix",
            "name": "prefix",
            "getter": "get_prefix",
            "type": "String"
          },
          {
            "default": "\"\"",
            "value": "Adds the specified [code]suffix[/code] string after the numerical value of the [SpinBox].",
            "setter": "set_suffix",
            "name": "suffix",
            "getter": "get_suffix",
            "type": "String"
          }
        ]
      },
      "inherits": "Range",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "name": "apply",
            "description": "Applies the current value of this [SpinBox]."
          },
          {
            "return": {
              "type": "LineEdit"
            },
            "name": "get_line_edit",
            "description": "Returns the [LineEdit] instance from this [SpinBox]. You can use it to access properties and methods of [LineEdit]."
          }
        ]
      },
      "name": "SpinBox",
      "version": "3.3",
      "constants": {},
      "brief_description": "Numerical input text field.",
      "description": "SpinBox is a numerical input text field. It allows entering integers and floats.\n\t\t[b]Example:[/b]\n\t\t[codeblock]\n\t\tvar spin_box = SpinBox.new()\n\t\tadd_child(spin_box)\n\t\tvar line_edit = spin_box.get_line_edit()\n\t\tline_edit.context_menu_enabled = false\n\t\tspin_box.align = LineEdit.ALIGN_RIGHT\n\t\t[/codeblock]\n\t\tThe above code will create a [SpinBox], disable context menu on it and set the text alignment to right.\n\t\tSee [Range] class for more options over the [SpinBox].\n\t\t[b]Note:[/b] [SpinBox] relies on an underlying [LineEdit] node. To theme a [SpinBox]'s background, add theme items for [LineEdit] and customize them."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the area of the first [Control] will be collapsed and the dragger will be disabled.",
            "setter": "set_collapsed",
            "name": "collapsed",
            "getter": "is_collapsed",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "Determines the dragger's visibility. See [enum DraggerVisibility] for details.",
            "setter": "set_dragger_visibility",
            "name": "dragger_visibility",
            "getter": "get_dragger_visibility",
            "type": "int",
            "enum": "SplitContainer.DraggerVisibility"
          },
          {
            "default": "0",
            "value": "The initial offset of the splitting between the two [Control]s, with [code]0[/code] being at the end of the first [Control].",
            "setter": "set_split_offset",
            "name": "split_offset",
            "getter": "get_split_offset",
            "type": "int"
          }
        ]
      },
      "inherits": "Container",
      "methods": {
        "method": {
          "return": {
            "type": "void"
          },
          "name": "clamp_split_offset",
          "description": "Clamps the [member split_offset] value to not go outside the currently possible minimal and maximum values."
        }
      },
      "name": "SplitContainer",
      "version": "3.3",
      "signals": {
        "signal": {
          "argument": {
            "name": "offset",
            "type": "int",
            "index": "0"
          },
          "name": "dragged",
          "description": "Emitted when the dragger is dragged by user."
        }
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "DRAGGER_VISIBLE",
            "enum": "DraggerVisibility"
          },
          {
            "value": "1",
            "name": "DRAGGER_HIDDEN",
            "enum": "DraggerVisibility"
          },
          {
            "value": "2",
            "name": "DRAGGER_HIDDEN_COLLAPSED",
            "enum": "DraggerVisibility"
          }
        ]
      },
      "brief_description": "Container for splitting and adjusting.",
      "description": "Container for splitting two [Control]s vertically or horizontally, with a grabber that allows adjusting the split offset or ratio."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/3d/lights_and_shadows.html",
            "title": "3D lights and shadows"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "45.0",
            "value": "The spotlight's angle in degrees.",
            "setter": "set_param",
            "name": "spot_angle",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The spotlight's angular attenuation curve.",
            "setter": "set_param",
            "name": "spot_angle_attenuation",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The spotlight's light energy attenuation curve.",
            "setter": "set_param",
            "name": "spot_attenuation",
            "getter": "get_param",
            "type": "float"
          },
          {
            "default": "5.0",
            "value": "The maximal range that can be reached by the spotlight. Note that the effectively lit area may appear to be smaller depending on the [member spot_attenuation] in use. No matter the [member spot_attenuation] in use, the light will never reach anything outside this range.",
            "setter": "set_param",
            "name": "spot_range",
            "getter": "get_param",
            "type": "float"
          }
        ]
      },
      "inherits": "Light",
      "methods": {},
      "name": "SpotLight",
      "version": "3.3",
      "constants": {},
      "brief_description": "A spotlight, such as a reflector spotlight or a lantern.",
      "description": "A Spotlight is a type of [Light] node that emits lights in a specific direction, in the shape of a cone. The light is attenuated through the distance. This attenuation can be configured by changing the energy, radius and attenuation parameters of [Light].\n\t\t[b]Note:[/b] By default, only 32 SpotLights may affect a single mesh [i]resource[/i] at once. Consider splitting your level into several meshes to decrease the likelihood that more than 32 lights will affect the same mesh resource. Splitting the level mesh will also improve frustum culling effectiveness, leading to greater performance. If you need to use more lights per mesh, you can increase [member ProjectSettings.rendering/limits/rendering/max_lights_per_object] at the cost of shader compilation times."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "1",
            "value": "The layers against which the collision check shall be done. See [url=https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.",
            "setter": "set_collision_mask",
            "name": "collision_mask",
            "getter": "get_collision_mask",
            "type": "int"
          },
          {
            "default": "0.01",
            "value": "When the collision check is made, a candidate length for the SpringArm is given.\n\t\t\tThe margin is then subtracted to this length and the translation is applied to the child objects of the SpringArm.\n\t\t\tThis margin is useful for when the SpringArm has a [Camera] as a child node: without the margin, the [Camera] would be placed on the exact point of collision, while with the margin the [Camera] would be placed close to the point of collision.",
            "setter": "set_margin",
            "name": "margin",
            "getter": "get_margin",
            "type": "float"
          },
          {
            "value": "The [Shape] to use for the SpringArm.\n\t\t\tWhen the shape is set, the SpringArm will cast the [Shape] on its z axis instead of performing a ray cast.",
            "setter": "set_shape",
            "name": "shape",
            "getter": "get_shape",
            "type": "Shape"
          },
          {
            "default": "1.0",
            "value": "The maximum extent of the SpringArm. This is used as a length for both the ray and the shape cast used internally to calculate the desired position of the SpringArm's child nodes.\n\t\t\tTo know more about how to perform a shape cast or a ray cast, please consult the [PhysicsDirectSpaceState] documentation.",
            "setter": "set_length",
            "name": "spring_length",
            "getter": "get_length",
            "type": "float"
          }
        ]
      },
      "inherits": "Spatial",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "RID",
              "type": "RID",
              "index": "0"
            },
            "name": "add_excluded_object",
            "description": "Adds the [PhysicsBody] object with the given [RID] to the list of [PhysicsBody] objects excluded from the collision check."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_excluded_objects",
            "description": "Clears the list of [PhysicsBody] objects excluded from the collision check."
          },
          {
            "return": {
              "type": "float"
            },
            "name": "get_hit_length",
            "description": "Returns the spring arm's current length."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "RID",
              "type": "RID",
              "index": "0"
            },
            "name": "remove_excluded_object",
            "description": "Removes the given [RID] from the list of [PhysicsBody] objects excluded from the collision check."
          }
        ]
      },
      "name": "SpringArm",
      "version": "3.3",
      "constants": {},
      "brief_description": "A helper node, mostly used in 3rd person cameras.",
      "description": "The SpringArm node is a node that casts a ray (or collision shape) along its z axis and moves all its direct children to the collision point, minus a margin.\n\t\tThe most common use case for this is to make a 3rd person camera that reacts to collisions in the environment.\n\t\tThe SpringArm will either cast a ray, or if a shape is given, it will cast the shape in the direction of its z axis.\n\t\tIf you use the SpringArm as a camera controller for your player, you might need to exclude the player's collider from the SpringArm's collision check."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0",
            "value": "Current frame to display from sprite sheet. [member hframes] or [member vframes] must be greater than 1.",
            "setter": "set_frame",
            "name": "frame",
            "getter": "get_frame",
            "type": "int"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "Coordinates of the frame to display from sprite sheet. This is as an alias for the [member frame] property. [member hframes] or [member vframes] must be greater than 1.",
            "setter": "set_frame_coords",
            "name": "frame_coords",
            "getter": "get_frame_coords",
            "type": "Vector2"
          },
          {
            "default": "1",
            "value": "The number of columns in the sprite sheet.",
            "setter": "set_hframes",
            "name": "hframes",
            "getter": "get_hframes",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], texture will be cut from a larger atlas texture. See [member region_rect].",
            "setter": "set_region",
            "name": "region_enabled",
            "getter": "is_region",
            "type": "bool"
          },
          {
            "default": "Rect2( 0, 0, 0, 0 )",
            "value": "The region of the atlas texture to display. [member region_enabled] must be [code]true[/code].",
            "setter": "set_region_rect",
            "name": "region_rect",
            "getter": "get_region_rect",
            "type": "Rect2"
          },
          {
            "value": "[Texture] object to draw. If [member GeometryInstance.material_override] is used, this will be overridden.",
            "setter": "set_texture",
            "name": "texture",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "default": "1",
            "value": "The number of rows in the sprite sheet.",
            "setter": "set_vframes",
            "name": "vframes",
            "getter": "get_vframes",
            "type": "int"
          }
        ]
      },
      "inherits": "SpriteBase3D",
      "methods": {},
      "name": "Sprite3D",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "frame_changed",
          "description": "Emitted when the [member frame] changes."
        }
      },
      "constants": {},
      "brief_description": "2D sprite node in a 3D world.",
      "description": "A node that displays a 2D texture in a 3D environment. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0",
            "setter": "set_alpha_cut_mode",
            "name": "alpha_cut",
            "getter": "get_alpha_cut_mode",
            "type": "int",
            "enum": "SpriteBase3D.AlphaCutMode"
          },
          {
            "default": "2",
            "value": "The direction in which the front of the texture faces.",
            "setter": "set_axis",
            "name": "axis",
            "getter": "get_axis",
            "type": "int",
            "enum": "Vector3.Axis"
          },
          {
            "default": "0",
            "setter": "set_billboard_mode",
            "name": "billboard",
            "getter": "get_billboard_mode",
            "type": "int",
            "enum": "SpatialMaterial.BillboardMode"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], texture will be centered.",
            "setter": "set_centered",
            "name": "centered",
            "getter": "is_centered",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], texture can be seen from the back as well, if [code]false[/code], it is invisible when looking at it from behind.",
            "setter": "set_draw_flag",
            "name": "double_sided",
            "getter": "get_draw_flag",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], texture is flipped horizontally.",
            "setter": "set_flip_h",
            "name": "flip_h",
            "getter": "is_flipped_h",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], texture is flipped vertically.",
            "setter": "set_flip_v",
            "name": "flip_v",
            "getter": "is_flipped_v",
            "type": "bool"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "A color value that gets multiplied on, could be used for mood-coloring or to simulate the color of light.",
            "setter": "set_modulate",
            "name": "modulate",
            "getter": "get_modulate",
            "type": "Color"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The texture's drawing offset.",
            "setter": "set_offset",
            "name": "offset",
            "getter": "get_offset",
            "type": "Vector2"
          },
          {
            "default": "1.0",
            "value": "The objects' visibility on a scale from [code]0[/code] fully invisible to [code]1[/code] fully visible.",
            "setter": "set_opacity",
            "name": "opacity",
            "getter": "get_opacity",
            "type": "float"
          },
          {
            "default": "0.01",
            "value": "The size of one pixel's width on the sprite to scale it in 3D.",
            "setter": "set_pixel_size",
            "name": "pixel_size",
            "getter": "get_pixel_size",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the [Light] in the [Environment] has effects on the sprite.",
            "setter": "set_draw_flag",
            "name": "shaded",
            "getter": "get_draw_flag",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the texture's transparency and the opacity are used to make those parts of the sprite invisible.",
            "setter": "set_draw_flag",
            "name": "transparent",
            "getter": "get_draw_flag",
            "type": "bool"
          }
        ]
      },
      "inherits": "GeometryInstance",
      "methods": {
        "method": [
          {
            "return": {
              "type": "TriangleMesh"
            },
            "qualifiers": "const",
            "name": "generate_triangle_mesh",
            "description": {}
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "flag",
              "type": "int",
              "enum": "SpriteBase3D.DrawFlags",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_draw_flag",
            "description": "Returns the value of the specified flag."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "qualifiers": "const",
            "name": "get_item_rect",
            "description": "Returns the rectangle representing this sprite."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "flag",
                "type": "int",
                "enum": "SpriteBase3D.DrawFlags",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_draw_flag",
            "description": "If [code]true[/code], the specified flag will be enabled."
          }
        ]
      },
      "name": "SpriteBase3D",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "FLAG_TRANSPARENT",
            "enum": "DrawFlags"
          },
          {
            "value": "1",
            "name": "FLAG_SHADED",
            "enum": "DrawFlags"
          },
          {
            "value": "2",
            "name": "FLAG_DOUBLE_SIDED",
            "enum": "DrawFlags"
          },
          {
            "value": "3",
            "name": "FLAG_MAX",
            "enum": "DrawFlags"
          },
          {
            "value": "0",
            "name": "ALPHA_CUT_DISABLED",
            "enum": "AlphaCutMode"
          },
          {
            "value": "1",
            "name": "ALPHA_CUT_DISCARD",
            "enum": "AlphaCutMode"
          },
          {
            "value": "2",
            "name": "ALPHA_CUT_OPAQUE_PREPASS",
            "enum": "AlphaCutMode"
          }
        ]
      },
      "brief_description": "2D sprite node in 3D environment.",
      "description": "A node that displays 2D texture information in a 3D environment."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "value": "Compatibility property, always equals to an empty array.",
          "setter": "_set_frames",
          "name": "frames",
          "getter": "_get_frames",
          "type": "Array"
        }
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "anim",
              "type": "String",
              "index": "0"
            },
            "name": "add_animation",
            "description": "Adds a new animation to the library."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "anim",
                "type": "String",
                "index": "0"
              },
              {
                "name": "frame",
                "type": "Texture",
                "index": "1"
              },
              {
                "default": "-1",
                "name": "at_position",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "add_frame",
            "description": "Adds a frame to the given animation."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "anim",
              "type": "String",
              "index": "0"
            },
            "name": "clear",
            "description": "Removes all frames from the given animation."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_all",
            "description": "Removes all animations. A \"default\" animation will be created."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "anim",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_animation_loop",
            "description": "Returns [code]true[/code] if the given animation is configured to loop when it finishes playing. Otherwise, returns [code]false[/code]."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "qualifiers": "const",
            "name": "get_animation_names",
            "description": "Returns an array containing the names associated to each animation. Values are placed in alphabetical order."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "anim",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_animation_speed",
            "description": "The animation's speed in frames per second."
          },
          {
            "return": {
              "type": "Texture"
            },
            "argument": [
              {
                "name": "anim",
                "type": "String",
                "index": "0"
              },
              {
                "name": "idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_frame",
            "description": "Returns the animation's selected frame."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "anim",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_frame_count",
            "description": "Returns the number of frames in the animation."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "anim",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_animation",
            "description": "If [code]true[/code], the named animation exists."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "anim",
              "type": "String",
              "index": "0"
            },
            "name": "remove_animation",
            "description": "Removes the given animation."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "anim",
                "type": "String",
                "index": "0"
              },
              {
                "name": "idx",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "remove_frame",
            "description": "Removes the animation's selected frame."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "anim",
                "type": "String",
                "index": "0"
              },
              {
                "name": "newname",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "rename_animation",
            "description": "Changes the animation's name to [code]newname[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "anim",
                "type": "String",
                "index": "0"
              },
              {
                "name": "loop",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_animation_loop",
            "description": "If [code]true[/code], the animation will loop."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "anim",
                "type": "String",
                "index": "0"
              },
              {
                "name": "speed",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_animation_speed",
            "description": "The animation's speed in frames per second."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "anim",
                "type": "String",
                "index": "0"
              },
              {
                "name": "idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "txt",
                "type": "Texture",
                "index": "2"
              }
            ],
            "name": "set_frame",
            "description": "Sets the texture of the given frame."
          }
        ]
      },
      "name": "SpriteFrames",
      "version": "3.3",
      "constants": {},
      "brief_description": "Sprite frame library for AnimatedSprite.",
      "description": "Sprite frame library for [AnimatedSprite]. Contains frames and animation data for playback.\n\t\t[b]Note:[/b] You can associate a set of normal maps by creating additional [SpriteFrames] resources with a [code]_normal[/code] suffix. For example, having 2 [SpriteFrames] resources [code]run[/code] and [code]run_normal[/code] will make it so the [code]run[/code] animation uses the normal map."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/148",
          "title": "Instancing Demo"
        }
      },
      "members": {
        "member": [
          {
            "default": "true",
            "value": "If [code]true[/code], texture is centered.",
            "setter": "set_centered",
            "name": "centered",
            "getter": "is_centered",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], texture is flipped horizontally.",
            "setter": "set_flip_h",
            "name": "flip_h",
            "getter": "is_flipped_h",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], texture is flipped vertically.",
            "setter": "set_flip_v",
            "name": "flip_v",
            "getter": "is_flipped_v",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "Current frame to display from sprite sheet. [member hframes] or [member vframes] must be greater than 1.",
            "setter": "set_frame",
            "name": "frame",
            "getter": "get_frame",
            "type": "int"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "Coordinates of the frame to display from sprite sheet. This is as an alias for the [member frame] property. [member hframes] or [member vframes] must be greater than 1.",
            "setter": "set_frame_coords",
            "name": "frame_coords",
            "getter": "get_frame_coords",
            "type": "Vector2"
          },
          {
            "default": "1",
            "value": "The number of columns in the sprite sheet.",
            "setter": "set_hframes",
            "name": "hframes",
            "getter": "get_hframes",
            "type": "int"
          },
          {
            "value": "The normal map gives depth to the Sprite.\n\t\t\t[b]Note:[/b] Godot expects the normal map to use X+, Y-, and Z+ coordinates. See [url=http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates]this page[/url] for a comparison of normal map coordinates expected by popular engines.",
            "setter": "set_normal_map",
            "name": "normal_map",
            "getter": "get_normal_map",
            "type": "Texture"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The texture's drawing offset.",
            "setter": "set_offset",
            "name": "offset",
            "getter": "get_offset",
            "type": "Vector2"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], texture is cut from a larger atlas texture. See [member region_rect].",
            "setter": "set_region",
            "name": "region_enabled",
            "getter": "is_region",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the outermost pixels get blurred out.",
            "setter": "set_region_filter_clip",
            "name": "region_filter_clip",
            "getter": "is_region_filter_clip_enabled",
            "type": "bool"
          },
          {
            "default": "Rect2( 0, 0, 0, 0 )",
            "value": "The region of the atlas texture to display. [member region_enabled] must be [code]true[/code].",
            "setter": "set_region_rect",
            "name": "region_rect",
            "getter": "get_region_rect",
            "type": "Rect2"
          },
          {
            "value": "[Texture] object to draw.",
            "setter": "set_texture",
            "name": "texture",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "default": "1",
            "value": "The number of rows in the sprite sheet.",
            "setter": "set_vframes",
            "name": "vframes",
            "getter": "get_vframes",
            "type": "int"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Rect2"
            },
            "qualifiers": "const",
            "name": "get_rect",
            "description": "Returns a [Rect2] representing the Sprite's boundary in local coordinates. Can be used to detect if the Sprite was clicked. Example:\n\t\t\t\t[codeblock]\n\t\t\t\tfunc _input(event):\n\t\t\t\t    if event is InputEventMouseButton and event.pressed and event.button_index == BUTTON_LEFT:\n\t\t\t\t        if get_rect().has_point(to_local(event.position)):\n\t\t\t\t            print(\"A click!\")\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "pos",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_pixel_opaque",
            "description": "Returns [code]true[/code], if the pixel at the given position is opaque and [code]false[/code] in other case.\n\t\t\t\t[b]Note:[/b] It also returns [code]false[/code], if the sprite's texture is [code]null[/code] or if the given position is invalid."
          }
        ]
      },
      "name": "Sprite",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "frame_changed",
            "description": "Emitted when the [member frame] changes."
          },
          {
            "name": "texture_changed",
            "description": "Emitted when the [member texture] changes."
          }
        ]
      },
      "constants": {},
      "brief_description": "General-purpose sprite node.",
      "description": "A node that displays a 2D texture. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "value": "The body's bounciness. Values range from [code]0[/code] (no bounce) to [code]1[/code] (full bounciness).\n\t\t\tDeprecated, use [member PhysicsMaterial.bounce] instead via [member physics_material_override].",
            "setter": "set_bounce",
            "name": "bounce",
            "getter": "get_bounce",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The body's constant angular velocity. This does not rotate the body, but affects colliding bodies, as if it were rotating.",
            "setter": "set_constant_angular_velocity",
            "name": "constant_angular_velocity",
            "getter": "get_constant_angular_velocity",
            "type": "float"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The body's constant linear velocity. This does not move the body, but affects colliding bodies, as if it were moving.",
            "setter": "set_constant_linear_velocity",
            "name": "constant_linear_velocity",
            "getter": "get_constant_linear_velocity",
            "type": "Vector2"
          },
          {
            "value": "The body's friction. Values range from [code]0[/code] (no friction) to [code]1[/code] (full friction).\n\t\t\tDeprecated, use [member PhysicsMaterial.friction] instead via [member physics_material_override].",
            "setter": "set_friction",
            "name": "friction",
            "getter": "get_friction",
            "type": "float"
          },
          {
            "value": "The physics material override for the body.\n\t\t\tIf a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one.",
            "setter": "set_physics_material_override",
            "name": "physics_material_override",
            "getter": "get_physics_material_override",
            "type": "PhysicsMaterial"
          }
        ]
      },
      "inherits": "PhysicsBody2D",
      "methods": {},
      "name": "StaticBody2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Static body for 2D physics.",
      "description": "Static body for 2D physics. A StaticBody2D is a body that is not intended to move. It is ideal for implementing objects in the environment, such as walls or platforms.\n\t\tAdditionally, a constant linear or angular velocity can be set for the static body, which will affect colliding bodies as if it were moving (for example, a conveyor belt)."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://godotengine.org/asset-library/asset/675",
            "title": "3D Physics Tests Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/676",
            "title": "3D Voxel Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "value": "The body's bounciness. Values range from [code]0[/code] (no bounce) to [code]1[/code] (full bounciness).\n\t\t\tDeprecated, use [member PhysicsMaterial.bounce] instead via [member physics_material_override].",
            "setter": "set_bounce",
            "name": "bounce",
            "getter": "get_bounce",
            "type": "float"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "The body's constant angular velocity. This does not rotate the body, but affects other bodies that touch it, as if it was in a state of rotation.",
            "setter": "set_constant_angular_velocity",
            "name": "constant_angular_velocity",
            "getter": "get_constant_angular_velocity",
            "type": "Vector3"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "The body's constant linear velocity. This does not move the body, but affects other bodies that touch it, as if it was in a state of movement.",
            "setter": "set_constant_linear_velocity",
            "name": "constant_linear_velocity",
            "getter": "get_constant_linear_velocity",
            "type": "Vector3"
          },
          {
            "value": "The body's friction, from 0 (frictionless) to 1 (full friction).\n\t\t\tDeprecated, use [member PhysicsMaterial.friction] instead via [member physics_material_override].",
            "setter": "set_friction",
            "name": "friction",
            "getter": "get_friction",
            "type": "float"
          },
          {
            "value": "The physics material override for the body.\n\t\t\tIf a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one.",
            "setter": "set_physics_material_override",
            "name": "physics_material_override",
            "getter": "get_physics_material_override",
            "type": "PhysicsMaterial"
          }
        ]
      },
      "inherits": "PhysicsBody",
      "methods": {},
      "name": "StaticBody",
      "version": "3.3",
      "constants": {},
      "brief_description": "Static body for 3D physics.",
      "description": "Static body for 3D physics. A static body is a simple body that is not intended to move. In contrast to [RigidBody], they don't consume any CPU resources as long as they don't move.\n\t\tAdditionally, a constant linear or angular velocity can be set for the static body, so even if it doesn't move, it affects other bodies as if it was moving (this is useful for simulating conveyor belts or conveyor wheels)."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "PoolByteArray(  )",
          "setter": "set_data_array",
          "name": "data_array",
          "getter": "get_data_array",
          "type": "PoolByteArray"
        }
      },
      "inherits": "StreamPeer",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": {}
          },
          {
            "return": {
              "type": "StreamPeerBuffer"
            },
            "qualifiers": "const",
            "name": "duplicate",
            "description": {}
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_position",
            "description": {}
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_size",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "size",
              "type": "int",
              "index": "0"
            },
            "name": "resize",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "position",
              "type": "int",
              "index": "0"
            },
            "name": "seek",
            "description": {}
          }
        ]
      },
      "name": "StreamPeerBuffer",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/networking/ssl_certificates.html"
      },
      "members": {
        "member": {
          "default": "true",
          "setter": "set_blocking_handshake_enabled",
          "name": "blocking_handshake",
          "getter": "is_blocking_handshake_enabled",
          "type": "bool"
        }
      },
      "inherits": "StreamPeer",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "stream",
                "type": "StreamPeer",
                "index": "0"
              },
              {
                "name": "private_key",
                "type": "CryptoKey",
                "index": "1"
              },
              {
                "name": "certificate",
                "type": "X509Certificate",
                "index": "2"
              },
              {
                "default": "null",
                "name": "chain",
                "type": "X509Certificate",
                "index": "3"
              }
            ],
            "name": "accept_stream",
            "description": "Accepts a peer connection as a server using the given [code]private_key[/code] and providing the given [code]certificate[/code] to the client. You can pass the optional [code]chain[/code] parameter to provide additional CA chain information along with the certificate."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "stream",
                "type": "StreamPeer",
                "index": "0"
              },
              {
                "default": "false",
                "name": "validate_certs",
                "type": "bool",
                "index": "1"
              },
              {
                "default": "\"\"",
                "name": "for_hostname",
                "type": "String",
                "index": "2"
              },
              {
                "default": "null",
                "name": "valid_certificate",
                "type": "X509Certificate",
                "index": "3"
              }
            ],
            "name": "connect_to_stream",
            "description": "Connects to a peer using an underlying [StreamPeer] [code]stream[/code]. If [code]validate_certs[/code] is [code]true[/code], [StreamPeerSSL] will validate that the certificate presented by the peer matches the [code]for_hostname[/code].\n\t\t\t\t[b]Note:[/b] Specifying a custom [code]valid_certificate[/code] is not supported in HTML5 exports due to browsers restrictions."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "disconnect_from_stream",
            "description": "Disconnects from host."
          },
          {
            "return": {
              "type": "int",
              "enum": "StreamPeerSSL.Status"
            },
            "qualifiers": "const",
            "name": "get_status",
            "description": "Returns the status of the connection. See [enum Status] for values."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "poll",
            "description": "Poll the connection to check for incoming bytes. Call this right before [method StreamPeer.get_available_bytes] for it to work properly."
          }
        ]
      },
      "name": "StreamPeerSSL",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "STATUS_DISCONNECTED",
            "enum": "Status"
          },
          {
            "value": "1",
            "name": "STATUS_HANDSHAKING",
            "enum": "Status"
          },
          {
            "value": "2",
            "name": "STATUS_CONNECTED",
            "enum": "Status"
          },
          {
            "value": "3",
            "name": "STATUS_ERROR",
            "enum": "Status"
          },
          {
            "value": "4",
            "name": "STATUS_ERROR_HOSTNAME_MISMATCH",
            "enum": "Status"
          }
        ]
      },
      "brief_description": "SSL stream peer.",
      "description": "SSL stream peer. This object can be used to connect to an SSL server or accept a single SSL client connection."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "StreamPeer",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "host",
                "type": "String",
                "index": "0"
              },
              {
                "name": "port",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "connect_to_host",
            "description": "Connects to the specified [code]host:port[/code] pair. A hostname will be resolved if valid. Returns [constant OK] on success or [constant FAILED] on failure."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "disconnect_from_host",
            "description": "Disconnects from host."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_connected_host",
            "description": "Returns the IP of this peer."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_connected_port",
            "description": "Returns the port of this peer."
          },
          {
            "return": {
              "type": "int",
              "enum": "StreamPeerTCP.Status"
            },
            "name": "get_status",
            "description": "Returns the status of the connection, see [enum Status]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_connected_to_host",
            "description": "Returns [code]true[/code] if this peer is currently connected or is connecting to a host, [code]false[/code] otherwise."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enabled",
              "type": "bool",
              "index": "0"
            },
            "name": "set_no_delay",
            "description": "If [code]enabled[/code] is [code]true[/code], packets will be sent immediately. If [code]enabled[/code] is [code]false[/code] (the default), packet transfers will be delayed and combined using [url=https://en.wikipedia.org/wiki/Nagle%27s_algorithm]Nagle's algorithm[/url].\n\t\t\t\t[b]Note:[/b] It's recommended to leave this disabled for applications that send large packets or need to transfer a lot of data, as enabling this can decrease the total available bandwidth."
          }
        ]
      },
      "name": "StreamPeerTCP",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "STATUS_NONE",
            "enum": "Status"
          },
          {
            "value": "1",
            "name": "STATUS_CONNECTING",
            "enum": "Status"
          },
          {
            "value": "2",
            "name": "STATUS_CONNECTED",
            "enum": "Status"
          },
          {
            "value": "3",
            "name": "STATUS_ERROR",
            "enum": "Status"
          }
        ]
      },
      "brief_description": "TCP stream peer.",
      "description": "TCP stream peer. This object can be used to connect to TCP servers, or also is returned by a TCP server."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "false",
          "value": "If [code]true[/code], this [StreamPeer] will using big-endian format for encoding and decoding.",
          "setter": "set_big_endian",
          "name": "big_endian",
          "getter": "is_big_endian_enabled",
          "type": "bool"
        }
      },
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int"
            },
            "name": "get_16",
            "description": "Gets a signed 16-bit value from the stream."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_32",
            "description": "Gets a signed 32-bit value from the stream."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_64",
            "description": "Gets a signed 64-bit value from the stream."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_8",
            "description": "Gets a signed byte from the stream."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_available_bytes",
            "description": "Returns the amount of bytes this [StreamPeer] has available."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "bytes",
              "type": "int",
              "index": "0"
            },
            "name": "get_data",
            "description": "Returns a chunk data with the received bytes. The amount of bytes to be received can be requested in the [code]bytes[/code] argument. If not enough bytes are available, the function will block until the desired amount is received. This function returns two values, an [enum @GlobalScope.Error] code and a data array."
          },
          {
            "return": {
              "type": "float"
            },
            "name": "get_double",
            "description": "Gets a double-precision float from the stream."
          },
          {
            "return": {
              "type": "float"
            },
            "name": "get_float",
            "description": "Gets a single-precision float from the stream."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "bytes",
              "type": "int",
              "index": "0"
            },
            "name": "get_partial_data",
            "description": "Returns a chunk data with the received bytes. The amount of bytes to be received can be requested in the \"bytes\" argument. If not enough bytes are available, the function will return how many were actually received. This function returns two values, an [enum @GlobalScope.Error] code, and a data array."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "default": "-1",
              "name": "bytes",
              "type": "int",
              "index": "0"
            },
            "name": "get_string",
            "description": "Gets a string with byte-length [code]bytes[/code] from the stream. If [code]bytes[/code] is negative (default) the length will be read from the stream using the reverse process of [method put_string]."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_u16",
            "description": "Gets an unsigned 16-bit value from the stream."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_u32",
            "description": "Gets an unsigned 32-bit value from the stream."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_u64",
            "description": "Gets an unsigned 64-bit value from the stream."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "get_u8",
            "description": "Gets an unsigned byte from the stream."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "default": "-1",
              "name": "bytes",
              "type": "int",
              "index": "0"
            },
            "name": "get_utf8_string",
            "description": "Gets an UTF-8 string with byte-length [code]bytes[/code] from the stream (this decodes the string sent as UTF-8). If [code]bytes[/code] is negative (default) the length will be read from the stream using the reverse process of [method put_utf8_string]."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "default": "false",
              "name": "allow_objects",
              "type": "bool",
              "index": "0"
            },
            "name": "get_var",
            "description": "Gets a Variant from the stream. If [code]allow_objects[/code] is [code]true[/code], decoding objects is allowed.\n\t\t\t\t[b]Warning:[/b] Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "value",
              "type": "int",
              "index": "0"
            },
            "name": "put_16",
            "description": "Puts a signed 16-bit value into the stream."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "value",
              "type": "int",
              "index": "0"
            },
            "name": "put_32",
            "description": "Puts a signed 32-bit value into the stream."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "value",
              "type": "int",
              "index": "0"
            },
            "name": "put_64",
            "description": "Puts a signed 64-bit value into the stream."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "value",
              "type": "int",
              "index": "0"
            },
            "name": "put_8",
            "description": "Puts a signed byte into the stream."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "data",
              "type": "PoolByteArray",
              "index": "0"
            },
            "name": "put_data",
            "description": "Sends a chunk of data through the connection, blocking if necessary until the data is done sending. This function returns an [enum @GlobalScope.Error] code."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "value",
              "type": "float",
              "index": "0"
            },
            "name": "put_double",
            "description": "Puts a double-precision float into the stream."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "value",
              "type": "float",
              "index": "0"
            },
            "name": "put_float",
            "description": "Puts a single-precision float into the stream."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "data",
              "type": "PoolByteArray",
              "index": "0"
            },
            "name": "put_partial_data",
            "description": "Sends a chunk of data through the connection. If all the data could not be sent at once, only part of it will. This function returns two values, an [enum @GlobalScope.Error] code and an integer, describing how much data was actually sent."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "value",
              "type": "String",
              "index": "0"
            },
            "name": "put_string",
            "description": "Puts a zero-terminated ASCII string into the stream prepended by a 32-bit unsigned integer representing its size.\n\t\t\t\tNote: To put an ASCII string without prepending its size, you can use [method put_data]:\n\t\t\t\t[codeblock]\n\t\t\t\tput_data(\"Hello world\".to_ascii())\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "value",
              "type": "int",
              "index": "0"
            },
            "name": "put_u16",
            "description": "Puts an unsigned 16-bit value into the stream."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "value",
              "type": "int",
              "index": "0"
            },
            "name": "put_u32",
            "description": "Puts an unsigned 32-bit value into the stream."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "value",
              "type": "int",
              "index": "0"
            },
            "name": "put_u64",
            "description": "Puts an unsigned 64-bit value into the stream."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "value",
              "type": "int",
              "index": "0"
            },
            "name": "put_u8",
            "description": "Puts an unsigned byte into the stream."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "value",
              "type": "String",
              "index": "0"
            },
            "name": "put_utf8_string",
            "description": "Puts a zero-terminated UTF-8 string into the stream prepended by a 32 bits unsigned integer representing its size.\n\t\t\t\tNote: To put an UTF-8 string without prepending its size, you can use [method put_data]:\n\t\t\t\t[codeblock]\n\t\t\t\tput_data(\"Hello world\".to_utf8())\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "value",
                "type": "Variant",
                "index": "0"
              },
              {
                "default": "false",
                "name": "full_objects",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "put_var",
            "description": "Puts a Variant into the stream. If [code]full_objects[/code] is [code]true[/code] encoding objects is allowed (and can potentially include code)."
          }
        ]
      },
      "name": "StreamPeer",
      "version": "3.3",
      "constants": {},
      "brief_description": "Abstraction and base class for stream-based protocols.",
      "description": "StreamPeer is an abstraction and base class for stream-based protocols (such as TCP). It provides an API for sending and receiving data through streams as raw data or strings."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0",
            "setter": "set_flags",
            "override": "true",
            "name": "flags",
            "getter": "get_flags",
            "type": "int"
          },
          {
            "default": "\"\"",
            "value": "The StreamTexture's file path to a [code].stex[/code] file.",
            "setter": "load",
            "name": "load_path",
            "getter": "get_load_path",
            "type": "String"
          }
        ]
      },
      "inherits": "Texture",
      "methods": {
        "method": {
          "return": {
            "type": "int",
            "enum": "Error"
          },
          "argument": {
            "name": "path",
            "type": "String",
            "index": "0"
          },
          "name": "load",
          "description": "Loads the texture from the given path."
        }
      },
      "name": "StreamTexture",
      "version": "3.3",
      "constants": {},
      "brief_description": "A [code].stex[/code] texture.",
      "description": "A texture that is loaded from a [code].stex[/code] file."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/getting_started/scripting/gdscript/gdscript_format_string.html"
      },
      "methods": {
        "method": [
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "bool",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [bool]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "int",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [int]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "float",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [float]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "Vector2",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [Vector2]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "Rect2",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [Rect2]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "Vector3",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [Vector3]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "Transform2D",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [Transform2D]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "Plane",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [Plane]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "Quat",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [Quat]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "AABB",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [AABB]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "Basis",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [Basis]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "Transform",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [Transform]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "Color",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [Color]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "NodePath",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [NodePath]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "RID",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [RID]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "Dictionary",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [Dictionary]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "Array",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [Array]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "PoolByteArray",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [PoolByteArray]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "PoolIntArray",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [PoolIntArray]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "PoolRealArray",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [PoolRealArray]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "PoolStringArray",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [PoolStringArray]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "PoolVector2Array",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [PoolVector2Array]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "PoolVector3Array",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [PoolVector3Array]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "from",
              "type": "PoolColorArray",
              "index": "0"
            },
            "name": "String",
            "description": "Constructs a new String from the given [PoolColorArray]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "text",
              "type": "String",
              "index": "0"
            },
            "name": "begins_with",
            "description": "Returns [code]true[/code] if the string begins with the given string."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "name": "bigrams",
            "description": "Returns the bigrams (pairs of consecutive letters) of this string."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "c_escape",
            "description": "Returns a copy of the string with special characters escaped using the C language standard."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "c_unescape",
            "description": "Returns a copy of the string with escaped characters replaced by their meanings. Supported escape sequences are [code]\\'[/code], [code]\\\"[/code], [code]\\?[/code], [code]\\\\[/code], [code]\\a[/code], [code]\\b[/code], [code]\\f[/code], [code]\\n[/code], [code]\\r[/code], [code]\\t[/code], [code]\\v[/code].\n\t\t\t\t[b]Note:[/b] Unlike the GDScript parser, this method doesn't support the [code]\\uXXXX[/code] escape sequence."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "capitalize",
            "description": "Changes the case of some letters. Replaces underscores with spaces, adds spaces before in-word uppercase characters, converts all letters to lowercase, then capitalizes the first letter and every letter following a space character. For [code]capitalize camelCase mixed_with_underscores[/code], it will return [code]Capitalize Camel Case Mixed With Underscores[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "to",
              "type": "String",
              "index": "0"
            },
            "name": "casecmp_to",
            "description": "Performs a case-sensitive comparison to another string. Returns [code]-1[/code] if less than, [code]1[/code] if greater than, or [code]0[/code] if equal. \"less than\" or \"greater than\" are determined by the [url=https://en.wikipedia.org/wiki/List_of_Unicode_characters]Unicode code points[/url] of each string, which roughly matches the alphabetical order.\n\t\t\t\t[b]Behavior with different string lengths:[/b] Returns [code]1[/code] if the \"base\" string is longer than the [code]to[/code] string or [code]-1[/code] if the \"base\" string is shorter than the [code]to[/code] string. Keep in mind this length is determined by the number of Unicode codepoints, [i]not[/i] the actual visible characters.\n\t\t\t\t[b]Behavior with empty strings:[/b] Returns [code]-1[/code] if the \"base\" string is empty, [code]1[/code] if the [code]to[/code] string is empty or [code]0[/code] if both strings are empty.\n\t\t\t\tTo get a boolean result from a string comparison, use the [code]==[/code] operator instead. See also [method nocasecmp_to]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "what",
                "type": "String",
                "index": "0"
              },
              {
                "default": "0",
                "name": "from",
                "type": "int",
                "index": "1"
              },
              {
                "default": "0",
                "name": "to",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "count",
            "description": "Returns the number of occurrences of substring [code]what[/code] between [code]from[/code] and [code]to[/code] positions. If [code]from[/code] and [code]to[/code] equals 0 the whole string will be used. If only [code]to[/code] equals 0 the remained substring will be used."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "what",
                "type": "String",
                "index": "0"
              },
              {
                "default": "0",
                "name": "from",
                "type": "int",
                "index": "1"
              },
              {
                "default": "0",
                "name": "to",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "countn",
            "description": "Returns the number of occurrences of substring [code]what[/code] (ignoring case) between [code]from[/code] and [code]to[/code] positions. If [code]from[/code] and [code]to[/code] equals 0 the whole string will be used. If only [code]to[/code] equals 0 the remained substring will be used."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "dedent",
            "description": "Returns a copy of the string with indentation (leading tabs and spaces) removed."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "empty",
            "description": "Returns [code]true[/code] if the length of the string equals [code]0[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "text",
              "type": "String",
              "index": "0"
            },
            "name": "ends_with",
            "description": "Returns [code]true[/code] if the string ends with the given string."
          },
          {
            "argument": [
              {
                "name": "position",
                "type": "int",
                "index": "0"
              },
              {
                "name": "chars",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "erase",
            "description": "Erases [code]chars[/code] characters from the string starting from [code]position[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "what",
                "type": "String",
                "index": "0"
              },
              {
                "default": "0",
                "name": "from",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "find",
            "description": "Finds the first occurrence of a substring. Returns the starting position of the substring or [code]-1[/code] if not found. Optionally, the initial search index can be passed.\n\t\t\t\t[b]Note:[/b] If you just want to know whether a string contains a substring, use the [code]in[/code] operator as follows:\n\t\t\t\t[codeblock]\n\t\t\t\t# Will evaluate to `false`.\n\t\t\t\tif \"i\" in \"team\":\n\t\t\t\t    pass\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "what",
              "type": "String",
              "index": "0"
            },
            "name": "find_last",
            "description": "Finds the last occurrence of a substring. Returns the starting position of the substring or [code]-1[/code] if not found."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "what",
                "type": "String",
                "index": "0"
              },
              {
                "default": "0",
                "name": "from",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "findn",
            "description": "Finds the first occurrence of a substring, ignoring case. Returns the starting position of the substring or [code]-1[/code] if not found. Optionally, the initial search index can be passed."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": [
              {
                "name": "values",
                "type": "Variant",
                "index": "0"
              },
              {
                "default": "\"{_}\"",
                "name": "placeholder",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "format",
            "description": "Formats the string by replacing all occurrences of [code]placeholder[/code] with [code]values[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "get_base_dir",
            "description": "If the string is a valid file path, returns the base directory name."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "get_basename",
            "description": "If the string is a valid file path, returns the full file path without the extension."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "get_extension",
            "description": "If the string is a valid file path, returns the extension."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "get_file",
            "description": "If the string is a valid file path, returns the filename."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "hash",
            "description": "Hashes the string and returns a 32-bit integer."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "hex_to_int",
            "description": "Converts a string containing a hexadecimal number into an integer. Hexadecimal strings are expected to be prefixed with \"[code]0x[/code]\" otherwise [code]0[/code] is returned.\n\t\t\t\t[codeblock]\n\t\t\t\tprint(\"0xff\".hex_to_int()) # Print \"255\"\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "String"
            },
            "name": "http_escape",
            "description": "Escapes (encodes) a string to URL friendly format. Also referred to as 'URL encode'.\n\t\t\t\t[codeblock]\n\t\t\t\tprint(\"https://example.org/?escaped=\" + \"Godot Engine:'docs'\".http_escape())\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "String"
            },
            "name": "http_unescape",
            "description": "Unescapes (decodes) a string in URL encoded format. Also referred to as 'URL decode'.\n\t\t\t\t[codeblock]\n\t\t\t\tprint(\"https://example.org/?escaped=\" + \"Godot%20Engine%3A%27docs%27\".http_unescape())\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "size",
              "type": "int",
              "index": "0"
            },
            "name": "humanize_size",
            "description": "Converts [code]size[/code] represented as number of bytes to human-readable format using internationalized set of data size units, namely: B, KiB, MiB, GiB, TiB, PiB, EiB. Note that the next smallest unit is picked automatically to hold at most 1024 units.\n\t\t\t\t[codeblock]\n\t\t\t\tvar bytes = 133790307\n\t\t\t\tvar size = String.humanize_size(bytes)\n\t\t\t\tprint(size) # prints \"127.5 MiB\"\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "String"
            },
            "argument": [
              {
                "name": "position",
                "type": "int",
                "index": "0"
              },
              {
                "name": "what",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "insert",
            "description": "Returns a copy of the string with the substring [code]what[/code] inserted at the given position."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_abs_path",
            "description": "If the string is a path to a file or directory, returns [code]true[/code] if the path is absolute."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_rel_path",
            "description": "If the string is a path to a file or directory, returns [code]true[/code] if the path is relative."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "text",
              "type": "String",
              "index": "0"
            },
            "name": "is_subsequence_of",
            "description": "Returns [code]true[/code] if this string is a subsequence of the given string."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "text",
              "type": "String",
              "index": "0"
            },
            "name": "is_subsequence_ofi",
            "description": "Returns [code]true[/code] if this string is a subsequence of the given string, without considering case."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_valid_filename",
            "description": "Returns [code]true[/code] if this string is free from characters that aren't allowed in file names, those being:\n\t\t\t\t[code]: / \\ ? * \" | % < >[/code]"
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_valid_float",
            "description": "Returns [code]true[/code] if this string contains a valid float."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "default": "false",
              "name": "with_prefix",
              "type": "bool",
              "index": "0"
            },
            "name": "is_valid_hex_number",
            "description": "Returns [code]true[/code] if this string contains a valid hexadecimal number. If [code]with_prefix[/code] is [code]true[/code], then a validity of the hexadecimal number is determined by [code]0x[/code] prefix, for instance: [code]0xDEADC0DE[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_valid_html_color",
            "description": "Returns [code]true[/code] if this string contains a valid color in hexadecimal HTML notation. Other HTML notations such as named colors or [code]hsl()[/code] colors aren't considered valid by this method and will return [code]false[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_valid_identifier",
            "description": "Returns [code]true[/code] if this string is a valid identifier. A valid identifier may contain only letters, digits and underscores ([code]_[/code]) and the first character may not be a digit."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_valid_integer",
            "description": "Returns [code]true[/code] if this string contains a valid integer."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_valid_ip_address",
            "description": "Returns [code]true[/code] if this string contains only a well-formatted IPv4 or IPv6 address. This method considers [url=https://en.wikipedia.org/wiki/Reserved_IP_addresses]reserved IP addresses[/url] such as [code]0.0.0.0[/code] as valid."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "json_escape",
            "description": "Returns a copy of the string with special characters escaped using the JSON standard."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "position",
              "type": "int",
              "index": "0"
            },
            "name": "left",
            "description": "Returns a number of characters from the left of the string."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "length",
            "description": "Returns the string's amount of characters."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "chars",
              "type": "String",
              "index": "0"
            },
            "name": "lstrip",
            "description": "Returns a copy of the string with characters removed from the left. The [code]chars[/code] argument is a string specifying the set of characters to be removed.\n\t\t\t\t[b]Note:[/b] The [code]chars[/code] is not a prefix. See [method trim_prefix] method that will remove a single prefix string rather than a set of characters."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "expr",
              "type": "String",
              "index": "0"
            },
            "name": "match",
            "description": "Does a simple case-sensitive expression match, where [code]\"*\"[/code] matches zero or more arbitrary characters and [code]\"?\"[/code] matches any single character except a period ([code]\".\"[/code])."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "expr",
              "type": "String",
              "index": "0"
            },
            "name": "matchn",
            "description": "Does a simple case-insensitive expression match, where [code]\"*\"[/code] matches zero or more arbitrary characters and [code]\"?\"[/code] matches any single character except a period ([code]\".\"[/code])."
          },
          {
            "return": {
              "type": "PoolByteArray"
            },
            "name": "md5_buffer",
            "description": "Returns the MD5 hash of the string as an array of bytes."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "md5_text",
            "description": "Returns the MD5 hash of the string as a string."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "to",
              "type": "String",
              "index": "0"
            },
            "name": "naturalnocasecmp_to",
            "description": "Performs a case-insensitive [i]natural order[/i] comparison to another string. Returns [code]-1[/code] if less than, [code]1[/code] if greater than, or [code]0[/code] if equal. \"less than\" or \"greater than\" are determined by the [url=https://en.wikipedia.org/wiki/List_of_Unicode_characters]Unicode code points[/url] of each string, which roughly matches the alphabetical order. Internally, lowercase characters will be converted to uppercase during the comparison.\n\t\t\t\tWhen used for sorting, natural order comparison will order suites of numbers as expected by most people. If you sort the numbers from 1 to 10 using natural order, you will get [code][1, 2, 3, ...][/code] instead of [code][1, 10, 2, 3, ...][/code].\n\t\t\t\t[b]Behavior with different string lengths:[/b] Returns [code]1[/code] if the \"base\" string is longer than the [code]to[/code] string or [code]-1[/code] if the \"base\" string is shorter than the [code]to[/code] string. Keep in mind this length is determined by the number of Unicode codepoints, [i]not[/i] the actual visible characters.\n\t\t\t\t[b]Behavior with empty strings:[/b] Returns [code]-1[/code] if the \"base\" string is empty, [code]1[/code] if the [code]to[/code] string is empty or [code]0[/code] if both strings are empty.\n\t\t\t\tTo get a boolean result from a string comparison, use the [code]==[/code] operator instead. See also [method nocasecmp_to] and [method casecmp_to]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "to",
              "type": "String",
              "index": "0"
            },
            "name": "nocasecmp_to",
            "description": "Performs a case-insensitive comparison to another string. Returns [code]-1[/code] if less than, [code]1[/code] if greater than, or [code]0[/code] if equal. \"less than\" or \"greater than\" are determined by the [url=https://en.wikipedia.org/wiki/List_of_Unicode_characters]Unicode code points[/url] of each string, which roughly matches the alphabetical order. Internally, lowercase characters will be converted to uppercase during the comparison.\n\t\t\t\t[b]Behavior with different string lengths:[/b] Returns [code]1[/code] if the \"base\" string is longer than the [code]to[/code] string or [code]-1[/code] if the \"base\" string is shorter than the [code]to[/code] string. Keep in mind this length is determined by the number of Unicode codepoints, [i]not[/i] the actual visible characters.\n\t\t\t\t[b]Behavior with empty strings:[/b] Returns [code]-1[/code] if the \"base\" string is empty, [code]1[/code] if the [code]to[/code] string is empty or [code]0[/code] if both strings are empty.\n\t\t\t\tTo get a boolean result from a string comparison, use the [code]==[/code] operator instead. See also [method casecmp_to]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "at",
              "type": "int",
              "index": "0"
            },
            "name": "ord_at",
            "description": "Returns the character code at position [code]at[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "digits",
              "type": "int",
              "index": "0"
            },
            "name": "pad_decimals",
            "description": "Formats a number to have an exact number of [code]digits[/code] after the decimal point."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "digits",
              "type": "int",
              "index": "0"
            },
            "name": "pad_zeros",
            "description": "Formats a number to have an exact number of [code]digits[/code] before the decimal point."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "percent_decode",
            "description": "Decode a percent-encoded string. See [method percent_encode]."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "percent_encode",
            "description": "Percent-encodes a string. Encodes parameters in a URL when sending a HTTP GET request (and bodies of form-urlencoded POST requests)."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "file",
              "type": "String",
              "index": "0"
            },
            "name": "plus_file",
            "description": "If the string is a path, this concatenates [code]file[/code] at the end of the string as a subpath. E.g. [code]\"this/is\".plus_file(\"path\") == \"this/is/path\"[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "count",
              "type": "int",
              "index": "0"
            },
            "name": "repeat",
            "description": "Returns original string repeated a number of times. The number of repetitions is given by the argument."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": [
              {
                "name": "what",
                "type": "String",
                "index": "0"
              },
              {
                "name": "forwhat",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "replace",
            "description": "Replaces occurrences of a case-sensitive substring with the given one inside the string."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": [
              {
                "name": "what",
                "type": "String",
                "index": "0"
              },
              {
                "name": "forwhat",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "replacen",
            "description": "Replaces occurrences of a case-insensitive substring with the given one inside the string."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "what",
                "type": "String",
                "index": "0"
              },
              {
                "default": "-1",
                "name": "from",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "rfind",
            "description": "Performs a case-sensitive search for a substring, but starts from the end of the string instead of the beginning."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "what",
                "type": "String",
                "index": "0"
              },
              {
                "default": "-1",
                "name": "from",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "rfindn",
            "description": "Performs a case-insensitive search for a substring, but starts from the end of the string instead of the beginning."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "position",
              "type": "int",
              "index": "0"
            },
            "name": "right",
            "description": "Returns the right side of the string from a given position."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "argument": [
              {
                "name": "delimiter",
                "type": "String",
                "index": "0"
              },
              {
                "default": "true",
                "name": "allow_empty",
                "type": "bool",
                "index": "1"
              },
              {
                "default": "0",
                "name": "maxsplit",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "rsplit",
            "description": "Splits the string by a [code]delimiter[/code] string and returns an array of the substrings, starting from right.\n\t\t\t\tThe splits in the returned array are sorted in the same order as the original string, from left to right.\n\t\t\t\tIf [code]maxsplit[/code] is specified, it defines the number of splits to do from the right up to [code]maxsplit[/code]. The default value of 0 means that all items are split, thus giving the same result as [method split].\n\t\t\t\tExample:\n\t\t\t\t[codeblock]\n\t\t\t\tvar some_string = \"One,Two,Three,Four\"\n\t\t\t\tvar some_array = some_string.rsplit(\",\", true, 1)\n\t\t\t\tprint(some_array.size()) # Prints 2\n\t\t\t\tprint(some_array[0]) # Prints \"Four\"\n\t\t\t\tprint(some_array[1]) # Prints \"Three,Two,One\"\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "chars",
              "type": "String",
              "index": "0"
            },
            "name": "rstrip",
            "description": "Returns a copy of the string with characters removed from the right. The [code]chars[/code] argument is a string specifying the set of characters to be removed.\n\t\t\t\t[b]Note:[/b] The [code]chars[/code] is not a suffix. See [method trim_suffix] method that will remove a single suffix string rather than a set of characters."
          },
          {
            "return": {
              "type": "PoolByteArray"
            },
            "name": "sha1_buffer",
            "description": "Returns the SHA-1 hash of the string as an array of bytes."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "sha1_text",
            "description": "Returns the SHA-1 hash of the string as a string."
          },
          {
            "return": {
              "type": "PoolByteArray"
            },
            "name": "sha256_buffer",
            "description": "Returns the SHA-256 hash of the string as an array of bytes."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "sha256_text",
            "description": "Returns the SHA-256 hash of the string as a string."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "text",
              "type": "String",
              "index": "0"
            },
            "name": "similarity",
            "description": "Returns the similarity index of the text compared to this string. 1 means totally similar and 0 means totally dissimilar."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "argument": [
              {
                "name": "delimiter",
                "type": "String",
                "index": "0"
              },
              {
                "default": "true",
                "name": "allow_empty",
                "type": "bool",
                "index": "1"
              },
              {
                "default": "0",
                "name": "maxsplit",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "split",
            "description": "Splits the string by a [code]delimiter[/code] string and returns an array of the substrings. The [code]delimiter[/code] can be of any length.\n\t\t\t\tIf [code]maxsplit[/code] is specified, it defines the number of splits to do from the left up to [code]maxsplit[/code]. The default value of [code]0[/code] means that all items are split.\n\t\t\t\tExample:\n\t\t\t\t[codeblock]\n\t\t\t\tvar some_string = \"One,Two,Three,Four\"\n\t\t\t\tvar some_array = some_string.split(\",\", true, 1)\n\t\t\t\tprint(some_array.size()) # Prints 2\n\t\t\t\tprint(some_array[0]) # Prints \"One\"\n\t\t\t\tprint(some_array[1]) # Prints \"Two,Three,Four\"\n\t\t\t\t[/codeblock]\n\t\t\t\tIf you need to split strings with more complex rules, use the [RegEx] class instead."
          },
          {
            "return": {
              "type": "PoolRealArray"
            },
            "argument": [
              {
                "name": "delimiter",
                "type": "String",
                "index": "0"
              },
              {
                "default": "true",
                "name": "allow_empty",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "split_floats",
            "description": "Splits the string in floats by using a delimiter string and returns an array of the substrings.\n\t\t\t\tFor example, [code]\"1,2.5,3\"[/code] will return [code][1,2.5,3][/code] if split by [code]\",\"[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": [
              {
                "default": "true",
                "name": "left",
                "type": "bool",
                "index": "0"
              },
              {
                "default": "true",
                "name": "right",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "strip_edges",
            "description": "Returns a copy of the string stripped of any non-printable character (including tabulations, spaces and line breaks) at the beginning and the end. The optional arguments are used to toggle stripping on the left and right edges respectively."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "strip_escapes",
            "description": "Returns a copy of the string stripped of any escape character. These include all non-printable control characters of the first page of the ASCII table (< 32), such as tabulation ([code]\\t[/code] in C) and newline ([code]\\n[/code] and [code]\\r[/code]) characters, but not spaces."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": [
              {
                "name": "from",
                "type": "int",
                "index": "0"
              },
              {
                "default": "-1",
                "name": "len",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "substr",
            "description": "Returns part of the string from the position [code]from[/code] with length [code]len[/code]. Argument [code]len[/code] is optional and using [code]-1[/code] will return remaining characters from given position."
          },
          {
            "return": {
              "type": "PoolByteArray"
            },
            "name": "to_ascii",
            "description": "Converts the String (which is a character array) to [PoolByteArray] (which is an array of bytes). The conversion is faster compared to [method to_utf8], as this method assumes that all the characters in the String are ASCII characters."
          },
          {
            "return": {
              "type": "float"
            },
            "name": "to_float",
            "description": "Converts a string containing a decimal number into a [code]float[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "to_int",
            "description": "Converts a string containing an integer number into an [code]int[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "to_lower",
            "description": "Returns the string converted to lowercase."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "to_upper",
            "description": "Returns the string converted to uppercase."
          },
          {
            "return": {
              "type": "PoolByteArray"
            },
            "name": "to_utf8",
            "description": "Converts the String (which is an array of characters) to [PoolByteArray] (which is an array of bytes). The conversion is a bit slower than [method to_ascii], but supports all UTF-8 characters. Therefore, you should prefer this function over [method to_ascii]."
          },
          {
            "return": {
              "type": "PoolByteArray"
            },
            "name": "to_wchar",
            "description": "Converts the String (which is an array of characters) to [PoolByteArray] (which is an array of bytes)."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "prefix",
              "type": "String",
              "index": "0"
            },
            "name": "trim_prefix",
            "description": "Removes a given string from the start if it starts with it or leaves the string unchanged."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "suffix",
              "type": "String",
              "index": "0"
            },
            "name": "trim_suffix",
            "description": "Removes a given string from the end if it ends with it or leaves the string unchanged."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "validate_node_name",
            "description": "Removes any characters from the string that are prohibited in [Node] names ([code].[/code] [code]:[/code] [code]@[/code] [code]/[/code] [code]\"[/code])."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "xml_escape",
            "description": "Returns a copy of the string with special characters escaped using the XML standard."
          },
          {
            "return": {
              "type": "String"
            },
            "name": "xml_unescape",
            "description": "Returns a copy of the string with escaped characters replaced by their meanings according to the XML standard."
          }
        ]
      },
      "name": "String",
      "version": "3.3",
      "constants": {},
      "brief_description": "Built-in string class.",
      "description": "This is the built-in string class (and the one used by GDScript). It supports Unicode and provides all necessary means for string handling. Strings are reference-counted and use a copy-on-write approach, so passing them around is cheap in resources."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "StyleBox",
      "methods": {},
      "name": "StyleBoxEmpty",
      "version": "3.3",
      "constants": {},
      "brief_description": "Empty stylebox (does not display anything).",
      "description": "Empty stylebox (really does not display anything)."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "true",
            "value": "Antialiasing draws a small ring around the edges, which fades to transparency. As a result, edges look much smoother. This is only noticeable when using rounded corners.",
            "setter": "set_anti_aliased",
            "name": "anti_aliasing",
            "getter": "is_anti_aliased",
            "type": "bool"
          },
          {
            "default": "1",
            "value": "This changes the size of the faded ring. Higher values can be used to achieve a \"blurry\" effect.",
            "setter": "set_aa_size",
            "name": "anti_aliasing_size",
            "getter": "get_aa_size",
            "type": "int"
          },
          {
            "default": "Color( 0.6, 0.6, 0.6, 1 )",
            "value": "The background color of the stylebox.",
            "setter": "set_bg_color",
            "name": "bg_color",
            "getter": "get_bg_color",
            "type": "Color"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the border will fade into the background color.",
            "setter": "set_border_blend",
            "name": "border_blend",
            "getter": "get_border_blend",
            "type": "bool"
          },
          {
            "default": "Color( 0.8, 0.8, 0.8, 1 )",
            "value": "Sets the color of the border.",
            "setter": "set_border_color",
            "name": "border_color",
            "getter": "get_border_color",
            "type": "Color"
          },
          {
            "default": "0",
            "value": "Border width for the bottom border.",
            "setter": "set_border_width",
            "name": "border_width_bottom",
            "getter": "get_border_width",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Border width for the left border.",
            "setter": "set_border_width",
            "name": "border_width_left",
            "getter": "get_border_width",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Border width for the right border.",
            "setter": "set_border_width",
            "name": "border_width_right",
            "getter": "get_border_width",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Border width for the top border.",
            "setter": "set_border_width",
            "name": "border_width_top",
            "getter": "get_border_width",
            "type": "int"
          },
          {
            "default": "8",
            "value": "This sets the number of vertices used for each corner. Higher values result in rounder corners but take more processing power to compute. When choosing a value, you should take the corner radius ([method set_corner_radius_all]) into account.\n\t\t\tFor corner radii less than 10, [code]4[/code] or [code]5[/code] should be enough. For corner radii less than 30, values between [code]8[/code] and [code]12[/code] should be enough.\n\t\t\tA corner detail of [code]1[/code] will result in chamfered corners instead of rounded corners, which is useful for some artistic effects.",
            "setter": "set_corner_detail",
            "name": "corner_detail",
            "getter": "get_corner_detail",
            "type": "int"
          },
          {
            "default": "0",
            "value": "The bottom-left corner's radius. If [code]0[/code], the corner is not rounded.",
            "setter": "set_corner_radius",
            "name": "corner_radius_bottom_left",
            "getter": "get_corner_radius",
            "type": "int"
          },
          {
            "default": "0",
            "value": "The bottom-right corner's radius. If [code]0[/code], the corner is not rounded.",
            "setter": "set_corner_radius",
            "name": "corner_radius_bottom_right",
            "getter": "get_corner_radius",
            "type": "int"
          },
          {
            "default": "0",
            "value": "The top-left corner's radius. If [code]0[/code], the corner is not rounded.",
            "setter": "set_corner_radius",
            "name": "corner_radius_top_left",
            "getter": "get_corner_radius",
            "type": "int"
          },
          {
            "default": "0",
            "value": "The top-right corner's radius. If [code]0[/code], the corner is not rounded.",
            "setter": "set_corner_radius",
            "name": "corner_radius_top_right",
            "getter": "get_corner_radius",
            "type": "int"
          },
          {
            "default": "true",
            "value": "Toggles drawing of the inner part of the stylebox.",
            "setter": "set_draw_center",
            "name": "draw_center",
            "getter": "is_draw_center_enabled",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "Expands the stylebox outside of the control rect on the bottom edge. Useful in combination with [member border_width_bottom] to draw a border outside the control rect.",
            "setter": "set_expand_margin",
            "name": "expand_margin_bottom",
            "getter": "get_expand_margin",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Expands the stylebox outside of the control rect on the left edge. Useful in combination with [member border_width_left] to draw a border outside the control rect.",
            "setter": "set_expand_margin",
            "name": "expand_margin_left",
            "getter": "get_expand_margin",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Expands the stylebox outside of the control rect on the right edge. Useful in combination with [member border_width_right] to draw a border outside the control rect.",
            "setter": "set_expand_margin",
            "name": "expand_margin_right",
            "getter": "get_expand_margin",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Expands the stylebox outside of the control rect on the top edge. Useful in combination with [member border_width_top] to draw a border outside the control rect.",
            "setter": "set_expand_margin",
            "name": "expand_margin_top",
            "getter": "get_expand_margin",
            "type": "float"
          },
          {
            "default": "Color( 0, 0, 0, 0.6 )",
            "value": "The color of the shadow. This has no effect if [member shadow_size] is lower than 1.",
            "setter": "set_shadow_color",
            "name": "shadow_color",
            "getter": "get_shadow_color",
            "type": "Color"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The shadow offset in pixels. Adjusts the position of the shadow relatively to the stylebox.",
            "setter": "set_shadow_offset",
            "name": "shadow_offset",
            "getter": "get_shadow_offset",
            "type": "Vector2"
          },
          {
            "default": "0",
            "value": "The shadow size in pixels.",
            "setter": "set_shadow_size",
            "name": "shadow_size",
            "getter": "get_shadow_size",
            "type": "int"
          }
        ]
      },
      "inherits": "StyleBox",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_border_width",
            "description": "Returns the given [code]margin[/code]'s border width. See [enum Margin] for possible values."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_border_width_min",
            "description": "Returns the smallest border width out of all four borders."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "corner",
              "type": "int",
              "enum": "Corner",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_corner_radius",
            "description": "Returns the given [code]corner[/code]'s radius. See [enum Corner] for possible values."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_expand_margin",
            "description": "Returns the size of the given [code]margin[/code]'s expand margin. See [enum Margin] for possible values."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "margin",
                "type": "int",
                "enum": "Margin",
                "index": "0"
              },
              {
                "name": "width",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set_border_width",
            "description": "Sets the border width to [code]width[/code] pixels for the given [code]margin[/code]. See [enum Margin] for possible values."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "width",
              "type": "int",
              "index": "0"
            },
            "name": "set_border_width_all",
            "description": "Sets the border width to [code]width[/code] pixels for all margins."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "corner",
                "type": "int",
                "enum": "Corner",
                "index": "0"
              },
              {
                "name": "radius",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set_corner_radius",
            "description": "Sets the corner radius to [code]radius[/code] pixels for the given [code]corner[/code]. See [enum Corner] for possible values."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "radius",
              "type": "int",
              "index": "0"
            },
            "name": "set_corner_radius_all",
            "description": "Sets the corner radius to [code]radius[/code] pixels for all corners."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "radius_top_left",
                "type": "int",
                "index": "0"
              },
              {
                "name": "radius_top_right",
                "type": "int",
                "index": "1"
              },
              {
                "name": "radius_bottom_right",
                "type": "int",
                "index": "2"
              },
              {
                "name": "radius_bottom_left",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "set_corner_radius_individual",
            "description": "Sets the corner radius for each corner to [code]radius_top_left[/code], [code]radius_top_right[/code], [code]radius_bottom_right[/code], and [code]radius_bottom_left[/code] pixels."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "margin",
                "type": "int",
                "enum": "Margin",
                "index": "0"
              },
              {
                "name": "size",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_expand_margin",
            "description": "Sets the expand margin to [code]size[/code] pixels for the given [code]margin[/code]. See [enum Margin] for possible values."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "size",
              "type": "float",
              "index": "0"
            },
            "name": "set_expand_margin_all",
            "description": "Sets the expand margin to [code]size[/code] pixels for all margins."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "size_left",
                "type": "float",
                "index": "0"
              },
              {
                "name": "size_top",
                "type": "float",
                "index": "1"
              },
              {
                "name": "size_right",
                "type": "float",
                "index": "2"
              },
              {
                "name": "size_bottom",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "set_expand_margin_individual",
            "description": "Sets the expand margin for each margin to [code]size_left[/code], [code]size_top[/code], [code]size_right[/code], and [code]size_bottom[/code] pixels."
          }
        ]
      },
      "name": "StyleBoxFlat",
      "version": "3.3",
      "constants": {},
      "brief_description": "Customizable [StyleBox] with a given set of parameters (no texture required).",
      "description": "This [StyleBox] can be used to achieve all kinds of looks without the need of a texture. The following properties are customizable:\n\t\t- Color\n\t\t- Border width (individual width for each border)\n\t\t- Rounded corners (individual radius for each corner)\n\t\t- Shadow (with blur and offset)\n\t\tSetting corner radius to high values is allowed. As soon as corners overlap, the stylebox will switch to a relative system. Example:\n\t\t[codeblock]\n\t\theight = 30\n\t\tcorner_radius_top_left = 50\n\t\tcorner_radius_bottom_left = 100\n\t\t[/codeblock]\n\t\tThe relative system now would take the 1:2 ratio of the two left corners to calculate the actual corner width. Both corners added will [b]never[/b] be more than the height. Result:\n\t\t[codeblock]\n\t\tcorner_radius_top_left: 10\n\t\tcorner_radius_bottom_left: 20\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "Color( 0, 0, 0, 1 )",
            "value": "The line's color.",
            "setter": "set_color",
            "name": "color",
            "getter": "get_color",
            "type": "Color"
          },
          {
            "default": "1.0",
            "value": "The number of pixels the line will extend before the [StyleBoxLine]'s bounds. If set to a negative value, the line will begin inside the [StyleBoxLine]'s bounds.",
            "setter": "set_grow_begin",
            "name": "grow_begin",
            "getter": "get_grow_begin",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "The number of pixels the line will extend past the [StyleBoxLine]'s bounds. If set to a negative value, the line will end inside the [StyleBoxLine]'s bounds.",
            "setter": "set_grow_end",
            "name": "grow_end",
            "getter": "get_grow_end",
            "type": "float"
          },
          {
            "default": "1",
            "value": "The line's thickness in pixels.",
            "setter": "set_thickness",
            "name": "thickness",
            "getter": "get_thickness",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the line will be vertical. If [code]false[/code], the line will be horizontal.",
            "setter": "set_vertical",
            "name": "vertical",
            "getter": "is_vertical",
            "type": "bool"
          }
        ]
      },
      "inherits": "StyleBox",
      "methods": {},
      "name": "StyleBoxLine",
      "version": "3.3",
      "constants": {},
      "brief_description": "[StyleBox] that displays a single line.",
      "description": "[StyleBox] that displays a single line of a given color and thickness. It can be used to draw things like separators."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0",
            "value": "Controls how the stylebox's texture will be stretched or tiled horizontally. See [enum AxisStretchMode] for possible values.",
            "setter": "set_h_axis_stretch_mode",
            "name": "axis_stretch_horizontal",
            "getter": "get_h_axis_stretch_mode",
            "type": "int",
            "enum": "StyleBoxTexture.AxisStretchMode"
          },
          {
            "default": "0",
            "value": "Controls how the stylebox's texture will be stretched or tiled vertically. See [enum AxisStretchMode] for possible values.",
            "setter": "set_v_axis_stretch_mode",
            "name": "axis_stretch_vertical",
            "getter": "get_v_axis_stretch_mode",
            "type": "int",
            "enum": "StyleBoxTexture.AxisStretchMode"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the nine-patch texture's center tile will be drawn.",
            "setter": "set_draw_center",
            "name": "draw_center",
            "getter": "is_draw_center_enabled",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "Expands the bottom margin of this style box when drawing, causing it to be drawn larger than requested.",
            "setter": "set_expand_margin_size",
            "name": "expand_margin_bottom",
            "getter": "get_expand_margin_size",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Expands the left margin of this style box when drawing, causing it to be drawn larger than requested.",
            "setter": "set_expand_margin_size",
            "name": "expand_margin_left",
            "getter": "get_expand_margin_size",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Expands the right margin of this style box when drawing, causing it to be drawn larger than requested.",
            "setter": "set_expand_margin_size",
            "name": "expand_margin_right",
            "getter": "get_expand_margin_size",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Expands the top margin of this style box when drawing, causing it to be drawn larger than requested.",
            "setter": "set_expand_margin_size",
            "name": "expand_margin_top",
            "getter": "get_expand_margin_size",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Increases the bottom margin of the 3×3 texture box.\n\t\t\tA higher value means more of the source texture is considered to be part of the bottom border of the 3×3 box.\n\t\t\tThis is also the value used as fallback for [member StyleBox.content_margin_bottom] if it is negative.",
            "setter": "set_margin_size",
            "name": "margin_bottom",
            "getter": "get_margin_size",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Increases the left margin of the 3×3 texture box.\n\t\t\tA higher value means more of the source texture is considered to be part of the left border of the 3×3 box.\n\t\t\tThis is also the value used as fallback for [member StyleBox.content_margin_left] if it is negative.",
            "setter": "set_margin_size",
            "name": "margin_left",
            "getter": "get_margin_size",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Increases the right margin of the 3×3 texture box.\n\t\t\tA higher value means more of the source texture is considered to be part of the right border of the 3×3 box.\n\t\t\tThis is also the value used as fallback for [member StyleBox.content_margin_right] if it is negative.",
            "setter": "set_margin_size",
            "name": "margin_right",
            "getter": "get_margin_size",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Increases the top margin of the 3×3 texture box.\n\t\t\tA higher value means more of the source texture is considered to be part of the top border of the 3×3 box.\n\t\t\tThis is also the value used as fallback for [member StyleBox.content_margin_top] if it is negative.",
            "setter": "set_margin_size",
            "name": "margin_top",
            "getter": "get_margin_size",
            "type": "float"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "Modulates the color of the texture when this style box is drawn.",
            "setter": "set_modulate",
            "name": "modulate_color",
            "getter": "get_modulate",
            "type": "Color"
          },
          {
            "value": "The normal map to use when drawing this style box.\n\t\t\t[b]Note:[/b] Godot expects the normal map to use X+, Y-, and Z+ coordinates. See [url=http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates]this page[/url] for a comparison of normal map coordinates expected by popular engines.",
            "setter": "set_normal_map",
            "name": "normal_map",
            "getter": "get_normal_map",
            "type": "Texture"
          },
          {
            "default": "Rect2( 0, 0, 0, 0 )",
            "value": "Species a sub-region of the texture to use.\n\t\t\tThis is equivalent to first wrapping the texture in an [AtlasTexture] with the same region.",
            "setter": "set_region_rect",
            "name": "region_rect",
            "getter": "get_region_rect",
            "type": "Rect2"
          },
          {
            "value": "The texture to use when drawing this style box.",
            "setter": "set_texture",
            "name": "texture",
            "getter": "get_texture",
            "type": "Texture"
          }
        ]
      },
      "inherits": "StyleBox",
      "methods": {
        "method": [
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_expand_margin_size",
            "description": "Returns the size of the given [code]margin[/code]'s expand margin. See [enum Margin] for possible values."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_margin_size",
            "description": "Returns the size of the given [code]margin[/code]. See [enum Margin] for possible values."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "size",
              "type": "float",
              "index": "0"
            },
            "name": "set_expand_margin_all",
            "description": "Sets the expand margin to [code]size[/code] pixels for all margins."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "size_left",
                "type": "float",
                "index": "0"
              },
              {
                "name": "size_top",
                "type": "float",
                "index": "1"
              },
              {
                "name": "size_right",
                "type": "float",
                "index": "2"
              },
              {
                "name": "size_bottom",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "set_expand_margin_individual",
            "description": "Sets the expand margin for each margin to [code]size_left[/code], [code]size_top[/code], [code]size_right[/code], and [code]size_bottom[/code] pixels."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "margin",
                "type": "int",
                "enum": "Margin",
                "index": "0"
              },
              {
                "name": "size",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_expand_margin_size",
            "description": "Sets the expand margin to [code]size[/code] pixels for the given [code]margin[/code]. See [enum Margin] for possible values."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "margin",
                "type": "int",
                "enum": "Margin",
                "index": "0"
              },
              {
                "name": "size",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_margin_size",
            "description": "Sets the margin to [code]size[/code] pixels for the given [code]margin[/code]. See [enum Margin] for possible values."
          }
        ]
      },
      "name": "StyleBoxTexture",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "texture_changed",
          "description": "Emitted when the stylebox's texture is changed."
        }
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "AXIS_STRETCH_MODE_STRETCH",
            "enum": "AxisStretchMode"
          },
          {
            "value": "1",
            "name": "AXIS_STRETCH_MODE_TILE",
            "enum": "AxisStretchMode"
          },
          {
            "value": "2",
            "name": "AXIS_STRETCH_MODE_TILE_FIT",
            "enum": "AxisStretchMode"
          }
        ]
      },
      "brief_description": "Texture-based nine-patch [StyleBox].",
      "description": "Texture-based nine-patch [StyleBox], in a way similar to [NinePatchRect]. This stylebox performs a 3×3 scaling of a texture, where only the center cell is fully stretched. This makes it possible to design bordered styles regardless of the stylebox's size."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "-1.0",
            "value": "The bottom margin for the contents of this style box. Increasing this value reduces the space available to the contents from the bottom.\n\t\t\tIf this value is negative, it is ignored and a child-specific margin is used instead. For example for [StyleBoxFlat] the border thickness (if any) is used instead.\n\t\t\tIt is up to the code using this style box to decide what these contents are: for example, a [Button] respects this content margin for the textual contents of the button.\n\t\t\t[method get_margin] should be used to fetch this value as consumer instead of reading these properties directly. This is because it correctly respects negative values and the fallback mentioned above.",
            "setter": "set_default_margin",
            "name": "content_margin_bottom",
            "getter": "get_default_margin",
            "type": "float"
          },
          {
            "default": "-1.0",
            "value": "The left margin for the contents of this style box.\tIncreasing this value reduces the space available to the contents from the left.\n\t\t\tRefer to [member content_margin_bottom] for extra considerations.",
            "setter": "set_default_margin",
            "name": "content_margin_left",
            "getter": "get_default_margin",
            "type": "float"
          },
          {
            "default": "-1.0",
            "value": "The right margin for the contents of this style box. Increasing this value reduces the space available to the contents from the right.\n\t\t\tRefer to [member content_margin_bottom] for extra considerations.",
            "setter": "set_default_margin",
            "name": "content_margin_right",
            "getter": "get_default_margin",
            "type": "float"
          },
          {
            "default": "-1.0",
            "value": "The top margin for the contents of this style box. Increasing this value reduces the space available to the contents from the top.\n\t\t\tRefer to [member content_margin_bottom] for extra considerations.",
            "setter": "set_default_margin",
            "name": "content_margin_top",
            "getter": "get_default_margin",
            "type": "float"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "canvas_item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "rect",
                "type": "Rect2",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "draw",
            "description": "Draws this stylebox using a [CanvasItem] with given [RID].\n\t\t\t\tYou can get a [RID] value using [method Object.get_instance_id] on a [CanvasItem]-derived node."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_center_size",
            "description": "Returns the size of this [StyleBox] without the margins."
          },
          {
            "return": {
              "type": "CanvasItem"
            },
            "qualifiers": "const",
            "name": "get_current_item_drawn",
            "description": "Returns the [CanvasItem] that handles its [constant CanvasItem.NOTIFICATION_DRAW] or [method CanvasItem._draw] callback at this moment."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_default_margin",
            "description": "Returns the default value of the specified [enum Margin]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_margin",
            "description": "Returns the content margin offset for the specified [enum Margin].\n\t\t\t\tPositive values reduce size inwards, unlike [Control]'s margin values."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_minimum_size",
            "description": "Returns the minimum size that this stylebox can be shrunk to."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_offset",
            "description": "Returns the \"offset\" of a stylebox. This helper function returns a value equivalent to [code]Vector2(style.get_margin(MARGIN_LEFT), style.get_margin(MARGIN_TOP))[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "margin",
                "type": "int",
                "enum": "Margin",
                "index": "0"
              },
              {
                "name": "offset",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_default_margin",
            "description": "Sets the default value of the specified [enum Margin] to given [code]offset[/code] in pixels."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "point",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "rect",
                "type": "Rect2",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "test_mask",
            "description": "Test a position in a rectangle, return whether it passes the mask test."
          }
        ]
      },
      "name": "StyleBox",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base class for drawing stylized boxes for the UI.",
      "description": "StyleBox is [Resource] that provides an abstract base class for drawing stylized boxes for the UI. StyleBoxes are used for drawing the styles of buttons, line edit backgrounds, tree backgrounds, etc. and also for testing a transparency mask for pointer signals. If mask test fails on a StyleBox assigned as mask to a control, clicks and motion signals will go through it to the one below.\n\t\t[b]Note:[/b] For children of [Control] that have [i]Theme Properties[/i], the [code]focus[/code] [StyleBox] is displayed over the [code]normal[/code], [code]hover[/code] or [code]pressed[/code] [StyleBox]. This makes the [code]focus[/code] [StyleBox] more reusable across different nodes."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/676",
          "title": "3D Voxel Demo"
        }
      },
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "bones",
              "type": "PoolIntArray",
              "index": "0"
            },
            "name": "add_bones",
            "description": "Specifies an array of bones to use for the [i]next[/i] vertex. [code]bones[/code] must contain 4 integers."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "color",
              "type": "Color",
              "index": "0"
            },
            "name": "add_color",
            "description": "Specifies a [Color] to use for the [i]next[/i] vertex. If every vertex needs to have this information set and you fail to submit it for the first vertex, this information may not be used at all.\n\t\t\t\t[b]Note:[/b] The material must have [member SpatialMaterial.vertex_color_use_as_albedo] enabled for the vertex color to be visible."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "index",
              "type": "int",
              "index": "0"
            },
            "name": "add_index",
            "description": "Adds an index to index array if you are using indexed vertices. Does not need to be called before adding vertices."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "normal",
              "type": "Vector3",
              "index": "0"
            },
            "name": "add_normal",
            "description": "Specifies a normal to use for the [i]next[/i] vertex. If every vertex needs to have this information set and you fail to submit it for the first vertex, this information may not be used at all."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "smooth",
              "type": "bool",
              "index": "0"
            },
            "name": "add_smooth_group",
            "description": "Specifies whether the current vertex (if using only vertex arrays) or current index (if also using index arrays) should use smooth normals for normal calculation."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "tangent",
              "type": "Plane",
              "index": "0"
            },
            "name": "add_tangent",
            "description": "Specifies a tangent to use for the [i]next[/i] vertex. If every vertex needs to have this information set and you fail to submit it for the first vertex, this information may not be used at all."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "vertices",
                "type": "PoolVector3Array",
                "index": "0"
              },
              {
                "default": "PoolVector2Array(  )",
                "name": "uvs",
                "type": "PoolVector2Array",
                "index": "1"
              },
              {
                "default": "PoolColorArray(  )",
                "name": "colors",
                "type": "PoolColorArray",
                "index": "2"
              },
              {
                "default": "PoolVector2Array(  )",
                "name": "uv2s",
                "type": "PoolVector2Array",
                "index": "3"
              },
              {
                "default": "PoolVector3Array(  )",
                "name": "normals",
                "type": "PoolVector3Array",
                "index": "4"
              },
              {
                "default": "[  ]",
                "name": "tangents",
                "type": "Array",
                "index": "5"
              }
            ],
            "name": "add_triangle_fan",
            "description": "Inserts a triangle fan made of array data into [Mesh] being constructed.\n\t\t\t\tRequires the primitive type be set to [constant Mesh.PRIMITIVE_TRIANGLES]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "uv",
              "type": "Vector2",
              "index": "0"
            },
            "name": "add_uv",
            "description": "Specifies a set of UV coordinates to use for the [i]next[/i] vertex. If every vertex needs to have this information set and you fail to submit it for the first vertex, this information may not be used at all."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "uv2",
              "type": "Vector2",
              "index": "0"
            },
            "name": "add_uv2",
            "description": "Specifies an optional second set of UV coordinates to use for the [i]next[/i] vertex. If every vertex needs to have this information set and you fail to submit it for the first vertex, this information may not be used at all."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "vertex",
              "type": "Vector3",
              "index": "0"
            },
            "name": "add_vertex",
            "description": "Specifies the position of current vertex. Should be called after specifying other vertex properties (e.g. Color, UV)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "weights",
              "type": "PoolRealArray",
              "index": "0"
            },
            "name": "add_weights",
            "description": "Specifies weight values to use for the [i]next[/i] vertex. [code]weights[/code] must contain 4 values. If every vertex needs to have this information set and you fail to submit it for the first vertex, this information may not be used at all."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "existing",
                "type": "Mesh",
                "index": "0"
              },
              {
                "name": "surface",
                "type": "int",
                "index": "1"
              },
              {
                "name": "transform",
                "type": "Transform",
                "index": "2"
              }
            ],
            "name": "append_from",
            "description": "Append vertices from a given [Mesh] surface onto the current vertex array with specified [Transform]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "primitive",
              "type": "int",
              "enum": "Mesh.PrimitiveType",
              "index": "0"
            },
            "name": "begin",
            "description": "Called before adding any vertices. Takes the primitive type as an argument (e.g. [constant Mesh.PRIMITIVE_TRIANGLES])."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Clear all information passed into the surface tool so far."
          },
          {
            "return": {
              "type": "ArrayMesh"
            },
            "argument": [
              {
                "default": "null",
                "name": "existing",
                "type": "ArrayMesh",
                "index": "0"
              },
              {
                "default": "97280",
                "name": "flags",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "commit",
            "description": "Returns a constructed [ArrayMesh] from current information passed in. If an existing [ArrayMesh] is passed in as an argument, will add an extra surface to the existing [ArrayMesh].\n\t\t\t\tDefault flag is [constant Mesh.ARRAY_COMPRESS_DEFAULT]. See [code]ARRAY_COMPRESS_*[/code] constants in [enum Mesh.ArrayFormat] for other flags."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "commit_to_arrays",
            "description": "Commits the data to the same format used by [method ArrayMesh.add_surface_from_arrays]. This way you can further process the mesh data using the [ArrayMesh] API."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "existing",
                "type": "Mesh",
                "index": "0"
              },
              {
                "name": "surface",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "create_from",
            "description": "Creates a vertex array from an existing [Mesh]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "existing",
                "type": "Mesh",
                "index": "0"
              },
              {
                "name": "surface",
                "type": "int",
                "index": "1"
              },
              {
                "name": "blend_shape",
                "type": "String",
                "index": "2"
              }
            ],
            "name": "create_from_blend_shape",
            "description": "Creates a vertex array from the specified blend shape of an existing [Mesh]. This can be used to extract a specific pose from a blend shape."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "deindex",
            "description": "Removes the index array by expanding the vertex array."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "false",
              "name": "flip",
              "type": "bool",
              "index": "0"
            },
            "name": "generate_normals",
            "description": "Generates normals from vertices so you do not have to do it manually. If [code]flip[/code] is [code]true[/code], the resulting normals will be inverted. [method generate_normals] should be called [i]after[/i] generating geometry and [i]before[/i] committing the mesh using [method commit] or [method commit_to_arrays].\n\t\t\t\t[b]Note:[/b] [method generate_normals] only works if the primitive type to be set to [constant Mesh.PRIMITIVE_TRIANGLES]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "generate_tangents",
            "description": "Generates a tangent vector for each vertex. Requires that each vertex have UVs and normals set already."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "index",
            "description": "Shrinks the vertex array by creating an index array. This can improve performance by avoiding vertex reuse."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "material",
              "type": "Material",
              "index": "0"
            },
            "name": "set_material",
            "description": "Sets [Material] to be used by the [Mesh] you are constructing."
          }
        ]
      },
      "name": "SurfaceTool",
      "version": "3.3",
      "constants": {},
      "brief_description": "Helper tool to create geometry.",
      "description": "The [SurfaceTool] is used to construct a [Mesh] by specifying vertex attributes individually. It can be used to construct a [Mesh] from a script. All properties except indices need to be added before calling [method add_vertex]. For example, to add vertex colors and UVs:\n\t\t[codeblock]\n\t\tvar st = SurfaceTool.new()\n\t\tst.begin(Mesh.PRIMITIVE_TRIANGLES)\n\t\tst.add_color(Color(1, 0, 0))\n\t\tst.add_uv(Vector2(0, 0))\n\t\tst.add_vertex(Vector3(0, 0, 0))\n\t\t[/codeblock]\n\t\tThe above [SurfaceTool] now contains one vertex of a triangle which has a UV coordinate and a specified [Color]. If another vertex were added without calling [method add_uv] or [method add_color], then the last values would be used.\n\t\tVertex attributes must be passed [b]before[/b] calling [method add_vertex]. Failure to do so will result in an error when committing the vertex information to a mesh.\n\t\tAdditionally, the attributes used before the first vertex is added determine the format of the mesh. For example, if you only add UVs to the first vertex, you cannot add color to any of the subsequent vertices.\n\t\tSee also [ArrayMesh], [ImmediateGeometry] and [MeshDataTool] for procedural geometry generation.\n\t\t[b]Note:[/b] Godot uses clockwise [url=https://learnopengl.com/Advanced-OpenGL/Face-culling]winding order[/url] for front faces of triangle primitive modes."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "value": "Icon for the left arrow button that appears when there are too many tabs to fit in the container width. When the button is disabled (i.e. the first tab is visible), it appears semi-transparent.",
            "name": "decrement",
            "type": "Texture"
          },
          {
            "value": "Icon for the left arrow button that appears when there are too many tabs to fit in the container width. Used when the button is being hovered with the cursor.",
            "name": "decrement_highlight",
            "type": "Texture"
          },
          {
            "value": "The font used to draw tab names.",
            "name": "font",
            "type": "Font"
          },
          {
            "default": "Color( 0.69, 0.69, 0.69, 1 )",
            "value": "Font color of inactive tabs.",
            "name": "font_color_bg",
            "type": "Color"
          },
          {
            "default": "Color( 0.9, 0.9, 0.9, 0.2 )",
            "value": "Font color of disabled tabs.",
            "name": "font_color_disabled",
            "type": "Color"
          },
          {
            "default": "Color( 0.94, 0.94, 0.94, 1 )",
            "value": "Font color of the currently selected tab.",
            "name": "font_color_fg",
            "type": "Color"
          },
          {
            "default": "4",
            "value": "Horizontal separation between tabs.",
            "name": "hseparation",
            "type": "int"
          },
          {
            "value": "Icon for the right arrow button that appears when there are too many tabs to fit in the container width. When the button is disabled (i.e. the last tab is visible) it appears semi-transparent.",
            "name": "increment",
            "type": "Texture"
          },
          {
            "value": "Icon for the right arrow button that appears when there are too many tabs to fit in the container width. Used when the button is being hovered with the cursor.",
            "name": "increment_highlight",
            "type": "Texture"
          },
          {
            "default": "2",
            "name": "label_valign_bg",
            "type": "int"
          },
          {
            "default": "0",
            "name": "label_valign_fg",
            "type": "int"
          },
          {
            "value": "The icon for the menu button (see [method set_popup]).",
            "name": "menu",
            "type": "Texture"
          },
          {
            "value": "The icon for the menu button (see [method set_popup]) when it's being hovered with the cursor.",
            "name": "menu_highlight",
            "type": "Texture"
          },
          {
            "value": "The style for the background fill.",
            "name": "panel",
            "type": "StyleBox"
          },
          {
            "default": "8",
            "value": "The space at the left and right edges of the tab bar.",
            "name": "side_margin",
            "type": "int"
          },
          {
            "value": "The style of inactive tabs.",
            "name": "tab_bg",
            "type": "StyleBox"
          },
          {
            "value": "The style of disabled tabs.",
            "name": "tab_disabled",
            "type": "StyleBox"
          },
          {
            "value": "The style of the currently selected tab.",
            "name": "tab_fg",
            "type": "StyleBox"
          },
          {
            "default": "24",
            "name": "top_margin",
            "type": "int"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], all tabs are drawn in front of the panel. If [code]false[/code], inactive tabs are drawn behind the panel.",
            "setter": "set_all_tabs_in_front",
            "name": "all_tabs_in_front",
            "getter": "is_all_tabs_in_front",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "The current tab index. When set, this index's [Control] node's [code]visible[/code] property is set to [code]true[/code] and all others are set to [code]false[/code].",
            "setter": "set_current_tab",
            "name": "current_tab",
            "getter": "get_current_tab",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], tabs can be rearranged with mouse drag.",
            "setter": "set_drag_to_rearrange_enabled",
            "name": "drag_to_rearrange_enabled",
            "getter": "get_drag_to_rearrange_enabled",
            "type": "bool"
          },
          {
            "default": "1",
            "value": "The alignment of all tabs in the tab container. See the [enum TabAlign] constants for details.",
            "setter": "set_tab_align",
            "name": "tab_align",
            "getter": "get_tab_align",
            "type": "int",
            "enum": "TabContainer.TabAlign"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], tabs are visible. If [code]false[/code], tabs' content and titles are hidden.",
            "setter": "set_tabs_visible",
            "name": "tabs_visible",
            "getter": "are_tabs_visible",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], children [Control] nodes that are hidden have their minimum size take into account in the total, instead of only the currently visible one.",
            "setter": "set_use_hidden_tabs_for_min_size",
            "name": "use_hidden_tabs_for_min_size",
            "getter": "get_use_hidden_tabs_for_min_size",
            "type": "bool"
          }
        ]
      },
      "inherits": "Container",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Control"
            },
            "qualifiers": "const",
            "name": "get_current_tab_control",
            "description": "Returns the child [Control] node located at the active tab index."
          },
          {
            "return": {
              "type": "Popup"
            },
            "qualifiers": "const",
            "name": "get_popup",
            "description": "Returns the [Popup] node instance if one has been set already with [method set_popup]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_previous_tab",
            "description": "Returns the previously active tab index."
          },
          {
            "return": {
              "type": "Control"
            },
            "argument": {
              "name": "tab_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_tab_control",
            "description": "Returns the [Control] node from the tab at index [code]tab_idx[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_tab_count",
            "description": "Returns the number of tabs."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "tab_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_tab_disabled",
            "description": "Returns [code]true[/code] if the tab at index [code]tab_idx[/code] is disabled."
          },
          {
            "return": {
              "type": "Texture"
            },
            "argument": {
              "name": "tab_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_tab_icon",
            "description": "Returns the [Texture] for the tab at index [code]tab_idx[/code] or [code]null[/code] if the tab has no [Texture]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "tab_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_tab_title",
            "description": "Returns the title of the tab at index [code]tab_idx[/code]. Tab titles default to the name of the indexed child node, but this can be overridden with [method set_tab_title]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_tabs_rearrange_group",
            "description": "Returns the [TabContainer] rearrange group id."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "popup",
              "type": "Node",
              "index": "0"
            },
            "name": "set_popup",
            "description": "If set on a [Popup] node instance, a popup menu icon appears in the top-right corner of the [TabContainer]. Clicking it will expand the [Popup] node."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "tab_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "disabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_tab_disabled",
            "description": "If [code]disabled[/code] is [code]false[/code], hides the tab at index [code]tab_idx[/code].\n\t\t\t\t[b]Note:[/b] Its title text will remain, unless also removed with [method set_tab_title]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "tab_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "icon",
                "type": "Texture",
                "index": "1"
              }
            ],
            "name": "set_tab_icon",
            "description": "Sets an icon for the tab at index [code]tab_idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "tab_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "title",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set_tab_title",
            "description": "Sets a title for the tab at index [code]tab_idx[/code]. Tab titles default to the name of the indexed child node, but this can be overridden with [method set_tab_title]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "group_id",
              "type": "int",
              "index": "0"
            },
            "name": "set_tabs_rearrange_group",
            "description": "Defines rearrange group id, choose for each [TabContainer] the same value to enable tab drag between [TabContainer]. Enable drag with [code]set_drag_to_rearrange_enabled(true)[/code]."
          }
        ]
      },
      "name": "TabContainer",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "pre_popup_pressed",
            "description": "Emitted when the [TabContainer]'s [Popup] button is clicked. See [method set_popup] for details."
          },
          {
            "argument": {
              "name": "tab",
              "type": "int",
              "index": "0"
            },
            "name": "tab_changed",
            "description": "Emitted when switching to another tab."
          },
          {
            "argument": {
              "name": "tab",
              "type": "int",
              "index": "0"
            },
            "name": "tab_selected",
            "description": "Emitted when a tab is selected, even if it is the current tab."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "ALIGN_LEFT",
            "enum": "TabAlign"
          },
          {
            "value": "1",
            "name": "ALIGN_CENTER",
            "enum": "TabAlign"
          },
          {
            "value": "2",
            "name": "ALIGN_RIGHT",
            "enum": "TabAlign"
          }
        ]
      },
      "brief_description": "Tabbed container.",
      "description": "Sets the active tab's [code]visible[/code] property to the value [code]true[/code]. Sets all other children's to [code]false[/code].\n\t\tIgnores non-[Control] children.\n\t\tIndividual tabs are always visible unless you use [method set_tab_disabled] and [method set_tab_title] to hide it.\n\t\tTo hide only a tab's content, nest the content inside a child [Control], so it receives the [TabContainer]'s visibility setting instead."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "value": "Background of the close button when it's being hovered with the cursor.",
            "name": "button",
            "type": "StyleBox"
          },
          {
            "value": "Background of the close button when it's being pressed.",
            "name": "button_pressed",
            "type": "StyleBox"
          },
          {
            "value": "The icon for the close button (see [member tab_close_display_policy]).",
            "name": "close",
            "type": "Texture"
          },
          {
            "value": "Icon for the left arrow button that appears when there are too many tabs to fit in the container width. When the button is disabled (i.e. the first tab is visible), it appears semi-transparent.",
            "name": "decrement",
            "type": "Texture"
          },
          {
            "value": "Icon for the left arrow button that appears when there are too many tabs to fit in the container width. Used when the button is being hovered with the cursor.",
            "name": "decrement_highlight",
            "type": "Texture"
          },
          {
            "value": "The font used to draw tab names.",
            "name": "font",
            "type": "Font"
          },
          {
            "default": "Color( 0.69, 0.69, 0.69, 1 )",
            "value": "Font color of inactive tabs.",
            "name": "font_color_bg",
            "type": "Color"
          },
          {
            "default": "Color( 0.9, 0.9, 0.9, 0.2 )",
            "value": "Font color of disabled tabs.",
            "name": "font_color_disabled",
            "type": "Color"
          },
          {
            "default": "Color( 0.94, 0.94, 0.94, 1 )",
            "value": "Font color of the currently selected tab.",
            "name": "font_color_fg",
            "type": "Color"
          },
          {
            "default": "4",
            "value": "The horizontal separation between the tabs.",
            "name": "hseparation",
            "type": "int"
          },
          {
            "value": "Icon for the right arrow button that appears when there are too many tabs to fit in the container width. When the button is disabled (i.e. the last tab is visible) it appears semi-transparent.",
            "name": "increment",
            "type": "Texture"
          },
          {
            "value": "Icon for the right arrow button that appears when there are too many tabs to fit in the container width. Used when the button is being hovered with the cursor.",
            "name": "increment_highlight",
            "type": "Texture"
          },
          {
            "default": "2",
            "name": "label_valign_bg",
            "type": "int"
          },
          {
            "default": "0",
            "name": "label_valign_fg",
            "type": "int"
          },
          {
            "name": "panel",
            "type": "StyleBox"
          },
          {
            "value": "The style of an inactive tab.",
            "name": "tab_bg",
            "type": "StyleBox"
          },
          {
            "value": "The style of a disabled tab",
            "name": "tab_disabled",
            "type": "StyleBox"
          },
          {
            "value": "The style of the currently selected tab.",
            "name": "tab_fg",
            "type": "StyleBox"
          },
          {
            "default": "24",
            "name": "top_margin",
            "type": "int"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "0",
            "value": "Select tab at index [code]tab_idx[/code].",
            "setter": "set_current_tab",
            "name": "current_tab",
            "getter": "get_current_tab",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], tabs can be rearranged with mouse drag.",
            "setter": "set_drag_to_rearrange_enabled",
            "name": "drag_to_rearrange_enabled",
            "getter": "get_drag_to_rearrange_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "if [code]true[/code], the mouse's scroll wheel can be used to navigate the scroll view.",
            "setter": "set_scrolling_enabled",
            "name": "scrolling_enabled",
            "getter": "get_scrolling_enabled",
            "type": "bool"
          },
          {
            "default": "1",
            "value": "The alignment of all tabs. See [enum TabAlign] for details.",
            "setter": "set_tab_align",
            "name": "tab_align",
            "getter": "get_tab_align",
            "type": "int",
            "enum": "Tabs.TabAlign"
          },
          {
            "default": "0",
            "value": "Sets when the close button will appear on the tabs. See [enum CloseButtonDisplayPolicy] for details.",
            "setter": "set_tab_close_display_policy",
            "name": "tab_close_display_policy",
            "getter": "get_tab_close_display_policy",
            "type": "int",
            "enum": "Tabs.CloseButtonDisplayPolicy"
          }
        ]
      },
      "inherits": "Control",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "default": "\"\"",
                "name": "title",
                "type": "String",
                "index": "0"
              },
              {
                "default": "null",
                "name": "icon",
                "type": "Texture",
                "index": "1"
              }
            ],
            "name": "add_tab",
            "description": "Adds a new tab."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "name": "ensure_tab_visible",
            "description": "Moves the scroll view to make the tab visible."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "get_offset_buttons_visible",
            "description": "Returns [code]true[/code] if the offset buttons (the ones that appear when there's not enough space for all tabs) are visible."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_previous_tab",
            "description": "Returns the previously active tab index."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "get_select_with_rmb",
            "description": "Returns [code]true[/code] if select with right mouse button is enabled."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_tab_count",
            "description": "Returns the number of tabs."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "tab_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_tab_disabled",
            "description": "Returns [code]true[/code] if the tab at index [code]tab_idx[/code] is disabled."
          },
          {
            "return": {
              "type": "Texture"
            },
            "argument": {
              "name": "tab_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_tab_icon",
            "description": "Returns the [Texture] for the tab at index [code]tab_idx[/code] or [code]null[/code] if the tab has no [Texture]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_tab_offset",
            "description": "Returns the number of hidden tabs offsetted to the left."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "argument": {
              "name": "tab_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_tab_rect",
            "description": "Returns tab [Rect2] with local position and size."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "tab_idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_tab_title",
            "description": "Returns the title of the tab at index [code]tab_idx[/code]. Tab titles default to the name of the indexed child node, but this can be overridden with [method set_tab_title]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_tabs_rearrange_group",
            "description": "Returns the [Tabs]' rearrange group ID."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "from",
                "type": "int",
                "index": "0"
              },
              {
                "name": "to",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "move_tab",
            "description": "Moves a tab from [code]from[/code] to [code]to[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "tab_idx",
              "type": "int",
              "index": "0"
            },
            "name": "remove_tab",
            "description": "Removes the tab at index [code]tab_idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enabled",
              "type": "bool",
              "index": "0"
            },
            "name": "set_select_with_rmb",
            "description": "If [code]true[/code], enables selecting a tab with the right mouse button."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "tab_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "disabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_tab_disabled",
            "description": "If [code]disabled[/code] is [code]false[/code], hides the tab at index [code]tab_idx[/code].\n\t\t\t\t[b]Note:[/b] Its title text will remain unless it is also removed with [method set_tab_title]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "tab_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "icon",
                "type": "Texture",
                "index": "1"
              }
            ],
            "name": "set_tab_icon",
            "description": "Sets an [code]icon[/code] for the tab at index [code]tab_idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "tab_idx",
                "type": "int",
                "index": "0"
              },
              {
                "name": "title",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set_tab_title",
            "description": "Sets a [code]title[/code] for the tab at index [code]tab_idx[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "group_id",
              "type": "int",
              "index": "0"
            },
            "name": "set_tabs_rearrange_group",
            "description": "Defines the rearrange group ID. Choose for each [Tabs] the same value to dragging tabs between [Tabs]. Enable drag with [code]set_drag_to_rearrange_enabled(true)[/code]."
          }
        ]
      },
      "name": "Tabs",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "idx_to",
              "type": "int",
              "index": "0"
            },
            "name": "reposition_active_tab_request",
            "description": "Emitted when the active tab is rearranged via mouse drag. See [member drag_to_rearrange_enabled]."
          },
          {
            "argument": {
              "name": "tab",
              "type": "int",
              "index": "0"
            },
            "name": "right_button_pressed",
            "description": "Emitted when a tab is right-clicked."
          },
          {
            "argument": {
              "name": "tab",
              "type": "int",
              "index": "0"
            },
            "name": "tab_changed",
            "description": "Emitted when switching to another tab."
          },
          {
            "argument": {
              "name": "tab",
              "type": "int",
              "index": "0"
            },
            "name": "tab_clicked",
            "description": "Emitted when a tab is clicked, even if it is the current tab."
          },
          {
            "argument": {
              "name": "tab",
              "type": "int",
              "index": "0"
            },
            "name": "tab_close",
            "description": "Emitted when a tab is closed."
          },
          {
            "argument": {
              "name": "tab",
              "type": "int",
              "index": "0"
            },
            "name": "tab_hover",
            "description": "Emitted when a tab is hovered by the mouse."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "ALIGN_LEFT",
            "enum": "TabAlign"
          },
          {
            "value": "1",
            "name": "ALIGN_CENTER",
            "enum": "TabAlign"
          },
          {
            "value": "2",
            "name": "ALIGN_RIGHT",
            "enum": "TabAlign"
          },
          {
            "value": "3",
            "name": "ALIGN_MAX",
            "enum": "TabAlign"
          },
          {
            "value": "0",
            "name": "CLOSE_BUTTON_SHOW_NEVER",
            "enum": "CloseButtonDisplayPolicy"
          },
          {
            "value": "1",
            "name": "CLOSE_BUTTON_SHOW_ACTIVE_ONLY",
            "enum": "CloseButtonDisplayPolicy"
          },
          {
            "value": "2",
            "name": "CLOSE_BUTTON_SHOW_ALWAYS",
            "enum": "CloseButtonDisplayPolicy"
          },
          {
            "value": "3",
            "name": "CLOSE_BUTTON_MAX",
            "enum": "CloseButtonDisplayPolicy"
          }
        ]
      },
      "brief_description": "Tabs control.",
      "description": "Simple tabs control, similar to [TabContainer] but is only in charge of drawing tabs, not interacting with children."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_connection_available",
            "description": "Returns [code]true[/code] if a connection is available for taking."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_listening",
            "description": "Returns [code]true[/code] if the server is currently listening for connections."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "port",
                "type": "int",
                "index": "0"
              },
              {
                "default": "\"*\"",
                "name": "bind_address",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "listen",
            "description": "Listen on the [code]port[/code] binding to [code]bind_address[/code].\n\t\t\t\tIf [code]bind_address[/code] is set as [code]\"*\"[/code] (default), the server will listen on all available addresses (both IPv4 and IPv6).\n\t\t\t\tIf [code]bind_address[/code] is set as [code]\"0.0.0.0\"[/code] (for IPv4) or [code]\"::\"[/code] (for IPv6), the server will listen on all available addresses matching that IP type.\n\t\t\t\tIf [code]bind_address[/code] is set to any valid address (e.g. [code]\"192.168.1.101\"[/code], [code]\"::1\"[/code], etc), the server will only listen on the interface with that addresses (or fail if no interface with the given address exists)."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "stop",
            "description": "Stops listening."
          },
          {
            "return": {
              "type": "StreamPeerTCP"
            },
            "name": "take_connection",
            "description": "If a connection is available, returns a StreamPeerTCP with the connection."
          }
        ]
      },
      "name": "TCP_Server",
      "version": "3.3",
      "constants": {},
      "brief_description": "A TCP server.",
      "description": "A TCP server. Listens to connections on a port and returns a [StreamPeerTCP] when it gets an incoming connection."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "default": "Color( 0, 0, 0, 0 )",
            "value": "Sets the background [Color] of this [TextEdit]. [member syntax_highlighting] has to be enabled.",
            "name": "background_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.08, 0.49, 0.98, 1 )",
            "value": "Sets the [Color] of the bookmark marker. [member syntax_highlighting] has to be enabled.",
            "name": "bookmark_color",
            "type": "Color"
          },
          {
            "default": "Color( 1, 0.2, 0.2, 1 )",
            "name": "brace_mismatch_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.8, 0.8, 0.4, 0.2 )",
            "value": "Sets the [Color] of the breakpoints. [member breakpoint_gutter] has to be enabled.",
            "name": "breakpoint_color",
            "type": "Color"
          },
          {
            "default": "Color( 0, 0, 0, 1 )",
            "name": "caret_background_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.88, 0.88, 0.88, 1 )",
            "name": "caret_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.8, 0.8, 0.8, 0.8 )",
            "name": "code_folding_color",
            "type": "Color"
          },
          {
            "name": "completion",
            "type": "StyleBox"
          },
          {
            "default": "Color( 0.17, 0.16, 0.2, 1 )",
            "name": "completion_background_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.87, 0.87, 0.87, 0.13 )",
            "name": "completion_existing_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.67, 0.67, 0.67, 1 )",
            "name": "completion_font_color",
            "type": "Color"
          },
          {
            "default": "7",
            "name": "completion_lines",
            "type": "int"
          },
          {
            "default": "50",
            "name": "completion_max_width",
            "type": "int"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "name": "completion_scroll_color",
            "type": "Color"
          },
          {
            "default": "3",
            "name": "completion_scroll_width",
            "type": "int"
          },
          {
            "default": "Color( 0.26, 0.26, 0.27, 1 )",
            "name": "completion_selected_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.25, 0.25, 0.26, 0.8 )",
            "value": "Sets the [Color] of the breakpoints. [member breakpoint_gutter] has to be enabled.",
            "name": "current_line_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.2, 0.8, 0.2, 0.4 )",
            "name": "executing_line_color",
            "type": "Color"
          },
          {
            "name": "focus",
            "type": "StyleBox"
          },
          {
            "name": "fold",
            "type": "Texture"
          },
          {
            "name": "folded",
            "type": "Texture"
          },
          {
            "value": "Sets the default [Font].",
            "name": "font",
            "type": "Font"
          },
          {
            "default": "Color( 0.88, 0.88, 0.88, 1 )",
            "value": "Sets the font [Color].",
            "name": "font_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.88, 0.88, 0.88, 0.5 )",
            "name": "font_color_readonly",
            "type": "Color"
          },
          {
            "default": "Color( 0, 0, 0, 1 )",
            "value": "Sets the [Color] of the selected text. [member override_selected_font_color] has to be enabled.",
            "name": "font_color_selected",
            "type": "Color"
          },
          {
            "default": "Color( 0.4, 0.64, 0.81, 1 )",
            "name": "function_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.67, 0.67, 0.67, 0.4 )",
            "value": "Sets the [Color] of the line numbers. [member show_line_numbers] has to be enabled.",
            "name": "line_number_color",
            "type": "Color"
          },
          {
            "default": "4",
            "value": "Sets the spacing between the lines.",
            "name": "line_spacing",
            "type": "int"
          },
          {
            "default": "Color( 1, 0.4, 0.4, 0.4 )",
            "value": "Sets the [Color] of marked text.",
            "name": "mark_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.9, 0.31, 0.35, 1 )",
            "name": "member_variable_color",
            "type": "Color"
          },
          {
            "value": "Sets the [StyleBox] of this [TextEdit].",
            "name": "normal",
            "type": "StyleBox"
          },
          {
            "default": "Color( 0.92, 0.58, 0.2, 1 )",
            "name": "number_color",
            "type": "Color"
          },
          {
            "value": "Sets the [StyleBox] of this [TextEdit] when [member readonly] is enabled.",
            "name": "read_only",
            "type": "StyleBox"
          },
          {
            "default": "Color( 0.67, 0.78, 0.67, 0.6 )",
            "name": "safe_line_number_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.49, 0.49, 0.49, 1 )",
            "value": "Sets the highlight [Color] of text selections.",
            "name": "selection_color",
            "type": "Color"
          },
          {
            "name": "space",
            "type": "Texture"
          },
          {
            "default": "Color( 0.94, 0.94, 0.94, 1 )",
            "name": "symbol_color",
            "type": "Color"
          },
          {
            "value": "Sets a custom [Texture] for tab text characters.",
            "name": "tab",
            "type": "Texture"
          },
          {
            "default": "Color( 0.8, 0.9, 0.9, 0.15 )",
            "value": "Sets the highlight [Color] of multiple occurrences. [member highlight_all_occurrences] has to be enabled.",
            "name": "word_highlighted_color",
            "type": "Color"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the breakpoint gutter is visible.",
            "setter": "set_breakpoint_gutter_enabled",
            "name": "breakpoint_gutter",
            "getter": "is_breakpoint_gutter_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the caret (visual cursor) blinks.",
            "setter": "cursor_set_blink_enabled",
            "name": "caret_blink",
            "getter": "cursor_get_blink_enabled",
            "type": "bool"
          },
          {
            "default": "0.65",
            "value": "Duration (in seconds) of a caret's blinking cycle.",
            "setter": "cursor_set_blink_speed",
            "name": "caret_blink_speed",
            "getter": "cursor_get_blink_speed",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the caret displays as a rectangle.\n\t\t\tIf [code]false[/code], the caret displays as a bar.",
            "setter": "cursor_set_block_mode",
            "name": "caret_block_mode",
            "getter": "cursor_is_block_mode",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], a right-click moves the cursor at the mouse position before displaying the context menu.\n\t\t\tIf [code]false[/code], the context menu disregards mouse location.",
            "setter": "set_right_click_moves_caret",
            "name": "caret_moving_by_right_click",
            "getter": "is_right_click_moving_caret",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], a right-click displays the context menu.",
            "setter": "set_context_menu_enabled",
            "name": "context_menu_enabled",
            "getter": "is_context_menu_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the \"space\" character will have a visible representation.",
            "setter": "set_draw_spaces",
            "name": "draw_spaces",
            "getter": "is_drawing_spaces",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the \"tab\" character will have a visible representation.",
            "setter": "set_draw_tabs",
            "name": "draw_tabs",
            "getter": "is_drawing_tabs",
            "type": "bool"
          },
          {
            "default": "2",
            "setter": "set_focus_mode",
            "override": "true",
            "name": "focus_mode",
            "getter": "get_focus_mode",
            "type": "int",
            "enum": "Control.FocusMode"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the fold gutter is visible. This enables folding groups of indented lines.",
            "setter": "set_draw_fold_gutter",
            "name": "fold_gutter",
            "getter": "is_drawing_fold_gutter",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], all lines that have been set to hidden by [method set_line_as_hidden], will not be visible.",
            "setter": "set_hiding_enabled",
            "name": "hiding_enabled",
            "getter": "is_hiding_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], all occurrences of the selected text will be highlighted.",
            "setter": "set_highlight_all_occurrences",
            "name": "highlight_all_occurrences",
            "getter": "is_highlight_all_occurrences_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the line containing the cursor is highlighted.",
            "setter": "set_highlight_current_line",
            "name": "highlight_current_line",
            "getter": "is_highlight_current_line_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], a minimap is shown, providing an outline of your source code.",
            "setter": "draw_minimap",
            "name": "minimap_draw",
            "getter": "is_drawing_minimap",
            "type": "bool"
          },
          {
            "default": "80",
            "value": "The width, in pixels, of the minimap.",
            "setter": "set_minimap_width",
            "name": "minimap_width",
            "getter": "get_minimap_width",
            "type": "int"
          },
          {
            "default": "1",
            "setter": "set_default_cursor_shape",
            "override": "true",
            "name": "mouse_default_cursor_shape",
            "getter": "get_default_cursor_shape",
            "type": "int",
            "enum": "Control.CursorShape"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], custom [code]font_color_selected[/code] will be used for selected text.",
            "setter": "set_override_selected_font_color",
            "name": "override_selected_font_color",
            "getter": "is_overriding_selected_font_color",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], read-only mode is enabled. Existing text cannot be modified and new text cannot be added.",
            "setter": "set_readonly",
            "name": "readonly",
            "getter": "is_readonly",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "The current horizontal scroll value.",
            "setter": "set_h_scroll",
            "name": "scroll_horizontal",
            "getter": "get_h_scroll",
            "type": "int"
          },
          {
            "default": "0.0",
            "value": "The current vertical scroll value.",
            "setter": "set_v_scroll",
            "name": "scroll_vertical",
            "getter": "get_v_scroll",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], text can be selected.\n\t\t\tIf [code]false[/code], text can not be selected by the user or by the [method select] or [method select_all] methods.",
            "setter": "set_selecting_enabled",
            "name": "selecting_enabled",
            "getter": "is_selecting_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], shortcut keys for context menu items are enabled, even if the context menu is disabled.",
            "setter": "set_shortcut_keys_enabled",
            "name": "shortcut_keys_enabled",
            "getter": "is_shortcut_keys_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], line numbers are displayed to the left of the text.",
            "setter": "set_show_line_numbers",
            "name": "show_line_numbers",
            "getter": "is_show_line_numbers_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], sets the [code]step[/code] of the scrollbars to [code]0.25[/code] which results in smoother scrolling.",
            "setter": "set_smooth_scroll_enable",
            "name": "smooth_scrolling",
            "getter": "is_smooth_scroll_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], any custom color properties that have been set for this [TextEdit] will be visible.",
            "setter": "set_syntax_coloring",
            "name": "syntax_highlighting",
            "getter": "is_syntax_coloring_enabled",
            "type": "bool"
          },
          {
            "default": "\"\"",
            "value": "String value of the [TextEdit].",
            "setter": "set_text",
            "name": "text",
            "getter": "get_text",
            "type": "String"
          },
          {
            "default": "80.0",
            "value": "Vertical scroll sensitivity.",
            "setter": "set_v_scroll_speed",
            "name": "v_scroll_speed",
            "getter": "get_v_scroll_speed",
            "type": "float"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the native virtual keyboard is shown when focused on platforms that support it.",
            "setter": "set_virtual_keyboard_enabled",
            "name": "virtual_keyboard_enabled",
            "getter": "is_virtual_keyboard_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], enables text wrapping when it goes beyond the edge of what is visible.",
            "setter": "set_wrap_enabled",
            "name": "wrap_enabled",
            "getter": "is_wrap_enabled",
            "type": "bool"
          }
        ]
      },
      "inherits": "Control",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "begin_key",
                "type": "String",
                "index": "0"
              },
              {
                "name": "end_key",
                "type": "String",
                "index": "1"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "2"
              },
              {
                "default": "false",
                "name": "line_only",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "add_color_region",
            "description": "Adds color region (given the delimiters) and its colors."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "keyword",
                "type": "String",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "add_keyword_color",
            "description": "Adds a [code]keyword[/code] and its [Color]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "line",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "can_fold",
            "description": "Returns if the given line is foldable, that is, it has indented lines right below it."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "center_viewport_to_cursor",
            "description": "Centers the viewport on the line the editing cursor is at. This also resets the [member scroll_horizontal] value to [code]0[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_colors",
            "description": "Clears all custom syntax coloring information previously added with [method add_color_region] or [method add_keyword_color]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_undo_history",
            "description": "Clears the undo history."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "copy",
            "description": "Copy's the current text selection."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "cursor_get_column",
            "description": "Returns the column the editing cursor is at."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "cursor_get_line",
            "description": "Returns the line the editing cursor is at."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "default": "true",
                "name": "adjust_viewport",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "cursor_set_column",
            "description": "Moves the cursor at the specified [code]column[/code] index.\n\t\t\t\tIf [code]adjust_viewport[/code] is set to [code]true[/code], the viewport will center at the cursor position after the move occurs."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "line",
                "type": "int",
                "index": "0"
              },
              {
                "default": "true",
                "name": "adjust_viewport",
                "type": "bool",
                "index": "1"
              },
              {
                "default": "true",
                "name": "can_be_hidden",
                "type": "bool",
                "index": "2"
              },
              {
                "default": "0",
                "name": "wrap_index",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "cursor_set_line",
            "description": "Moves the cursor at the specified [code]line[/code] index.\n\t\t\t\tIf [code]adjust_viewport[/code] is set to [code]true[/code], the viewport will center at the cursor position after the move occurs.\n\t\t\t\tIf [code]can_be_hidden[/code] is set to [code]true[/code], the specified [code]line[/code] can be hidden using [method set_line_as_hidden]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "cut",
            "description": "Cut's the current selection."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "deselect",
            "description": "Deselects the current selection."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "fold_all_lines",
            "description": "Folds all lines that are possible to be folded (see [method can_fold])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "line",
              "type": "int",
              "index": "0"
            },
            "name": "fold_line",
            "description": "Folds the given line, if possible (see [method can_fold])."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_breakpoints",
            "description": "Returns an array containing the line number of each breakpoint."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "keyword",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_keyword_color",
            "description": "Returns the [Color] of the specified [code]keyword[/code]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "line",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_line",
            "description": "Returns the text of a specific line."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_line_count",
            "description": "Returns the amount of total lines in the text."
          },
          {
            "return": {
              "type": "PopupMenu"
            },
            "qualifiers": "const",
            "name": "get_menu",
            "description": "Returns the [PopupMenu] of this [TextEdit]. By default, this menu is displayed when right-clicking on the [TextEdit]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_selection_from_column",
            "description": "Returns the selection begin column."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_selection_from_line",
            "description": "Returns the selection begin line."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_selection_text",
            "description": "Returns the text inside the selection."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_selection_to_column",
            "description": "Returns the selection end column."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_selection_to_line",
            "description": "Returns the selection end line."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_word_under_cursor",
            "description": "Returns a [String] text with the word under the caret (text cursor) location."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "keyword",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_keyword_color",
            "description": "Returns whether the specified [code]keyword[/code] has a color set to it or not."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "text",
              "type": "String",
              "index": "0"
            },
            "name": "insert_text_at_cursor",
            "description": "Insert the specified text at the cursor position."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "line",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_folded",
            "description": "Returns whether the line at the specified index is folded or not."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "line",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_line_hidden",
            "description": "Returns whether the line at the specified index is hidden or not."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "line",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_line_set_as_bookmark",
            "description": "Returns [code]true[/code] when the specified [code]line[/code] is bookmarked."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "line",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_line_set_as_breakpoint",
            "description": "Returns [code]true[/code] when the specified [code]line[/code] has a breakpoint."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "line",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_line_set_as_safe",
            "description": "Returns [code]true[/code] when the specified [code]line[/code] is marked as safe."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_selection_active",
            "description": "Returns [code]true[/code] if the selection is active."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "option",
              "type": "int",
              "index": "0"
            },
            "name": "menu_option",
            "description": "Triggers a right-click menu action by the specified index. See [enum MenuItems] for a list of available indexes."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "paste",
            "description": "Paste the current selection."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "redo",
            "description": "Perform redo operation."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "remove_breakpoints",
            "description": "Removes all the breakpoints. This will not fire the [signal breakpoint_toggled] signal."
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "argument": [
              {
                "name": "key",
                "type": "String",
                "index": "0"
              },
              {
                "name": "flags",
                "type": "int",
                "index": "1"
              },
              {
                "name": "from_line",
                "type": "int",
                "index": "2"
              },
              {
                "name": "from_column",
                "type": "int",
                "index": "3"
              }
            ],
            "qualifiers": "const",
            "name": "search",
            "description": "Perform a search inside the text. Search flags can be specified in the [enum SearchFlags] enum.\n\t\t\t\tReturns an empty [code]PoolIntArray[/code] if no result was found. Otherwise, the result line and column can be accessed at indices specified in the [enum SearchResult] enum, e.g:\n\t\t\t\t[codeblock]\n\t\t\t\tvar result = search(key, flags, line, column)\n\t\t\t\tif result.size() > 0:\n\t\t\t\t    # Result found.\n\t\t\t\t    var res_line = result[TextEdit.SEARCH_RESULT_LINE]\n\t\t\t\t    var res_column = result[TextEdit.SEARCH_RESULT_COLUMN]\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "from_line",
                "type": "int",
                "index": "0"
              },
              {
                "name": "from_column",
                "type": "int",
                "index": "1"
              },
              {
                "name": "to_line",
                "type": "int",
                "index": "2"
              },
              {
                "name": "to_column",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "select",
            "description": "Perform selection, from line/column to line/column.\n\t\t\t\tIf [member selecting_enabled] is [code]false[/code], no selection will occur."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "select_all",
            "description": "Select all the text.\n\t\t\t\tIf [member selecting_enabled] is [code]false[/code], no selection will occur."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "line",
                "type": "int",
                "index": "0"
              },
              {
                "name": "new_text",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set_line",
            "description": "Sets the text for a specific line."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "line",
                "type": "int",
                "index": "0"
              },
              {
                "name": "bookmark",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_line_as_bookmark",
            "description": "Bookmarks the [code]line[/code] if [code]bookmark[/code] is true. Deletes the bookmark if [code]bookmark[/code] is false.\n\t\t\t\tBookmarks are shown in the [member breakpoint_gutter]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "line",
                "type": "int",
                "index": "0"
              },
              {
                "name": "breakpoint",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_line_as_breakpoint",
            "description": "Adds or removes the breakpoint in [code]line[/code]. Breakpoints are shown in the [member breakpoint_gutter]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "line",
                "type": "int",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_line_as_hidden",
            "description": "If [code]true[/code], hides the line of the specified index."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "line",
                "type": "int",
                "index": "0"
              },
              {
                "name": "safe",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_line_as_safe",
            "description": "If [code]true[/code], marks the [code]line[/code] as safe.\n\t\t\t\tThis will show the line number with the color provided in the [code]safe_line_number_color[/code] theme property."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "line",
              "type": "int",
              "index": "0"
            },
            "name": "toggle_fold_line",
            "description": "Toggle the folding of the code block at the given line."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "undo",
            "description": "Perform undo operation."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "line",
              "type": "int",
              "index": "0"
            },
            "name": "unfold_line",
            "description": "Unfolds the given line, if folded."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "unhide_all_lines",
            "description": "Unhide all lines that were previously set to hidden by [method set_line_as_hidden]."
          }
        ]
      },
      "name": "TextEdit",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "row",
              "type": "int",
              "index": "0"
            },
            "name": "breakpoint_toggled",
            "description": "Emitted when a breakpoint is placed via the breakpoint gutter."
          },
          {
            "name": "cursor_changed",
            "description": "Emitted when the cursor changes."
          },
          {
            "argument": [
              {
                "name": "row",
                "type": "int",
                "index": "0"
              },
              {
                "name": "info",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "info_clicked",
            "description": "Emitted when the info icon is clicked."
          },
          {
            "name": "request_completion",
            "description": {}
          },
          {
            "argument": [
              {
                "name": "symbol",
                "type": "String",
                "index": "0"
              },
              {
                "name": "row",
                "type": "int",
                "index": "1"
              },
              {
                "name": "column",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "symbol_lookup",
            "description": {}
          },
          {
            "name": "text_changed",
            "description": "Emitted when the text changes."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "1",
            "name": "SEARCH_MATCH_CASE",
            "enum": "SearchFlags"
          },
          {
            "value": "2",
            "name": "SEARCH_WHOLE_WORDS",
            "enum": "SearchFlags"
          },
          {
            "value": "4",
            "name": "SEARCH_BACKWARDS",
            "enum": "SearchFlags"
          },
          {
            "value": "0",
            "name": "SEARCH_RESULT_COLUMN",
            "enum": "SearchResult"
          },
          {
            "value": "1",
            "name": "SEARCH_RESULT_LINE",
            "enum": "SearchResult"
          },
          {
            "value": "0",
            "name": "MENU_CUT",
            "enum": "MenuItems"
          },
          {
            "value": "1",
            "name": "MENU_COPY",
            "enum": "MenuItems"
          },
          {
            "value": "2",
            "name": "MENU_PASTE",
            "enum": "MenuItems"
          },
          {
            "value": "3",
            "name": "MENU_CLEAR",
            "enum": "MenuItems"
          },
          {
            "value": "4",
            "name": "MENU_SELECT_ALL",
            "enum": "MenuItems"
          },
          {
            "value": "5",
            "name": "MENU_UNDO",
            "enum": "MenuItems"
          },
          {
            "value": "6",
            "name": "MENU_REDO",
            "enum": "MenuItems"
          },
          {
            "value": "7",
            "name": "MENU_MAX",
            "enum": "MenuItems"
          }
        ]
      },
      "brief_description": "Multiline text editing control.",
      "description": "TextEdit is meant for editing large, multiline text. It also has facilities for editing code, such as syntax highlighting support and multiple levels of undo/redo."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Resource",
      "methods": {},
      "name": "TextFile",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "{\"depth\": 0,\"flags\": 4,\"format\": 37,\"height\": 0,\"layers\": [  ],\"width\": 0}",
          "setter": "_set_data",
          "override": "true",
          "name": "data",
          "getter": "_get_data",
          "type": "Dictionary"
        }
      },
      "inherits": "TextureLayered",
      "methods": {},
      "name": "Texture3D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Texture with 3 dimensions.",
      "description": "Texture3D is a 3-dimensional texture that has a width, height, and depth."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "TextureLayered",
      "methods": {},
      "name": "TextureArray",
      "version": "3.3",
      "constants": {},
      "brief_description": "Array of textures stored in a single primitive.",
      "description": "[TextureArray]s store an array of [Image]s in a single [Texture] primitive. Each layer of the texture array has its own mipmap chain. This makes it is a good alternative to texture atlases.\n\t\t[TextureArray]s must be displayed using shaders. After importing your file as a [TextureArray] and setting the appropriate Horizontal and Vertical Slices, display it by setting it as a uniform to a shader, for example:\n\t\t[codeblock]\n\t\tshader_type canvas_item;\n\n\t\tuniform sampler2DArray tex;\n\t\tuniform int index;\n\n\t\tvoid fragment() {\n\t\t    COLOR = texture(tex, vec3(UV.x, UV.y, float(index)));\n\t\t}\n\t\t[/codeblock]\n\t\tSet the integer uniform \"index\" to show a particular part of the texture as defined by the Horizontal and Vertical Slices in the importer."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/676",
          "title": "3D Voxel Demo"
        }
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the texture stretches to the edges of the node's bounding rectangle using the [member stretch_mode]. If [code]false[/code], the texture will not scale with the node.",
            "setter": "set_expand",
            "name": "expand",
            "getter": "get_expand",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "Controls the texture's behavior when you resize the node's bounding rectangle, [b]only if[/b] [member expand] is [code]true[/code]. Set it to one of the [enum StretchMode] constants. See the constants to learn more.",
            "setter": "set_stretch_mode",
            "name": "stretch_mode",
            "getter": "get_stretch_mode",
            "type": "int",
            "enum": "TextureButton.StretchMode"
          },
          {
            "value": "Pure black and white [BitMap] image to use for click detection. On the mask, white pixels represent the button's clickable area. Use it to create buttons with curved shapes.",
            "setter": "set_click_mask",
            "name": "texture_click_mask",
            "getter": "get_click_mask",
            "type": "BitMap"
          },
          {
            "value": "Texture to display when the node is disabled. See [member BaseButton.disabled].",
            "setter": "set_disabled_texture",
            "name": "texture_disabled",
            "getter": "get_disabled_texture",
            "type": "Texture"
          },
          {
            "value": "Texture to display when the node has mouse or keyboard focus.",
            "setter": "set_focused_texture",
            "name": "texture_focused",
            "getter": "get_focused_texture",
            "type": "Texture"
          },
          {
            "value": "Texture to display when the mouse hovers the node.",
            "setter": "set_hover_texture",
            "name": "texture_hover",
            "getter": "get_hover_texture",
            "type": "Texture"
          },
          {
            "value": "Texture to display by default, when the node is [b]not[/b] in the disabled, focused, hover or pressed state.",
            "setter": "set_normal_texture",
            "name": "texture_normal",
            "getter": "get_normal_texture",
            "type": "Texture"
          },
          {
            "value": "Texture to display on mouse down over the node, if the node has keyboard focus and the player presses the Enter key or if the player presses the [member BaseButton.shortcut] key.",
            "setter": "set_pressed_texture",
            "name": "texture_pressed",
            "getter": "get_pressed_texture",
            "type": "Texture"
          }
        ]
      },
      "inherits": "BaseButton",
      "methods": {},
      "name": "TextureButton",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "STRETCH_SCALE",
            "enum": "StretchMode"
          },
          {
            "value": "1",
            "name": "STRETCH_TILE",
            "enum": "StretchMode"
          },
          {
            "value": "2",
            "name": "STRETCH_KEEP",
            "enum": "StretchMode"
          },
          {
            "value": "3",
            "name": "STRETCH_KEEP_CENTERED",
            "enum": "StretchMode"
          },
          {
            "value": "4",
            "name": "STRETCH_KEEP_ASPECT",
            "enum": "StretchMode"
          },
          {
            "value": "5",
            "name": "STRETCH_KEEP_ASPECT_CENTERED",
            "enum": "StretchMode"
          },
          {
            "value": "6",
            "name": "STRETCH_KEEP_ASPECT_COVERED",
            "enum": "StretchMode"
          }
        ]
      },
      "brief_description": "Texture-based button. Supports Pressed, Hover, Disabled and Focused states.",
      "description": "[TextureButton] has the same functionality as [Button], except it uses sprites instead of Godot's [Theme] resource. It is faster to create, but it doesn't support localization like more complex [Control]s.\n\t\tThe \"normal\" state must contain a texture ([member texture_normal]); other textures are optional.\n\t\tSee also [BaseButton] which contains common properties and methods associated with this node."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "{\"depth\": 0,\"flags\": 4,\"format\": 37,\"height\": 0,\"layers\": [  ],\"width\": 0}",
            "value": "Returns a dictionary with all the data used by this texture.",
            "setter": "_set_data",
            "name": "data",
            "getter": "_get_data",
            "type": "Dictionary"
          },
          {
            "default": "4",
            "value": "Specifies which [enum Flags] apply to this texture.",
            "setter": "set_flags",
            "name": "flags",
            "getter": "get_flags",
            "type": "int"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "width",
                "type": "int",
                "index": "0"
              },
              {
                "name": "height",
                "type": "int",
                "index": "1"
              },
              {
                "name": "depth",
                "type": "int",
                "index": "2"
              },
              {
                "name": "format",
                "type": "int",
                "enum": "Image.Format",
                "index": "3"
              },
              {
                "default": "4",
                "name": "flags",
                "type": "int",
                "index": "4"
              }
            ],
            "name": "create",
            "description": "Creates the [Texture3D] or [TextureArray] with specified [code]width[/code], [code]height[/code], and [code]depth[/code]. See [enum Image.Format] for [code]format[/code] options. See [enum Flags] enumerator for [code]flags[/code] options."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_depth",
            "description": "Returns the depth of the texture. Depth is the 3rd dimension (typically Z-axis)."
          },
          {
            "return": {
              "type": "int",
              "enum": "Image.Format"
            },
            "qualifiers": "const",
            "name": "get_format",
            "description": "Returns the current format being used by this texture. See [enum Image.Format] for details."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_height",
            "description": "Returns the height of the texture. Height is typically represented by the Y-axis."
          },
          {
            "return": {
              "type": "Image"
            },
            "argument": {
              "name": "layer",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_layer_data",
            "description": "Returns an [Image] resource with the data from specified [code]layer[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_width",
            "description": "Returns the width of the texture. Width is typically represented by the X-axis."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "image",
                "type": "Image",
                "index": "0"
              },
              {
                "name": "x_offset",
                "type": "int",
                "index": "1"
              },
              {
                "name": "y_offset",
                "type": "int",
                "index": "2"
              },
              {
                "name": "layer",
                "type": "int",
                "index": "3"
              },
              {
                "default": "0",
                "name": "mipmap",
                "type": "int",
                "index": "4"
              }
            ],
            "name": "set_data_partial",
            "description": "Partially sets the data for a specified [code]layer[/code] by overwriting using the data of the specified [code]image[/code]. [code]x_offset[/code] and [code]y_offset[/code] determine where the [Image] is \"stamped\" over the texture. The [code]image[/code] must fit within the texture."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "image",
                "type": "Image",
                "index": "0"
              },
              {
                "name": "layer",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set_layer_data",
            "description": "Sets the data for the specified layer. Data takes the form of a 2-dimensional [Image] resource."
          }
        ]
      },
      "name": "TextureLayered",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "1",
            "name": "FLAG_MIPMAPS",
            "enum": "Flags"
          },
          {
            "value": "2",
            "name": "FLAG_REPEAT",
            "enum": "Flags"
          },
          {
            "value": "4",
            "name": "FLAG_FILTER",
            "enum": "Flags"
          },
          {
            "value": "4",
            "name": "FLAGS_DEFAULT",
            "enum": "Flags"
          }
        ]
      },
      "brief_description": "Base class for 3D texture types.",
      "description": "Base class for [Texture3D] and [TextureArray]. Cannot be used directly, but contains all the functions necessary for accessing and using [Texture3D] and [TextureArray]. Data is set on a per-layer basis. For [Texture3D]s, the layer specifies the depth or Z-index, they can be treated as a bunch of 2D slices. Similarly, for [TextureArray]s, the layer specifies the array layer."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0",
            "value": "The fill direction. See [enum FillMode] for possible values.",
            "setter": "set_fill_mode",
            "name": "fill_mode",
            "getter": "get_fill_mode",
            "type": "int"
          },
          {
            "default": "1",
            "setter": "set_mouse_filter",
            "override": "true",
            "name": "mouse_filter",
            "getter": "get_mouse_filter",
            "type": "int",
            "enum": "Control.MouseFilter"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], Godot treats the bar's textures like in [NinePatchRect]. Use the [code]stretch_margin_*[/code] properties like [member stretch_margin_bottom] to set up the nine patch's 3×3 grid. When using a radial [member fill_mode], this setting will enable stretching.",
            "setter": "set_nine_patch_stretch",
            "name": "nine_patch_stretch",
            "getter": "get_nine_patch_stretch",
            "type": "bool"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "Offsets [member texture_progress] if [member fill_mode] is [constant FILL_CLOCKWISE] or [constant FILL_COUNTER_CLOCKWISE].",
            "setter": "set_radial_center_offset",
            "name": "radial_center_offset",
            "getter": "get_radial_center_offset",
            "type": "Vector2"
          },
          {
            "default": "360.0",
            "value": "Upper limit for the fill of [member texture_progress] if [member fill_mode] is [constant FILL_CLOCKWISE] or [constant FILL_COUNTER_CLOCKWISE]. When the node's [code]value[/code] is equal to its [code]max_value[/code], the texture fills up to this angle.\n\t\t\tSee [member Range.value], [member Range.max_value].",
            "setter": "set_fill_degrees",
            "name": "radial_fill_degrees",
            "getter": "get_fill_degrees",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Starting angle for the fill of [member texture_progress] if [member fill_mode] is [constant FILL_CLOCKWISE] or [constant FILL_COUNTER_CLOCKWISE]. When the node's [code]value[/code] is equal to its [code]min_value[/code], the texture doesn't show up at all. When the [code]value[/code] increases, the texture fills and tends towards [member radial_fill_degrees].",
            "setter": "set_radial_initial_angle",
            "name": "radial_initial_angle",
            "getter": "get_radial_initial_angle",
            "type": "float"
          },
          {
            "default": "0",
            "value": "The height of the 9-patch's bottom row. A margin of 16 means the 9-slice's bottom corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders.",
            "setter": "set_stretch_margin",
            "name": "stretch_margin_bottom",
            "getter": "get_stretch_margin",
            "type": "int"
          },
          {
            "default": "0",
            "value": "The width of the 9-patch's left column.",
            "setter": "set_stretch_margin",
            "name": "stretch_margin_left",
            "getter": "get_stretch_margin",
            "type": "int"
          },
          {
            "default": "0",
            "value": "The width of the 9-patch's right column.",
            "setter": "set_stretch_margin",
            "name": "stretch_margin_right",
            "getter": "get_stretch_margin",
            "type": "int"
          },
          {
            "default": "0",
            "value": "The height of the 9-patch's top row.",
            "setter": "set_stretch_margin",
            "name": "stretch_margin_top",
            "getter": "get_stretch_margin",
            "type": "int"
          },
          {
            "value": "[Texture] that draws over the progress bar. Use it to add highlights or an upper-frame that hides part of [member texture_progress].",
            "setter": "set_over_texture",
            "name": "texture_over",
            "getter": "get_over_texture",
            "type": "Texture"
          },
          {
            "value": "[Texture] that clips based on the node's [code]value[/code] and [member fill_mode]. As [code]value[/code] increased, the texture fills up. It shows entirely when [code]value[/code] reaches [code]max_value[/code]. It doesn't show at all if [code]value[/code] is equal to [code]min_value[/code].\n\t\t\tThe [code]value[/code] property comes from [Range]. See [member Range.value], [member Range.min_value], [member Range.max_value].",
            "setter": "set_progress_texture",
            "name": "texture_progress",
            "getter": "get_progress_texture",
            "type": "Texture"
          },
          {
            "value": "[Texture] that draws under the progress bar. The bar's background.",
            "setter": "set_under_texture",
            "name": "texture_under",
            "getter": "get_under_texture",
            "type": "Texture"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "Multiplies the color of the bar's [code]texture_over[/code] texture. The effect is similar to [member CanvasItem.modulate], except it only affects this specific texture instead of the entire node.",
            "setter": "set_tint_over",
            "name": "tint_over",
            "getter": "get_tint_over",
            "type": "Color"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "Multiplies the color of the bar's [code]texture_progress[/code] texture.",
            "setter": "set_tint_progress",
            "name": "tint_progress",
            "getter": "get_tint_progress",
            "type": "Color"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "Multiplies the color of the bar's [code]texture_under[/code] texture.",
            "setter": "set_tint_under",
            "name": "tint_under",
            "getter": "get_tint_under",
            "type": "Color"
          }
        ]
      },
      "inherits": "Range",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "margin",
              "type": "int",
              "enum": "Margin",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_stretch_margin",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "margin",
                "type": "int",
                "enum": "Margin",
                "index": "0"
              },
              {
                "name": "value",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set_stretch_margin",
            "description": {}
          }
        ]
      },
      "name": "TextureProgress",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "FILL_LEFT_TO_RIGHT",
            "enum": "FillMode"
          },
          {
            "value": "1",
            "name": "FILL_RIGHT_TO_LEFT",
            "enum": "FillMode"
          },
          {
            "value": "2",
            "name": "FILL_TOP_TO_BOTTOM",
            "enum": "FillMode"
          },
          {
            "value": "3",
            "name": "FILL_BOTTOM_TO_TOP",
            "enum": "FillMode"
          },
          {
            "value": "4",
            "name": "FILL_CLOCKWISE",
            "enum": "FillMode"
          },
          {
            "value": "5",
            "name": "FILL_COUNTER_CLOCKWISE",
            "enum": "FillMode"
          },
          {
            "value": "6",
            "name": "FILL_BILINEAR_LEFT_AND_RIGHT",
            "enum": "FillMode"
          },
          {
            "value": "7",
            "name": "FILL_BILINEAR_TOP_AND_BOTTOM",
            "enum": "FillMode"
          },
          {
            "value": "8",
            "name": "FILL_CLOCKWISE_AND_COUNTER_CLOCKWISE",
            "enum": "FillMode"
          }
        ]
      },
      "brief_description": "Texture-based progress bar. Useful for loading screens and life or stamina bars.",
      "description": "TextureProgress works like [ProgressBar], but uses up to 3 textures instead of Godot's [Theme] resource. It can be used to create horizontal, vertical and radial progress bars."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/676",
          "title": "3D Voxel Demo"
        }
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the texture scales to fit its bounding rectangle.",
            "setter": "set_expand",
            "name": "expand",
            "getter": "has_expand",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], texture is flipped horizontally.",
            "setter": "set_flip_h",
            "name": "flip_h",
            "getter": "is_flipped_h",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], texture is flipped vertically.",
            "setter": "set_flip_v",
            "name": "flip_v",
            "getter": "is_flipped_v",
            "type": "bool"
          },
          {
            "default": "1",
            "setter": "set_mouse_filter",
            "override": "true",
            "name": "mouse_filter",
            "getter": "get_mouse_filter",
            "type": "int",
            "enum": "Control.MouseFilter"
          },
          {
            "default": "0",
            "value": "Controls the texture's behavior when resizing the node's bounding rectangle. See [enum StretchMode].",
            "setter": "set_stretch_mode",
            "name": "stretch_mode",
            "getter": "get_stretch_mode",
            "type": "int",
            "enum": "TextureRect.StretchMode"
          },
          {
            "value": "The node's [Texture] resource.",
            "setter": "set_texture",
            "name": "texture",
            "getter": "get_texture",
            "type": "Texture"
          }
        ]
      },
      "inherits": "Control",
      "methods": {},
      "name": "TextureRect",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "STRETCH_SCALE_ON_EXPAND",
            "enum": "StretchMode"
          },
          {
            "value": "1",
            "name": "STRETCH_SCALE",
            "enum": "StretchMode"
          },
          {
            "value": "2",
            "name": "STRETCH_TILE",
            "enum": "StretchMode"
          },
          {
            "value": "3",
            "name": "STRETCH_KEEP",
            "enum": "StretchMode"
          },
          {
            "value": "4",
            "name": "STRETCH_KEEP_CENTERED",
            "enum": "StretchMode"
          },
          {
            "value": "5",
            "name": "STRETCH_KEEP_ASPECT",
            "enum": "StretchMode"
          },
          {
            "value": "6",
            "name": "STRETCH_KEEP_ASPECT_CENTERED",
            "enum": "StretchMode"
          },
          {
            "value": "7",
            "name": "STRETCH_KEEP_ASPECT_COVERED",
            "enum": "StretchMode"
          }
        ]
      },
      "brief_description": "Control for drawing textures.",
      "description": "Used to draw icons and sprites in a user interface. The texture's placement can be controlled with the [member stretch_mode] property. It can scale, tile, or stay centered inside its bounding rectangle.\n\t\t[b]Note:[/b] You should enable [member flip_v] when using a TextureRect to display a [ViewportTexture]. Alternatively, you can enable [member Viewport.render_target_v_flip] on the Viewport. Otherwise, the image will appear upside down."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "4",
          "value": "The texture's [enum Flags]. [enum Flags] are used to set various properties of the [Texture].",
          "setter": "set_flags",
          "name": "flags",
          "getter": "get_flags",
          "type": "int"
        }
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "canvas_item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector2",
                "index": "1"
              },
              {
                "default": "Color( 1, 1, 1, 1 )",
                "name": "modulate",
                "type": "Color",
                "index": "2"
              },
              {
                "default": "false",
                "name": "transpose",
                "type": "bool",
                "index": "3"
              },
              {
                "default": "null",
                "name": "normal_map",
                "type": "Texture",
                "index": "4"
              }
            ],
            "qualifiers": "const",
            "name": "draw",
            "description": "Draws the texture using a [CanvasItem] with the [VisualServer] API at the specified [code]position[/code]. Equivalent to [method VisualServer.canvas_item_add_texture_rect] with a rect at [code]position[/code] and the size of this [Texture]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "canvas_item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "rect",
                "type": "Rect2",
                "index": "1"
              },
              {
                "name": "tile",
                "type": "bool",
                "index": "2"
              },
              {
                "default": "Color( 1, 1, 1, 1 )",
                "name": "modulate",
                "type": "Color",
                "index": "3"
              },
              {
                "default": "false",
                "name": "transpose",
                "type": "bool",
                "index": "4"
              },
              {
                "default": "null",
                "name": "normal_map",
                "type": "Texture",
                "index": "5"
              }
            ],
            "qualifiers": "const",
            "name": "draw_rect",
            "description": "Draws the texture using a [CanvasItem] with the [VisualServer] API. Equivalent to [method VisualServer.canvas_item_add_texture_rect]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "canvas_item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "rect",
                "type": "Rect2",
                "index": "1"
              },
              {
                "name": "src_rect",
                "type": "Rect2",
                "index": "2"
              },
              {
                "default": "Color( 1, 1, 1, 1 )",
                "name": "modulate",
                "type": "Color",
                "index": "3"
              },
              {
                "default": "false",
                "name": "transpose",
                "type": "bool",
                "index": "4"
              },
              {
                "default": "null",
                "name": "normal_map",
                "type": "Texture",
                "index": "5"
              },
              {
                "default": "true",
                "name": "clip_uv",
                "type": "bool",
                "index": "6"
              }
            ],
            "qualifiers": "const",
            "name": "draw_rect_region",
            "description": "Draws a part of the texture using a [CanvasItem] with the [VisualServer] API. Equivalent to [method VisualServer.canvas_item_add_texture_rect_region]."
          },
          {
            "return": {
              "type": "Image"
            },
            "qualifiers": "const",
            "name": "get_data",
            "description": "Returns an [Image] that is a copy of data from this [Texture]. [Image]s can be accessed and manipulated directly."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_height",
            "description": "Returns the texture height."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_size",
            "description": "Returns the texture size."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_width",
            "description": "Returns the texture width."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "has_alpha",
            "description": "Returns [code]true[/code] if this [Texture] has an alpha channel."
          }
        ]
      },
      "name": "Texture",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "7",
            "name": "FLAGS_DEFAULT",
            "enum": "Flags"
          },
          {
            "value": "1",
            "name": "FLAG_MIPMAPS",
            "enum": "Flags"
          },
          {
            "value": "2",
            "name": "FLAG_REPEAT",
            "enum": "Flags"
          },
          {
            "value": "4",
            "name": "FLAG_FILTER",
            "enum": "Flags"
          },
          {
            "value": "8",
            "name": "FLAG_ANISOTROPIC_FILTER",
            "enum": "Flags"
          },
          {
            "value": "16",
            "name": "FLAG_CONVERT_TO_LINEAR",
            "enum": "Flags"
          },
          {
            "value": "32",
            "name": "FLAG_MIRRORED_REPEAT",
            "enum": "Flags"
          },
          {
            "value": "2048",
            "name": "FLAG_VIDEO_SURFACE",
            "enum": "Flags"
          }
        ]
      },
      "brief_description": "Texture for 2D and 3D.",
      "description": "A texture works by registering an image in the video hardware, which then can be used in 3D models or 2D [Sprite] or GUI [Control].\n\t\tTextures are often created by loading them from a file. See [method @GDScript.load].\n\t\t[Texture] is a base for other resources. It cannot be used directly.\n\t\t[b]Note:[/b] The maximum texture size is 16384×16384 pixels due to graphics hardware limitations. Larger textures may fail to import."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/gui/gui_skinning.html"
      },
      "members": {
        "member": {
          "value": "The theme's default font.",
          "setter": "set_default_font",
          "name": "default_font",
          "getter": "get_default_font",
          "type": "Font"
        }
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Clears all values on the theme."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "clear_color",
            "description": "Clears the [Color] at [code]name[/code] if the theme has [code]node_type[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "clear_constant",
            "description": "Clears the constant at [code]name[/code] if the theme has [code]node_type[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "clear_font",
            "description": "Clears the [Font] at [code]name[/code] if the theme has [code]node_type[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "clear_icon",
            "description": "Clears the icon at [code]name[/code] if the theme has [code]node_type[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "clear_stylebox",
            "description": "Clears [StyleBox] at [code]name[/code] if the theme has [code]node_type[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "copy_default_theme",
            "description": "Sets the theme's values to a copy of the default theme values."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "other",
              "type": "Theme",
              "index": "0"
            },
            "name": "copy_theme",
            "description": "Sets the theme's values to a copy of a given theme."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_color",
            "description": "Returns the [Color] at [code]name[/code] if the theme has [code]node_type[/code]."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "argument": {
              "name": "node_type",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_color_list",
            "description": "Returns all the [Color]s as a [PoolStringArray] filled with each [Color]'s name, for use in [method get_color], if the theme has [code]node_type[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_constant",
            "description": "Returns the constant at [code]name[/code] if the theme has [code]node_type[/code]."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "argument": {
              "name": "node_type",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_constant_list",
            "description": "Returns all the constants as a [PoolStringArray] filled with each constant's name, for use in [method get_constant], if the theme has [code]node_type[/code]."
          },
          {
            "return": {
              "type": "Font"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_font",
            "description": "Returns the [Font] at [code]name[/code] if the theme has [code]node_type[/code]."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "argument": {
              "name": "node_type",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_font_list",
            "description": "Returns all the [Font]s as a [PoolStringArray] filled with each [Font]'s name, for use in [method get_font], if the theme has [code]node_type[/code]."
          },
          {
            "return": {
              "type": "Texture"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_icon",
            "description": "Returns the icon [Texture] at [code]name[/code] if the theme has [code]node_type[/code]."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "argument": {
              "name": "node_type",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_icon_list",
            "description": "Returns all the icons as a [PoolStringArray] filled with each [Texture]'s name, for use in [method get_icon], if the theme has [code]node_type[/code]."
          },
          {
            "return": {
              "type": "StyleBox"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_stylebox",
            "description": "Returns the [StyleBox] at [code]name[/code] if the theme has [code]node_type[/code].\n\t\t\t\tValid [code]name[/code]s may be found using [method get_stylebox_list]. Valid [code]node_type[/code]s may be found using [method get_stylebox_types]."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "argument": {
              "name": "node_type",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_stylebox_list",
            "description": "Returns all the [StyleBox]s as a [PoolStringArray] filled with each [StyleBox]'s name, for use in [method get_stylebox], if the theme has [code]node_type[/code].\n\t\t\t\tValid [code]node_type[/code]s may be found using [method get_stylebox_types]."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "qualifiers": "const",
            "name": "get_stylebox_types",
            "description": "Returns all the [StyleBox] types as a [PoolStringArray] filled with each [StyleBox]'s type, for use in [method get_stylebox] and/or [method get_stylebox_list], if the theme has [code]node_type[/code]."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "argument": {
              "name": "node_type",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_type_list",
            "description": "Returns all the types in [code]node_type[/code] as a [PoolStringArray] for use in any of the [code]get_*[/code] functions, if the theme has [code]node_type[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "has_color",
            "description": "Returns [code]true[/code] if [Color] with [code]name[/code] is in [code]node_type[/code].\n\t\t\t\tReturns [code]false[/code] if the theme does not have [code]node_type[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "has_constant",
            "description": "Returns [code]true[/code] if constant with [code]name[/code] is in [code]node_type[/code].\n\t\t\t\tReturns [code]false[/code] if the theme does not have [code]node_type[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "has_font",
            "description": "Returns [code]true[/code] if [Font] with [code]name[/code] is in [code]node_type[/code].\n\t\t\t\tReturns [code]false[/code] if the theme does not have [code]node_type[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "has_icon",
            "description": "Returns [code]true[/code] if icon [Texture] with [code]name[/code] is in [code]node_type[/code].\n\t\t\t\tReturns [code]false[/code] if the theme does not have [code]node_type[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node_type",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "has_stylebox",
            "description": "Returns [code]true[/code] if [StyleBox] with [code]name[/code] is in [code]node_type[/code].\n\t\t\t\tReturns [code]false[/code] if the theme does not have [code]node_type[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node_type",
                "type": "String",
                "index": "1"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "2"
              }
            ],
            "name": "set_color",
            "description": "Sets the theme's [Color] to [code]color[/code] at [code]name[/code] in [code]node_type[/code].\n\t\t\t\tDoes nothing if the theme does not have [code]node_type[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node_type",
                "type": "String",
                "index": "1"
              },
              {
                "name": "constant",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "set_constant",
            "description": "Sets the theme's constant to [code]constant[/code] at [code]name[/code] in [code]node_type[/code].\n\t\t\t\tDoes nothing if the theme does not have [code]node_type[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node_type",
                "type": "String",
                "index": "1"
              },
              {
                "name": "font",
                "type": "Font",
                "index": "2"
              }
            ],
            "name": "set_font",
            "description": "Sets the theme's [Font] to [code]font[/code] at [code]name[/code] in [code]node_type[/code].\n\t\t\t\tDoes nothing if the theme does not have [code]node_type[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node_type",
                "type": "String",
                "index": "1"
              },
              {
                "name": "texture",
                "type": "Texture",
                "index": "2"
              }
            ],
            "name": "set_icon",
            "description": "Sets the theme's icon [Texture] to [code]texture[/code] at [code]name[/code] in [code]node_type[/code].\n\t\t\t\tDoes nothing if the theme does not have [code]node_type[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "name": "node_type",
                "type": "String",
                "index": "1"
              },
              {
                "name": "texture",
                "type": "StyleBox",
                "index": "2"
              }
            ],
            "name": "set_stylebox",
            "description": "Sets theme's [StyleBox] to [code]stylebox[/code] at [code]name[/code] in [code]node_type[/code].\n\t\t\t\tDoes nothing if the theme does not have [code]node_type[/code]."
          }
        ]
      },
      "name": "Theme",
      "version": "3.3",
      "constants": {},
      "brief_description": "Theme for controls.",
      "description": "A theme for skinning controls. Controls can be skinned individually, but for complex applications, it's more practical to just create a global theme that defines everything. This theme can be applied to any [Control]; the Control and its children will automatically use it.\n\t\tTheme resources can alternatively be loaded by writing them in a [code].theme[/code] file, see the documentation for more information."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/threads/using_multiple_threads.html",
            "title": "Using multiple threads"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/threads/thread_safe_apis.html",
            "title": "Thread-safe APIs"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/676",
            "title": "3D Voxel Demo"
          }
        ]
      },
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_id",
            "description": "Returns the current [Thread]'s ID, uniquely identifying it among all threads. If the [Thread] is not running this returns an empty string."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_active",
            "description": "Returns [code]true[/code] if this [Thread] is currently active. An active [Thread] cannot start work on a new method but can be joined with [method wait_to_finish]."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "instance",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "method",
                "type": "String",
                "index": "1"
              },
              {
                "default": "null",
                "name": "userdata",
                "type": "Variant",
                "index": "2"
              },
              {
                "default": "1",
                "name": "priority",
                "type": "int",
                "enum": "Thread.Priority",
                "index": "3"
              }
            ],
            "name": "start",
            "description": "Starts a new [Thread] that runs [code]method[/code] on object [code]instance[/code] with [code]userdata[/code] passed as an argument. Even if no userdata is passed, [code]method[/code] must accept one argument and it will be null. The [code]priority[/code] of the [Thread] can be changed by passing a value from the [enum Priority] enum.\n\t\t\t\tReturns [constant OK] on success, or [constant ERR_CANT_CREATE] on failure."
          },
          {
            "return": {
              "type": "Variant"
            },
            "name": "wait_to_finish",
            "description": "Joins the [Thread] and waits for it to finish. Returns what the method called returned."
          }
        ]
      },
      "name": "Thread",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "PRIORITY_LOW",
            "enum": "Priority"
          },
          {
            "value": "1",
            "name": "PRIORITY_NORMAL",
            "enum": "Priority"
          },
          {
            "value": "2",
            "name": "PRIORITY_HIGH",
            "enum": "Priority"
          }
        ]
      },
      "brief_description": "A unit of execution in a process.",
      "description": "A unit of execution in a process. Can run methods on [Object]s simultaneously. The use of synchronization via [Mutex] or [Semaphore] is advised if working with shared objects.\n\t\t[b]Note:[/b] Breakpoints won't break on code if it's running in a thread. This is a current limitation of the GDScript debugger."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/2d/using_tilemaps.html",
            "title": "Using Tilemaps"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/120",
            "title": "2D Platformer Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/112",
            "title": "2D Isometric Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/111",
            "title": "2D Hexagonal Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/519",
            "title": "2D Navigation Astar Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/520",
            "title": "2D Role Playing Game Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/113",
            "title": "2D Kinematic Character Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the cell's UVs will be clipped.",
            "setter": "set_clip_uv",
            "name": "cell_clip_uv",
            "getter": "get_clip_uv",
            "type": "bool"
          },
          {
            "default": "Transform2D( 64, 0, 0, 64, 0, 0 )",
            "value": "The custom [Transform2D] to be applied to the TileMap's cells.",
            "setter": "set_custom_transform",
            "name": "cell_custom_transform",
            "getter": "get_custom_transform",
            "type": "Transform2D"
          },
          {
            "default": "2",
            "value": "Amount to offset alternating tiles. See [enum HalfOffset] for possible values.",
            "setter": "set_half_offset",
            "name": "cell_half_offset",
            "getter": "get_half_offset",
            "type": "int",
            "enum": "TileMap.HalfOffset"
          },
          {
            "default": "16",
            "value": "The TileMap's quadrant size. Optimizes drawing by batching, using chunks of this size.",
            "setter": "set_quadrant_size",
            "name": "cell_quadrant_size",
            "getter": "get_quadrant_size",
            "type": "int"
          },
          {
            "default": "Vector2( 64, 64 )",
            "value": "The TileMap's cell size.",
            "setter": "set_cell_size",
            "name": "cell_size",
            "getter": "get_cell_size",
            "type": "Vector2"
          },
          {
            "default": "0",
            "value": "Position for tile origin. See [enum TileOrigin] for possible values.",
            "setter": "set_tile_origin",
            "name": "cell_tile_origin",
            "getter": "get_tile_origin",
            "type": "int",
            "enum": "TileMap.TileOrigin"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the TileMap's direct children will be drawn in order of their Y coordinate.",
            "setter": "set_y_sort_mode",
            "name": "cell_y_sort",
            "getter": "is_y_sort_mode_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the textures will be centered in the middle of each tile. This is useful for certain isometric or top-down modes when textures are made larger or smaller than the tiles (e.g. to avoid flickering on tile edges). The offset is still applied, but from the center of the tile. If used, [member compatibility_mode] is ignored.\n\t\t\tIf [code]false[/code], the texture position start in the top-left corner unless [member compatibility_mode] is enabled.",
            "setter": "set_centered_textures",
            "name": "centered_textures",
            "getter": "is_centered_textures_enabled",
            "type": "bool"
          },
          {
            "default": "0.0",
            "value": "Bounce value for static body collisions (see [code]collision_use_kinematic[/code]).",
            "setter": "set_collision_bounce",
            "name": "collision_bounce",
            "getter": "get_collision_bounce",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Friction value for static body collisions (see [code]collision_use_kinematic[/code]).",
            "setter": "set_collision_friction",
            "name": "collision_friction",
            "getter": "get_collision_friction",
            "type": "float"
          },
          {
            "default": "1",
            "value": "The collision layer(s) for all colliders in the TileMap. See [url=https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.",
            "setter": "set_collision_layer",
            "name": "collision_layer",
            "getter": "get_collision_layer",
            "type": "int"
          },
          {
            "default": "1",
            "value": "The collision mask(s) for all colliders in the TileMap. See [url=https://docs.godotengine.org/en/3.3/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.",
            "setter": "set_collision_mask",
            "name": "collision_mask",
            "getter": "get_collision_mask",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], TileMap collisions will be handled as a kinematic body. If [code]false[/code], collisions will be handled as static body.",
            "setter": "set_collision_use_kinematic",
            "name": "collision_use_kinematic",
            "getter": "get_collision_use_kinematic",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], this tilemap's collision shape will be added to the collision shape of the parent. The parent has to be a [CollisionObject2D].",
            "setter": "set_collision_use_parent",
            "name": "collision_use_parent",
            "getter": "get_collision_use_parent",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the compatibility with the tilemaps made in Godot 3.1 or earlier is maintained (textures move when the tile origin changes and rotate if the texture size is not homogeneous). This mode presents problems when doing [code]flip_h[/code], [code]flip_v[/code] and [code]transpose[/code] tile operations on non-homogeneous isometric tiles (e.g. 2:1), in which the texture could not coincide with the collision, thus it is not recommended for isometric or non-square tiles.\n\t\t\tIf [code]false[/code], the textures do not move when doing [code]flip_h[/code], [code]flip_v[/code] operations if no offset is used, nor when changing the tile origin.\n\t\t\tThe compatibility mode doesn't work with the [member centered_textures] option, because displacing textures with the [member cell_tile_origin] option or in irregular tiles is not relevant when centering those textures.",
            "setter": "set_compatibility_mode",
            "name": "compatibility_mode",
            "getter": "is_compatibility_mode_enabled",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "The TileMap orientation mode. See [enum Mode] for possible values.",
            "setter": "set_mode",
            "name": "mode",
            "getter": "get_mode",
            "type": "int",
            "enum": "TileMap.Mode"
          },
          {
            "default": "1",
            "value": "The light mask assigned to all light occluders in the TileMap. The TileSet's light occluders will cast shadows only from Light2D(s) that have the same light mask(s).",
            "setter": "set_occluder_light_mask",
            "name": "occluder_light_mask",
            "getter": "get_occluder_light_mask",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], collision shapes are visible in the editor. Doesn't affect collision shapes visibility at runtime. To show collision shapes at runtime, enable [b]Visible Collision Shapes[/b] in the [b]Debug[/b] menu instead.",
            "setter": "set_show_collision",
            "name": "show_collision",
            "getter": "is_show_collision_enabled",
            "type": "bool"
          },
          {
            "value": "The assigned [TileSet].",
            "setter": "set_tileset",
            "name": "tile_set",
            "getter": "get_tileset",
            "type": "TileSet"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Clears all cells."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "fix_invalid_tiles",
            "description": "Clears cells that do not exist in the tileset."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "x",
                "type": "int",
                "index": "0"
              },
              {
                "name": "y",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_cell",
            "description": "Returns the tile index of the given cell. If no tile exists in the cell, returns [constant INVALID_CELL]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "x",
                "type": "int",
                "index": "0"
              },
              {
                "name": "y",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_cell_autotile_coord",
            "description": "Returns the coordinate (subtile column and row) of the autotile variation in the tileset. Returns a zero vector if the cell doesn't have autotiling."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "position",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_cellv",
            "description": "Returns the tile index of the cell given by a Vector2. If no tile exists in the cell, returns [constant INVALID_CELL]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "bit",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_collision_layer_bit",
            "description": "Returns [code]true[/code] if the given collision layer bit is set."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "bit",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_collision_mask_bit",
            "description": "Returns [code]true[/code] if the given collision mask bit is set."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_used_cells",
            "description": "Returns a [Vector2] array with the positions of all cells containing a tile from the tileset (i.e. a tile index different from [code]-1[/code])."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_used_cells_by_id",
            "description": "Returns an array of all cells with the given tile index specified in [code]id[/code]."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "name": "get_used_rect",
            "description": "Returns a rectangle enclosing the used (non-empty) tiles of the map."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "x",
                "type": "int",
                "index": "0"
              },
              {
                "name": "y",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "is_cell_transposed",
            "description": "Returns [code]true[/code] if the given cell is transposed, i.e. the X and Y axes are swapped."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "x",
                "type": "int",
                "index": "0"
              },
              {
                "name": "y",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "is_cell_x_flipped",
            "description": "Returns [code]true[/code] if the given cell is flipped in the X axis."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "x",
                "type": "int",
                "index": "0"
              },
              {
                "name": "y",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "is_cell_y_flipped",
            "description": "Returns [code]true[/code] if the given cell is flipped in the Y axis."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "map_position",
                "type": "Vector2",
                "index": "0"
              },
              {
                "default": "false",
                "name": "ignore_half_ofs",
                "type": "bool",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "map_to_world",
            "description": "Returns the local position of the top left corner of the cell corresponding to the given tilemap (grid-based) coordinates.\n\t\t\t\tTo get the global position, use [method Node2D.to_global]:\n\t\t\t\t[codeblock]\n\t\t\t\tvar local_position = my_tilemap.map_to_world(map_position)\n\t\t\t\tvar global_position = my_tilemap.to_global(local_position)\n\t\t\t\t[/codeblock]\n\t\t\t\tOptionally, the tilemap's half offset can be ignored."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "x",
                "type": "int",
                "index": "0"
              },
              {
                "name": "y",
                "type": "int",
                "index": "1"
              },
              {
                "name": "tile",
                "type": "int",
                "index": "2"
              },
              {
                "default": "false",
                "name": "flip_x",
                "type": "bool",
                "index": "3"
              },
              {
                "default": "false",
                "name": "flip_y",
                "type": "bool",
                "index": "4"
              },
              {
                "default": "false",
                "name": "transpose",
                "type": "bool",
                "index": "5"
              },
              {
                "default": "Vector2( 0, 0 )",
                "name": "autotile_coord",
                "type": "Vector2",
                "index": "6"
              }
            ],
            "name": "set_cell",
            "description": "Sets the tile index for the cell given by a Vector2.\n\t\t\t\tAn index of [code]-1[/code] clears the cell.\n\t\t\t\tOptionally, the tile can also be flipped, transposed, or given autotile coordinates. The autotile coordinate refers to the column and row of the subtile.\n\t\t\t\t[b]Note:[/b] Data such as navigation polygons and collision shapes are not immediately updated for performance reasons.\n\t\t\t\tIf you need these to be immediately updated, you can call [method update_dirty_quadrants].\n\t\t\t\tOverriding this method also overrides it internally, allowing custom logic to be implemented when tiles are placed/removed:\n\t\t\t\t[codeblock]\n\t\t\t\tfunc set_cell(x, y, tile, flip_x=false, flip_y=false, transpose=false, autotile_coord=Vector2()):\n\t\t\t\t    # Write your custom logic here.\n\t\t\t\t    # To call the default method:\n\t\t\t\t    .set_cell(x, y, tile, flip_x, flip_y, transpose, autotile_coord)\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "position",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "tile",
                "type": "int",
                "index": "1"
              },
              {
                "default": "false",
                "name": "flip_x",
                "type": "bool",
                "index": "2"
              },
              {
                "default": "false",
                "name": "flip_y",
                "type": "bool",
                "index": "3"
              },
              {
                "default": "false",
                "name": "transpose",
                "type": "bool",
                "index": "4"
              }
            ],
            "name": "set_cellv",
            "description": "Sets the tile index for the given cell.\n\t\t\t\tAn index of [code]-1[/code] clears the cell.\n\t\t\t\tOptionally, the tile can also be flipped or transposed.\n\t\t\t\t[b]Note:[/b] Data such as navigation polygons and collision shapes are not immediately updated for performance reasons.\n\t\t\t\tIf you need these to be immediately updated, you can call [method update_dirty_quadrants]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bit",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_collision_layer_bit",
            "description": "Sets the given collision layer bit."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "bit",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_collision_mask_bit",
            "description": "Sets the given collision mask bit."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "position",
              "type": "Vector2",
              "index": "0"
            },
            "name": "update_bitmask_area",
            "description": "Applies autotiling rules to the cell (and its adjacent cells) referenced by its grid-based X and Y coordinates."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "default": "Vector2( 0, 0 )",
                "name": "start",
                "type": "Vector2",
                "index": "0"
              },
              {
                "default": "Vector2( 0, 0 )",
                "name": "end",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "update_bitmask_region",
            "description": "Applies autotiling rules to the cells in the given region (specified by grid-based X and Y coordinates).\n\t\t\t\tCalling with invalid (or missing) parameters applies autotiling rules for the entire tilemap."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "update_dirty_quadrants",
            "description": "Updates the tile map's quadrants, allowing things such as navigation and collision shapes to be immediately used if modified."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "world_position",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "world_to_map",
            "description": "Returns the tilemap (grid-based) coordinates corresponding to the given local position.\n\t\t\t\tTo use this with a global position, first determine the local position with [method Node2D.to_local]:\n\t\t\t\t[codeblock]\n\t\t\t\tvar local_position = my_tilemap.to_local(global_position)\n\t\t\t\tvar map_position = my_tilemap.world_to_map(local_position)\n\t\t\t\t[/codeblock]"
          }
        ]
      },
      "name": "TileMap",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "settings_changed",
          "description": "Emitted when a tilemap setting has changed."
        }
      },
      "constants": {
        "constant": [
          {
            "value": "-1",
            "name": "INVALID_CELL"
          },
          {
            "value": "0",
            "name": "MODE_SQUARE",
            "enum": "Mode"
          },
          {
            "value": "1",
            "name": "MODE_ISOMETRIC",
            "enum": "Mode"
          },
          {
            "value": "2",
            "name": "MODE_CUSTOM",
            "enum": "Mode"
          },
          {
            "value": "0",
            "name": "HALF_OFFSET_X",
            "enum": "HalfOffset"
          },
          {
            "value": "1",
            "name": "HALF_OFFSET_Y",
            "enum": "HalfOffset"
          },
          {
            "value": "2",
            "name": "HALF_OFFSET_DISABLED",
            "enum": "HalfOffset"
          },
          {
            "value": "3",
            "name": "HALF_OFFSET_NEGATIVE_X",
            "enum": "HalfOffset"
          },
          {
            "value": "4",
            "name": "HALF_OFFSET_NEGATIVE_Y",
            "enum": "HalfOffset"
          },
          {
            "value": "0",
            "name": "TILE_ORIGIN_TOP_LEFT",
            "enum": "TileOrigin"
          },
          {
            "value": "1",
            "name": "TILE_ORIGIN_CENTER",
            "enum": "TileOrigin"
          },
          {
            "value": "2",
            "name": "TILE_ORIGIN_BOTTOM_LEFT",
            "enum": "TileOrigin"
          }
        ]
      },
      "brief_description": "Node for 2D tile-based maps.",
      "description": "Node for 2D tile-based maps. Tilemaps use a [TileSet] which contain a list of tiles (textures plus optional collision, navigation, and/or occluder shapes) which are used to create grid-based maps.\n\t\tWhen doing physics queries against the tilemap, the cell coordinates are encoded as [code]metadata[/code] for each detected collision shape returned by methods such as [method Physics2DDirectSpaceState.intersect_shape], [method Physics2DDirectBodyState.get_contact_collider_shape_metadata], etc."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/2d/using_tilemaps.html",
            "title": "Using Tilemaps"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/120",
            "title": "2D Platformer Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/112",
            "title": "2D Isometric Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/111",
            "title": "2D Hexagonal Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/519",
            "title": "2D Navigation Astar Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/520",
            "title": "2D Role Playing Game Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/113",
            "title": "2D Kinematic Character Demo"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "atlastile_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "tilemap",
                "type": "Object",
                "index": "1"
              },
              {
                "name": "tile_location",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "qualifiers": "virtual",
            "name": "_forward_atlas_subtile_selection",
            "description": {}
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "autotile_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "bitmask",
                "type": "int",
                "index": "1"
              },
              {
                "name": "tilemap",
                "type": "Object",
                "index": "2"
              },
              {
                "name": "tile_location",
                "type": "Vector2",
                "index": "3"
              }
            ],
            "qualifiers": "virtual",
            "name": "_forward_subtile_selection",
            "description": {}
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "drawn_id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "neighbor_id",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "virtual",
            "name": "_is_tile_bound",
            "description": "Determines when the auto-tiler should consider two different auto-tile IDs to be bound together.\n\t\t\t\t[b]Note:[/b] [code]neighbor_id[/code] will be [code]-1[/code] ([constant TileMap.INVALID_CELL]) when checking a tile against an empty neighbor tile."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "autotile_clear_bitmask_map",
            "description": "Clears all bitmask information of the autotile."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "coord",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "autotile_get_bitmask",
            "description": "Returns the bitmask of the subtile from an autotile given its coordinates.\n\t\t\t\tThe value is the sum of the values in [enum AutotileBindings] present in the subtile (e.g. a value of 5 means the bitmask has bindings in both the top left and top right)."
          },
          {
            "return": {
              "type": "int",
              "enum": "TileSet.BitmaskMode"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "autotile_get_bitmask_mode",
            "description": "Returns the [enum BitmaskMode] of the autotile."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "autotile_get_icon_coordinate",
            "description": "Returns the subtile that's being used as an icon in an atlas/autotile given its coordinates.\n\t\t\t\tThe subtile defined as the icon will be used as a fallback when the atlas/autotile's bitmask information is incomplete. It will also be used to represent it in the TileSet editor."
          },
          {
            "return": {
              "type": "OccluderPolygon2D"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "coord",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "autotile_get_light_occluder",
            "description": "Returns the light occluder of the subtile from an atlas/autotile given its coordinates."
          },
          {
            "return": {
              "type": "NavigationPolygon"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "coord",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "autotile_get_navigation_polygon",
            "description": "Returns the navigation polygon of the subtile from an atlas/autotile given its coordinates."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "autotile_get_size",
            "description": "Returns the size of the subtiles in an atlas/autotile."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "autotile_get_spacing",
            "description": "Returns the spacing between subtiles of the atlas/autotile."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "coord",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "autotile_get_subtile_priority",
            "description": "Returns the priority of the subtile from an autotile given its coordinates.\n\t\t\t\tWhen more than one subtile has the same bitmask value, one of them will be picked randomly for drawing. Its priority will define how often it will be picked."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "coord",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "autotile_get_z_index",
            "description": "Returns the drawing index of the subtile from an atlas/autotile given its coordinates."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "bitmask",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "flag",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "autotile_set_bitmask",
            "description": "Sets the bitmask of the subtile from an autotile given its coordinates.\n\t\t\t\tThe value is the sum of the values in [enum AutotileBindings] present in the subtile (e.g. a value of 5 means the bitmask has bindings in both the top left and top right)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "mode",
                "type": "int",
                "enum": "TileSet.BitmaskMode",
                "index": "1"
              }
            ],
            "name": "autotile_set_bitmask_mode",
            "description": "Sets the [enum BitmaskMode] of the autotile."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "coord",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "autotile_set_icon_coordinate",
            "description": "Sets the subtile that will be used as an icon in an atlas/autotile given its coordinates.\n\t\t\t\tThe subtile defined as the icon will be used as a fallback when the atlas/autotile's bitmask information is incomplete. It will also be used to represent it in the TileSet editor."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "light_occluder",
                "type": "OccluderPolygon2D",
                "index": "1"
              },
              {
                "name": "coord",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "autotile_set_light_occluder",
            "description": "Sets the light occluder of the subtile from an atlas/autotile given its coordinates."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "navigation_polygon",
                "type": "NavigationPolygon",
                "index": "1"
              },
              {
                "name": "coord",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "autotile_set_navigation_polygon",
            "description": "Sets the navigation polygon of the subtile from an atlas/autotile given its coordinates."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "size",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "autotile_set_size",
            "description": "Sets the size of the subtiles in an atlas/autotile."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "spacing",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "autotile_set_spacing",
            "description": "Sets the spacing between subtiles of the atlas/autotile."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "coord",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "priority",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "autotile_set_subtile_priority",
            "description": "Sets the priority of the subtile from an autotile given its coordinates.\n\t\t\t\tWhen more than one subtile has the same bitmask value, one of them will be picked randomly for drawing. Its priority will define how often it will be picked."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "coord",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "z_index",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "autotile_set_z_index",
            "description": "Sets the drawing index of the subtile from an atlas/autotile given its coordinates."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Clears all tiles."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "create_tile",
            "description": "Creates a new tile with the given ID."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "find_tile_by_name",
            "description": "Returns the first tile matching the given name."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_last_unused_tile_id",
            "description": "Returns the ID following the last currently used ID, useful when creating a new tile."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_tiles_ids",
            "description": "Returns an array of all currently used tile IDs."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "remove_tile",
            "description": "Removes the given tile ID."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shape",
                "type": "Shape2D",
                "index": "1"
              },
              {
                "name": "shape_transform",
                "type": "Transform2D",
                "index": "2"
              },
              {
                "default": "false",
                "name": "one_way",
                "type": "bool",
                "index": "3"
              },
              {
                "default": "Vector2( 0, 0 )",
                "name": "autotile_coord",
                "type": "Vector2",
                "index": "4"
              }
            ],
            "name": "tile_add_shape",
            "description": "Adds a shape to the tile."
          },
          {
            "return": {
              "type": "OccluderPolygon2D"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "tile_get_light_occluder",
            "description": "Returns the tile's light occluder."
          },
          {
            "return": {
              "type": "ShaderMaterial"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "tile_get_material",
            "description": "Returns the tile's material."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "tile_get_modulate",
            "description": "Returns the tile's modulation color."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "tile_get_name",
            "description": "Returns the tile's name."
          },
          {
            "return": {
              "type": "NavigationPolygon"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "tile_get_navigation_polygon",
            "description": "Returns the navigation polygon of the tile."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "tile_get_navigation_polygon_offset",
            "description": "Returns the offset of the tile's navigation polygon."
          },
          {
            "return": {
              "type": "Texture"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "tile_get_normal_map",
            "description": "Returns the tile's normal map texture."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "tile_get_occluder_offset",
            "description": "Returns the offset of the tile's light occluder."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "tile_get_region",
            "description": "Returns the tile sub-region in the texture."
          },
          {
            "return": {
              "type": "Shape2D"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shape_id",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "tile_get_shape",
            "description": "Returns a tile's given shape."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "tile_get_shape_count",
            "description": "Returns the number of shapes assigned to a tile."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shape_id",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "tile_get_shape_offset",
            "description": "Returns the offset of a tile's shape."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shape_id",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "tile_get_shape_one_way",
            "description": "Returns the one-way collision value of a tile's shape."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shape_id",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "tile_get_shape_one_way_margin",
            "description": {}
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shape_id",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "tile_get_shape_transform",
            "description": "Returns the [Transform2D] of a tile's shape."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "tile_get_shapes",
            "description": "Returns an array of dictionaries describing the tile's shapes.\n\t\t\t\t[b]Dictionary structure in the array returned by this method:[/b]\n\t\t\t\t[codeblock]\n\t\t\t\t{\n\t\t\t\t    \"autotile_coord\": Vector2,\n\t\t\t\t    \"one_way\": bool,\n\t\t\t\t    \"one_way_margin\": int,\n\t\t\t\t    \"shape\": CollisionShape2D,\n\t\t\t\t    \"shape_transform\": Transform2D,\n\t\t\t\t}\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "Texture"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "tile_get_texture",
            "description": "Returns the tile's texture."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "tile_get_texture_offset",
            "description": "Returns the texture offset of the tile."
          },
          {
            "return": {
              "type": "int",
              "enum": "TileSet.TileMode"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "tile_get_tile_mode",
            "description": "Returns the tile's [enum TileMode]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "tile_get_z_index",
            "description": "Returns the tile's Z index (drawing layer)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "light_occluder",
                "type": "OccluderPolygon2D",
                "index": "1"
              }
            ],
            "name": "tile_set_light_occluder",
            "description": "Sets a light occluder for the tile."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "material",
                "type": "ShaderMaterial",
                "index": "1"
              }
            ],
            "name": "tile_set_material",
            "description": "Sets the tile's material."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "tile_set_modulate",
            "description": "Sets the tile's modulation color."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "name",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "tile_set_name",
            "description": "Sets the tile's name."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "navigation_polygon",
                "type": "NavigationPolygon",
                "index": "1"
              }
            ],
            "name": "tile_set_navigation_polygon",
            "description": "Sets the tile's navigation polygon."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "navigation_polygon_offset",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "tile_set_navigation_polygon_offset",
            "description": "Sets an offset for the tile's navigation polygon."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "normal_map",
                "type": "Texture",
                "index": "1"
              }
            ],
            "name": "tile_set_normal_map",
            "description": "Sets the tile's normal map texture.\n\t\t\t\t[b]Note:[/b] Godot expects the normal map to use X+, Y-, and Z+ coordinates. See [url=http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates]this page[/url] for a comparison of normal map coordinates expected by popular engines."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "occluder_offset",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "tile_set_occluder_offset",
            "description": "Sets an offset for the tile's light occluder."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "region",
                "type": "Rect2",
                "index": "1"
              }
            ],
            "name": "tile_set_region",
            "description": "Sets the tile's sub-region in the texture. This is common in texture atlases."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shape_id",
                "type": "int",
                "index": "1"
              },
              {
                "name": "shape",
                "type": "Shape2D",
                "index": "2"
              }
            ],
            "name": "tile_set_shape",
            "description": "Sets a shape for the tile, enabling collision."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shape_id",
                "type": "int",
                "index": "1"
              },
              {
                "name": "shape_offset",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "tile_set_shape_offset",
            "description": "Sets the offset of a tile's shape."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shape_id",
                "type": "int",
                "index": "1"
              },
              {
                "name": "one_way",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "tile_set_shape_one_way",
            "description": "Enables one-way collision on a tile's shape."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shape_id",
                "type": "int",
                "index": "1"
              },
              {
                "name": "one_way",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "tile_set_shape_one_way_margin",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shape_id",
                "type": "int",
                "index": "1"
              },
              {
                "name": "shape_transform",
                "type": "Transform2D",
                "index": "2"
              }
            ],
            "name": "tile_set_shape_transform",
            "description": "Sets a [Transform2D] on a tile's shape."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "shapes",
                "type": "Array",
                "index": "1"
              }
            ],
            "name": "tile_set_shapes",
            "description": "Sets an array of shapes for the tile, enabling collision."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "texture",
                "type": "Texture",
                "index": "1"
              }
            ],
            "name": "tile_set_texture",
            "description": "Sets the tile's texture."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "texture_offset",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "tile_set_texture_offset",
            "description": "Sets the tile's texture offset."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "tilemode",
                "type": "int",
                "enum": "TileSet.TileMode",
                "index": "1"
              }
            ],
            "name": "tile_set_tile_mode",
            "description": "Sets the tile's [enum TileMode]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "z_index",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "tile_set_z_index",
            "description": "Sets the tile's drawing index."
          }
        ]
      },
      "name": "TileSet",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "BITMASK_2X2",
            "enum": "BitmaskMode"
          },
          {
            "value": "1",
            "name": "BITMASK_3X3_MINIMAL",
            "enum": "BitmaskMode"
          },
          {
            "value": "2",
            "name": "BITMASK_3X3",
            "enum": "BitmaskMode"
          },
          {
            "value": "1",
            "name": "BIND_TOPLEFT",
            "enum": "AutotileBindings"
          },
          {
            "value": "2",
            "name": "BIND_TOP",
            "enum": "AutotileBindings"
          },
          {
            "value": "4",
            "name": "BIND_TOPRIGHT",
            "enum": "AutotileBindings"
          },
          {
            "value": "8",
            "name": "BIND_LEFT",
            "enum": "AutotileBindings"
          },
          {
            "value": "16",
            "name": "BIND_CENTER",
            "enum": "AutotileBindings"
          },
          {
            "value": "32",
            "name": "BIND_RIGHT",
            "enum": "AutotileBindings"
          },
          {
            "value": "64",
            "name": "BIND_BOTTOMLEFT",
            "enum": "AutotileBindings"
          },
          {
            "value": "128",
            "name": "BIND_BOTTOM",
            "enum": "AutotileBindings"
          },
          {
            "value": "256",
            "name": "BIND_BOTTOMRIGHT",
            "enum": "AutotileBindings"
          },
          {
            "value": "0",
            "name": "SINGLE_TILE",
            "enum": "TileMode"
          },
          {
            "value": "1",
            "name": "AUTO_TILE",
            "enum": "TileMode"
          },
          {
            "value": "2",
            "name": "ATLAS_TILE",
            "enum": "TileMode"
          }
        ]
      },
      "brief_description": "Tile library for tilemaps.",
      "description": "A TileSet is a library of tiles for a [TileMap]. It contains a list of tiles, each consisting of a sprite and optional collision shapes.\n\t\tTiles are referenced by a unique integer ID."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/515",
          "title": "2D Dodge The Creeps Demo"
        }
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the timer will automatically start when entering the scene tree.\n\t\t\t[b]Note:[/b] This property is automatically set to [code]false[/code] after the timer enters the scene tree and starts.",
            "setter": "set_autostart",
            "name": "autostart",
            "getter": "has_autostart",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the timer will stop when reaching 0. If [code]false[/code], it will restart.",
            "setter": "set_one_shot",
            "name": "one_shot",
            "getter": "is_one_shot",
            "type": "bool"
          },
          {
            "value": "If [code]true[/code], the timer is paused and will not process until it is unpaused again, even if [method start] is called.",
            "setter": "set_paused",
            "name": "paused",
            "getter": "is_paused",
            "type": "bool"
          },
          {
            "default": "1",
            "value": "Processing mode. See [enum TimerProcessMode].",
            "setter": "set_timer_process_mode",
            "name": "process_mode",
            "getter": "get_timer_process_mode",
            "type": "int",
            "enum": "Timer.TimerProcessMode"
          },
          {
            "value": "The timer's remaining time in seconds. Returns 0 if the timer is inactive.\n\t\t\t[b]Note:[/b] You cannot set this value. To change the timer's remaining time, use [method start].",
            "setter": "",
            "name": "time_left",
            "getter": "get_time_left",
            "type": "float"
          },
          {
            "default": "1.0",
            "value": "Wait time in seconds.",
            "setter": "set_wait_time",
            "name": "wait_time",
            "getter": "get_wait_time",
            "type": "float"
          }
        ]
      },
      "inherits": "Node",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_stopped",
            "description": "Returns [code]true[/code] if the timer is stopped."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "-1",
              "name": "time_sec",
              "type": "float",
              "index": "0"
            },
            "name": "start",
            "description": "Starts the timer. Sets [code]wait_time[/code] to [code]time_sec[/code] if [code]time_sec > 0[/code]. This also resets the remaining time to [code]wait_time[/code].\n\t\t\t\t[b]Note:[/b] this method will not resume a paused timer. See [member paused]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "stop",
            "description": "Stops the timer."
          }
        ]
      },
      "name": "Timer",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "timeout",
          "description": "Emitted when the timer reaches 0."
        }
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "TIMER_PROCESS_PHYSICS",
            "enum": "TimerProcessMode"
          },
          {
            "value": "1",
            "name": "TIMER_PROCESS_IDLE",
            "enum": "TimerProcessMode"
          }
        ]
      },
      "brief_description": "A countdown timer.",
      "description": "Counts down a specified interval and emits a signal on reaching 0. Can be set to repeat or \"one-shot\" mode.\n\t\t[b]Note:[/b] To create a one-shot timer without instantiating a node, use [method SceneTree.create_timer]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "value": "[StyleBox] used when the [ToolButton] is disabled.",
            "name": "disabled",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] used when the [ToolButton] is focused. It is displayed over the current [StyleBox], so using [StyleBoxEmpty] will just disable the focus visual effect.",
            "name": "focus",
            "type": "StyleBox"
          },
          {
            "value": "[Font] of the [ToolButton]'s text.",
            "name": "font",
            "type": "Font"
          },
          {
            "default": "Color( 0.88, 0.88, 0.88, 1 )",
            "value": "Default text [Color] of the [ToolButton].",
            "name": "font_color",
            "type": "Color"
          },
          {
            "default": "Color( 0.9, 0.95, 1, 0.3 )",
            "value": "Text [Color] used when the [ToolButton] is disabled.",
            "name": "font_color_disabled",
            "type": "Color"
          },
          {
            "default": "Color( 0.94, 0.94, 0.94, 1 )",
            "value": "Text [Color] used when the [ToolButton] is being hovered.",
            "name": "font_color_hover",
            "type": "Color"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "Text [Color] used when the [ToolButton] is being pressed.",
            "name": "font_color_pressed",
            "type": "Color"
          },
          {
            "value": "[StyleBox] used when the [ToolButton] is being hovered.",
            "name": "hover",
            "type": "StyleBox"
          },
          {
            "default": "3",
            "value": "The horizontal space between [ToolButton]'s icon and text.",
            "name": "hseparation",
            "type": "int"
          },
          {
            "value": "Default [StyleBox] for the [ToolButton].",
            "name": "normal",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] used when the [ToolButton] is being pressed.",
            "name": "pressed",
            "type": "StyleBox"
          }
        ]
      },
      "members": {
        "member": {
          "default": "true",
          "setter": "set_flat",
          "override": "true",
          "name": "flat",
          "getter": "is_flat",
          "type": "bool"
        }
      },
      "inherits": "Button",
      "methods": {},
      "name": "ToolButton",
      "version": "3.3",
      "constants": {},
      "brief_description": "Flat button helper class.",
      "description": "This is a helper class to generate a flat [Button] (see [member Button.flat]), creating a [ToolButton] is equivalent to:\n\t\t[codeblock]\n\t\tvar btn = Button.new()\n\t\tbtn.flat = true\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "\"\"",
            "value": "The button's action. Actions can be handled with [InputEventAction].",
            "setter": "set_action",
            "name": "action",
            "getter": "get_action",
            "type": "String"
          },
          {
            "value": "The button's bitmask.",
            "setter": "set_bitmask",
            "name": "bitmask",
            "getter": "get_bitmask",
            "type": "BitMap"
          },
          {
            "value": "The button's texture for the normal state.",
            "setter": "set_texture",
            "name": "normal",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the [signal pressed] and [signal released] signals are emitted whenever a pressed finger goes in and out of the button, even if the pressure started outside the active area of the button.\n\t\t\t[b]Note:[/b] this is a \"pass-by\" (not \"bypass\") press mode.",
            "setter": "set_passby_press",
            "name": "passby_press",
            "getter": "is_passby_press_enabled",
            "type": "bool"
          },
          {
            "value": "The button's texture for the pressed state.",
            "setter": "set_texture_pressed",
            "name": "pressed",
            "getter": "get_texture_pressed",
            "type": "Texture"
          },
          {
            "value": "The button's shape.",
            "setter": "set_shape",
            "name": "shape",
            "getter": "get_shape",
            "type": "Shape2D"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the button's shape is centered in the provided texture. If no texture is used, this property has no effect.",
            "setter": "set_shape_centered",
            "name": "shape_centered",
            "getter": "is_shape_centered",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the button's shape is visible.",
            "setter": "set_shape_visible",
            "name": "shape_visible",
            "getter": "is_shape_visible",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "The button's visibility mode. See [enum VisibilityMode] for possible values.",
            "setter": "set_visibility_mode",
            "name": "visibility_mode",
            "getter": "get_visibility_mode",
            "type": "int",
            "enum": "TouchScreenButton.VisibilityMode"
          }
        ]
      },
      "inherits": "Node2D",
      "methods": {
        "method": {
          "return": {
            "type": "bool"
          },
          "qualifiers": "const",
          "name": "is_pressed",
          "description": "Returns [code]true[/code] if this button is currently pressed."
        }
      },
      "name": "TouchScreenButton",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "pressed",
            "description": "Emitted when the button is pressed (down)."
          },
          {
            "name": "released",
            "description": "Emitted when the button is released (up)."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "VISIBILITY_ALWAYS",
            "enum": "VisibilityMode"
          },
          {
            "value": "1",
            "name": "VISIBILITY_TOUCHSCREEN_ONLY",
            "enum": "VisibilityMode"
          }
        ]
      },
      "brief_description": "Button for touch screen devices for gameplay use.",
      "description": "TouchScreenButton allows you to create on-screen buttons for touch devices. It's intended for gameplay use, such as a unit you have to touch to move. Unlike [Button], TouchScreenButton supports multitouch out of the box. Several TouchScreenButtons can be pressed at the same time with touch input.\n\t\tThis node inherits from [Node2D]. Unlike with [Control] nodes, you cannot set anchors on it. If you want to create menus or user interfaces, you may want to use [Button] nodes instead. To make button nodes react to touch events, you can enable the Emulate Mouse option in the Project Settings.\n\t\tYou can configure TouchScreenButton to be visible only on touch devices, helping you develop your game both for desktop and mobile devices."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/math/index.html",
            "title": "Math tutorial index"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/math/matrices_and_transforms.html",
            "title": "Matrices and transforms"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/584",
            "title": "Matrix Transform Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/583",
            "title": "2.5D Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "Vector2( 0, 0 )",
            "value": "The origin vector (column 2, the third column). Equivalent to array index [code]2[/code]. The origin vector represents translation.",
            "setter": "",
            "name": "origin",
            "getter": "",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 1, 0 )",
            "value": "The basis matrix's X vector (column 0). Equivalent to array index [code]0[/code].",
            "setter": "",
            "name": "x",
            "getter": "",
            "type": "Vector2"
          },
          {
            "default": "Vector2( 0, 1 )",
            "value": "The basis matrix's Y vector (column 1). Equivalent to array index [code]1[/code].",
            "setter": "",
            "name": "y",
            "getter": "",
            "type": "Vector2"
          }
        ]
      },
      "methods": {
        "method": [
          {
            "return": {
              "type": "Transform2D"
            },
            "argument": {
              "name": "from",
              "type": "Transform",
              "index": "0"
            },
            "name": "Transform2D",
            "description": "Constructs the transform from a 3D [Transform]."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "argument": [
              {
                "name": "x_axis",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "y_axis",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "origin",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "Transform2D",
            "description": "Constructs the transform from 3 [Vector2] values representing [member x], [member y], and the [member origin] (the three column vectors)."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "argument": [
              {
                "name": "rotation",
                "type": "float",
                "index": "0"
              },
              {
                "name": "position",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "Transform2D",
            "description": "Constructs the transform from a given angle (in radians) and position."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "name": "affine_inverse",
            "description": "Returns the inverse of the transform, under the assumption that the transformation is composed of rotation, scaling and translation."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "v",
              "type": "Vector2",
              "index": "0"
            },
            "name": "basis_xform",
            "description": "Returns a vector transformed (multiplied) by the basis matrix.\n\t\t\t\tThis method does not account for translation (the origin vector)."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "v",
              "type": "Vector2",
              "index": "0"
            },
            "name": "basis_xform_inv",
            "description": "Returns a vector transformed (multiplied) by the inverse basis matrix.\n\t\t\t\tThis method does not account for translation (the origin vector)."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "name": "get_origin",
            "description": "Returns the transform's origin (translation)."
          },
          {
            "return": {
              "type": "float"
            },
            "name": "get_rotation",
            "description": "Returns the transform's rotation (in radians)."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "name": "get_scale",
            "description": "Returns the scale."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "argument": [
              {
                "name": "transform",
                "type": "Transform2D",
                "index": "0"
              },
              {
                "name": "weight",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "interpolate_with",
            "description": "Returns a transform interpolated between this transform and another by a given [code]weight[/code] (on the range of 0.0 to 1.0)."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "name": "inverse",
            "description": "Returns the inverse of the transform, under the assumption that the transformation is composed of rotation and translation (no scaling, use [method affine_inverse] for transforms with scaling)."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "transform",
              "type": "Transform2D",
              "index": "0"
            },
            "name": "is_equal_approx",
            "description": "Returns [code]true[/code] if this transform and [code]transform[/code] are approximately equal, by calling [code]is_equal_approx[/code] on each component."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "name": "orthonormalized",
            "description": "Returns the transform with the basis orthogonal (90 degrees), and normalized axis vectors (scale of 1 or -1)."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "argument": {
              "name": "phi",
              "type": "float",
              "index": "0"
            },
            "name": "rotated",
            "description": "Rotates the transform by the given angle (in radians), using matrix multiplication."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "argument": {
              "name": "scale",
              "type": "Vector2",
              "index": "0"
            },
            "name": "scaled",
            "description": "Scales the transform by the given scale factor, using matrix multiplication."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "argument": {
              "name": "offset",
              "type": "Vector2",
              "index": "0"
            },
            "name": "translated",
            "description": "Translates the transform by the given offset, relative to the transform's basis vectors.\n\t\t\t\tUnlike [method rotated] and [method scaled], this does not use matrix multiplication."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "v",
              "type": "Variant",
              "index": "0"
            },
            "name": "xform",
            "description": "Transforms the given [Vector2], [Rect2], or [PoolVector2Array] by this transform."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "v",
              "type": "Variant",
              "index": "0"
            },
            "name": "xform_inv",
            "description": "Inverse-transforms the given [Vector2], [Rect2], or [PoolVector2Array] by this transform."
          }
        ]
      },
      "name": "Transform2D",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "Transform2D( 1, 0, 0, 1, 0, 0 )",
            "name": "IDENTITY"
          },
          {
            "value": "Transform2D( -1, 0, 0, 1, 0, 0 )",
            "name": "FLIP_X"
          },
          {
            "value": "Transform2D( 1, 0, 0, -1, 0, 0 )",
            "name": "FLIP_Y"
          }
        ]
      },
      "brief_description": "2D transformation (2×3 matrix).",
      "description": "2×3 matrix (2 rows, 3 columns) used for 2D linear transformations. It can represent transformations such as translation, rotation, or scaling. It consists of three [Vector2] values: [member x], [member y], and the [member origin].\n\t\tFor more information, read the \"Matrices and transforms\" documentation article."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/math/index.html",
            "title": "Math tutorial index"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/math/matrices_and_transforms.html",
            "title": "Matrices and transforms"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/3d/using_transforms.html",
            "title": "Using 3D transforms"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/584",
            "title": "Matrix Transform Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/125",
            "title": "3D Platformer Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/583",
            "title": "2.5D Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "Basis( 1, 0, 0, 0, 1, 0, 0, 0, 1 )",
            "value": "The basis is a matrix containing 3 [Vector3] as its columns: X axis, Y axis, and Z axis. These vectors can be interpreted as the basis vectors of local coordinate system traveling with the object.",
            "setter": "",
            "name": "basis",
            "getter": "",
            "type": "Basis"
          },
          {
            "default": "Vector3( 0, 0, 0 )",
            "value": "The translation offset of the transform (column 3, the fourth column). Equivalent to array index [code]3[/code].",
            "setter": "",
            "name": "origin",
            "getter": "",
            "type": "Vector3"
          }
        ]
      },
      "methods": {
        "method": [
          {
            "return": {
              "type": "Transform"
            },
            "argument": [
              {
                "name": "x_axis",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "y_axis",
                "type": "Vector3",
                "index": "1"
              },
              {
                "name": "z_axis",
                "type": "Vector3",
                "index": "2"
              },
              {
                "name": "origin",
                "type": "Vector3",
                "index": "3"
              }
            ],
            "name": "Transform",
            "description": "Constructs a Transform from four [Vector3] values (matrix columns). Each axis corresponds to local basis vectors (some of which may be scaled)."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": [
              {
                "name": "basis",
                "type": "Basis",
                "index": "0"
              },
              {
                "name": "origin",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "Transform",
            "description": "Constructs a Transform from a [Basis] and [Vector3]."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": {
              "name": "from",
              "type": "Transform2D",
              "index": "0"
            },
            "name": "Transform",
            "description": "Constructs a Transform from a [Transform2D]."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": {
              "name": "from",
              "type": "Quat",
              "index": "0"
            },
            "name": "Transform",
            "description": "Constructs a Transform from a [Quat]. The origin will be [code]Vector3(0, 0, 0)[/code]."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": {
              "name": "from",
              "type": "Basis",
              "index": "0"
            },
            "name": "Transform",
            "description": "Constructs the Transform from a [Basis]. The origin will be Vector3(0, 0, 0)."
          },
          {
            "return": {
              "type": "Transform"
            },
            "name": "affine_inverse",
            "description": "Returns the inverse of the transform, under the assumption that the transformation is composed of rotation, scaling and translation."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": [
              {
                "name": "transform",
                "type": "Transform",
                "index": "0"
              },
              {
                "name": "weight",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "interpolate_with",
            "description": "Interpolates the transform to other Transform by weight amount (on the range of 0.0 to 1.0)."
          },
          {
            "return": {
              "type": "Transform"
            },
            "name": "inverse",
            "description": "Returns the inverse of the transform, under the assumption that the transformation is composed of rotation and translation (no scaling, use affine_inverse for transforms with scaling)."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "transform",
              "type": "Transform",
              "index": "0"
            },
            "name": "is_equal_approx",
            "description": "Returns [code]true[/code] if this transform and [code]transform[/code] are approximately equal, by calling [code]is_equal_approx[/code] on each component."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": [
              {
                "name": "target",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "up",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "looking_at",
            "description": "Returns a copy of the transform rotated such that its -Z axis points towards the [code]target[/code] position.\n\t\t\t\tThe transform will first be rotated around the given [code]up[/code] vector, and then fully aligned to the target by a further rotation around an axis perpendicular to both the [code]target[/code] and [code]up[/code] vectors.\n\t\t\t\tOperations take place in global space."
          },
          {
            "return": {
              "type": "Transform"
            },
            "name": "orthonormalized",
            "description": "Returns the transform with the basis orthogonal (90 degrees), and normalized axis vectors."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": [
              {
                "name": "axis",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "phi",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "rotated",
            "description": "Rotates the transform around the given axis by the given angle (in radians), using matrix multiplication. The axis must be a normalized vector."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": {
              "name": "scale",
              "type": "Vector3",
              "index": "0"
            },
            "name": "scaled",
            "description": "Scales basis and origin of the transform by the given scale factor, using matrix multiplication."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": {
              "name": "offset",
              "type": "Vector3",
              "index": "0"
            },
            "name": "translated",
            "description": "Translates the transform by the given offset, relative to the transform's basis vectors.\n\t\t\t\tUnlike [method rotated] and [method scaled], this does not use matrix multiplication."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "v",
              "type": "Variant",
              "index": "0"
            },
            "name": "xform",
            "description": "Transforms the given [Vector3], [Plane], [AABB], or [PoolVector3Array] by this transform."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "v",
              "type": "Variant",
              "index": "0"
            },
            "name": "xform_inv",
            "description": "Inverse-transforms the given [Vector3], [Plane], [AABB], or [PoolVector3Array] by this transform."
          }
        ]
      },
      "name": "Transform",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )",
            "name": "IDENTITY"
          },
          {
            "value": "Transform( -1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )",
            "name": "FLIP_X"
          },
          {
            "value": "Transform( 1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0 )",
            "name": "FLIP_Y"
          },
          {
            "value": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0 )",
            "name": "FLIP_Z"
          }
        ]
      },
      "brief_description": "3D transformation (3×4 matrix).",
      "description": "3×4 matrix (3 rows, 4 columns) used for 3D linear transformations. It can represent transformations such as translation, rotation, or scaling. It consists of a [member basis] (first 3 columns) and a [Vector3] for the [member origin] (last column).\n\t\tFor more information, read the \"Matrices and transforms\" documentation article."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          "https://docs.godotengine.org/en/3.3/tutorials/i18n/internationalizing_games.html",
          "https://docs.godotengine.org/en/3.3/tutorials/i18n/locales.html"
        ]
      },
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "translation",
              "type": "Translation",
              "index": "0"
            },
            "name": "add_translation",
            "description": "Adds a [Translation] resource."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Clears the server from all translations."
          },
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_loaded_locales",
            "description": "Returns an Array of all loaded locales of the game."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_locale",
            "description": "Returns the current locale of the game."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "locale",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_locale_name",
            "description": "Returns a locale's language and its variant (e.g. [code]\"en_US\"[/code] would return [code]\"English (United States)\"[/code])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "translation",
              "type": "Translation",
              "index": "0"
            },
            "name": "remove_translation",
            "description": "Removes the given translation from the server."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "locale",
              "type": "String",
              "index": "0"
            },
            "name": "set_locale",
            "description": "Sets the locale of the game."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "message",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "translate",
            "description": "Returns the current locale's translation for the given message (key)."
          }
        ]
      },
      "name": "TranslationServer",
      "version": "3.3",
      "constants": {},
      "brief_description": "Server that manages all translations.",
      "description": "Server that manages all translations. Translations can be set to it and removed from it."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          "https://docs.godotengine.org/en/3.3/tutorials/i18n/internationalizing_games.html",
          "https://docs.godotengine.org/en/3.3/tutorials/i18n/locales.html"
        ]
      },
      "members": {
        "member": {
          "default": "\"en\"",
          "value": "The locale of the translation.",
          "setter": "set_locale",
          "name": "locale",
          "getter": "get_locale",
          "type": "String"
        }
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "src_message",
                "type": "String",
                "index": "0"
              },
              {
                "name": "xlated_message",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "add_message",
            "description": "Adds a message if nonexistent, followed by its translation."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "src_message",
              "type": "String",
              "index": "0"
            },
            "name": "erase_message",
            "description": "Erases a message."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "src_message",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_message",
            "description": "Returns a message's translation."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_message_count",
            "description": "Returns the number of existing messages."
          },
          {
            "return": {
              "type": "PoolStringArray"
            },
            "qualifiers": "const",
            "name": "get_message_list",
            "description": "Returns all the messages (keys)."
          }
        ]
      },
      "name": "Translation",
      "version": "3.3",
      "constants": {},
      "brief_description": "Language Translation.",
      "description": "Translations are resources that can be loaded and unloaded on demand. They map a string to another string."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "value": "If [code]true[/code], the TreeItem is collapsed.",
            "setter": "set_collapsed",
            "name": "collapsed",
            "getter": "is_collapsed",
            "type": "bool"
          },
          {
            "value": "The custom minimum height.",
            "setter": "set_custom_minimum_height",
            "name": "custom_minimum_height",
            "getter": "get_custom_minimum_height",
            "type": "int"
          },
          {
            "value": "If [code]true[/code], folding is disabled for this TreeItem.",
            "setter": "set_disable_folding",
            "name": "disable_folding",
            "getter": "is_folding_disabled",
            "type": "bool"
          }
        ]
      },
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "button",
                "type": "Texture",
                "index": "1"
              },
              {
                "default": "-1",
                "name": "button_idx",
                "type": "int",
                "index": "2"
              },
              {
                "default": "false",
                "name": "disabled",
                "type": "bool",
                "index": "3"
              },
              {
                "default": "\"\"",
                "name": "tooltip",
                "type": "String",
                "index": "4"
              }
            ],
            "name": "add_button",
            "description": "Adds a button with [Texture] [code]button[/code] at column [code]column[/code]. The [code]button_idx[/code] index is used to identify the button when calling other methods. If not specified, the next available index is used, which may be retrieved by calling [method get_button_count] immediately after this method. Optionally, the button can be [code]disabled[/code] and have a [code]tooltip[/code]."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "method",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "vararg",
            "name": "call_recursive",
            "description": "Calls the [code]method[/code] on the actual TreeItem and its children recursively. Pass parameters as a comma separated list."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "name": "clear_custom_bg_color",
            "description": "Resets the background color for the given column to default."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "name": "clear_custom_color",
            "description": "Resets the color for the given column to default."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "name": "deselect",
            "description": "Deselects the given column."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "button_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "erase_button",
            "description": "Removes the button at index [code]button_idx[/code] in column [code]column[/code]."
          },
          {
            "return": {
              "type": "Texture"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "button_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_button",
            "description": "Returns the [Texture] of the button at index [code]button_idx[/code] in column [code]column[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_button_count",
            "description": "Returns the number of buttons in column [code]column[/code]. May be used to get the most recently added button's index, if no index was specified."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "button_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_button_tooltip",
            "description": "Returns the tooltip string for the button at index [code]button_idx[/code] in column [code]column[/code]."
          },
          {
            "return": {
              "type": "int",
              "enum": "TreeItem.TreeCellMode"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_cell_mode",
            "description": "Returns the column's cell mode."
          },
          {
            "return": {
              "type": "TreeItem"
            },
            "name": "get_children",
            "description": "Returns the TreeItem's first child item or a null object if there is none."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_custom_bg_color",
            "description": "Returns the custom background color of column [code]column[/code]."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_custom_color",
            "description": "Returns the custom color of column [code]column[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_expand_right",
            "description": "Returns [code]true[/code] if [code]expand_right[/code] is set."
          },
          {
            "return": {
              "type": "Texture"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_icon",
            "description": "Returns the given column's icon [Texture]. Error if no icon is set."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_icon_max_width",
            "description": "Returns the column's icon's maximum width."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_icon_modulate",
            "description": "Returns the [Color] modulating the column's icon."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_icon_region",
            "description": "Returns the icon [Texture] region as [Rect2]."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_metadata",
            "description": "Returns the metadata value that was set for the given column using [method set_metadata]."
          },
          {
            "return": {
              "type": "TreeItem"
            },
            "name": "get_next",
            "description": "Returns the next TreeItem in the tree or a null object if there is none."
          },
          {
            "return": {
              "type": "TreeItem"
            },
            "argument": {
              "default": "false",
              "name": "wrap",
              "type": "bool",
              "index": "0"
            },
            "name": "get_next_visible",
            "description": "Returns the next visible TreeItem in the tree or a null object if there is none.\n\t\t\t\tIf [code]wrap[/code] is enabled, the method will wrap around to the first visible element in the tree when called on the last visible element, otherwise it returns [code]null[/code]."
          },
          {
            "return": {
              "type": "TreeItem"
            },
            "name": "get_parent",
            "description": "Returns the parent TreeItem or a null object if there is none."
          },
          {
            "return": {
              "type": "TreeItem"
            },
            "name": "get_prev",
            "description": "Returns the previous TreeItem in the tree or a null object if there is none."
          },
          {
            "return": {
              "type": "TreeItem"
            },
            "argument": {
              "default": "false",
              "name": "wrap",
              "type": "bool",
              "index": "0"
            },
            "name": "get_prev_visible",
            "description": "Returns the previous visible TreeItem in the tree or a null object if there is none.\n\t\t\t\tIf [code]wrap[/code] is enabled, the method will wrap around to the last visible element in the tree when called on the first visible element, otherwise it returns [code]null[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_range",
            "description": "Returns the value of a [constant CELL_MODE_RANGE] column."
          },
          {
            "return": {
              "type": "Dictionary"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "name": "get_range_config",
            "description": "Returns a dictionary containing the range parameters for a given column. The keys are \"min\", \"max\", \"step\", and \"expr\"."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_suffix",
            "description": "Gets the suffix string shown after the column value."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_text",
            "description": "Returns the given column's text."
          },
          {
            "return": {
              "type": "int",
              "enum": "TreeItem.TextAlign"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_text_align",
            "description": "Returns the given column's text alignment."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_tooltip",
            "description": "Returns the given column's tooltip."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "button_idx",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "is_button_disabled",
            "description": "Returns [code]true[/code] if the button at index [code]button_idx[/code] for the given column is disabled."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_checked",
            "description": "Returns [code]true[/code] if the given column is checked."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_custom_set_as_button",
            "description": {}
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "name": "is_editable",
            "description": "Returns [code]true[/code] if column [code]column[/code] is editable."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_selectable",
            "description": "Returns [code]true[/code] if column [code]column[/code] is selectable."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "name": "is_selected",
            "description": "Returns [code]true[/code] if column [code]column[/code] is selected."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "move_to_bottom",
            "description": "Moves this TreeItem to the bottom in the [Tree] hierarchy."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "move_to_top",
            "description": "Moves this TreeItem to the top in the [Tree] hierarchy."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "child",
              "type": "Object",
              "index": "0"
            },
            "name": "remove_child",
            "description": "Removes the given child [TreeItem] and all its children from the [Tree]. Note that it doesn't free the item from memory, so it can be reused later. To completely remove a [TreeItem] use [method Object.free]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "name": "select",
            "description": "Selects the column [code]column[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "button_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "button",
                "type": "Texture",
                "index": "2"
              }
            ],
            "name": "set_button",
            "description": "Sets the given column's button [Texture] at index [code]button_idx[/code] to [code]button[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "button_idx",
                "type": "int",
                "index": "1"
              },
              {
                "name": "disabled",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "set_button_disabled",
            "description": "If [code]true[/code], disables the button at index [code]button_idx[/code] in column [code]column[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "mode",
                "type": "int",
                "enum": "TreeItem.TreeCellMode",
                "index": "1"
              }
            ],
            "name": "set_cell_mode",
            "description": "Sets the given column's cell mode to [code]mode[/code]. See [enum TreeCellMode] constants."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "checked",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_checked",
            "description": "If [code]true[/code], the column [code]column[/code] is checked."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_custom_as_button",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              },
              {
                "default": "false",
                "name": "just_outline",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "set_custom_bg_color",
            "description": "Sets the given column's custom background color and whether to just use it as an outline."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "set_custom_color",
            "description": "Sets the given column's custom color."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "object",
                "type": "Object",
                "index": "1"
              },
              {
                "name": "callback",
                "type": "String",
                "index": "2"
              }
            ],
            "name": "set_custom_draw",
            "description": "Sets the given column's custom draw callback to [code]callback[/code] method on [code]object[/code].\n\t\t\t\tThe [code]callback[/code] should accept two arguments: the [TreeItem] that is drawn and its position and size as a [Rect2]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_editable",
            "description": "If [code]true[/code], column [code]column[/code] is editable."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_expand_right",
            "description": "If [code]true[/code], column [code]column[/code] is expanded to the right."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "texture",
                "type": "Texture",
                "index": "1"
              }
            ],
            "name": "set_icon",
            "description": "Sets the given column's icon [Texture]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "width",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set_icon_max_width",
            "description": "Sets the given column's icon's maximum width."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "modulate",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "set_icon_modulate",
            "description": "Modulates the given column's icon with [code]modulate[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "region",
                "type": "Rect2",
                "index": "1"
              }
            ],
            "name": "set_icon_region",
            "description": "Sets the given column's icon's texture region."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "meta",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "set_metadata",
            "description": "Sets the metadata value for the given column, which can be retrieved later using [method get_metadata]. This can be used, for example, to store a reference to the original data."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "set_range",
            "description": "Sets the value of a [constant CELL_MODE_RANGE] column."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "min",
                "type": "float",
                "index": "1"
              },
              {
                "name": "max",
                "type": "float",
                "index": "2"
              },
              {
                "name": "step",
                "type": "float",
                "index": "3"
              },
              {
                "default": "false",
                "name": "expr",
                "type": "bool",
                "index": "4"
              }
            ],
            "name": "set_range_config",
            "description": "Sets the range of accepted values for a column. The column must be in the [constant CELL_MODE_RANGE] mode.\n\t\t\t\tIf [code]expr[/code] is [code]true[/code], the edit mode slider will use an exponential scale as with [member Range.exp_edit]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "selectable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_selectable",
            "description": "If [code]true[/code], the given column is selectable."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "text",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set_suffix",
            "description": "Sets a string to be shown after a column's value (for example, a unit abbreviation)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "text",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set_text",
            "description": "Sets the given column's text value."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "text_align",
                "type": "int",
                "enum": "TreeItem.TextAlign",
                "index": "1"
              }
            ],
            "name": "set_text_align",
            "description": "Sets the given column's text alignment. See [enum TextAlign] for possible values."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "tooltip",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set_tooltip",
            "description": "Sets the given column's tooltip text."
          }
        ]
      },
      "name": "TreeItem",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "CELL_MODE_STRING",
            "enum": "TreeCellMode"
          },
          {
            "value": "1",
            "name": "CELL_MODE_CHECK",
            "enum": "TreeCellMode"
          },
          {
            "value": "2",
            "name": "CELL_MODE_RANGE",
            "enum": "TreeCellMode"
          },
          {
            "value": "3",
            "name": "CELL_MODE_ICON",
            "enum": "TreeCellMode"
          },
          {
            "value": "4",
            "name": "CELL_MODE_CUSTOM",
            "enum": "TreeCellMode"
          },
          {
            "value": "0",
            "name": "ALIGN_LEFT",
            "enum": "TextAlign"
          },
          {
            "value": "1",
            "name": "ALIGN_CENTER",
            "enum": "TextAlign"
          },
          {
            "value": "2",
            "name": "ALIGN_RIGHT",
            "enum": "TextAlign"
          }
        ]
      },
      "brief_description": "Control for a single item inside a [Tree].",
      "description": "Control for a single item inside a [Tree]. May have child [TreeItem]s and be styled as well as contain buttons.\n\t\tYou can remove a [TreeItem] by using [method Object.free]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "value": "The arrow icon used when a foldable item is not collapsed.",
            "name": "arrow",
            "type": "Texture"
          },
          {
            "value": "The arrow icon used when a foldable item is collapsed.",
            "name": "arrow_collapsed",
            "type": "Texture"
          },
          {
            "value": "Default [StyleBox] for the [Tree], i.e. used when the control is not being focused.",
            "name": "bg",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] used when the [Tree] is being focused.",
            "name": "bg_focus",
            "type": "StyleBox"
          },
          {
            "default": "4",
            "value": "The horizontal space between each button in a cell.",
            "name": "button_margin",
            "type": "int"
          },
          {
            "value": "[StyleBox] used when a button in the tree is pressed.",
            "name": "button_pressed",
            "type": "StyleBox"
          },
          {
            "value": "The check icon to display when the [constant TreeItem.CELL_MODE_CHECK] mode cell is checked.",
            "name": "checked",
            "type": "Texture"
          },
          {
            "value": "[StyleBox] used for the cursor, when the [Tree] is being focused.",
            "name": "cursor",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] used for the cursor, when the [Tree] is not being focused.",
            "name": "cursor_unfocused",
            "type": "StyleBox"
          },
          {
            "value": "Default [StyleBox] for a [constant TreeItem.CELL_MODE_CUSTOM] mode cell.",
            "name": "custom_button",
            "type": "StyleBox"
          },
          {
            "default": "Color( 0.94, 0.94, 0.94, 1 )",
            "value": "Text [Color] for a [constant TreeItem.CELL_MODE_CUSTOM] mode cell when it's hovered.",
            "name": "custom_button_font_highlight",
            "type": "Color"
          },
          {
            "value": "[StyleBox] for a [constant TreeItem.CELL_MODE_CUSTOM] mode cell when it's hovered.",
            "name": "custom_button_hover",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] for a [constant TreeItem.CELL_MODE_CUSTOM] mode cell when it's pressed.",
            "name": "custom_button_pressed",
            "type": "StyleBox"
          },
          {
            "default": "1",
            "value": "Draws the guidelines if not zero, this acts as a boolean. The guideline is a horizontal line drawn at the bottom of each item.",
            "name": "draw_guides",
            "type": "int"
          },
          {
            "default": "0",
            "value": "Draws the relationship lines if not zero, this acts as a boolean. Relationship lines are drawn at the start of child items to show hierarchy.",
            "name": "draw_relationship_lines",
            "type": "int"
          },
          {
            "default": "Color( 1, 0.3, 0.2, 1 )",
            "value": "[Color] used to draw possible drop locations. See [enum DropModeFlags] constants for further description of drop locations.",
            "name": "drop_position_color",
            "type": "Color"
          },
          {
            "value": "[Font] of the item's text.",
            "name": "font",
            "type": "Font"
          },
          {
            "default": "Color( 0.69, 0.69, 0.69, 1 )",
            "value": "Default text [Color] of the item.",
            "name": "font_color",
            "type": "Color"
          },
          {
            "default": "Color( 1, 1, 1, 1 )",
            "value": "Text [Color] used when the item is selected.",
            "name": "font_color_selected",
            "type": "Color"
          },
          {
            "default": "Color( 0, 0, 0, 0.1 )",
            "value": "[Color] of the guideline.",
            "name": "guide_color",
            "type": "Color"
          },
          {
            "default": "4",
            "value": "The horizontal space between item cells. This is also used as the margin at the start of an item when folding is disabled.",
            "name": "hseparation",
            "type": "int"
          },
          {
            "default": "12",
            "value": "The horizontal margin at the start of an item. This is used when folding is enabled for the item.",
            "name": "item_margin",
            "type": "int"
          },
          {
            "default": "Color( 0.27, 0.27, 0.27, 1 )",
            "value": "[Color] of the relationship lines.",
            "name": "relationship_line_color",
            "type": "Color"
          },
          {
            "default": "4",
            "value": "The maximum distance between the mouse cursor and the control's border to trigger border scrolling when dragging.",
            "name": "scroll_border",
            "type": "int"
          },
          {
            "default": "12",
            "value": "The speed of border scrolling.",
            "name": "scroll_speed",
            "type": "int"
          },
          {
            "value": "The arrow icon to display for the [constant TreeItem.CELL_MODE_RANGE] mode cell.",
            "name": "select_arrow",
            "type": "Texture"
          },
          {
            "value": "[StyleBox] for the selected items, used when the [Tree] is not being focused.",
            "name": "selected",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] for the selected items, used when the [Tree] is being focused.",
            "name": "selected_focus",
            "type": "StyleBox"
          },
          {
            "default": "Color( 0.88, 0.88, 0.88, 1 )",
            "value": "Default text [Color] of the title button.",
            "name": "title_button_color",
            "type": "Color"
          },
          {
            "value": "[Font] of the title button's text.",
            "name": "title_button_font",
            "type": "Font"
          },
          {
            "value": "[StyleBox] used when the title button is being hovered.",
            "name": "title_button_hover",
            "type": "StyleBox"
          },
          {
            "value": "Default [StyleBox] for the title button.",
            "name": "title_button_normal",
            "type": "StyleBox"
          },
          {
            "value": "[StyleBox] used when the title button is being pressed.",
            "name": "title_button_pressed",
            "type": "StyleBox"
          },
          {
            "value": "The check icon to display when the [constant TreeItem.CELL_MODE_CHECK] mode cell is unchecked.",
            "name": "unchecked",
            "type": "Texture"
          },
          {
            "value": "The updown arrow icon to display for the [constant TreeItem.CELL_MODE_RANGE] mode cell.",
            "name": "updown",
            "type": "Texture"
          },
          {
            "default": "4",
            "value": "The vertical padding inside each item, i.e. the distance between the item's content and top/bottom border.",
            "name": "vseparation",
            "type": "int"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the currently selected cell may be selected again.",
            "setter": "set_allow_reselect",
            "name": "allow_reselect",
            "getter": "get_allow_reselect",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], a right mouse button click can select items.",
            "setter": "set_allow_rmb_select",
            "name": "allow_rmb_select",
            "getter": "get_allow_rmb_select",
            "type": "bool"
          },
          {
            "default": "1",
            "value": "The number of columns.",
            "setter": "set_columns",
            "name": "columns",
            "getter": "get_columns",
            "type": "int"
          },
          {
            "default": "0",
            "value": "The drop mode as an OR combination of flags. See [enum DropModeFlags] constants. Once dropping is done, reverts to [constant DROP_MODE_DISABLED]. Setting this during [method Control.can_drop_data] is recommended.\n\t\t\tThis controls the drop sections, i.e. the decision and drawing of possible drop locations based on the mouse position.",
            "setter": "set_drop_mode_flags",
            "name": "drop_mode_flags",
            "getter": "get_drop_mode_flags",
            "type": "int"
          },
          {
            "default": "2",
            "setter": "set_focus_mode",
            "override": "true",
            "name": "focus_mode",
            "getter": "get_focus_mode",
            "type": "int",
            "enum": "Control.FocusMode"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the folding arrow is hidden.",
            "setter": "set_hide_folding",
            "name": "hide_folding",
            "getter": "is_folding_hidden",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the tree's root is hidden.",
            "setter": "set_hide_root",
            "name": "hide_root",
            "getter": "is_root_hidden",
            "type": "bool"
          },
          {
            "default": "true",
            "setter": "set_clip_contents",
            "override": "true",
            "name": "rect_clip_content",
            "getter": "is_clipping_contents",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "Allows single or multiple selection. See the [enum SelectMode] constants.",
            "setter": "set_select_mode",
            "name": "select_mode",
            "getter": "get_select_mode",
            "type": "int",
            "enum": "Tree.SelectMode"
          }
        ]
      },
      "inherits": "Control",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "are_column_titles_visible",
            "description": "Returns [code]true[/code] if the column titles are being shown."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear",
            "description": "Clears the tree. This removes all items."
          },
          {
            "return": {
              "type": "TreeItem"
            },
            "argument": [
              {
                "default": "null",
                "name": "parent",
                "type": "Object",
                "index": "0"
              },
              {
                "default": "-1",
                "name": "idx",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "create_item",
            "description": "Creates an item in the tree and adds it as a child of [code]parent[/code].\n\t\t\t\tIf [code]parent[/code] is [code]null[/code], the root item will be the parent, or the new item will be the root itself if the tree is empty.\n\t\t\t\tThe new item will be the [code]idx[/code]th child of parent, or it will be the last child if there are not enough siblings."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "edit_selected",
            "description": "Edits the selected tree item as if it was clicked. The item must be set editable with [method TreeItem.set_editable]. Returns [code]true[/code] if the item could be edited. Fails if no item is selected."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "ensure_cursor_is_visible",
            "description": "Makes the currently focused cell visible.\n\t\t\t\tThis will scroll the tree if necessary. In [constant SELECT_ROW] mode, this will not do horizontal scrolling, as all the cells in the selected row is focused logically.\n\t\t\t\t[b]Note:[/b] Despite the name of this method, the focus cursor itself is only visible in [constant SELECT_MULTI] mode."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "position",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_column_at_position",
            "description": "Returns the column index at [code]position[/code], or -1 if no item is there."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_column_title",
            "description": "Returns the column's title."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_column_width",
            "description": "Returns the column's width in pixels."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "qualifiers": "const",
            "name": "get_custom_popup_rect",
            "description": "Returns the rectangle for custom popups. Helper to create custom cell controls that display a popup. See [method TreeItem.set_cell_mode]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "position",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_drop_section_at_position",
            "description": "Returns the drop section at [code]position[/code], or -100 if no item is there.\n\t\t\t\tValues -1, 0, or 1 will be returned for the \"above item\", \"on item\", and \"below item\" drop sections, respectively. See [enum DropModeFlags] for a description of each drop section.\n\t\t\t\tTo get the item which the returned drop section is relative to, use [method get_item_at_position]."
          },
          {
            "return": {
              "type": "TreeItem"
            },
            "qualifiers": "const",
            "name": "get_edited",
            "description": "Returns the currently edited item. Can be used with [signal item_edited] to get the item that was modified.\n\t\t\t\t[codeblock]\n\t\t\t\tfunc _ready():\n\t\t\t\t    $Tree.item_edited.connect(on_Tree_item_edited)\n\n\t\t\t\tfunc on_Tree_item_edited():\n\t\t\t\t    print($Tree.get_edited()) # This item just got edited (e.g. checked).\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_edited_column",
            "description": "Returns the column for the currently edited item."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "argument": [
              {
                "name": "item",
                "type": "Object",
                "index": "0"
              },
              {
                "default": "-1",
                "name": "column",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_item_area_rect",
            "description": "Returns the rectangle area for the specified item. If [code]column[/code] is specified, only get the position and size of that column, otherwise get the rectangle containing all columns."
          },
          {
            "return": {
              "type": "TreeItem"
            },
            "argument": {
              "name": "position",
              "type": "Vector2",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_item_at_position",
            "description": "Returns the tree item at the specified position (relative to the tree origin position)."
          },
          {
            "return": {
              "type": "TreeItem"
            },
            "argument": {
              "name": "from",
              "type": "Object",
              "index": "0"
            },
            "name": "get_next_selected",
            "description": "Returns the next selected item after the given one, or [code]null[/code] if the end is reached.\n\t\t\t\tIf [code]from[/code] is [code]null[/code], this returns the first selected item."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_pressed_button",
            "description": "Returns the last pressed button's index."
          },
          {
            "return": {
              "type": "TreeItem"
            },
            "name": "get_root",
            "description": "Returns the tree's root item, or [code]null[/code] if the tree is empty."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_scroll",
            "description": "Returns the current scrolling position."
          },
          {
            "return": {
              "type": "TreeItem"
            },
            "qualifiers": "const",
            "name": "get_selected",
            "description": "Returns the currently focused item, or [code]null[/code] if no item is focused.\n\t\t\t\tIn [constant SELECT_ROW] and [constant SELECT_SINGLE] modes, the focused item is same as the selected item. In [constant SELECT_MULTI] mode, the focused item is the item under the focus cursor, not necessarily selected.\n\t\t\t\tTo get the currently selected item(s), use [method get_next_selected]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_selected_column",
            "description": "Returns the currently focused column, or -1 if no column is focused.\n\t\t\t\tIn [constant SELECT_SINGLE] mode, the focused column is the selected column. In [constant SELECT_ROW] mode, the focused column is always 0 if any item is selected. In [constant SELECT_MULTI] mode, the focused column is the column under the focus cursor, and there are not necessarily any column selected.\n\t\t\t\tTo tell whether a column of an item is selected, use [method TreeItem.is_selected]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "item",
              "type": "Object",
              "index": "0"
            },
            "name": "scroll_to_item",
            "description": "Causes the [Tree] to jump to the specified item."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "expand",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_column_expand",
            "description": "If [code]true[/code], the column will have the \"Expand\" flag of [Control]. Columns that have the \"Expand\" flag will use their \"min_width\" in a similar fashion to [member Control.size_flags_stretch_ratio]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "min_width",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set_column_min_width",
            "description": "Sets the minimum width of a column. Columns that have the \"Expand\" flag will use their \"min_width\" in a similar fashion to [member Control.size_flags_stretch_ratio]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "column",
                "type": "int",
                "index": "0"
              },
              {
                "name": "title",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set_column_title",
            "description": "Sets the title of a column."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "visible",
              "type": "bool",
              "index": "0"
            },
            "name": "set_column_titles_visible",
            "description": "If [code]true[/code], column titles are visible."
          }
        ]
      },
      "name": "Tree",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": [
              {
                "name": "item",
                "type": "TreeItem",
                "index": "0"
              },
              {
                "name": "column",
                "type": "int",
                "index": "1"
              },
              {
                "name": "id",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "button_pressed",
            "description": "Emitted when a button on the tree was pressed (see [method TreeItem.add_button])."
          },
          {
            "name": "cell_selected",
            "description": "Emitted when a cell is selected."
          },
          {
            "argument": {
              "name": "column",
              "type": "int",
              "index": "0"
            },
            "name": "column_title_pressed",
            "description": "Emitted when a column's title is pressed."
          },
          {
            "argument": {
              "name": "arrow_clicked",
              "type": "bool",
              "index": "0"
            },
            "name": "custom_popup_edited",
            "description": "Emitted when a cell with the [constant TreeItem.CELL_MODE_CUSTOM] is clicked to be edited."
          },
          {
            "argument": {
              "name": "position",
              "type": "Vector2",
              "index": "0"
            },
            "name": "empty_rmb",
            "description": "Emitted when the right mouse button is pressed in the empty space of the tree."
          },
          {
            "argument": {
              "name": "position",
              "type": "Vector2",
              "index": "0"
            },
            "name": "empty_tree_rmb_selected",
            "description": "Emitted when the right mouse button is pressed if right mouse button selection is active and the tree is empty."
          },
          {
            "name": "item_activated",
            "description": "Emitted when an item's label is double-clicked."
          },
          {
            "argument": {
              "name": "item",
              "type": "TreeItem",
              "index": "0"
            },
            "name": "item_collapsed",
            "description": "Emitted when an item is collapsed by a click on the folding arrow."
          },
          {
            "name": "item_custom_button_pressed",
            "description": "Emitted when a custom button is pressed (i.e. in a [constant TreeItem.CELL_MODE_CUSTOM] mode cell)."
          },
          {
            "name": "item_double_clicked",
            "description": "Emitted when an item's icon is double-clicked."
          },
          {
            "name": "item_edited",
            "description": "Emitted when an item is edited."
          },
          {
            "name": "item_rmb_edited",
            "description": "Emitted when an item is edited using the right mouse button."
          },
          {
            "argument": {
              "name": "position",
              "type": "Vector2",
              "index": "0"
            },
            "name": "item_rmb_selected",
            "description": "Emitted when an item is selected with the right mouse button."
          },
          {
            "name": "item_selected",
            "description": "Emitted when an item is selected."
          },
          {
            "argument": [
              {
                "name": "item",
                "type": "TreeItem",
                "index": "0"
              },
              {
                "name": "column",
                "type": "int",
                "index": "1"
              },
              {
                "name": "selected",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "multi_selected",
            "description": "Emitted instead of [code]item_selected[/code] if [code]select_mode[/code] is [constant SELECT_MULTI]."
          },
          {
            "name": "nothing_selected",
            "description": "Emitted when a left mouse button click does not select any item."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "SELECT_SINGLE",
            "enum": "SelectMode"
          },
          {
            "value": "1",
            "name": "SELECT_ROW",
            "enum": "SelectMode"
          },
          {
            "value": "2",
            "name": "SELECT_MULTI",
            "enum": "SelectMode"
          },
          {
            "value": "0",
            "name": "DROP_MODE_DISABLED",
            "enum": "DropModeFlags"
          },
          {
            "value": "1",
            "name": "DROP_MODE_ON_ITEM",
            "enum": "DropModeFlags"
          },
          {
            "value": "2",
            "name": "DROP_MODE_INBETWEEN",
            "enum": "DropModeFlags"
          }
        ]
      },
      "brief_description": "Control to show a tree of items.",
      "description": "This shows a tree of items that can be selected, expanded and collapsed. The tree can have multiple columns with custom controls like text editing, buttons and popups. It can be useful for structured displays and interactions.\n\t\tTrees are built via code, using [TreeItem] objects to create the structure. They have a single root but multiple roots can be simulated if a dummy hidden root is added.\n\t\t[codeblock]\n\t\tfunc _ready():\n\t\t    var tree = Tree.new()\n\t\t    var root = tree.create_item()\n\t\t    tree.set_hide_root(true)\n\t\t    var child1 = tree.create_item(root)\n\t\t    var child2 = tree.create_item(root)\n\t\t    var subchild1 = tree.create_item(child1)\n\t\t    subchild1.set_text(0, \"Subchild1\")\n\t\t[/codeblock]\n\t\tTo iterate over all the [TreeItem] objects in a [Tree] object, use [method TreeItem.get_next] and [method TreeItem.get_children] after getting the root through [method get_root]. You can use [method Object.free] on a [TreeItem] to remove it from the [Tree]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {},
      "name": "TriangleMesh",
      "version": "3.3",
      "constants": {},
      "brief_description": "Internal mesh type.",
      "description": "Mesh type used internally for collision calculations."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "1",
            "value": "The tween's animation process thread. See [enum TweenProcessMode].",
            "setter": "set_tween_process_mode",
            "name": "playback_process_mode",
            "getter": "get_tween_process_mode",
            "type": "int",
            "enum": "Tween.TweenProcessMode"
          },
          {
            "default": "1.0",
            "value": "The tween's speed multiplier. For example, set it to [code]1.0[/code] for normal speed, [code]2.0[/code] for two times normal speed, or [code]0.5[/code] for half of the normal speed. A value of [code]0[/code] pauses the animation, but see also [method set_active] or [method stop_all] for this.",
            "setter": "set_speed_scale",
            "name": "playback_speed",
            "getter": "get_speed_scale",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the tween loops.",
            "setter": "set_repeat",
            "name": "repeat",
            "getter": "is_repeat",
            "type": "bool"
          }
        ]
      },
      "inherits": "Node",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "method",
                "type": "String",
                "index": "1"
              },
              {
                "name": "initial_val",
                "type": "Variant",
                "index": "2"
              },
              {
                "name": "target",
                "type": "Object",
                "index": "3"
              },
              {
                "name": "target_method",
                "type": "String",
                "index": "4"
              },
              {
                "name": "duration",
                "type": "float",
                "index": "5"
              },
              {
                "default": "0",
                "name": "trans_type",
                "type": "int",
                "enum": "Tween.TransitionType",
                "index": "6"
              },
              {
                "default": "2",
                "name": "ease_type",
                "type": "int",
                "enum": "Tween.EaseType",
                "index": "7"
              },
              {
                "default": "0",
                "name": "delay",
                "type": "float",
                "index": "8"
              }
            ],
            "name": "follow_method",
            "description": "Follows [code]method[/code] of [code]object[/code] and applies the returned value on [code]target_method[/code] of [code]target[/code], beginning from [code]initial_val[/code] for [code]duration[/code] seconds, [code]delay[/code] later. Methods are called with consecutive values.\n\t\t\t\tUse [enum TransitionType] for [code]trans_type[/code] and [enum EaseType] for [code]ease_type[/code] parameters. These values control the timing and direction of the interpolation. See the class description for more information."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "property",
                "type": "NodePath",
                "index": "1"
              },
              {
                "name": "initial_val",
                "type": "Variant",
                "index": "2"
              },
              {
                "name": "target",
                "type": "Object",
                "index": "3"
              },
              {
                "name": "target_property",
                "type": "NodePath",
                "index": "4"
              },
              {
                "name": "duration",
                "type": "float",
                "index": "5"
              },
              {
                "default": "0",
                "name": "trans_type",
                "type": "int",
                "enum": "Tween.TransitionType",
                "index": "6"
              },
              {
                "default": "2",
                "name": "ease_type",
                "type": "int",
                "enum": "Tween.EaseType",
                "index": "7"
              },
              {
                "default": "0",
                "name": "delay",
                "type": "float",
                "index": "8"
              }
            ],
            "name": "follow_property",
            "description": "Follows [code]property[/code] of [code]object[/code] and applies it on [code]target_property[/code] of [code]target[/code], beginning from [code]initial_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later.\n\t\t\t\tUse [enum TransitionType] for [code]trans_type[/code] and [enum EaseType] for [code]ease_type[/code] parameters. These values control the timing and direction of the interpolation. See the class description for more information."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_runtime",
            "description": "Returns the total time needed for all tweens to end. If you have two tweens, one lasting 10 seconds and the other 20 seconds, it would return 20 seconds, as by that time all tweens would have finished."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "duration",
                "type": "float",
                "index": "1"
              },
              {
                "name": "callback",
                "type": "String",
                "index": "2"
              },
              {
                "default": "null",
                "name": "arg1",
                "type": "Variant",
                "index": "3"
              },
              {
                "default": "null",
                "name": "arg2",
                "type": "Variant",
                "index": "4"
              },
              {
                "default": "null",
                "name": "arg3",
                "type": "Variant",
                "index": "5"
              },
              {
                "default": "null",
                "name": "arg4",
                "type": "Variant",
                "index": "6"
              },
              {
                "default": "null",
                "name": "arg5",
                "type": "Variant",
                "index": "7"
              }
            ],
            "name": "interpolate_callback",
            "description": "Calls [code]callback[/code] of [code]object[/code] after [code]duration[/code]. [code]arg1[/code]-[code]arg5[/code] are arguments to be passed to the callback."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "duration",
                "type": "float",
                "index": "1"
              },
              {
                "name": "callback",
                "type": "String",
                "index": "2"
              },
              {
                "default": "null",
                "name": "arg1",
                "type": "Variant",
                "index": "3"
              },
              {
                "default": "null",
                "name": "arg2",
                "type": "Variant",
                "index": "4"
              },
              {
                "default": "null",
                "name": "arg3",
                "type": "Variant",
                "index": "5"
              },
              {
                "default": "null",
                "name": "arg4",
                "type": "Variant",
                "index": "6"
              },
              {
                "default": "null",
                "name": "arg5",
                "type": "Variant",
                "index": "7"
              }
            ],
            "name": "interpolate_deferred_callback",
            "description": "Calls [code]callback[/code] of [code]object[/code] after [code]duration[/code] on the main thread (similar to [method Object.call_deferred]). [code]arg1[/code]-[code]arg5[/code] are arguments to be passed to the callback."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "method",
                "type": "String",
                "index": "1"
              },
              {
                "name": "initial_val",
                "type": "Variant",
                "index": "2"
              },
              {
                "name": "final_val",
                "type": "Variant",
                "index": "3"
              },
              {
                "name": "duration",
                "type": "float",
                "index": "4"
              },
              {
                "default": "0",
                "name": "trans_type",
                "type": "int",
                "enum": "Tween.TransitionType",
                "index": "5"
              },
              {
                "default": "2",
                "name": "ease_type",
                "type": "int",
                "enum": "Tween.EaseType",
                "index": "6"
              },
              {
                "default": "0",
                "name": "delay",
                "type": "float",
                "index": "7"
              }
            ],
            "name": "interpolate_method",
            "description": "Animates [code]method[/code] of [code]object[/code] from [code]initial_val[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later. Methods are called with consecutive values.\n\t\t\t\tUse [enum TransitionType] for [code]trans_type[/code] and [enum EaseType] for [code]ease_type[/code] parameters. These values control the timing and direction of the interpolation. See the class description for more information."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "property",
                "type": "NodePath",
                "index": "1"
              },
              {
                "name": "initial_val",
                "type": "Variant",
                "index": "2"
              },
              {
                "name": "final_val",
                "type": "Variant",
                "index": "3"
              },
              {
                "name": "duration",
                "type": "float",
                "index": "4"
              },
              {
                "default": "0",
                "name": "trans_type",
                "type": "int",
                "enum": "Tween.TransitionType",
                "index": "5"
              },
              {
                "default": "2",
                "name": "ease_type",
                "type": "int",
                "enum": "Tween.EaseType",
                "index": "6"
              },
              {
                "default": "0",
                "name": "delay",
                "type": "float",
                "index": "7"
              }
            ],
            "name": "interpolate_property",
            "description": "Animates [code]property[/code] of [code]object[/code] from [code]initial_val[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later. Setting the initial value to [code]null[/code] uses the current value of the property.\n\t\t\t\tUse [enum TransitionType] for [code]trans_type[/code] and [enum EaseType] for [code]ease_type[/code] parameters. These values control the timing and direction of the interpolation. See the class description for more information."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_active",
            "description": "Returns [code]true[/code] if any tweens are currently running.\n\t\t\t\t[b]Note:[/b] This method doesn't consider tweens that have ended."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "default": "\"\"",
                "name": "key",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "remove",
            "description": "Stops animation and removes a tween, given its object and property/method pair. By default, all tweens are removed, unless [code]key[/code] is specified."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "remove_all",
            "description": "Stops animation and removes all tweens."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "default": "\"\"",
                "name": "key",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "reset",
            "description": "Resets a tween to its initial value (the one given, not the one before the tween), given its object and property/method pair. By default, all tweens are removed, unless [code]key[/code] is specified."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "reset_all",
            "description": "Resets all tweens to their initial values (the ones given, not those before the tween)."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "default": "\"\"",
                "name": "key",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "resume",
            "description": "Continues animating a stopped tween, given its object and property/method pair. By default, all tweens are resumed, unless [code]key[/code] is specified."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "resume_all",
            "description": "Continues animating all stopped tweens."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "time",
              "type": "float",
              "index": "0"
            },
            "name": "seek",
            "description": "Sets the interpolation to the given [code]time[/code] in seconds."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "active",
              "type": "bool",
              "index": "0"
            },
            "name": "set_active",
            "description": "Activates/deactivates the tween. See also [method stop_all] and [method resume_all]."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "start",
            "description": "Starts the tween. You can define animations both before and after this."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "default": "\"\"",
                "name": "key",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "stop",
            "description": "Stops a tween, given its object and property/method pair. By default, all tweens are stopped, unless [code]key[/code] is specified."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "stop_all",
            "description": "Stops animating all tweens."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "method",
                "type": "String",
                "index": "1"
              },
              {
                "name": "initial",
                "type": "Object",
                "index": "2"
              },
              {
                "name": "initial_method",
                "type": "String",
                "index": "3"
              },
              {
                "name": "final_val",
                "type": "Variant",
                "index": "4"
              },
              {
                "name": "duration",
                "type": "float",
                "index": "5"
              },
              {
                "default": "0",
                "name": "trans_type",
                "type": "int",
                "enum": "Tween.TransitionType",
                "index": "6"
              },
              {
                "default": "2",
                "name": "ease_type",
                "type": "int",
                "enum": "Tween.EaseType",
                "index": "7"
              },
              {
                "default": "0",
                "name": "delay",
                "type": "float",
                "index": "8"
              }
            ],
            "name": "targeting_method",
            "description": "Animates [code]method[/code] of [code]object[/code] from the value returned by [code]initial_method[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later. Methods are animated by calling them with consecutive values.\n\t\t\t\tUse [enum TransitionType] for [code]trans_type[/code] and [enum EaseType] for [code]ease_type[/code] parameters. These values control the timing and direction of the interpolation. See the class description for more information."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "property",
                "type": "NodePath",
                "index": "1"
              },
              {
                "name": "initial",
                "type": "Object",
                "index": "2"
              },
              {
                "name": "initial_val",
                "type": "NodePath",
                "index": "3"
              },
              {
                "name": "final_val",
                "type": "Variant",
                "index": "4"
              },
              {
                "name": "duration",
                "type": "float",
                "index": "5"
              },
              {
                "default": "0",
                "name": "trans_type",
                "type": "int",
                "enum": "Tween.TransitionType",
                "index": "6"
              },
              {
                "default": "2",
                "name": "ease_type",
                "type": "int",
                "enum": "Tween.EaseType",
                "index": "7"
              },
              {
                "default": "0",
                "name": "delay",
                "type": "float",
                "index": "8"
              }
            ],
            "name": "targeting_property",
            "description": "Animates [code]property[/code] of [code]object[/code] from the current value of the [code]initial_val[/code] property of [code]initial[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later.\n\t\t\t\tUse [enum TransitionType] for [code]trans_type[/code] and [enum EaseType] for [code]ease_type[/code] parameters. These values control the timing and direction of the interpolation. See the class description for more information."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "tell",
            "description": "Returns the current time of the tween."
          }
        ]
      },
      "name": "Tween",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "tween_all_completed",
            "description": "Emitted when all processes in a tween end."
          },
          {
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "key",
                "type": "NodePath",
                "index": "1"
              }
            ],
            "name": "tween_completed",
            "description": "Emitted when a tween ends."
          },
          {
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "key",
                "type": "NodePath",
                "index": "1"
              }
            ],
            "name": "tween_started",
            "description": "Emitted when a tween starts."
          },
          {
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "key",
                "type": "NodePath",
                "index": "1"
              },
              {
                "name": "elapsed",
                "type": "float",
                "index": "2"
              },
              {
                "name": "value",
                "type": "Object",
                "index": "3"
              }
            ],
            "name": "tween_step",
            "description": "Emitted at each step of the animation."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "TWEEN_PROCESS_PHYSICS",
            "enum": "TweenProcessMode"
          },
          {
            "value": "1",
            "name": "TWEEN_PROCESS_IDLE",
            "enum": "TweenProcessMode"
          },
          {
            "value": "0",
            "name": "TRANS_LINEAR",
            "enum": "TransitionType"
          },
          {
            "value": "1",
            "name": "TRANS_SINE",
            "enum": "TransitionType"
          },
          {
            "value": "2",
            "name": "TRANS_QUINT",
            "enum": "TransitionType"
          },
          {
            "value": "3",
            "name": "TRANS_QUART",
            "enum": "TransitionType"
          },
          {
            "value": "4",
            "name": "TRANS_QUAD",
            "enum": "TransitionType"
          },
          {
            "value": "5",
            "name": "TRANS_EXPO",
            "enum": "TransitionType"
          },
          {
            "value": "6",
            "name": "TRANS_ELASTIC",
            "enum": "TransitionType"
          },
          {
            "value": "7",
            "name": "TRANS_CUBIC",
            "enum": "TransitionType"
          },
          {
            "value": "8",
            "name": "TRANS_CIRC",
            "enum": "TransitionType"
          },
          {
            "value": "9",
            "name": "TRANS_BOUNCE",
            "enum": "TransitionType"
          },
          {
            "value": "10",
            "name": "TRANS_BACK",
            "enum": "TransitionType"
          },
          {
            "value": "0",
            "name": "EASE_IN",
            "enum": "EaseType"
          },
          {
            "value": "1",
            "name": "EASE_OUT",
            "enum": "EaseType"
          },
          {
            "value": "2",
            "name": "EASE_IN_OUT",
            "enum": "EaseType"
          },
          {
            "value": "3",
            "name": "EASE_OUT_IN",
            "enum": "EaseType"
          }
        ]
      },
      "brief_description": "Smoothly animates a node's properties over time.",
      "description": "Tweens are useful for animations requiring a numerical property to be interpolated over a range of values. The name [i]tween[/i] comes from [i]in-betweening[/i], an animation technique where you specify [i]keyframes[/i] and the computer interpolates the frames that appear between them.\n\t\t[Tween] is more suited than [AnimationPlayer] for animations where you don't know the final values in advance. For example, interpolating a dynamically-chosen camera zoom value is best done with a [Tween] node; it would be difficult to do the same thing with an [AnimationPlayer] node.\n\t\tHere is a brief usage example that makes a 2D node move smoothly between two positions:\n\t\t[codeblock]\n\t\tvar tween = get_node(\"Tween\")\n\t\ttween.interpolate_property($Node2D, \"position\",\n\t\t        Vector2(0, 0), Vector2(100, 100), 1,\n\t\t        Tween.TRANS_LINEAR, Tween.EASE_IN_OUT)\n\t\ttween.start()\n\t\t[/codeblock]\n\t\tMany methods require a property name, such as [code]\"position\"[/code] above. You can find the correct property name by hovering over the property in the Inspector. You can also provide the components of a property directly by using [code]\"property:component\"[/code] (e.g. [code]position:x[/code]), where it would only apply to that particular component.\n\t\tMany of the methods accept [code]trans_type[/code] and [code]ease_type[/code]. The first accepts an [enum TransitionType] constant, and refers to the way the timing of the animation is handled (see [url=https://easings.net/]easings.net[/url] for some examples). The second accepts an [enum EaseType] constant, and controls where the [code]trans_type[/code] is applied to the interpolation (in the beginning, the end, or both). If you don't know which transition and easing to pick, you can try different [enum TransitionType] constants with [constant EASE_IN_OUT], and use the one that looks best.\n\t\t[url=https://raw.githubusercontent.com/godotengine/godot-docs/master/img/tween_cheatsheet.png]Tween easing and transition types cheatsheet[/url]"
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "16",
          "value": "Define the maximum number of pending connections, during [method poll], any new pending connection exceeding that value will be automatically dropped. Setting this value to [code]0[/code] effectively prevents any new pending connection to be accepted (e.g. when all your players have connected).",
          "setter": "set_max_pending_connections",
          "name": "max_pending_connections",
          "getter": "get_max_pending_connections",
          "type": "int"
        }
      },
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_connection_available",
            "description": "Returns [code]true[/code] if a packet with a new address/port combination was received on the socket."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_listening",
            "description": "Returns [code]true[/code] if the socket is open and listening on a port."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "port",
                "type": "int",
                "index": "0"
              },
              {
                "default": "\"*\"",
                "name": "bind_address",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "listen",
            "description": "Starts the server by opening a UDP socket listening on the given port. You can optionally specify a [code]bind_address[/code] to only listen for packets sent to that address. See also [method PacketPeerUDP.listen]."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "name": "poll",
            "description": "Call this method at regular intervals (e.g. inside [method Node._process]) to process new packets. And packet from known address/port pair will be delivered to the appropriate [PacketPeerUDP], any packet received from an unknown address/port pair will be added as a pending connection (see [method is_connection_available], [method take_connection]). The maximum number of pending connection is defined via [member max_pending_connections]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "stop",
            "description": "Stops the server, closing the UDP socket if open. Will close all connected [PacketPeerUDP] accepted via [method take_connection] (remote peers will not be notified)."
          },
          {
            "return": {
              "type": "PacketPeerUDP"
            },
            "name": "take_connection",
            "description": "Returns the first pending connection (connected to the appropriate address/port). Will return [code]null[/code] if no new connection is available. See also [method is_connection_available], [method PacketPeerUDP.connect_to_host]."
          }
        ]
      },
      "name": "UDPServer",
      "version": "3.3",
      "constants": {},
      "brief_description": "Helper class to implement a UDP server.",
      "description": "A simple server that opens a UDP socket and returns connected [PacketPeerUDP] upon receiving new packets. See also [method PacketPeerUDP.connect_to_host].\n\t\tAfter starting the server ([method listen]), you will need to [method poll] it at regular intervals (e.g. inside [method Node._process]) for it to process new packets, delivering them to the appropriate [PacketPeerUDP], and taking new connections.\n\t\tBelow a small example of how it can be used:\n\t\t[codeblock]\n\t\t# server.gd\n\t\textends Node\n\n\t\tvar server := UDPServer.new()\n\t\tvar peers = []\n\n\t\tfunc _ready():\n\t\t    server.listen(4242)\n\n\t\tfunc _process(delta):\n\t\t    server.poll() # Important!\n\t\t    if server.is_connection_available():\n\t\t        var peer : PacketPeerUDP = server.take_connection()\n\t\t        var pkt = peer.get_packet()\n\t\t        print(\"Accepted peer: %s:%s\" % [peer.get_packet_ip(), peer.get_packet_port()])\n\t\t        print(\"Received data: %s\" % [pkt.get_string_from_utf8()])\n\t\t        # Reply so it knows we received the message.\n\t\t        peer.put_packet(pkt)\n\t\t        # Keep a reference so we can keep contacting the remote peer.\n\t\t        peers.append(peer)\n\n\t\t    for i in range(0, peers.size()):\n\t\t        pass # Do something with the connected peers.\n\n\t\t[/codeblock]\n\t\t[codeblock]\n\t\t# client.gd\n\t\textends Node\n\n\t\tvar udp := PacketPeerUDP.new()\n\t\tvar connected = false\n\n\t\tfunc _ready():\n\t\t    udp.connect_to_host(\"127.0.0.1\", 4242)\n\n\t\tfunc _process(delta):\n\t\t    if !connected:\n\t\t        # Try to contact server\n\t\t        udp.put_packet(\"The answer is... 42!\".to_utf8())\n\t\t    if udp.get_available_packet_count() > 0:\n\t\t        print(\"Connected: %s\" % udp.get_packet().get_string_from_utf8())\n\t\t        connected = true\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "method",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "vararg",
            "name": "add_do_method",
            "description": "Register a method that will be called when the action is committed."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "property",
                "type": "String",
                "index": "1"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "2"
              }
            ],
            "name": "add_do_property",
            "description": "Register a property value change for \"do\"."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "object",
              "type": "Object",
              "index": "0"
            },
            "name": "add_do_reference",
            "description": "Register a reference for \"do\" that will be erased if the \"do\" history is lost. This is useful mostly for new nodes created for the \"do\" call. Do not use for resources."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "method",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "vararg",
            "name": "add_undo_method",
            "description": "Register a method that will be called when the action is undone."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "object",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "property",
                "type": "String",
                "index": "1"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "2"
              }
            ],
            "name": "add_undo_property",
            "description": "Register a property value change for \"undo\"."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "object",
              "type": "Object",
              "index": "0"
            },
            "name": "add_undo_reference",
            "description": "Register a reference for \"undo\" that will be erased if the \"undo\" history is lost. This is useful mostly for nodes removed with the \"do\" call (not the \"undo\" call!)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "default": "true",
              "name": "increase_version",
              "type": "bool",
              "index": "0"
            },
            "name": "clear_history",
            "description": "Clear the undo/redo history and associated references.\n\t\t\t\tPassing [code]false[/code] to [code]increase_version[/code] will prevent the version number to be increased from this."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "commit_action",
            "description": "Commit the action. All \"do\" methods/properties are called/set when this function is called."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "name",
                "type": "String",
                "index": "0"
              },
              {
                "default": "0",
                "name": "merge_mode",
                "type": "int",
                "enum": "UndoRedo.MergeMode",
                "index": "1"
              }
            ],
            "name": "create_action",
            "description": "Create a new action. After this is called, do all your calls to [method add_do_method], [method add_undo_method], [method add_do_property], and [method add_undo_property], then commit the action with [method commit_action].\n\t\t\t\tThe way actions are merged is dictated by the [code]merge_mode[/code] argument. See [enum MergeMode] for details."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_current_action_name",
            "description": "Gets the name of the current action."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_version",
            "description": "Gets the version. Every time a new action is committed, the [UndoRedo]'s version number is increased automatically.\n\t\t\t\tThis is useful mostly to check if something changed from a saved version."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "has_redo",
            "description": "Returns [code]true[/code] if a \"redo\" action is available."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "has_undo",
            "description": "Returns [code]true[/code] if an \"undo\" action is available."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_commiting_action",
            "description": "Returns [code]true[/code] if the [UndoRedo] is currently committing the action, i.e. running its \"do\" method or property change (see [method commit_action])."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "redo",
            "description": "Redo the last action."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "undo",
            "description": "Undo the last action."
          }
        ]
      },
      "name": "UndoRedo",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "version_changed",
          "description": "Called when [method undo] or [method redo] was called."
        }
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "MERGE_DISABLE",
            "enum": "MergeMode"
          },
          {
            "value": "1",
            "name": "MERGE_ENDS",
            "enum": "MergeMode"
          },
          {
            "value": "2",
            "name": "MERGE_ALL",
            "enum": "MergeMode"
          }
        ]
      },
      "brief_description": "Helper to manage undo/redo operations in the editor or custom tools.",
      "description": "Helper to manage undo/redo operations in the editor or custom tools. It works by registering methods and property changes inside \"actions\".\n\t\tCommon behavior is to create an action, then add do/undo calls to functions or property changes, then committing the action.\n\t\tHere's an example on how to add an action to the Godot editor's own [UndoRedo], from a plugin:\n\t\t[codeblock]\n\t\tvar undo_redo = get_undo_redo() # Method of EditorPlugin.\n\n\t\tfunc do_something():\n\t\t    pass # Put your code here.\n\n\t\tfunc undo_something():\n\t\t    pass # Put here the code that reverts what's done by \"do_something()\".\n\n\t\tfunc _on_MyButton_pressed():\n\t\t    var node = get_node(\"MyNode2D\")\n\t\t    undo_redo.create_action(\"Move the node\")\n\t\t    undo_redo.add_do_method(self, \"do_something\")\n\t\t    undo_redo.add_undo_method(self, \"undo_something\")\n\t\t    undo_redo.add_do_property(node, \"position\", Vector2(100,100))\n\t\t    undo_redo.add_undo_property(node, \"position\", node.position)\n\t\t    undo_redo.commit_action()\n\t\t[/codeblock]\n\t\t[method create_action], [method add_do_method], [method add_undo_method], [method add_do_property], [method add_undo_property], and [method commit_action] should be called one after the other, like in the example. Not doing so could lead to crashes.\n\t\tIf you don't need to register a method, you can leave [method add_do_method] and [method add_undo_method] out; the same goes for properties. You can also register more than one method/property."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/development/cpp/variant_class.html"
      },
      "methods": {},
      "name": "Variant",
      "version": "3.3",
      "constants": {},
      "brief_description": "The most important data type in Godot.",
      "description": "In computer programming, a Variant class is a class that is designed to store a variety of other types. Dynamic programming languages like PHP, Lua, JavaScript and GDScript like to use them to store variables' data on the backend. With these Variants, properties are able to change value types freely.\n\t\t[codeblock]\n\t\tvar foo = 2 # foo is dynamically an integer\n\t\tfoo = \"Now foo is a string!\"\n\t\tfoo = Reference.new() # foo is an Object\n\t\tvar bar: int = 2 # bar is a statically typed integer.\n\t\t# bar = \"Uh oh! I can't make static variables become a different type!\"\n\t\t[/codeblock]\n\t\tGodot tracks all scripting API variables within Variants. Without even realizing it, you use Variants all the time. When a particular language enforces its own rules for keeping data typed, then that language is applying its own custom logic over the base Variant scripting API.\n\t\t- GDScript automatically wrap values in them. It keeps all data in plain Variants by default and then optionally enforces custom static typing rules on variable types.\n\t\t- VisualScript tracks properties inside Variants as well, but it also uses static typing. The GUI interface enforces that properties have a particular type that doesn't change over time.\n\t\t- C# is statically typed, but uses the Mono [code]object[/code] type in place of Godot's Variant class when it needs to represent a dynamic value. [code]object[/code] is the Mono runtime's equivalent of the same concept.\n\t\t- The statically-typed language NativeScript C++ does not define a built-in Variant-like class. Godot's GDNative bindings provide their own godot::Variant class for users; Any point at which the C++ code starts interacting with the Godot runtime is a place where you might have to start wrapping data inside Variant objects.\n\t\tThe global [method @GDScript.typeof] function returns the enumerated value of the Variant type stored in the current variable (see [enum Variant.Type]).\n\t\t[codeblock]\n\t\tvar foo = 2\n\t\tmatch typeof(foo):\n\t\t    TYPE_NIL:\n\t\t        print(\"foo is null\")\n\t\t    TYPE_INTEGER:\n\t\t        print(\"foo is an integer\")\n\t\t    TYPE_OBJECT:\n\t\t        # Note that Objects are their own special category.\n\t\t        # To get the name of the underlying Object type, you need the `get_class()` method.\n\t\t        print(\"foo is a(n) %s\" % foo.get_class()) # inject the class name into a formatted string.\n\t\t        # Note also that there is not yet any way to get a script's `class_name` string easily.\n\t\t        # To fetch that value, you need to dig deeply into a hidden ProjectSettings setting: an Array of Dictionaries called \"_global_script_classes\".\n\t\t        # Open your project.godot file to see it up close.\n\t\t[/codeblock]\n\t\tA Variant takes up only 20 bytes and can store almost any engine datatype inside of it. Variants are rarely used to hold information for long periods of time. Instead, they are used mainly for communication, editing, serialization and moving data around.\n\t\tGodot has specifically invested in making its Variant class as flexible as possible; so much so that it is used for a multitude of operations to facilitate communication between all of Godot's systems.\n\t\tA Variant:\n\t\t- Can store almost any datatype.\n\t\t- Can perform operations between many variants. GDScript uses Variant as its atomic/native datatype.\n\t\t- Can be hashed, so it can be compared quickly to other variants.\n\t\t- Can be used to convert safely between datatypes.\n\t\t- Can be used to abstract calling methods and their arguments. Godot exports all its functions through variants.\n\t\t- Can be used to defer calls or move data between threads.\n\t\t- Can be serialized as binary and stored to disk, or transferred via network.\n\t\t- Can be serialized to text and use it for printing values and editable settings.\n\t\t- Can work as an exported property, so the editor can edit it universally.\n\t\t- Can be used for dictionaries, arrays, parsers, etc.\n\t\t[b]Containers (Array and Dictionary):[/b] Both are implemented using variants. A [Dictionary] can match any datatype used as key to any other datatype. An [Array] just holds an array of Variants. Of course, a Variant can also hold a [Dictionary] and an [Array] inside, making it even more flexible.\n\t\tModifications to a container will modify all references to it. A [Mutex] should be created to lock it if multi-threaded access is desired."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/676",
          "title": "3D Voxel Demo"
        }
      },
      "theme_items": {
        "theme_item": {
          "default": "4",
          "value": "The vertical space between the [VBoxContainer]'s elements.",
          "name": "separation",
          "type": "int"
        }
      },
      "inherits": "BoxContainer",
      "methods": {},
      "name": "VBoxContainer",
      "version": "3.3",
      "constants": {},
      "brief_description": "Vertical box container.",
      "description": "Vertical box container. See [BoxContainer]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/math/index.html",
            "title": "Math tutorial index"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/math/vector_math.html",
            "title": "Vector math"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/math/vectors_advanced.html",
            "title": "Advanced vector math"
          },
          {
            "value": "https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab",
            "title": "3Blue1Brown Essence of Linear Algebra"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/584",
            "title": "Matrix Transform Demo"
          },
          {
            "value": "https://github.com/godotengine/godot-demo-projects/tree/master/2d",
            "title": "All 2D Demos"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "0.0",
            "value": "The vector's X component. Also accessible by using the index position [code][0][/code].",
            "setter": "",
            "name": "x",
            "getter": "",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The vector's Y component. Also accessible by using the index position [code][1][/code].",
            "setter": "",
            "name": "y",
            "getter": "",
            "type": "float"
          }
        ]
      },
      "methods": {
        "method": [
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "x",
                "type": "float",
                "index": "0"
              },
              {
                "name": "y",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "Vector2",
            "description": "Constructs a new Vector2 from the given [code]x[/code] and [code]y[/code]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "name": "abs",
            "description": "Returns a new vector with all components in absolute values (i.e. positive)."
          },
          {
            "return": {
              "type": "float"
            },
            "name": "angle",
            "description": "Returns this vector's angle with respect to the positive X axis, or [code](1, 0)[/code] vector, in radians.\n\t\t\t\tFor example, [code]Vector2.RIGHT.angle()[/code] will return zero, [code]Vector2.DOWN.angle()[/code] will return [code]PI / 2[/code] (a quarter turn, or 90 degrees), and [code]Vector2(1, -1).angle()[/code] will return [code]-PI / 4[/code] (a negative eighth turn, or -45 degrees).\n\t\t\t\tEquivalent to the result of [method @GDScript.atan2] when called with the vector's [member y] and [member x] as parameters: [code]atan2(y, x)[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "to",
              "type": "Vector2",
              "index": "0"
            },
            "name": "angle_to",
            "description": "Returns the angle to the given vector, in radians."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "to",
              "type": "Vector2",
              "index": "0"
            },
            "name": "angle_to_point",
            "description": "Returns the angle between the line connecting the two points and the X axis, in radians."
          },
          {
            "return": {
              "type": "float"
            },
            "name": "aspect",
            "description": "Returns the aspect ratio of this vector, the ratio of [member x] to [member y]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "n",
              "type": "Vector2",
              "index": "0"
            },
            "name": "bounce",
            "description": "Returns the vector \"bounced off\" from a plane defined by the given normal."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "name": "ceil",
            "description": "Returns the vector with all components rounded up (towards positive infinity)."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "length",
              "type": "float",
              "index": "0"
            },
            "name": "clamped",
            "description": "Returns the vector with a maximum length by limiting its length to [code]length[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "with",
              "type": "Vector2",
              "index": "0"
            },
            "name": "cross",
            "description": "Returns the cross product of this vector and [code]with[/code]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "b",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "pre_a",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "post_b",
                "type": "Vector2",
                "index": "2"
              },
              {
                "name": "weight",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "cubic_interpolate",
            "description": "Cubically interpolates between this vector and [code]b[/code] using [code]pre_a[/code] and [code]post_b[/code] as handles, and returns the result at position [code]weight[/code]. [code]weight[/code] is on the range of 0.0 to 1.0, representing the amount of interpolation."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "b",
              "type": "Vector2",
              "index": "0"
            },
            "name": "direction_to",
            "description": "Returns the normalized vector pointing from this vector to [code]b[/code]. This is equivalent to using [code](b - a).normalized()[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "to",
              "type": "Vector2",
              "index": "0"
            },
            "name": "distance_squared_to",
            "description": "Returns the squared distance between this vector and [code]b[/code].\n\t\t\t\tThis method runs faster than [method distance_to], so prefer it if you need to compare vectors or need the squared distance for some formula."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "to",
              "type": "Vector2",
              "index": "0"
            },
            "name": "distance_to",
            "description": "Returns the distance between this vector and [code]to[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "with",
              "type": "Vector2",
              "index": "0"
            },
            "name": "dot",
            "description": "Returns the dot product of this vector and [code]with[/code]. This can be used to compare the angle between two vectors. For example, this can be used to determine whether an enemy is facing the player.\n\t\t\t\tThe dot product will be [code]0[/code] for a straight angle (90 degrees), greater than 0 for angles narrower than 90 degrees and lower than 0 for angles wider than 90 degrees.\n\t\t\t\tWhen using unit (normalized) vectors, the result will always be between [code]-1.0[/code] (180 degree angle) when the vectors are facing opposite directions, and [code]1.0[/code] (0 degree angle) when the vectors are aligned.\n\t\t\t\t[b]Note:[/b] [code]a.dot(b)[/code] is equivalent to [code]b.dot(a)[/code]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "name": "floor",
            "description": "Returns the vector with all components rounded down (towards negative infinity)."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "v",
              "type": "Vector2",
              "index": "0"
            },
            "name": "is_equal_approx",
            "description": "Returns [code]true[/code] if this vector and [code]v[/code] are approximately equal, by running [method @GDScript.is_equal_approx] on each component."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_normalized",
            "description": "Returns [code]true[/code] if the vector is normalized, [code]false[/code] otherwise."
          },
          {
            "return": {
              "type": "float"
            },
            "name": "length",
            "description": "Returns the length (magnitude) of this vector."
          },
          {
            "return": {
              "type": "float"
            },
            "name": "length_squared",
            "description": "Returns the squared length (squared magnitude) of this vector.\n\t\t\t\tThis method runs faster than [method length], so prefer it if you need to compare vectors or need the squared distance for some formula."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "to",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "weight",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "linear_interpolate",
            "description": "Returns the result of the linear interpolation between this vector and [code]to[/code] by amount [code]weight[/code]. [code]weight[/code] is on the range of 0.0 to 1.0, representing the amount of interpolation."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "to",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "delta",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "move_toward",
            "description": "Moves the vector toward [code]to[/code] by the fixed [code]delta[/code] amount."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "name": "normalized",
            "description": "Returns the vector scaled to unit length. Equivalent to [code]v / v.length()[/code]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "mod",
              "type": "float",
              "index": "0"
            },
            "name": "posmod",
            "description": "Returns a vector composed of the [method @GDScript.fposmod] of this vector's components and [code]mod[/code]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "modv",
              "type": "Vector2",
              "index": "0"
            },
            "name": "posmodv",
            "description": "Returns a vector composed of the [method @GDScript.fposmod] of this vector's components and [code]modv[/code]'s components."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "b",
              "type": "Vector2",
              "index": "0"
            },
            "name": "project",
            "description": "Returns the vector projected onto the vector [code]b[/code]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "n",
              "type": "Vector2",
              "index": "0"
            },
            "name": "reflect",
            "description": "Returns the vector reflected from a plane defined by the given normal."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "phi",
              "type": "float",
              "index": "0"
            },
            "name": "rotated",
            "description": "Returns the vector rotated by [code]phi[/code] radians. See also [method @GDScript.deg2rad]."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "name": "round",
            "description": "Returns the vector with all components rounded to the nearest integer, with halfway cases rounded away from zero."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "name": "sign",
            "description": "Returns the vector with each component set to one or negative one, depending on the signs of the components. If a component is zero, it returns positive one."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "to",
                "type": "Vector2",
                "index": "0"
              },
              {
                "name": "weight",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "slerp",
            "description": "Returns the result of spherical linear interpolation between this vector and [code]to[/code], by amount [code]weight[/code]. [code]weight[/code] is on the range of 0.0 to 1.0, representing the amount of interpolation.\n\t\t\t\t[b]Note:[/b] Both vectors must be normalized."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "n",
              "type": "Vector2",
              "index": "0"
            },
            "name": "slide",
            "description": "Returns this vector slid along a plane defined by the given normal."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": {
              "name": "by",
              "type": "Vector2",
              "index": "0"
            },
            "name": "snapped",
            "description": "Returns this vector with each component snapped to the nearest multiple of [code]step[/code]. This can also be used to round to an arbitrary number of decimals."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "name": "tangent",
            "description": "Returns a perpendicular vector rotated 90 degrees counter-clockwise compared to the original, with the same length."
          }
        ]
      },
      "name": "Vector2",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "AXIS_X"
          },
          {
            "value": "1",
            "name": "AXIS_Y"
          },
          {
            "value": "Vector2( 0, 0 )",
            "name": "ZERO"
          },
          {
            "value": "Vector2( 1, 1 )",
            "name": "ONE"
          },
          {
            "value": "Vector2( inf, inf )",
            "name": "INF"
          },
          {
            "value": "Vector2( -1, 0 )",
            "name": "LEFT"
          },
          {
            "value": "Vector2( 1, 0 )",
            "name": "RIGHT"
          },
          {
            "value": "Vector2( 0, -1 )",
            "name": "UP"
          },
          {
            "value": "Vector2( 0, 1 )",
            "name": "DOWN"
          }
        ]
      },
      "brief_description": "Vector used for 2D math.",
      "description": "2-element structure that can be used to represent positions in 2D space or any other pair of numeric values.\n\t\t[b]Note:[/b] In a boolean context, a Vector2 will evaluate to [code]false[/code] if it's equal to [code]Vector2(0, 0)[/code]. Otherwise, a Vector2 will always evaluate to [code]true[/code]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/math/index.html",
            "title": "Math tutorial index"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/math/vector_math.html",
            "title": "Vector math"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/math/vectors_advanced.html",
            "title": "Advanced vector math"
          },
          {
            "value": "https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab",
            "title": "3Blue1Brown Essence of Linear Algebra"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/584",
            "title": "Matrix Transform Demo"
          },
          {
            "value": "https://github.com/godotengine/godot-demo-projects/tree/master/3d",
            "title": "All 3D Demos"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "0.0",
            "value": "The vector's X component. Also accessible by using the index position [code][0][/code].",
            "setter": "",
            "name": "x",
            "getter": "",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The vector's Y component. Also accessible by using the index position [code][1][/code].",
            "setter": "",
            "name": "y",
            "getter": "",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The vector's Z component. Also accessible by using the index position [code][2][/code].",
            "setter": "",
            "name": "z",
            "getter": "",
            "type": "float"
          }
        ]
      },
      "methods": {
        "method": [
          {
            "return": {
              "type": "Vector3"
            },
            "argument": [
              {
                "name": "x",
                "type": "float",
                "index": "0"
              },
              {
                "name": "y",
                "type": "float",
                "index": "1"
              },
              {
                "name": "z",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "Vector3",
            "description": "Returns a Vector3 with the given components."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "name": "abs",
            "description": "Returns a new vector with all components in absolute values (i.e. positive)."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "to",
              "type": "Vector3",
              "index": "0"
            },
            "name": "angle_to",
            "description": "Returns the minimum angle to the given vector, in radians."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "n",
              "type": "Vector3",
              "index": "0"
            },
            "name": "bounce",
            "description": "Returns the vector \"bounced off\" from a plane defined by the given normal."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "name": "ceil",
            "description": "Returns a new vector with all components rounded up (towards positive infinity)."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "b",
              "type": "Vector3",
              "index": "0"
            },
            "name": "cross",
            "description": "Returns the cross product of this vector and [code]b[/code]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": [
              {
                "name": "b",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "pre_a",
                "type": "Vector3",
                "index": "1"
              },
              {
                "name": "post_b",
                "type": "Vector3",
                "index": "2"
              },
              {
                "name": "weight",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "cubic_interpolate",
            "description": "Performs a cubic interpolation between vectors [code]pre_a[/code], [code]a[/code], [code]b[/code], [code]post_b[/code] ([code]a[/code] is current), by the given amount [code]weight[/code]. [code]weight[/code] is on the range of 0.0 to 1.0, representing the amount of interpolation."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "b",
              "type": "Vector3",
              "index": "0"
            },
            "name": "direction_to",
            "description": "Returns the normalized vector pointing from this vector to [code]b[/code]. This is equivalent to using [code](b - a).normalized()[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "b",
              "type": "Vector3",
              "index": "0"
            },
            "name": "distance_squared_to",
            "description": "Returns the squared distance between this vector and [code]b[/code].\n\t\t\t\tThis method runs faster than [method distance_to], so prefer it if you need to compare vectors or need the squared distance for some formula."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "b",
              "type": "Vector3",
              "index": "0"
            },
            "name": "distance_to",
            "description": "Returns the distance between this vector and [code]b[/code]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "b",
              "type": "Vector3",
              "index": "0"
            },
            "name": "dot",
            "description": "Returns the dot product of this vector and [code]b[/code]. This can be used to compare the angle between two vectors. For example, this can be used to determine whether an enemy is facing the player.\n\t\t\t\tThe dot product will be [code]0[/code] for a straight angle (90 degrees), greater than 0 for angles narrower than 90 degrees and lower than 0 for angles wider than 90 degrees.\n\t\t\t\tWhen using unit (normalized) vectors, the result will always be between [code]-1.0[/code] (180 degree angle) when the vectors are facing opposite directions, and [code]1.0[/code] (0 degree angle) when the vectors are aligned.\n\t\t\t\t[b]Note:[/b] [code]a.dot(b)[/code] is equivalent to [code]b.dot(a)[/code]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "name": "floor",
            "description": "Returns a new vector with all components rounded down (towards negative infinity)."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "name": "inverse",
            "description": "Returns the inverse of the vector. This is the same as [code]Vector3( 1.0 / v.x, 1.0 / v.y, 1.0 / v.z )[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "v",
              "type": "Vector3",
              "index": "0"
            },
            "name": "is_equal_approx",
            "description": "Returns [code]true[/code] if this vector and [code]v[/code] are approximately equal, by running [method @GDScript.is_equal_approx] on each component."
          },
          {
            "return": {
              "type": "bool"
            },
            "name": "is_normalized",
            "description": "Returns [code]true[/code] if the vector is normalized, [code]false[/code] otherwise."
          },
          {
            "return": {
              "type": "float"
            },
            "name": "length",
            "description": "Returns the length (magnitude) of this vector."
          },
          {
            "return": {
              "type": "float"
            },
            "name": "length_squared",
            "description": "Returns the squared length (squared magnitude) of this vector.\n\t\t\t\tThis method runs faster than [method length], so prefer it if you need to compare vectors or need the squared distance for some formula."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": [
              {
                "name": "to",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "weight",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "linear_interpolate",
            "description": "Returns the result of the linear interpolation between this vector and [code]to[/code] by amount [code]t[/code]. [code]weight[/code] is on the range of 0.0 to 1.0, representing the amount of interpolation."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "max_axis",
            "description": "Returns the axis of the vector's largest value. See [code]AXIS_*[/code] constants. If all components are equal, this method returns [constant AXIS_X]."
          },
          {
            "return": {
              "type": "int"
            },
            "name": "min_axis",
            "description": "Returns the axis of the vector's smallest value. See [code]AXIS_*[/code] constants. If all components are equal, this method returns [constant AXIS_Z]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": [
              {
                "name": "to",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "delta",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "move_toward",
            "description": "Moves this vector toward [code]to[/code] by the fixed [code]delta[/code] amount."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "name": "normalized",
            "description": "Returns the vector scaled to unit length. Equivalent to [code]v / v.length()[/code]."
          },
          {
            "return": {
              "type": "Basis"
            },
            "argument": {
              "name": "b",
              "type": "Vector3",
              "index": "0"
            },
            "name": "outer",
            "description": "Returns the outer product with [code]b[/code]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "mod",
              "type": "float",
              "index": "0"
            },
            "name": "posmod",
            "description": "Returns a vector composed of the [method @GDScript.fposmod] of this vector's components and [code]mod[/code]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "modv",
              "type": "Vector3",
              "index": "0"
            },
            "name": "posmodv",
            "description": "Returns a vector composed of the [method @GDScript.fposmod] of this vector's components and [code]modv[/code]'s components."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "b",
              "type": "Vector3",
              "index": "0"
            },
            "name": "project",
            "description": "Returns this vector projected onto another vector [code]b[/code]."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "n",
              "type": "Vector3",
              "index": "0"
            },
            "name": "reflect",
            "description": "Returns this vector reflected from a plane defined by the given normal."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": [
              {
                "name": "axis",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "phi",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "rotated",
            "description": "Rotates this vector around a given axis by [code]phi[/code] radians. The axis must be a normalized vector."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "name": "round",
            "description": "Returns this vector with all components rounded to the nearest integer, with halfway cases rounded away from zero."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "name": "sign",
            "description": "Returns a vector with each component set to one or negative one, depending on the signs of this vector's components. If a component is zero, it returns positive one."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": [
              {
                "name": "to",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "weight",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "slerp",
            "description": "Returns the result of spherical linear interpolation between this vector and [code]to[/code], by amount [code]weight[/code]. [code]weight[/code] is on the range of 0.0 to 1.0, representing the amount of interpolation.\n\t\t\t\t[b]Note:[/b] Both vectors must be normalized."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "n",
              "type": "Vector3",
              "index": "0"
            },
            "name": "slide",
            "description": "Returns this vector slid along a plane defined by the given normal."
          },
          {
            "return": {
              "type": "Vector3"
            },
            "argument": {
              "name": "by",
              "type": "Vector3",
              "index": "0"
            },
            "name": "snapped",
            "description": "Returns this vector with each component snapped to the nearest multiple of [code]step[/code]. This can also be used to round to an arbitrary number of decimals."
          },
          {
            "return": {
              "type": "Basis"
            },
            "name": "to_diagonal_matrix",
            "description": "Returns a diagonal matrix with the vector as main diagonal.\n\t\t\t\tThis is equivalent to a Basis with no rotation or shearing and this vector's components set as the scale."
          }
        ]
      },
      "name": "Vector3",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "AXIS_X"
          },
          {
            "value": "1",
            "name": "AXIS_Y"
          },
          {
            "value": "2",
            "name": "AXIS_Z"
          },
          {
            "value": "Vector3( 0, 0, 0 )",
            "name": "ZERO"
          },
          {
            "value": "Vector3( 1, 1, 1 )",
            "name": "ONE"
          },
          {
            "value": "Vector3( inf, inf, inf )",
            "name": "INF"
          },
          {
            "value": "Vector3( -1, 0, 0 )",
            "name": "LEFT"
          },
          {
            "value": "Vector3( 1, 0, 0 )",
            "name": "RIGHT"
          },
          {
            "value": "Vector3( 0, 1, 0 )",
            "name": "UP"
          },
          {
            "value": "Vector3( 0, -1, 0 )",
            "name": "DOWN"
          },
          {
            "value": "Vector3( 0, 0, -1 )",
            "name": "FORWARD"
          },
          {
            "value": "Vector3( 0, 0, 1 )",
            "name": "BACK"
          }
        ]
      },
      "brief_description": "Vector used for 3D math.",
      "description": "3-element structure that can be used to represent positions in 3D space or any other pair of numeric values.\n\t\t[b]Note:[/b] In a boolean context, a Vector3 will evaluate to [code]false[/code] if it's equal to [code]Vector3(0, 0, 0)[/code]. Otherwise, a Vector3 will always evaluate to [code]true[/code]."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/524",
          "title": "3D Truck Town Demo"
        }
      },
      "members": {
        "member": [
          {
            "default": "0.0",
            "value": "Slows down the vehicle by applying a braking force. The vehicle is only slowed down if the wheels are in contact with a surface. The force you need to apply to adequately slow down your vehicle depends on the [member RigidBody.mass] of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 30 range for hard braking.",
            "setter": "set_brake",
            "name": "brake",
            "getter": "get_brake",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Accelerates the vehicle by applying an engine force. The vehicle is only speed up if the wheels that have [member VehicleWheel.use_as_traction] set to [code]true[/code] and are in contact with a surface. The [member RigidBody.mass] of the vehicle has an effect on the acceleration of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 50 range for acceleration.\n\t\t\t[b]Note:[/b] The simulation does not take the effect of gears into account, you will need to add logic for this if you wish to simulate gears.\n\t\t\tA negative value will result in the vehicle reversing.",
            "setter": "set_engine_force",
            "name": "engine_force",
            "getter": "get_engine_force",
            "type": "float"
          },
          {
            "default": "40.0",
            "setter": "set_mass",
            "override": "true",
            "name": "mass",
            "getter": "get_mass",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The steering angle for the vehicle. Setting this to a non-zero value will result in the vehicle turning when it's moving. Wheels that have [member VehicleWheel.use_as_steering] set to [code]true[/code] will automatically be rotated.",
            "setter": "set_steering",
            "name": "steering",
            "getter": "get_steering",
            "type": "float"
          },
          {
            "default": "392.0",
            "setter": "set_weight",
            "override": "true",
            "name": "weight",
            "getter": "get_weight",
            "type": "float"
          }
        ]
      },
      "inherits": "RigidBody",
      "methods": {},
      "name": "VehicleBody",
      "version": "3.3",
      "constants": {},
      "brief_description": "Physics body that simulates the behavior of a car.",
      "description": "This node implements all the physics logic needed to simulate a car. It is based on the raycast vehicle system commonly found in physics engines. You will need to add a [CollisionShape] for the main body of your vehicle and add [VehicleWheel] nodes for the wheels. You should also add a [MeshInstance] to this node for the 3D model of your car but this model should not include meshes for the wheels. You should control the vehicle by using the [member brake], [member engine_force], and [member steering] properties and not change the position or orientation of this node directly.\n\t\t[b]Note:[/b] The origin point of your VehicleBody will determine the center of gravity of your vehicle so it is better to keep this low and move the [CollisionShape] and [MeshInstance] upwards.\n\t\t[b]Note:[/b] This class has known issues and isn't designed to provide realistic 3D vehicle physics. If you want advanced vehicle physics, you will probably have to write your own physics integration using another [PhysicsBody] class."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/524",
          "title": "3D Truck Town Demo"
        }
      },
      "members": {
        "member": [
          {
            "default": "0.0",
            "value": "Slows down the wheel by applying a braking force. The wheel is only slowed down if it is in contact with a surface. The force you need to apply to adequately slow down your vehicle depends on the [member RigidBody.mass] of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 30 range for hard braking.",
            "setter": "set_brake",
            "name": "brake",
            "getter": "get_brake",
            "type": "float"
          },
          {
            "default": "0.83",
            "value": "The damping applied to the spring when the spring is being compressed. This value should be between 0.0 (no damping) and 1.0. A value of 0.0 means the car will keep bouncing as the spring keeps its energy. A good value for this is around 0.3 for a normal car, 0.5 for a race car.",
            "setter": "set_damping_compression",
            "name": "damping_compression",
            "getter": "get_damping_compression",
            "type": "float"
          },
          {
            "default": "0.88",
            "value": "The damping applied to the spring when relaxing. This value should be between 0.0 (no damping) and 1.0. This value should always be slightly higher than the [member damping_compression] property. For a [member damping_compression] value of 0.3, try a relaxation value of 0.5.",
            "setter": "set_damping_relaxation",
            "name": "damping_relaxation",
            "getter": "get_damping_relaxation",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Accelerates the wheel by applying an engine force. The wheel is only speed up if it is in contact with a surface. The [member RigidBody.mass] of the vehicle has an effect on the acceleration of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 50 range for acceleration.\n\t\t\t[b]Note:[/b] The simulation does not take the effect of gears into account, you will need to add logic for this if you wish to simulate gears.\n\t\t\tA negative value will result in the wheel reversing.",
            "setter": "set_engine_force",
            "name": "engine_force",
            "getter": "get_engine_force",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "The steering angle for the wheel. Setting this to a non-zero value will result in the vehicle turning when it's moving.",
            "setter": "set_steering",
            "name": "steering",
            "getter": "get_steering",
            "type": "float"
          },
          {
            "default": "6000.0",
            "value": "The maximum force the spring can resist. This value should be higher than a quarter of the [member RigidBody.mass] of the [VehicleBody] or the spring will not carry the weight of the vehicle. Good results are often obtained by a value that is about 3× to 4× this number.",
            "setter": "set_suspension_max_force",
            "name": "suspension_max_force",
            "getter": "get_suspension_max_force",
            "type": "float"
          },
          {
            "default": "5.88",
            "value": "This value defines the stiffness of the suspension. Use a value lower than 50 for an off-road car, a value between 50 and 100 for a race car and try something around 200 for something like a Formula 1 car.",
            "setter": "set_suspension_stiffness",
            "name": "suspension_stiffness",
            "getter": "get_suspension_stiffness",
            "type": "float"
          },
          {
            "default": "5.0",
            "value": "This is the distance the suspension can travel. As Godot units are equivalent to meters, keep this setting relatively low. Try a value between 0.1 and 0.3 depending on the type of car.",
            "setter": "set_suspension_travel",
            "name": "suspension_travel",
            "getter": "get_suspension_travel",
            "type": "float"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], this wheel will be turned when the car steers. This value is used in conjunction with [member VehicleBody.steering] and ignored if you are using the per-wheel [member steering] value instead.",
            "setter": "set_use_as_steering",
            "name": "use_as_steering",
            "getter": "is_used_as_steering",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], this wheel transfers engine force to the ground to propel the vehicle forward. This value is used in conjunction with [member VehicleBody.engine_force] and ignored if you are using the per-wheel [member engine_force] value instead.",
            "setter": "set_use_as_traction",
            "name": "use_as_traction",
            "getter": "is_used_as_traction",
            "type": "bool"
          },
          {
            "default": "10.5",
            "value": "This determines how much grip this wheel has. It is combined with the friction setting of the surface the wheel is in contact with. 0.0 means no grip, 1.0 is normal grip. For a drift car setup, try setting the grip of the rear wheels slightly lower than the front wheels, or use a lower value to simulate tire wear.\n\t\t\tIt's best to set this to 1.0 when starting out.",
            "setter": "set_friction_slip",
            "name": "wheel_friction_slip",
            "getter": "get_friction_slip",
            "type": "float"
          },
          {
            "default": "0.5",
            "value": "The radius of the wheel in meters.",
            "setter": "set_radius",
            "name": "wheel_radius",
            "getter": "get_radius",
            "type": "float"
          },
          {
            "default": "0.15",
            "value": "This is the distance in meters the wheel is lowered from its origin point. Don't set this to 0.0 and move the wheel into position, instead move the origin point of your wheel (the gizmo in Godot) to the position the wheel will take when bottoming out, then use the rest length to move the wheel down to the position it should be in when the car is in rest.",
            "setter": "set_suspension_rest_length",
            "name": "wheel_rest_length",
            "getter": "get_suspension_rest_length",
            "type": "float"
          },
          {
            "default": "0.1",
            "value": "This value affects the roll of your vehicle. If set to 1.0 for all wheels, your vehicle will be prone to rolling over, while a value of 0.0 will resist body roll.",
            "setter": "set_roll_influence",
            "name": "wheel_roll_influence",
            "getter": "get_roll_influence",
            "type": "float"
          }
        ]
      },
      "inherits": "Spatial",
      "methods": {
        "method": [
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_rpm",
            "description": "Returns the rotational speed of the wheel in revolutions per minute."
          },
          {
            "return": {
              "type": "float"
            },
            "qualifiers": "const",
            "name": "get_skidinfo",
            "description": "Returns a value between 0.0 and 1.0 that indicates whether this wheel is skidding. 0.0 is skidding (the wheel has lost grip, e.g. icy terrain), 1.0 means not skidding (the wheel has full grip, e.g. dry asphalt road)."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_in_contact",
            "description": "Returns [code]true[/code] if this wheel is in contact with a surface."
          }
        ]
      },
      "name": "VehicleWheel",
      "version": "3.3",
      "constants": {},
      "brief_description": "Physics object that simulates the behavior of a wheel.",
      "description": "This node needs to be used as a child node of [VehicleBody] and simulates the behavior of one of its wheels. This node also acts as a collider to detect if the wheel is touching a surface.\n\t\t[b]Note:[/b] This class has known issues and isn't designed to provide realistic 3D vehicle physics. If you want advanced vehicle physics, you will probably have to write your own physics integration using another [PhysicsBody] class."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0",
            "value": "The embedded audio track to play.",
            "setter": "set_audio_track",
            "name": "audio_track",
            "getter": "get_audio_track",
            "type": "int"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], playback starts when the scene loads.",
            "setter": "set_autoplay",
            "name": "autoplay",
            "getter": "has_autoplay",
            "type": "bool"
          },
          {
            "default": "500",
            "value": "Amount of time in milliseconds to store in buffer while playing.",
            "setter": "set_buffering_msec",
            "name": "buffering_msec",
            "getter": "get_buffering_msec",
            "type": "int"
          },
          {
            "default": "\"Master\"",
            "value": "Audio bus to use for sound playback.",
            "setter": "set_bus",
            "name": "bus",
            "getter": "get_bus",
            "type": "String"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the video scales to the control size. Otherwise, the control minimum size will be automatically adjusted to match the video stream's dimensions.",
            "setter": "set_expand",
            "name": "expand",
            "getter": "has_expand",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the video is paused.",
            "setter": "set_paused",
            "name": "paused",
            "getter": "is_paused",
            "type": "bool"
          },
          {
            "value": "The assigned video stream. See description for supported formats.",
            "setter": "set_stream",
            "name": "stream",
            "getter": "get_stream",
            "type": "VideoStream"
          },
          {
            "value": "The current position of the stream, in seconds.\n\t\t\t[b]Note:[/b] Changing this value won't have any effect as seeking is not implemented yet, except in video formats implemented by a GDNative add-on.",
            "setter": "set_stream_position",
            "name": "stream_position",
            "getter": "get_stream_position",
            "type": "float"
          },
          {
            "value": "Audio volume as a linear value.",
            "setter": "set_volume",
            "name": "volume",
            "getter": "get_volume",
            "type": "float"
          },
          {
            "default": "0.0",
            "value": "Audio volume in dB.",
            "setter": "set_volume_db",
            "name": "volume_db",
            "getter": "get_volume_db",
            "type": "float"
          }
        ]
      },
      "inherits": "Control",
      "methods": {
        "method": [
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_stream_name",
            "description": "Returns the video stream's name, or [code]\"<No Stream>\"[/code] if no video stream is assigned."
          },
          {
            "return": {
              "type": "Texture"
            },
            "qualifiers": "const",
            "name": "get_video_texture",
            "description": "Returns the current frame as a [Texture]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_playing",
            "description": "Returns [code]true[/code] if the video is playing.\n\t\t\t\t[b]Note:[/b] The video is still considered playing if paused during playback."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "play",
            "description": "Starts the video playback from the beginning. If the video is paused, this will not unpause the video."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "stop",
            "description": "Stops the video playback and sets the stream position to 0.\n\t\t\t\t[b]Note:[/b] Although the stream position will be set to 0, the first frame of the video stream won't become the current frame."
          }
        ]
      },
      "name": "VideoPlayer",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "finished",
          "description": "Emitted when playback is finished."
        }
      },
      "constants": {},
      "brief_description": "Control for playing video streams.",
      "description": "Control node for playing video streams using [VideoStream] resources.\n\t\tSupported video formats are [url=https://www.webmproject.org/]WebM[/url] ([code].webm[/code], [VideoStreamWebm]), [url=https://www.theora.org/]Ogg Theora[/url] ([code].ogv[/code], [VideoStreamTheora]), and any format exposed via a GDNative plugin using [VideoStreamGDNative].\n\t\t[b]Note:[/b] Due to a bug, VideoPlayer does not support localization remapping yet.\n\t\t[b]Warning:[/b] On HTML5, video playback [i]will[/i] perform poorly due to missing architecture-specific assembly optimizations, especially for VP8/VP9."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Resource",
      "methods": {},
      "name": "VideoStream",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base resource for video streams.",
      "description": "Base resource type for all video streams. Classes that derive from [VideoStream] can all be used as resource types to play back videos in [VideoPlayer]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the viewport will be scaled to the control's size.",
            "setter": "set_stretch",
            "name": "stretch",
            "getter": "is_stretch_enabled",
            "type": "bool"
          },
          {
            "default": "1",
            "value": "Divides the viewport's effective resolution by this value while preserving its scale. This can be used to speed up rendering.\n\t\t\tFor example, a 1280×720 viewport with [member stretch_shrink] set to [code]2[/code] will be rendered at 640×360 while occupying the same size in the container.\n\t\t\t[b]Note:[/b] [member stretch] must be [code]true[/code] for this property to work.",
            "setter": "set_stretch_shrink",
            "name": "stretch_shrink",
            "getter": "get_stretch_shrink",
            "type": "int"
          }
        ]
      },
      "inherits": "Container",
      "methods": {},
      "name": "ViewportContainer",
      "version": "3.3",
      "constants": {},
      "brief_description": "Control for holding [Viewport]s.",
      "description": "A [Container] node that holds a [Viewport], automatically setting its size.\n\t\t[b]Note:[/b] Changing a ViewportContainer's [member Control.rect_scale] will cause its contents to appear distorted. To change its visual size without causing distortion, adjust the node's margins instead (if it's not already in a container)."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://godotengine.org/asset-library/asset/127",
            "title": "GUI in 3D Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/128",
            "title": "3D in 2D Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/129",
            "title": "2D in 3D Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/586",
            "title": "3D Viewport Scaling Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "0",
            "setter": "set_flags",
            "override": "true",
            "name": "flags",
            "getter": "get_flags",
            "type": "int"
          },
          {
            "default": "true",
            "setter": "set_local_to_scene",
            "override": "true",
            "name": "resource_local_to_scene",
            "getter": "is_local_to_scene",
            "type": "bool"
          },
          {
            "default": "NodePath(\"\")",
            "value": "The path to the [Viewport] node to display. This is relative to the scene root, not to the node which uses the texture.",
            "setter": "set_viewport_path_in_scene",
            "name": "viewport_path",
            "getter": "get_viewport_path_in_scene",
            "type": "NodePath"
          }
        ]
      },
      "inherits": "Texture",
      "methods": {},
      "name": "ViewportTexture",
      "version": "3.3",
      "constants": {},
      "brief_description": "Texture which displays the content of a [Viewport].",
      "description": "Displays the content of a [Viewport] node as a dynamic [Texture]. This can be used to mix controls, 2D, and 3D elements in the same scene.\n\t\tTo create a ViewportTexture in code, use the [method Viewport.get_texture] method on the target viewport."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/2d/2d_transforms.html",
            "title": "Viewport and canvas transforms"
          },
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/viewports/index.html",
            "title": "Viewports tutorial index"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/127",
            "title": "GUI in 3D Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/128",
            "title": "3D in 2D Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/129",
            "title": "2D in 3D Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/130",
            "title": "Screen Capture Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/541",
            "title": "Dynamic Split Screen Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/586",
            "title": "3D Viewport Scaling Demo"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the viewport will be used in AR/VR process.",
            "setter": "set_use_arvr",
            "name": "arvr",
            "getter": "use_arvr",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the viewport will process 2D audio streams.",
            "setter": "set_as_audio_listener_2d",
            "name": "audio_listener_enable_2d",
            "getter": "is_audio_listener_2d",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the viewport will process 3D audio streams.",
            "setter": "set_as_audio_listener",
            "name": "audio_listener_enable_3d",
            "getter": "is_audio_listener",
            "type": "bool"
          },
          {
            "value": "The canvas transform of the viewport, useful for changing the on-screen positions of all child [CanvasItem]s. This is relative to the global canvas transform of the viewport.",
            "setter": "set_canvas_transform",
            "name": "canvas_transform",
            "getter": "get_canvas_transform",
            "type": "Transform2D"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], uses a fast post-processing filter to make banding significantly less visible. In some cases, debanding may introduce a slightly noticeable dithering pattern. It's recommended to enable debanding only when actually needed since the dithering pattern will make lossless-compressed screenshots larger.\n\t\t\t[b]Note:[/b] Only available on the GLES3 backend. [member hdr] must also be [code]true[/code] for debanding to be effective.",
            "setter": "set_use_debanding",
            "name": "debanding",
            "getter": "get_use_debanding",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "The overlay mode for test rendered geometry in debug purposes.",
            "setter": "set_debug_draw",
            "name": "debug_draw",
            "getter": "get_debug_draw",
            "type": "int",
            "enum": "Viewport.DebugDraw"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the viewport will disable 3D rendering. For actual disabling use [code]usage[/code].",
            "setter": "set_disable_3d",
            "name": "disable_3d",
            "getter": "is_3d_disabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "Enables fast approximate antialiasing. FXAA is a popular screen-space antialiasing method, which is fast but will make the image look blurry, especially at lower resolutions. It can still work relatively well at large resolutions such as 1440p and 4K.",
            "setter": "set_use_fxaa",
            "name": "fxaa",
            "getter": "get_use_fxaa",
            "type": "bool"
          },
          {
            "value": "The global canvas transform of the viewport. The canvas transform is relative to this.",
            "setter": "set_global_canvas_transform",
            "name": "global_canvas_transform",
            "getter": "get_global_canvas_transform",
            "type": "Transform2D"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the viewport will not receive input events.",
            "setter": "set_disable_input",
            "name": "gui_disable_input",
            "getter": "is_input_disabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the GUI controls on the viewport will lay pixel perfectly.",
            "setter": "set_snap_controls_to_pixels",
            "name": "gui_snap_controls_to_pixels",
            "getter": "is_snap_controls_to_pixels_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "setter": "set_handle_input_locally",
            "name": "handle_input_locally",
            "getter": "is_handling_input_locally",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], the viewport rendering will receive benefits from High Dynamic Range algorithm. High Dynamic Range allows the viewport to receive values that are outside the 0-1 range. In Godot HDR uses 16 bits, meaning it does not store the full range of a floating point number.\n\t\t\t[b]Note:[/b] Requires [member usage] to be set to [constant USAGE_3D] or [constant USAGE_3D_NO_EFFECTS], since HDR is not supported for 2D.",
            "setter": "set_hdr",
            "name": "hdr",
            "getter": "get_hdr",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the result after 3D rendering will not have a linear to sRGB color conversion applied. This is important when the viewport is used as a render target where the result is used as a texture on a 3D object rendered in another viewport. It is also important if the viewport is used to create data that is not color based (noise, heightmaps, pickmaps, etc.). Do not enable this when the viewport is used as a texture on a 2D object or if the viewport is your final output.",
            "setter": "set_keep_3d_linear",
            "name": "keep_3d_linear",
            "getter": "get_keep_3d_linear",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "The multisample anti-aliasing mode. A higher number results in smoother edges at the cost of significantly worse performance. A value of 4 is best unless targeting very high-end systems.",
            "setter": "set_msaa",
            "name": "msaa",
            "getter": "get_msaa",
            "type": "int",
            "enum": "Viewport.MSAA"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the viewport will use [World] defined in [code]world[/code] property.",
            "setter": "set_use_own_world",
            "name": "own_world",
            "getter": "is_using_own_world",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the objects rendered by viewport become subjects of mouse picking process.",
            "setter": "set_physics_object_picking",
            "name": "physics_object_picking",
            "getter": "get_physics_object_picking",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], renders the Viewport directly to the screen instead of to the root viewport. Only available in GLES2. This is a low-level optimization and should not be used in most cases. If used, reading from the Viewport or from [code]SCREEN_TEXTURE[/code] becomes unavailable. For more information see [method VisualServer.viewport_set_render_direct_to_screen].",
            "setter": "set_use_render_direct_to_screen",
            "name": "render_direct_to_screen",
            "getter": "is_using_render_direct_to_screen",
            "type": "bool"
          },
          {
            "default": "0",
            "value": "The clear mode when viewport used as a render target.\n\t\t\t[b]Note:[/b] This property is intended for 2D usage.",
            "setter": "set_clear_mode",
            "name": "render_target_clear_mode",
            "getter": "get_clear_mode",
            "type": "int",
            "enum": "Viewport.ClearMode"
          },
          {
            "default": "2",
            "value": "The update mode when viewport used as a render target.",
            "setter": "set_update_mode",
            "name": "render_target_update_mode",
            "getter": "get_update_mode",
            "type": "int",
            "enum": "Viewport.UpdateMode"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the result of rendering will be flipped vertically.",
            "setter": "set_vflip",
            "name": "render_target_v_flip",
            "getter": "get_vflip",
            "type": "bool"
          },
          {
            "default": "2",
            "value": "The subdivision amount of the first quadrant on the shadow atlas.",
            "setter": "set_shadow_atlas_quadrant_subdiv",
            "name": "shadow_atlas_quad_0",
            "getter": "get_shadow_atlas_quadrant_subdiv",
            "type": "int",
            "enum": "Viewport.ShadowAtlasQuadrantSubdiv"
          },
          {
            "default": "2",
            "value": "The subdivision amount of the second quadrant on the shadow atlas.",
            "setter": "set_shadow_atlas_quadrant_subdiv",
            "name": "shadow_atlas_quad_1",
            "getter": "get_shadow_atlas_quadrant_subdiv",
            "type": "int",
            "enum": "Viewport.ShadowAtlasQuadrantSubdiv"
          },
          {
            "default": "3",
            "value": "The subdivision amount of the third quadrant on the shadow atlas.",
            "setter": "set_shadow_atlas_quadrant_subdiv",
            "name": "shadow_atlas_quad_2",
            "getter": "get_shadow_atlas_quadrant_subdiv",
            "type": "int",
            "enum": "Viewport.ShadowAtlasQuadrantSubdiv"
          },
          {
            "default": "4",
            "value": "The subdivision amount of the fourth quadrant on the shadow atlas.",
            "setter": "set_shadow_atlas_quadrant_subdiv",
            "name": "shadow_atlas_quad_3",
            "getter": "get_shadow_atlas_quadrant_subdiv",
            "type": "int",
            "enum": "Viewport.ShadowAtlasQuadrantSubdiv"
          },
          {
            "default": "0",
            "value": "The shadow atlas' resolution (used for omni and spot lights). The value will be rounded up to the nearest power of 2.\n\t\t\t[b]Note:[/b] If this is set to 0, shadows won't be visible. Since user-created viewports default to a value of 0, this value must be set above 0 manually.",
            "setter": "set_shadow_atlas_size",
            "name": "shadow_atlas_size",
            "getter": "get_shadow_atlas_size",
            "type": "int"
          },
          {
            "default": "Vector2( 0, 0 )",
            "value": "The width and height of viewport.",
            "setter": "set_size",
            "name": "size",
            "getter": "get_size",
            "type": "Vector2"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the size override affects stretch as well.",
            "setter": "set_size_override_stretch",
            "name": "size_override_stretch",
            "getter": "is_size_override_stretch_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the viewport should render its background as transparent.",
            "setter": "set_transparent_background",
            "name": "transparent_bg",
            "getter": "has_transparent_background",
            "type": "bool"
          },
          {
            "default": "2",
            "value": "The rendering mode of viewport.",
            "setter": "set_usage",
            "name": "usage",
            "getter": "get_usage",
            "type": "int",
            "enum": "Viewport.Usage"
          },
          {
            "value": "The custom [World] which can be used as 3D environment source.",
            "setter": "set_world",
            "name": "world",
            "getter": "get_world",
            "type": "World"
          },
          {
            "value": "The custom [World2D] which can be used as 2D environment source.",
            "setter": "set_world_2d",
            "name": "world_2d",
            "getter": "get_world_2d",
            "type": "World2D"
          }
        ]
      },
      "inherits": "Node",
      "methods": {
        "method": [
          {
            "return": {
              "type": "World"
            },
            "qualifiers": "const",
            "name": "find_world",
            "description": "Returns the 3D world of the viewport, or if none the world of the parent viewport."
          },
          {
            "return": {
              "type": "World2D"
            },
            "qualifiers": "const",
            "name": "find_world_2d",
            "description": "Returns the 2D world of the viewport."
          },
          {
            "return": {
              "type": "Camera"
            },
            "qualifiers": "const",
            "name": "get_camera",
            "description": "Returns the active 3D camera."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "qualifiers": "const",
            "name": "get_final_transform",
            "description": "Returns the total transform of the viewport."
          },
          {
            "return": {
              "type": "Control"
            },
            "qualifiers": "const",
            "name": "get_modal_stack_top",
            "description": "Returns the topmost modal in the stack."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_mouse_position",
            "description": "Returns the mouse position relative to the viewport."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "info",
              "type": "int",
              "enum": "Viewport.RenderInfo",
              "index": "0"
            },
            "name": "get_render_info",
            "description": "Returns information about the viewport from the rendering pipeline."
          },
          {
            "return": {
              "type": "int",
              "enum": "Viewport.ShadowAtlasQuadrantSubdiv"
            },
            "argument": {
              "name": "quadrant",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_shadow_atlas_quadrant_subdiv",
            "description": "Returns the [enum ShadowAtlasQuadrantSubdiv] of the specified quadrant."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "qualifiers": "const",
            "name": "get_size_override",
            "description": "Returns the size override set with [method set_size_override]."
          },
          {
            "return": {
              "type": "ViewportTexture"
            },
            "qualifiers": "const",
            "name": "get_texture",
            "description": "Returns the viewport's texture.\n\t\t\t\t[b]Note:[/b] Due to the way OpenGL works, the resulting [ViewportTexture] is flipped vertically. You can use [method Image.flip_y] on the result of [method Texture.get_data] to flip it back, for example:\n\t\t\t\t[codeblock]\n\t\t\t\tvar img = get_viewport().get_texture().get_data()\n\t\t\t\timg.flip_y()\n\t\t\t\t[/codeblock]"
          },
          {
            "return": {
              "type": "RID"
            },
            "qualifiers": "const",
            "name": "get_viewport_rid",
            "description": "Returns the viewport's RID from the [VisualServer]."
          },
          {
            "return": {
              "type": "Rect2"
            },
            "qualifiers": "const",
            "name": "get_visible_rect",
            "description": "Returns the visible rectangle in global screen coordinates."
          },
          {
            "return": {
              "type": "Variant"
            },
            "qualifiers": "const",
            "name": "gui_get_drag_data",
            "description": "Returns the drag data from the GUI, that was previously returned by [method Control.get_drag_data]."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "gui_has_modal_stack",
            "description": "Returns [code]true[/code] if there are visible modals on-screen."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "gui_is_dragging",
            "description": "Returns [code]true[/code] if the viewport is currently performing a drag operation."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "local_event",
              "type": "InputEvent",
              "index": "0"
            },
            "name": "input",
            "description": {}
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_input_handled",
            "description": {}
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_size_override_enabled",
            "description": "Returns [code]true[/code] if the size override is enabled. See [method set_size_override]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "rect",
              "type": "Rect2",
              "index": "0"
            },
            "name": "set_attach_to_screen_rect",
            "description": "Attaches this [Viewport] to the root [Viewport] with the specified rectangle. This bypasses the need for another node to display this [Viewport] but makes you responsible for updating the position of this [Viewport] manually."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "set_input_as_handled",
            "description": "Stops the input from propagating further down the [SceneTree]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "quadrant",
                "type": "int",
                "index": "0"
              },
              {
                "name": "subdiv",
                "type": "int",
                "enum": "Viewport.ShadowAtlasQuadrantSubdiv",
                "index": "1"
              }
            ],
            "name": "set_shadow_atlas_quadrant_subdiv",
            "description": "Sets the number of subdivisions to use in the specified quadrant. A higher number of subdivisions allows you to have more shadows in the scene at once, but reduces the quality of the shadows. A good practice is to have quadrants with a varying number of subdivisions and to have as few subdivisions as possible."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "enable",
                "type": "bool",
                "index": "0"
              },
              {
                "default": "Vector2( -1, -1 )",
                "name": "size",
                "type": "Vector2",
                "index": "1"
              },
              {
                "default": "Vector2( 0, 0 )",
                "name": "margin",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "set_size_override",
            "description": "Sets the size override of the viewport. If the [code]enable[/code] parameter is [code]true[/code] the override is used, otherwise it uses the default size. If the size parameter is [code](-1, -1)[/code], it won't update the size."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "local_event",
              "type": "InputEvent",
              "index": "0"
            },
            "name": "unhandled_input",
            "description": {}
          },
          {
            "return": {
              "type": "void"
            },
            "name": "update_worlds",
            "description": "Forces update of the 2D and 3D worlds."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "to_position",
              "type": "Vector2",
              "index": "0"
            },
            "name": "warp_mouse",
            "description": "Warps the mouse to a position relative to the viewport."
          }
        ]
      },
      "name": "Viewport",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "node",
              "type": "Control",
              "index": "0"
            },
            "name": "gui_focus_changed",
            "description": "Emitted when a Control node grabs keyboard focus."
          },
          {
            "name": "size_changed",
            "description": "Emitted when the size of the viewport is changed, whether by [method set_size_override], resize of window, or some other means."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "UPDATE_DISABLED",
            "enum": "UpdateMode"
          },
          {
            "value": "1",
            "name": "UPDATE_ONCE",
            "enum": "UpdateMode"
          },
          {
            "value": "2",
            "name": "UPDATE_WHEN_VISIBLE",
            "enum": "UpdateMode"
          },
          {
            "value": "3",
            "name": "UPDATE_ALWAYS",
            "enum": "UpdateMode"
          },
          {
            "value": "0",
            "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED",
            "enum": "ShadowAtlasQuadrantSubdiv"
          },
          {
            "value": "1",
            "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_1",
            "enum": "ShadowAtlasQuadrantSubdiv"
          },
          {
            "value": "2",
            "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_4",
            "enum": "ShadowAtlasQuadrantSubdiv"
          },
          {
            "value": "3",
            "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_16",
            "enum": "ShadowAtlasQuadrantSubdiv"
          },
          {
            "value": "4",
            "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_64",
            "enum": "ShadowAtlasQuadrantSubdiv"
          },
          {
            "value": "5",
            "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_256",
            "enum": "ShadowAtlasQuadrantSubdiv"
          },
          {
            "value": "6",
            "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_1024",
            "enum": "ShadowAtlasQuadrantSubdiv"
          },
          {
            "value": "7",
            "name": "SHADOW_ATLAS_QUADRANT_SUBDIV_MAX",
            "enum": "ShadowAtlasQuadrantSubdiv"
          },
          {
            "value": "0",
            "name": "RENDER_INFO_OBJECTS_IN_FRAME",
            "enum": "RenderInfo"
          },
          {
            "value": "1",
            "name": "RENDER_INFO_VERTICES_IN_FRAME",
            "enum": "RenderInfo"
          },
          {
            "value": "2",
            "name": "RENDER_INFO_MATERIAL_CHANGES_IN_FRAME",
            "enum": "RenderInfo"
          },
          {
            "value": "3",
            "name": "RENDER_INFO_SHADER_CHANGES_IN_FRAME",
            "enum": "RenderInfo"
          },
          {
            "value": "4",
            "name": "RENDER_INFO_SURFACE_CHANGES_IN_FRAME",
            "enum": "RenderInfo"
          },
          {
            "value": "5",
            "name": "RENDER_INFO_DRAW_CALLS_IN_FRAME",
            "enum": "RenderInfo"
          },
          {
            "value": "6",
            "name": "RENDER_INFO_2D_ITEMS_IN_FRAME",
            "enum": "RenderInfo"
          },
          {
            "value": "7",
            "name": "RENDER_INFO_2D_DRAW_CALLS_IN_FRAME",
            "enum": "RenderInfo"
          },
          {
            "value": "8",
            "name": "RENDER_INFO_MAX",
            "enum": "RenderInfo"
          },
          {
            "value": "0",
            "name": "DEBUG_DRAW_DISABLED",
            "enum": "DebugDraw"
          },
          {
            "value": "1",
            "name": "DEBUG_DRAW_UNSHADED",
            "enum": "DebugDraw"
          },
          {
            "value": "2",
            "name": "DEBUG_DRAW_OVERDRAW",
            "enum": "DebugDraw"
          },
          {
            "value": "3",
            "name": "DEBUG_DRAW_WIREFRAME",
            "enum": "DebugDraw"
          },
          {
            "value": "0",
            "name": "MSAA_DISABLED",
            "enum": "MSAA"
          },
          {
            "value": "1",
            "name": "MSAA_2X",
            "enum": "MSAA"
          },
          {
            "value": "2",
            "name": "MSAA_4X",
            "enum": "MSAA"
          },
          {
            "value": "3",
            "name": "MSAA_8X",
            "enum": "MSAA"
          },
          {
            "value": "4",
            "name": "MSAA_16X",
            "enum": "MSAA"
          },
          {
            "value": "0",
            "name": "USAGE_2D",
            "enum": "Usage"
          },
          {
            "value": "1",
            "name": "USAGE_2D_NO_SAMPLING",
            "enum": "Usage"
          },
          {
            "value": "2",
            "name": "USAGE_3D",
            "enum": "Usage"
          },
          {
            "value": "3",
            "name": "USAGE_3D_NO_EFFECTS",
            "enum": "Usage"
          },
          {
            "value": "0",
            "name": "CLEAR_MODE_ALWAYS",
            "enum": "ClearMode"
          },
          {
            "value": "1",
            "name": "CLEAR_MODE_NEVER",
            "enum": "ClearMode"
          },
          {
            "value": "2",
            "name": "CLEAR_MODE_ONLY_NEXT_FRAME",
            "enum": "ClearMode"
          }
        ]
      },
      "brief_description": "Creates a sub-view into the screen.",
      "description": "A Viewport creates a different view into the screen, or a sub-view inside another viewport. Children 2D Nodes will display on it, and children Camera 3D nodes will render on it too.\n\t\tOptionally, a viewport can have its own 2D or 3D world, so they don't share what they draw with other viewports.\n\t\tIf a viewport is a child of a [ViewportContainer], it will automatically take up its size, otherwise it must be set manually.\n\t\tViewports can also choose to be audio listeners, so they generate positional audio depending on a 2D or 3D camera child of it.\n\t\tAlso, viewports can be assigned to different screens in case the devices have multiple screens.\n\t\tFinally, viewports can also behave as render targets, in which case they will not be visible unless the associated texture is used to draw."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "true",
            "value": "If [code]true[/code], [RigidBody2D] nodes will be paused.",
            "setter": "set_enabler",
            "name": "freeze_bodies",
            "getter": "is_enabler_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], [AnimatedSprite] nodes will be paused.",
            "setter": "set_enabler",
            "name": "pause_animated_sprites",
            "getter": "is_enabler_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], [AnimationPlayer] nodes will be paused.",
            "setter": "set_enabler",
            "name": "pause_animations",
            "getter": "is_enabler_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], [Particles2D] nodes will be paused.",
            "setter": "set_enabler",
            "name": "pause_particles",
            "getter": "is_enabler_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the parent's [method Node._physics_process] will be stopped.",
            "setter": "set_enabler",
            "name": "physics_process_parent",
            "getter": "is_enabler_enabled",
            "type": "bool"
          },
          {
            "default": "false",
            "value": "If [code]true[/code], the parent's [method Node._process] will be stopped.",
            "setter": "set_enabler",
            "name": "process_parent",
            "getter": "is_enabler_enabled",
            "type": "bool"
          }
        ]
      },
      "inherits": "VisibilityNotifier2D",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "enabler",
              "type": "int",
              "enum": "VisibilityEnabler2D.Enabler",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_enabler_enabled",
            "description": "Returns whether the enabler identified by given [enum Enabler] constant is active."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "enabler",
                "type": "int",
                "enum": "VisibilityEnabler2D.Enabler",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_enabler",
            "description": "Sets active state of the enabler identified by given [enum Enabler] constant."
          }
        ]
      },
      "name": "VisibilityEnabler2D",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "ENABLER_PAUSE_ANIMATIONS",
            "enum": "Enabler"
          },
          {
            "value": "1",
            "name": "ENABLER_FREEZE_BODIES",
            "enum": "Enabler"
          },
          {
            "value": "2",
            "name": "ENABLER_PAUSE_PARTICLES",
            "enum": "Enabler"
          },
          {
            "value": "3",
            "name": "ENABLER_PARENT_PROCESS",
            "enum": "Enabler"
          },
          {
            "value": "4",
            "name": "ENABLER_PARENT_PHYSICS_PROCESS",
            "enum": "Enabler"
          },
          {
            "value": "5",
            "name": "ENABLER_PAUSE_ANIMATED_SPRITES",
            "enum": "Enabler"
          },
          {
            "value": "6",
            "name": "ENABLER_MAX",
            "enum": "Enabler"
          }
        ]
      },
      "brief_description": "Enables certain nodes only when approximately visible.",
      "description": "The VisibilityEnabler2D will disable [RigidBody2D], [AnimationPlayer], and other nodes when they are not visible. It will only affect nodes with the same root node as the VisibilityEnabler2D, and the root node itself.\n\t\tIf you just want to receive notifications, use [VisibilityNotifier2D] instead.\n\t\t[b]Note:[/b] For performance reasons, VisibilityEnabler2D uses an approximate heuristic with precision determined by [member ProjectSettings.world/2d/cell_size]. If you need precise visibility checking, use another method such as adding an [Area2D] node as a child of a [Camera2D] node.\n\t\t[b]Note:[/b] VisibilityEnabler2D will not affect nodes added after scene initialization."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "true",
            "value": "If [code]true[/code], [RigidBody] nodes will be paused.",
            "setter": "set_enabler",
            "name": "freeze_bodies",
            "getter": "is_enabler_enabled",
            "type": "bool"
          },
          {
            "default": "true",
            "value": "If [code]true[/code], [AnimationPlayer] nodes will be paused.",
            "setter": "set_enabler",
            "name": "pause_animations",
            "getter": "is_enabler_enabled",
            "type": "bool"
          }
        ]
      },
      "inherits": "VisibilityNotifier",
      "methods": {
        "method": [
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "enabler",
              "type": "int",
              "enum": "VisibilityEnabler.Enabler",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_enabler_enabled",
            "description": "Returns whether the enabler identified by given [enum Enabler] constant is active."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "enabler",
                "type": "int",
                "enum": "VisibilityEnabler.Enabler",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_enabler",
            "description": "Sets active state of the enabler identified by given [enum Enabler] constant."
          }
        ]
      },
      "name": "VisibilityEnabler",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "ENABLER_PAUSE_ANIMATIONS",
            "enum": "Enabler"
          },
          {
            "value": "1",
            "name": "ENABLER_FREEZE_BODIES",
            "enum": "Enabler"
          },
          {
            "value": "2",
            "name": "ENABLER_MAX",
            "enum": "Enabler"
          }
        ]
      },
      "brief_description": "Enables certain nodes only when approximately visible.",
      "description": "The VisibilityEnabler will disable [RigidBody] and [AnimationPlayer] nodes when they are not visible. It will only affect other nodes within the same scene as the VisibilityEnabler itself.\n\t\tIf you just want to receive notifications, use [VisibilityNotifier] instead.\n\t\t[b]Note:[/b] VisibilityEnabler uses an approximate heuristic for performance reasons. It doesn't take walls and other occlusion into account. The heuristic is an implementation detail and may change in future versions. If you need precise visibility checking, use another method such as adding an [Area] node as a child of a [Camera] node and/or [method Vector3.dot].\n\t\t[b]Note:[/b] VisibilityEnabler will not affect nodes added after scene initialization."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": {
          "value": "https://godotengine.org/asset-library/asset/515",
          "title": "2D Dodge The Creeps Demo"
        }
      },
      "members": {
        "member": {
          "default": "Rect2( -10, -10, 20, 20 )",
          "value": "The VisibilityNotifier2D's bounding rectangle.",
          "setter": "set_rect",
          "name": "rect",
          "getter": "get_rect",
          "type": "Rect2"
        }
      },
      "inherits": "Node2D",
      "methods": {
        "method": {
          "return": {
            "type": "bool"
          },
          "qualifiers": "const",
          "name": "is_on_screen",
          "description": "If [code]true[/code], the bounding rectangle is on the screen.\n\t\t\t\t[b]Note:[/b] It takes one frame for the node's visibility to be assessed once added to the scene tree, so this method will return [code]false[/code] right after it is instantiated, even if it will be on screen in the draw pass."
        }
      },
      "name": "VisibilityNotifier2D",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "screen_entered",
            "description": "Emitted when the VisibilityNotifier2D enters the screen."
          },
          {
            "name": "screen_exited",
            "description": "Emitted when the VisibilityNotifier2D exits the screen."
          },
          {
            "argument": {
              "name": "viewport",
              "type": "Viewport",
              "index": "0"
            },
            "name": "viewport_entered",
            "description": "Emitted when the VisibilityNotifier2D enters a [Viewport]'s view."
          },
          {
            "argument": {
              "name": "viewport",
              "type": "Viewport",
              "index": "0"
            },
            "name": "viewport_exited",
            "description": "Emitted when the VisibilityNotifier2D exits a [Viewport]'s view."
          }
        ]
      },
      "constants": {},
      "brief_description": "Detects approximately when the node is visible on screen.",
      "description": "The VisibilityNotifier2D detects when it is visible on the screen. It also notifies when its bounding rectangle enters or exits the screen or a viewport.\n\t\tIf you want nodes to be disabled automatically when they exit the screen, use [VisibilityEnabler2D] instead.\n\t\t[b]Note:[/b] For performance reasons, VisibilityNotifier2D uses an approximate heuristic with precision determined by [member ProjectSettings.world/2d/cell_size]. If you need precise visibility checking, use another method such as adding an [Area2D] node as a child of a [Camera2D] node."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "AABB( -1, -1, -1, 2, 2, 2 )",
          "value": "The VisibilityNotifier's bounding box.",
          "setter": "set_aabb",
          "name": "aabb",
          "getter": "get_aabb",
          "type": "AABB"
        }
      },
      "inherits": "Spatial",
      "methods": {
        "method": {
          "return": {
            "type": "bool"
          },
          "qualifiers": "const",
          "name": "is_on_screen",
          "description": "If [code]true[/code], the bounding box is on the screen.\n\t\t\t\t[b]Note:[/b] It takes one frame for the node's visibility to be assessed once added to the scene tree, so this method will return [code]false[/code] right after it is instantiated, even if it will be on screen in the draw pass."
        }
      },
      "name": "VisibilityNotifier",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "argument": {
              "name": "camera",
              "type": "Camera",
              "index": "0"
            },
            "name": "camera_entered",
            "description": "Emitted when the VisibilityNotifier enters a [Camera]'s view."
          },
          {
            "argument": {
              "name": "camera",
              "type": "Camera",
              "index": "0"
            },
            "name": "camera_exited",
            "description": "Emitted when the VisibilityNotifier exits a [Camera]'s view."
          },
          {
            "name": "screen_entered",
            "description": "Emitted when the VisibilityNotifier enters the screen."
          },
          {
            "name": "screen_exited",
            "description": "Emitted when the VisibilityNotifier exits the screen."
          }
        ]
      },
      "constants": {},
      "brief_description": "Detects approximately when the node is visible on screen.",
      "description": "The VisibilityNotifier detects when it is visible on the screen. It also notifies when its bounding rectangle enters or exits the screen or a [Camera]'s view.\n\t\tIf you want nodes to be disabled automatically when they exit the screen, use [VisibilityEnabler] instead.\n\t\t[b]Note:[/b] VisibilityNotifier uses an approximate heuristic for performance reasons. It doesn't take walls and other occlusion into account. The heuristic is an implementation detail and may change in future versions. If you need precise visibility checking, use another method such as adding an [Area] node as a child of a [Camera] node and/or [method Vector3.dot]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "1",
          "value": "The render layer(s) this [VisualInstance] is drawn on.\n\t\t\tThis object will only be visible for [Camera]s whose cull mask includes the render object this [VisualInstance] is set to.",
          "setter": "set_layer_mask",
          "name": "layers",
          "getter": "get_layer_mask",
          "type": "int"
        }
      },
      "inherits": "Spatial",
      "methods": {
        "method": [
          {
            "return": {
              "type": "AABB"
            },
            "qualifiers": "const",
            "name": "get_aabb",
            "description": "Returns the [AABB] (also known as the bounding box) for this [VisualInstance]. See also [method get_transformed_aabb]."
          },
          {
            "return": {
              "type": "RID"
            },
            "qualifiers": "const",
            "name": "get_base",
            "description": "Returns the RID of the resource associated with this [VisualInstance]. For example, if the Node is a [MeshInstance], this will return the RID of the associated [Mesh]."
          },
          {
            "return": {
              "type": "RID"
            },
            "qualifiers": "const",
            "name": "get_instance",
            "description": "Returns the RID of this instance. This RID is the same as the RID returned by [method VisualServer.instance_create]. This RID is needed if you want to call [VisualServer] functions directly on this [VisualInstance]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "layer",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_layer_mask_bit",
            "description": "Returns [code]true[/code] when the specified layer is enabled in [member layers] and [code]false[/code] otherwise."
          },
          {
            "return": {
              "type": "AABB"
            },
            "qualifiers": "const",
            "name": "get_transformed_aabb",
            "description": "Returns the transformed [AABB] (also known as the bounding box) for this [VisualInstance].\n\t\t\t\tTransformed in this case means the [AABB] plus the position, rotation, and scale of the [Spatial]'s [Transform]. See also [method get_aabb]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "base",
              "type": "RID",
              "index": "0"
            },
            "name": "set_base",
            "description": "Sets the resource that is instantiated by this [VisualInstance], which changes how the engine handles the [VisualInstance] under the hood. Equivalent to [method VisualServer.instance_set_base]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "layer",
                "type": "int",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "set_layer_mask_bit",
            "description": "Enables a particular layer in [member layers]."
          }
        ]
      },
      "name": "VisualInstance",
      "version": "3.3",
      "constants": {},
      "brief_description": "Parent of all visual 3D nodes.",
      "description": "The [VisualInstance] is used to connect a resource to a visual representation. All visual 3D nodes inherit from the [VisualInstance]. In general, you should not access the [VisualInstance] properties directly as they are accessed and managed by the nodes that inherit from [VisualInstance]. [VisualInstance] is the node representation of the [VisualServer] instance."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/optimization/using_servers.html"
      },
      "members": {
        "member": {
          "value": "If [code]false[/code], disables rendering completely, but the engine logic is still being processed. You can call [method force_draw] to draw a frame even with rendering disabled.",
          "setter": "set_render_loop_enabled",
          "name": "render_loop_enabled",
          "getter": "is_render_loop_enabled",
          "type": "bool"
        }
      },
      "inherits": "Object",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "left",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "top",
                "type": "RID",
                "index": "1"
              },
              {
                "name": "right",
                "type": "RID",
                "index": "2"
              },
              {
                "name": "bottom",
                "type": "RID",
                "index": "3"
              }
            ],
            "name": "black_bars_set_images",
            "description": "Sets images to be rendered in the window margin."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "left",
                "type": "int",
                "index": "0"
              },
              {
                "name": "top",
                "type": "int",
                "index": "1"
              },
              {
                "name": "right",
                "type": "int",
                "index": "2"
              },
              {
                "name": "bottom",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "black_bars_set_margins",
            "description": "Sets margin size, where black bars (or images, if [method black_bars_set_images] was used) are rendered."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "camera_create",
            "description": "Creates a camera and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all [code]camera_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "camera",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "layers",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "camera_set_cull_mask",
            "description": "Sets the cull mask associated with this camera. The cull mask describes which 3D layers are rendered by this camera. Equivalent to [member Camera.cull_mask]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "camera",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "env",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "camera_set_environment",
            "description": "Sets the environment used by this camera. Equivalent to [member Camera.environment]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "camera",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "size",
                "type": "float",
                "index": "1"
              },
              {
                "name": "offset",
                "type": "Vector2",
                "index": "2"
              },
              {
                "name": "z_near",
                "type": "float",
                "index": "3"
              },
              {
                "name": "z_far",
                "type": "float",
                "index": "4"
              }
            ],
            "name": "camera_set_frustum",
            "description": "Sets camera to use frustum projection. This mode allows adjusting the [code]offset[/code] argument to create \"tilted frustum\" effects."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "camera",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "size",
                "type": "float",
                "index": "1"
              },
              {
                "name": "z_near",
                "type": "float",
                "index": "2"
              },
              {
                "name": "z_far",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "camera_set_orthogonal",
            "description": "Sets camera to use orthogonal projection, also known as orthographic projection. Objects remain the same size on the screen no matter how far away they are."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "camera",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "fovy_degrees",
                "type": "float",
                "index": "1"
              },
              {
                "name": "z_near",
                "type": "float",
                "index": "2"
              },
              {
                "name": "z_far",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "camera_set_perspective",
            "description": "Sets camera to use perspective projection. Objects on the screen becomes smaller when they are far away."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "camera",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "transform",
                "type": "Transform",
                "index": "1"
              }
            ],
            "name": "camera_set_transform",
            "description": "Sets [Transform] of camera."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "camera",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "camera_set_use_vertical_aspect",
            "description": "If [code]true[/code], preserves the horizontal aspect ratio which is equivalent to [constant Camera.KEEP_WIDTH]. If [code]false[/code], preserves the vertical aspect ratio which is equivalent to [constant Camera.KEEP_HEIGHT]."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "canvas_create",
            "description": "Creates a canvas and returns the assigned [RID]. It can be accessed with the RID that is returned. This RID will be used in all [code]canvas_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "pos",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "radius",
                "type": "float",
                "index": "2"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "3"
              }
            ],
            "name": "canvas_item_add_circle",
            "description": "Adds a circle command to the [CanvasItem]'s draw commands."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "ignore",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "canvas_item_add_clip_ignore",
            "description": "If ignore is [code]true[/code], the VisualServer does not perform clipping."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "from",
                "type": "Vector2",
                "index": "1"
              },
              {
                "name": "to",
                "type": "Vector2",
                "index": "2"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "3"
              },
              {
                "default": "1.0",
                "name": "width",
                "type": "float",
                "index": "4"
              },
              {
                "default": "false",
                "name": "antialiased",
                "type": "bool",
                "index": "5"
              }
            ],
            "name": "canvas_item_add_line",
            "description": "Adds a line command to the [CanvasItem]'s draw commands."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mesh",
                "type": "RID",
                "index": "1"
              },
              {
                "default": "Transform2D( 1, 0, 0, 1, 0, 0 )",
                "name": "transform",
                "type": "Transform2D",
                "index": "2"
              },
              {
                "default": "Color( 1, 1, 1, 1 )",
                "name": "modulate",
                "type": "Color",
                "index": "3"
              },
              {
                "name": "texture",
                "type": "RID",
                "index": "4"
              },
              {
                "name": "normal_map",
                "type": "RID",
                "index": "5"
              }
            ],
            "name": "canvas_item_add_mesh",
            "description": "Adds a mesh command to the [CanvasItem]'s draw commands."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mesh",
                "type": "RID",
                "index": "1"
              },
              {
                "name": "texture",
                "type": "RID",
                "index": "2"
              },
              {
                "name": "normal_map",
                "type": "RID",
                "index": "3"
              }
            ],
            "name": "canvas_item_add_multimesh",
            "description": "Adds a [MultiMesh] to the [CanvasItem]'s draw commands. Only affects its aabb at the moment."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "rect",
                "type": "Rect2",
                "index": "1"
              },
              {
                "name": "source",
                "type": "Rect2",
                "index": "2"
              },
              {
                "name": "texture",
                "type": "RID",
                "index": "3"
              },
              {
                "name": "topleft",
                "type": "Vector2",
                "index": "4"
              },
              {
                "name": "bottomright",
                "type": "Vector2",
                "index": "5"
              },
              {
                "default": "0",
                "name": "x_axis_mode",
                "type": "int",
                "enum": "VisualServer.NinePatchAxisMode",
                "index": "6"
              },
              {
                "default": "0",
                "name": "y_axis_mode",
                "type": "int",
                "enum": "VisualServer.NinePatchAxisMode",
                "index": "7"
              },
              {
                "default": "true",
                "name": "draw_center",
                "type": "bool",
                "index": "8"
              },
              {
                "default": "Color( 1, 1, 1, 1 )",
                "name": "modulate",
                "type": "Color",
                "index": "9"
              },
              {
                "name": "normal_map",
                "type": "RID",
                "index": "10"
              }
            ],
            "name": "canvas_item_add_nine_patch",
            "description": "Adds a nine patch image to the [CanvasItem]'s draw commands.\n\t\t\t\tSee [NinePatchRect] for more explanation."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "particles",
                "type": "RID",
                "index": "1"
              },
              {
                "name": "texture",
                "type": "RID",
                "index": "2"
              },
              {
                "name": "normal_map",
                "type": "RID",
                "index": "3"
              }
            ],
            "name": "canvas_item_add_particles",
            "description": "Adds a particle system to the [CanvasItem]'s draw commands."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "points",
                "type": "PoolVector2Array",
                "index": "1"
              },
              {
                "name": "colors",
                "type": "PoolColorArray",
                "index": "2"
              },
              {
                "default": "PoolVector2Array(  )",
                "name": "uvs",
                "type": "PoolVector2Array",
                "index": "3"
              },
              {
                "name": "texture",
                "type": "RID",
                "index": "4"
              },
              {
                "name": "normal_map",
                "type": "RID",
                "index": "5"
              },
              {
                "default": "false",
                "name": "antialiased",
                "type": "bool",
                "index": "6"
              }
            ],
            "name": "canvas_item_add_polygon",
            "description": "Adds a polygon to the [CanvasItem]'s draw commands."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "points",
                "type": "PoolVector2Array",
                "index": "1"
              },
              {
                "name": "colors",
                "type": "PoolColorArray",
                "index": "2"
              },
              {
                "default": "1.0",
                "name": "width",
                "type": "float",
                "index": "3"
              },
              {
                "default": "false",
                "name": "antialiased",
                "type": "bool",
                "index": "4"
              }
            ],
            "name": "canvas_item_add_polyline",
            "description": "Adds a polyline, which is a line from multiple points with a width, to the [CanvasItem]'s draw commands."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "points",
                "type": "PoolVector2Array",
                "index": "1"
              },
              {
                "name": "colors",
                "type": "PoolColorArray",
                "index": "2"
              },
              {
                "name": "uvs",
                "type": "PoolVector2Array",
                "index": "3"
              },
              {
                "name": "texture",
                "type": "RID",
                "index": "4"
              },
              {
                "default": "1.0",
                "name": "width",
                "type": "float",
                "index": "5"
              },
              {
                "name": "normal_map",
                "type": "RID",
                "index": "6"
              }
            ],
            "name": "canvas_item_add_primitive",
            "description": "Adds a primitive to the [CanvasItem]'s draw commands."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "rect",
                "type": "Rect2",
                "index": "1"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "2"
              }
            ],
            "name": "canvas_item_add_rect",
            "description": "Adds a rectangle to the [CanvasItem]'s draw commands."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "transform",
                "type": "Transform2D",
                "index": "1"
              }
            ],
            "name": "canvas_item_add_set_transform",
            "description": "Adds a [Transform2D] command to the [CanvasItem]'s draw commands.\n\t\t\t\tThis sets the extra_matrix uniform when executed. This affects the later commands of the canvas item."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "rect",
                "type": "Rect2",
                "index": "1"
              },
              {
                "name": "texture",
                "type": "RID",
                "index": "2"
              },
              {
                "default": "false",
                "name": "tile",
                "type": "bool",
                "index": "3"
              },
              {
                "default": "Color( 1, 1, 1, 1 )",
                "name": "modulate",
                "type": "Color",
                "index": "4"
              },
              {
                "default": "false",
                "name": "transpose",
                "type": "bool",
                "index": "5"
              },
              {
                "name": "normal_map",
                "type": "RID",
                "index": "6"
              }
            ],
            "name": "canvas_item_add_texture_rect",
            "description": "Adds a textured rect to the [CanvasItem]'s draw commands."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "rect",
                "type": "Rect2",
                "index": "1"
              },
              {
                "name": "texture",
                "type": "RID",
                "index": "2"
              },
              {
                "name": "src_rect",
                "type": "Rect2",
                "index": "3"
              },
              {
                "default": "Color( 1, 1, 1, 1 )",
                "name": "modulate",
                "type": "Color",
                "index": "4"
              },
              {
                "default": "false",
                "name": "transpose",
                "type": "bool",
                "index": "5"
              },
              {
                "name": "normal_map",
                "type": "RID",
                "index": "6"
              },
              {
                "default": "true",
                "name": "clip_uv",
                "type": "bool",
                "index": "7"
              }
            ],
            "name": "canvas_item_add_texture_rect_region",
            "description": "Adds a texture rect with region setting to the [CanvasItem]'s draw commands."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "indices",
                "type": "PoolIntArray",
                "index": "1"
              },
              {
                "name": "points",
                "type": "PoolVector2Array",
                "index": "2"
              },
              {
                "name": "colors",
                "type": "PoolColorArray",
                "index": "3"
              },
              {
                "default": "PoolVector2Array(  )",
                "name": "uvs",
                "type": "PoolVector2Array",
                "index": "4"
              },
              {
                "default": "PoolIntArray(  )",
                "name": "bones",
                "type": "PoolIntArray",
                "index": "5"
              },
              {
                "default": "PoolRealArray(  )",
                "name": "weights",
                "type": "PoolRealArray",
                "index": "6"
              },
              {
                "name": "texture",
                "type": "RID",
                "index": "7"
              },
              {
                "default": "-1",
                "name": "count",
                "type": "int",
                "index": "8"
              },
              {
                "name": "normal_map",
                "type": "RID",
                "index": "9"
              },
              {
                "default": "false",
                "name": "antialiased",
                "type": "bool",
                "index": "10"
              },
              {
                "default": "false",
                "name": "antialiasing_use_indices",
                "type": "bool",
                "index": "11"
              }
            ],
            "name": "canvas_item_add_triangle_array",
            "description": "Adds a triangle array to the [CanvasItem]'s draw commands."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "item",
              "type": "RID",
              "index": "0"
            },
            "name": "canvas_item_clear",
            "description": "Clears the [CanvasItem] and removes all commands in it."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "canvas_item_create",
            "description": "Creates a new [CanvasItem] and returns its [RID]. It can be accessed with the RID that is returned. This RID will be used in all [code]canvas_item_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "clip",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "canvas_item_set_clip",
            "description": "Sets clipping for the [CanvasItem]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              },
              {
                "name": "rect",
                "type": "Rect2",
                "index": "2"
              }
            ],
            "name": "canvas_item_set_copy_to_backbuffer",
            "description": "Sets the [CanvasItem] to copy a rect to the backbuffer."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "use_custom_rect",
                "type": "bool",
                "index": "1"
              },
              {
                "default": "Rect2( 0, 0, 0, 0 )",
                "name": "rect",
                "type": "Rect2",
                "index": "2"
              }
            ],
            "name": "canvas_item_set_custom_rect",
            "description": "Defines a custom drawing rectangle for the [CanvasItem]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "canvas_item_set_distance_field_mode",
            "description": "Enables the use of distance fields for GUI elements that are rendering distance field based fonts."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "canvas_item_set_draw_behind_parent",
            "description": "Sets [CanvasItem] to be drawn behind its parent."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "index",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "canvas_item_set_draw_index",
            "description": "Sets the index for the [CanvasItem]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mask",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "canvas_item_set_light_mask",
            "description": "The light mask. See [LightOccluder2D] for more information on light masks."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "material",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "canvas_item_set_material",
            "description": "Sets a new material to the [CanvasItem]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "canvas_item_set_modulate",
            "description": "Sets the color that modulates the [CanvasItem] and its children."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "parent",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "canvas_item_set_parent",
            "description": "Sets the parent for the [CanvasItem]. The parent can be another canvas item, or it can be the root canvas that is attached to the viewport."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "canvas_item_set_self_modulate",
            "description": "Sets the color that modulates the [CanvasItem] without children."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "canvas_item_set_sort_children_by_y",
            "description": "Sets if [CanvasItem]'s children should be sorted by y-position."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "transform",
                "type": "Transform2D",
                "index": "1"
              }
            ],
            "name": "canvas_item_set_transform",
            "description": "Sets the [CanvasItem]'s [Transform2D]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "canvas_item_set_use_parent_material",
            "description": "Sets if the [CanvasItem] uses its parent's material."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "visible",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "canvas_item_set_visible",
            "description": "Sets if the canvas item (including its children) is visible."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "canvas_item_set_z_as_relative_to_parent",
            "description": "If this is enabled, the Z index of the parent will be added to the children's Z index."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "item",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "z_index",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "canvas_item_set_z_index",
            "description": "Sets the [CanvasItem]'s Z index, i.e. its draw order (lower indexes are drawn first)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "canvas",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "canvas_light_attach_to_canvas",
            "description": "Attaches the canvas light to the canvas. Removes it from its previous canvas."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "canvas_light_create",
            "description": "Creates a canvas light and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all [code]canvas_light_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "occluder",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "canvas",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "canvas_light_occluder_attach_to_canvas",
            "description": "Attaches a light occluder to the canvas. Removes it from its previous canvas."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "canvas_light_occluder_create",
            "description": "Creates a light occluder and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all [code]canvas_light_ocluder_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "occluder",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "canvas_light_occluder_set_enabled",
            "description": "Enables or disables light occluder."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "occluder",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mask",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "canvas_light_occluder_set_light_mask",
            "description": "The light mask. See [LightOccluder2D] for more information on light masks."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "occluder",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "polygon",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "canvas_light_occluder_set_polygon",
            "description": "Sets a light occluder's polygon."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "occluder",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "transform",
                "type": "Transform2D",
                "index": "1"
              }
            ],
            "name": "canvas_light_occluder_set_transform",
            "description": "Sets a light occluder's [Transform2D]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "canvas_light_set_color",
            "description": "Sets the color for a light."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "canvas_light_set_enabled",
            "description": "Enables or disables a canvas light."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "energy",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "canvas_light_set_energy",
            "description": "Sets a canvas light's energy."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "height",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "canvas_light_set_height",
            "description": "Sets a canvas light's height."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mask",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "canvas_light_set_item_cull_mask",
            "description": "The light mask. See [LightOccluder2D] for more information on light masks."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mask",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "canvas_light_set_item_shadow_cull_mask",
            "description": "The binary mask used to determine which layers this canvas light's shadows affects. See [LightOccluder2D] for more information on light masks."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "min_layer",
                "type": "int",
                "index": "1"
              },
              {
                "name": "max_layer",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "canvas_light_set_layer_range",
            "description": "The layer range that gets rendered with this light."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mode",
                "type": "int",
                "enum": "VisualServer.CanvasLightMode",
                "index": "1"
              }
            ],
            "name": "canvas_light_set_mode",
            "description": "The mode of the light, see [enum CanvasLightMode] constants."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "scale",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "canvas_light_set_scale",
            "description": "Sets the texture's scale factor of the light. Equivalent to [member Light2D.texture_scale]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "size",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "canvas_light_set_shadow_buffer_size",
            "description": "Sets the width of the shadow buffer, size gets scaled to the next power of two for this."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "canvas_light_set_shadow_color",
            "description": "Sets the color of the canvas light's shadow."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "canvas_light_set_shadow_enabled",
            "description": "Enables or disables the canvas light's shadow."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "filter",
                "type": "int",
                "enum": "VisualServer.CanvasLightShadowFilter",
                "index": "1"
              }
            ],
            "name": "canvas_light_set_shadow_filter",
            "description": "Sets the canvas light's shadow's filter, see [enum CanvasLightShadowFilter] constants."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "length",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "canvas_light_set_shadow_gradient_length",
            "description": "Sets the length of the shadow's gradient."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "smooth",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "canvas_light_set_shadow_smooth",
            "description": "Smoothens the shadow. The lower, the smoother."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "texture",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "canvas_light_set_texture",
            "description": "Sets texture to be used by light. Equivalent to [member Light2D.texture]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "offset",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "canvas_light_set_texture_offset",
            "description": "Sets the offset of the light's texture. Equivalent to [member Light2D.offset]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "transform",
                "type": "Transform2D",
                "index": "1"
              }
            ],
            "name": "canvas_light_set_transform",
            "description": "Sets the canvas light's [Transform2D]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "min_z",
                "type": "int",
                "index": "1"
              },
              {
                "name": "max_z",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "canvas_light_set_z_range",
            "description": "Sets the Z range of objects that will be affected by this light. Equivalent to [member Light2D.range_z_min] and [member Light2D.range_z_max]."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "canvas_occluder_polygon_create",
            "description": "Creates a new light occluder polygon and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all [code]canvas_occluder_polygon_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "occluder_polygon",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mode",
                "type": "int",
                "enum": "VisualServer.CanvasOccluderPolygonCullMode",
                "index": "1"
              }
            ],
            "name": "canvas_occluder_polygon_set_cull_mode",
            "description": "Sets an occluder polygons cull mode. See [enum CanvasOccluderPolygonCullMode] constants."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "occluder_polygon",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape",
                "type": "PoolVector2Array",
                "index": "1"
              },
              {
                "name": "closed",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "canvas_occluder_polygon_set_shape",
            "description": "Sets the shape of the occluder polygon."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "occluder_polygon",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape",
                "type": "PoolVector2Array",
                "index": "1"
              }
            ],
            "name": "canvas_occluder_polygon_set_shape_as_lines",
            "description": "Sets the shape of the occluder polygon as lines."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "canvas",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "item",
                "type": "RID",
                "index": "1"
              },
              {
                "name": "mirroring",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "canvas_set_item_mirroring",
            "description": "A copy of the canvas item will be drawn with a local offset of the mirroring [Vector2]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "canvas",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "canvas_set_modulate",
            "description": "Modulates all colors in the given canvas."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "directional_light_create",
            "description": "Creates a directional light and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID can be used in most [code]light_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method.\n\t\t\t\tTo place in a scene, attach this directional light to an instance using [method instance_set_base] using the returned RID."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "default": "true",
                "name": "swap_buffers",
                "type": "bool",
                "index": "0"
              },
              {
                "default": "0.0",
                "name": "frame_step",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "draw",
            "description": "Draws a frame. [i]This method is deprecated[/i], please use [method force_draw] instead."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "environment_create",
            "description": "Creates an environment and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all [code]environment_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "env",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              },
              {
                "name": "brightness",
                "type": "float",
                "index": "2"
              },
              {
                "name": "contrast",
                "type": "float",
                "index": "3"
              },
              {
                "name": "saturation",
                "type": "float",
                "index": "4"
              },
              {
                "name": "ramp",
                "type": "RID",
                "index": "5"
              }
            ],
            "name": "environment_set_adjustment",
            "description": "Sets the values to be used with the \"Adjustment\" post-process effect. See [Environment] for more details."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "env",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              },
              {
                "default": "1.0",
                "name": "energy",
                "type": "float",
                "index": "2"
              },
              {
                "default": "0.0",
                "name": "sky_contibution",
                "type": "float",
                "index": "3"
              }
            ],
            "name": "environment_set_ambient_light",
            "description": "Sets the ambient light parameters. See [Environment] for more details."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "env",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "bg",
                "type": "int",
                "enum": "VisualServer.EnvironmentBG",
                "index": "1"
              }
            ],
            "name": "environment_set_background",
            "description": "Sets the [i]BGMode[/i] of the environment. Equivalent to [member Environment.background_mode]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "env",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "environment_set_bg_color",
            "description": "Color displayed for clear areas of the scene (if using Custom color or Color+Sky background modes)."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "env",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "energy",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "environment_set_bg_energy",
            "description": "Sets the intensity of the background color."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "env",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "max_layer",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "environment_set_canvas_max_layer",
            "description": "Sets the maximum layer to use if using Canvas background mode."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "env",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              },
              {
                "name": "distance",
                "type": "float",
                "index": "2"
              },
              {
                "name": "transition",
                "type": "float",
                "index": "3"
              },
              {
                "name": "far_amount",
                "type": "float",
                "index": "4"
              },
              {
                "name": "quality",
                "type": "int",
                "enum": "VisualServer.EnvironmentDOFBlurQuality",
                "index": "5"
              }
            ],
            "name": "environment_set_dof_blur_far",
            "description": "Sets the values to be used with the \"DoF Far Blur\" post-process effect. See [Environment] for more details."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "env",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              },
              {
                "name": "distance",
                "type": "float",
                "index": "2"
              },
              {
                "name": "transition",
                "type": "float",
                "index": "3"
              },
              {
                "name": "far_amount",
                "type": "float",
                "index": "4"
              },
              {
                "name": "quality",
                "type": "int",
                "enum": "VisualServer.EnvironmentDOFBlurQuality",
                "index": "5"
              }
            ],
            "name": "environment_set_dof_blur_near",
            "description": "Sets the values to be used with the \"DoF Near Blur\" post-process effect. See [Environment] for more details."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "env",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "2"
              },
              {
                "name": "sun_color",
                "type": "Color",
                "index": "3"
              },
              {
                "name": "sun_amount",
                "type": "float",
                "index": "4"
              }
            ],
            "name": "environment_set_fog",
            "description": "Sets the variables to be used with the scene fog. See [Environment] for more details."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "env",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              },
              {
                "name": "depth_begin",
                "type": "float",
                "index": "2"
              },
              {
                "name": "depth_end",
                "type": "float",
                "index": "3"
              },
              {
                "name": "depth_curve",
                "type": "float",
                "index": "4"
              },
              {
                "name": "transmit",
                "type": "bool",
                "index": "5"
              },
              {
                "name": "transmit_curve",
                "type": "float",
                "index": "6"
              }
            ],
            "name": "environment_set_fog_depth",
            "description": "Sets the variables to be used with the fog depth effect. See [Environment] for more details."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "env",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              },
              {
                "name": "min_height",
                "type": "float",
                "index": "2"
              },
              {
                "name": "max_height",
                "type": "float",
                "index": "3"
              },
              {
                "name": "height_curve",
                "type": "float",
                "index": "4"
              }
            ],
            "name": "environment_set_fog_height",
            "description": "Sets the variables to be used with the fog height effect. See [Environment] for more details."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "env",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              },
              {
                "name": "level_flags",
                "type": "int",
                "index": "2"
              },
              {
                "name": "intensity",
                "type": "float",
                "index": "3"
              },
              {
                "name": "strength",
                "type": "float",
                "index": "4"
              },
              {
                "name": "bloom_threshold",
                "type": "float",
                "index": "5"
              },
              {
                "name": "blend_mode",
                "type": "int",
                "enum": "VisualServer.EnvironmentGlowBlendMode",
                "index": "6"
              },
              {
                "name": "hdr_bleed_threshold",
                "type": "float",
                "index": "7"
              },
              {
                "name": "hdr_bleed_scale",
                "type": "float",
                "index": "8"
              },
              {
                "name": "hdr_luminance_cap",
                "type": "float",
                "index": "9"
              },
              {
                "name": "bicubic_upscale",
                "type": "bool",
                "index": "10"
              }
            ],
            "name": "environment_set_glow",
            "description": "Sets the variables to be used with the \"glow\" post-process effect. See [Environment] for more details."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "env",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "sky",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "environment_set_sky",
            "description": "Sets the [Sky] to be used as the environment's background when using [i]BGMode[/i] sky. Equivalent to [member Environment.background_sky]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "env",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "scale",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "environment_set_sky_custom_fov",
            "description": "Sets a custom field of view for the background [Sky]. Equivalent to [member Environment.background_sky_custom_fov]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "env",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "orientation",
                "type": "Basis",
                "index": "1"
              }
            ],
            "name": "environment_set_sky_orientation",
            "description": "Sets the rotation of the background [Sky] expressed as a [Basis]. Equivalent to [member Environment.background_sky_orientation]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "env",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              },
              {
                "name": "radius",
                "type": "float",
                "index": "2"
              },
              {
                "name": "intensity",
                "type": "float",
                "index": "3"
              },
              {
                "name": "radius2",
                "type": "float",
                "index": "4"
              },
              {
                "name": "intensity2",
                "type": "float",
                "index": "5"
              },
              {
                "name": "bias",
                "type": "float",
                "index": "6"
              },
              {
                "name": "light_affect",
                "type": "float",
                "index": "7"
              },
              {
                "name": "ao_channel_affect",
                "type": "float",
                "index": "8"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "9"
              },
              {
                "name": "quality",
                "type": "int",
                "enum": "VisualServer.EnvironmentSSAOQuality",
                "index": "10"
              },
              {
                "name": "blur",
                "type": "int",
                "enum": "VisualServer.EnvironmentSSAOBlur",
                "index": "11"
              },
              {
                "name": "bilateral_sharpness",
                "type": "float",
                "index": "12"
              }
            ],
            "name": "environment_set_ssao",
            "description": "Sets the variables to be used with the \"Screen Space Ambient Occlusion (SSAO)\" post-process effect. See [Environment] for more details."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "env",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              },
              {
                "name": "max_steps",
                "type": "int",
                "index": "2"
              },
              {
                "name": "fade_in",
                "type": "float",
                "index": "3"
              },
              {
                "name": "fade_out",
                "type": "float",
                "index": "4"
              },
              {
                "name": "depth_tolerance",
                "type": "float",
                "index": "5"
              },
              {
                "name": "roughness",
                "type": "bool",
                "index": "6"
              }
            ],
            "name": "environment_set_ssr",
            "description": "Sets the variables to be used with the \"screen space reflections\" post-process effect. See [Environment] for more details."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "env",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "tone_mapper",
                "type": "int",
                "enum": "VisualServer.EnvironmentToneMapper",
                "index": "1"
              },
              {
                "name": "exposure",
                "type": "float",
                "index": "2"
              },
              {
                "name": "white",
                "type": "float",
                "index": "3"
              },
              {
                "name": "auto_exposure",
                "type": "bool",
                "index": "4"
              },
              {
                "name": "min_luminance",
                "type": "float",
                "index": "5"
              },
              {
                "name": "max_luminance",
                "type": "float",
                "index": "6"
              },
              {
                "name": "auto_exp_speed",
                "type": "float",
                "index": "7"
              },
              {
                "name": "auto_exp_grey",
                "type": "float",
                "index": "8"
              }
            ],
            "name": "environment_set_tonemap",
            "description": "Sets the variables to be used with the \"tonemap\" post-process effect. See [Environment] for more details."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "finish",
            "description": "Removes buffers and clears testcubes."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "default": "true",
                "name": "swap_buffers",
                "type": "bool",
                "index": "0"
              },
              {
                "default": "0.0",
                "name": "frame_step",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "force_draw",
            "description": "Forces a frame to be drawn when the function is called. Drawing a frame updates all [Viewport]s that are set to update. Use with extreme caution."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "force_sync",
            "description": "Synchronizes threads."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "rid",
              "type": "RID",
              "index": "0"
            },
            "name": "free_rid",
            "description": "Tries to free an object in the VisualServer."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "info",
              "type": "int",
              "enum": "VisualServer.RenderInfo",
              "index": "0"
            },
            "name": "get_render_info",
            "description": "Returns a certain information, see [enum RenderInfo] for options."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "get_test_cube",
            "description": "Returns the id of the test cube. Creates one if none exists."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "get_test_texture",
            "description": "Returns the id of the test texture. Creates one if none exists."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_video_adapter_name",
            "description": "Returns the name of the video adapter (e.g. \"GeForce GTX 1080/PCIe/SSE2\").\n\t\t\t\t[b]Note:[/b] When running a headless or server binary, this function returns an empty string."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_video_adapter_vendor",
            "description": "Returns the vendor of the video adapter (e.g. \"NVIDIA Corporation\").\n\t\t\t\t[b]Note:[/b] When running a headless or server binary, this function returns an empty string."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "get_white_texture",
            "description": "Returns the id of a white texture. Creates one if none exists."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "gi_probe_create",
            "description": "Creates a GI probe and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all [code]gi_probe_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method.\n\t\t\t\tTo place in a scene, attach this GI probe to an instance using [method instance_set_base] using the returned RID."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "probe",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "gi_probe_get_bias",
            "description": "Returns the bias value for the GI probe. Bias is used to avoid self occlusion. Equivalent to [member GIProbeData.bias]."
          },
          {
            "return": {
              "type": "AABB"
            },
            "argument": {
              "name": "probe",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "gi_probe_get_bounds",
            "description": "Returns the axis-aligned bounding box that covers the full extent of the GI probe."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "probe",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "gi_probe_get_cell_size",
            "description": "Returns the cell size set by [method gi_probe_set_cell_size]."
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "argument": {
              "name": "probe",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "gi_probe_get_dynamic_data",
            "description": "Returns the data used by the GI probe."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "probe",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "gi_probe_get_dynamic_range",
            "description": "Returns the dynamic range set for this GI probe. Equivalent to [member GIProbe.dynamic_range]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "probe",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "gi_probe_get_energy",
            "description": "Returns the energy multiplier for this GI probe. Equivalent to [member GIProbe.energy]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "probe",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "gi_probe_get_normal_bias",
            "description": "Returns the normal bias for this GI probe. Equivalent to [member GIProbe.normal_bias]."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "probe",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "gi_probe_get_propagation",
            "description": "Returns the propagation value for this GI probe. Equivalent to [member GIProbe.propagation]."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": {
              "name": "probe",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "gi_probe_get_to_cell_xform",
            "description": "Returns the Transform set by [method gi_probe_set_to_cell_xform]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "probe",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "gi_probe_is_compressed",
            "description": "Returns [code]true[/code] if the GI probe data associated with this GI probe is compressed. Equivalent to [member GIProbe.compress]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "probe",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "gi_probe_is_interior",
            "description": "Returns [code]true[/code] if the GI probe is set to interior, meaning it does not account for sky light. Equivalent to [member GIProbe.interior]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "bias",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "gi_probe_set_bias",
            "description": "Sets the bias value to avoid self-occlusion. Equivalent to [member GIProbe.bias]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "bounds",
                "type": "AABB",
                "index": "1"
              }
            ],
            "name": "gi_probe_set_bounds",
            "description": "Sets the axis-aligned bounding box that covers the extent of the GI probe."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "range",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "gi_probe_set_cell_size",
            "description": "Sets the size of individual cells within the GI probe."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "gi_probe_set_compress",
            "description": "Sets the compression setting for the GI probe data. Compressed data will take up less space but may look worse. Equivalent to [member GIProbe.compress]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "data",
                "type": "PoolIntArray",
                "index": "1"
              }
            ],
            "name": "gi_probe_set_dynamic_data",
            "description": "Sets the data to be used in the GI probe for lighting calculations. Normally this is created and called internally within the [GIProbe] node. You should not try to set this yourself."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "range",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "gi_probe_set_dynamic_range",
            "description": "Sets the dynamic range of the GI probe. Dynamic range sets the limit for how bright lights can be. A smaller range captures greater detail but limits how bright lights can be. Equivalent to [member GIProbe.dynamic_range]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "energy",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "gi_probe_set_energy",
            "description": "Sets the energy multiplier for this GI probe. A higher energy makes the indirect light from the GI probe brighter. Equivalent to [member GIProbe.energy]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "gi_probe_set_interior",
            "description": "Sets the interior value of this GI probe. A GI probe set to interior does not include the sky when calculating lighting. Equivalent to [member GIProbe.interior]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "bias",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "gi_probe_set_normal_bias",
            "description": "Sets the normal bias for this GI probe. Normal bias behaves similar to the other form of bias and may help reduce self-occlusion. Equivalent to [member GIProbe.normal_bias]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "propagation",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "gi_probe_set_propagation",
            "description": "Sets the propagation of light within this GI probe. Equivalent to [member GIProbe.propagation]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "xform",
                "type": "Transform",
                "index": "1"
              }
            ],
            "name": "gi_probe_set_to_cell_xform",
            "description": "Sets the to cell [Transform] for this GI probe."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "has_changed",
            "description": "Returns [code]true[/code] if changes have been made to the VisualServer's data. [method draw] is usually called if this happens."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "feature",
              "type": "int",
              "enum": "VisualServer.Features",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_feature",
            "description": "Not yet implemented. Always returns [code]false[/code]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "feature",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_os_feature",
            "description": "Returns [code]true[/code] if the OS supports a certain feature. Features might be [code]s3tc[/code], [code]etc[/code], [code]etc2[/code], [code]pvrtc[/code] and [code]skinning_fallback[/code].\n\t\t\t\tWhen rendering with GLES2, returns [code]true[/code] with [code]skinning_fallback[/code] in case the hardware doesn't support the default GPU skinning process."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "immediate",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "primitive",
                "type": "int",
                "enum": "VisualServer.PrimitiveType",
                "index": "1"
              },
              {
                "name": "texture",
                "type": "RID",
                "index": "2"
              }
            ],
            "name": "immediate_begin",
            "description": "Sets up [ImmediateGeometry] internals to prepare for drawing. Equivalent to [method ImmediateGeometry.begin]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "immediate",
              "type": "RID",
              "index": "0"
            },
            "name": "immediate_clear",
            "description": "Clears everything that was set up between [method immediate_begin] and [method immediate_end]. Equivalent to [method ImmediateGeometry.clear]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "immediate",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "immediate_color",
            "description": "Sets the color to be used with next vertex. Equivalent to [method ImmediateGeometry.set_color]."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "immediate_create",
            "description": "Creates an immediate geometry and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all [code]immediate_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method.\n\t\t\t\tTo place in a scene, attach this immediate geometry to an instance using [method instance_set_base] using the returned RID."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "immediate",
              "type": "RID",
              "index": "0"
            },
            "name": "immediate_end",
            "description": "Ends drawing the [ImmediateGeometry] and displays it. Equivalent to [method ImmediateGeometry.end]."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": {
              "name": "immediate",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "immediate_get_material",
            "description": "Returns the material assigned to the [ImmediateGeometry]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "immediate",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "normal",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "immediate_normal",
            "description": "Sets the normal to be used with next vertex. Equivalent to [method ImmediateGeometry.set_normal]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "immediate",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "material",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "immediate_set_material",
            "description": "Sets the material to be used to draw the [ImmediateGeometry]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "immediate",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "tangent",
                "type": "Plane",
                "index": "1"
              }
            ],
            "name": "immediate_tangent",
            "description": "Sets the tangent to be used with next vertex. Equivalent to [method ImmediateGeometry.set_tangent]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "immediate",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "tex_uv",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "immediate_uv",
            "description": "Sets the UV to be used with next vertex. Equivalent to [method ImmediateGeometry.set_uv]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "immediate",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "tex_uv",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "immediate_uv2",
            "description": "Sets the UV2 to be used with next vertex. Equivalent to [method ImmediateGeometry.set_uv2]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "immediate",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "vertex",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "immediate_vertex",
            "description": "Adds the next vertex using the information provided in advance. Equivalent to [method ImmediateGeometry.add_vertex]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "immediate",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "vertex",
                "type": "Vector2",
                "index": "1"
              }
            ],
            "name": "immediate_vertex_2d",
            "description": "Adds the next vertex using the information provided in advance. This is a helper class that calls [method immediate_vertex] under the hood. Equivalent to [method ImmediateGeometry.add_vertex]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "init",
            "description": "Initializes the visual server. This function is called internally by platform-dependent code during engine initialization. If called from a running game, it will not do anything."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "id",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "instance_attach_object_instance_id",
            "description": "Attaches a unique Object ID to instance. Object ID must be attached to instance for proper culling with [method instances_cull_aabb], [method instances_cull_convex], and [method instances_cull_ray]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "skeleton",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "instance_attach_skeleton",
            "description": "Attaches a skeleton to an instance. Removes the previous skeleton from the instance."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "instance_create",
            "description": "Creates a visual instance and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all [code]instance_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method.\n\t\t\t\tAn instance is a way of placing a 3D object in the scenario. Objects like particles, meshes, and reflection probes need to be associated with an instance to be visible in the scenario using [method instance_set_base]."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": [
              {
                "name": "base",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "scenario",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "instance_create2",
            "description": "Creates a visual instance, adds it to the VisualServer, and sets both base and scenario. It can be accessed with the RID that is returned. This RID will be used in all [code]instance_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "as_lod_of_instance",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "instance_geometry_set_as_instance_lod",
            "description": "Not implemented in Godot 3.x."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shadow_casting_setting",
                "type": "int",
                "enum": "VisualServer.ShadowCastingSetting",
                "index": "1"
              }
            ],
            "name": "instance_geometry_set_cast_shadows_setting",
            "description": "Sets the shadow casting setting to one of [enum ShadowCastingSetting]. Equivalent to [member GeometryInstance.cast_shadow]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "min",
                "type": "float",
                "index": "1"
              },
              {
                "name": "max",
                "type": "float",
                "index": "2"
              },
              {
                "name": "min_margin",
                "type": "float",
                "index": "3"
              },
              {
                "name": "max_margin",
                "type": "float",
                "index": "4"
              }
            ],
            "name": "instance_geometry_set_draw_range",
            "description": "Not implemented in Godot 3.x."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "flag",
                "type": "int",
                "enum": "VisualServer.InstanceFlags",
                "index": "1"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "instance_geometry_set_flag",
            "description": "Sets the flag for a given [enum InstanceFlags]. See [enum InstanceFlags] for more details."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "material",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "instance_geometry_set_material_override",
            "description": "Sets a material that will override the material for all surfaces on the mesh associated with this instance. Equivalent to [member GeometryInstance.material_override]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "base",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "instance_set_base",
            "description": "Sets the base of the instance. A base can be any of the 3D objects that are created in the VisualServer that can be displayed. For example, any of the light types, mesh, multimesh, immediate geometry, particle system, reflection probe, lightmap capture, and the GI probe are all types that can be set as the base of an instance in order to be displayed in the scenario."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shape",
                "type": "int",
                "index": "1"
              },
              {
                "name": "weight",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "instance_set_blend_shape_weight",
            "description": "Sets the weight for a given blend shape associated with this instance."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "aabb",
                "type": "AABB",
                "index": "1"
              }
            ],
            "name": "instance_set_custom_aabb",
            "description": "Sets a custom AABB to use when culling objects from the view frustum. Equivalent to [method GeometryInstance.set_custom_aabb]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "instance_set_exterior",
            "description": "Function not implemented in Godot 3.x."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "margin",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "instance_set_extra_visibility_margin",
            "description": "Sets a margin to increase the size of the AABB when culling objects from the view frustum. This allows you to avoid culling objects that fall outside the view frustum. Equivalent to [member GeometryInstance.extra_cull_margin]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mask",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "instance_set_layer_mask",
            "description": "Sets the render layers that this instance will be drawn to. Equivalent to [member VisualInstance.layers]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "scenario",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "instance_set_scenario",
            "description": "Sets the scenario that the instance is in. The scenario is the 3D world that the objects will be displayed in."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "surface",
                "type": "int",
                "index": "1"
              },
              {
                "name": "material",
                "type": "RID",
                "index": "2"
              }
            ],
            "name": "instance_set_surface_material",
            "description": "Sets the material of a specific surface. Equivalent to [method MeshInstance.set_surface_material]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "transform",
                "type": "Transform",
                "index": "1"
              }
            ],
            "name": "instance_set_transform",
            "description": "Sets the world space transform of the instance. Equivalent to [member Spatial.transform]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "lightmap_instance",
                "type": "RID",
                "index": "1"
              },
              {
                "name": "lightmap",
                "type": "RID",
                "index": "2"
              },
              {
                "default": "-1",
                "name": "lightmap_slice",
                "type": "int",
                "index": "3"
              },
              {
                "default": "Rect2( 0, 0, 1, 1 )",
                "name": "lightmap_uv_rect",
                "type": "Rect2",
                "index": "4"
              }
            ],
            "name": "instance_set_use_lightmap",
            "description": "Sets the lightmap to use with this instance."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "instance",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "visible",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "instance_set_visible",
            "description": "Sets whether an instance is drawn or not. Equivalent to [member Spatial.visible]."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "aabb",
                "type": "AABB",
                "index": "0"
              },
              {
                "name": "scenario",
                "type": "RID",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "instances_cull_aabb",
            "description": "Returns an array of object IDs intersecting with the provided AABB. Only visual 3D nodes are considered, such as [MeshInstance] or [DirectionalLight]. Use [method @GDScript.instance_from_id] to obtain the actual nodes. A scenario RID must be provided, which is available in the [World] you want to query. This forces an update for all resources queued to update.\n\t\t\t\t[b]Warning:[/b] This function is primarily intended for editor usage. For in-game use cases, prefer physics collision."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "convex",
                "type": "Array",
                "index": "0"
              },
              {
                "name": "scenario",
                "type": "RID",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "instances_cull_convex",
            "description": "Returns an array of object IDs intersecting with the provided convex shape. Only visual 3D nodes are considered, such as [MeshInstance] or [DirectionalLight]. Use [method @GDScript.instance_from_id] to obtain the actual nodes. A scenario RID must be provided, which is available in the [World] you want to query. This forces an update for all resources queued to update.\n\t\t\t\t[b]Warning:[/b] This function is primarily intended for editor usage. For in-game use cases, prefer physics collision."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "from",
                "type": "Vector3",
                "index": "0"
              },
              {
                "name": "to",
                "type": "Vector3",
                "index": "1"
              },
              {
                "name": "scenario",
                "type": "RID",
                "index": "2"
              }
            ],
            "qualifiers": "const",
            "name": "instances_cull_ray",
            "description": "Returns an array of object IDs intersecting with the provided 3D ray. Only visual 3D nodes are considered, such as [MeshInstance] or [DirectionalLight]. Use [method @GDScript.instance_from_id] to obtain the actual nodes. A scenario RID must be provided, which is available in the [World] you want to query. This forces an update for all resources queued to update.\n\t\t\t\t[b]Warning:[/b] This function is primarily intended for editor usage. For in-game use cases, prefer physics collision."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "light_directional_set_blend_splits",
            "description": "If [code]true[/code], this directional light will blend between shadow map splits resulting in a smoother transition between them. Equivalent to [member DirectionalLight.directional_shadow_blend_splits]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "range_mode",
                "type": "int",
                "enum": "VisualServer.LightDirectionalShadowDepthRangeMode",
                "index": "1"
              }
            ],
            "name": "light_directional_set_shadow_depth_range_mode",
            "description": "Sets the shadow depth range mode for this directional light. Equivalent to [member DirectionalLight.directional_shadow_depth_range]. See [enum LightDirectionalShadowDepthRangeMode] for options."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mode",
                "type": "int",
                "enum": "VisualServer.LightDirectionalShadowMode",
                "index": "1"
              }
            ],
            "name": "light_directional_set_shadow_mode",
            "description": "Sets the shadow mode for this directional light. Equivalent to [member DirectionalLight.directional_shadow_mode]. See [enum LightDirectionalShadowMode] for options."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "detail",
                "type": "int",
                "enum": "VisualServer.LightOmniShadowDetail",
                "index": "1"
              }
            ],
            "name": "light_omni_set_shadow_detail",
            "description": "Sets whether to use vertical or horizontal detail for this omni light. This can be used to alleviate artifacts in the shadow map. Equivalent to [member OmniLight.omni_shadow_detail]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mode",
                "type": "int",
                "enum": "VisualServer.LightOmniShadowMode",
                "index": "1"
              }
            ],
            "name": "light_omni_set_shadow_mode",
            "description": "Sets whether to use a dual paraboloid or a cubemap for the shadow map. Dual paraboloid is faster but may suffer from artifacts. Equivalent to [member OmniLight.omni_shadow_mode]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "bake_mode",
                "type": "int",
                "enum": "VisualServer.LightBakeMode",
                "index": "1"
              }
            ],
            "name": "light_set_bake_mode",
            "description": "Sets the bake mode for this light, see [enum LightBakeMode] for options. The bake mode affects how the light will be baked in [BakedLightmap]s and [GIProbe]s."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "light_set_color",
            "description": "Sets the color of the light. Equivalent to [member Light.light_color]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mask",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "light_set_cull_mask",
            "description": "Sets the cull mask for this Light. Lights only affect objects in the selected layers. Equivalent to [member Light.light_cull_mask]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "light_set_negative",
            "description": "If [code]true[/code], light will subtract light instead of adding light. Equivalent to [member Light.light_negative]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "param",
                "type": "int",
                "enum": "VisualServer.LightParam",
                "index": "1"
              },
              {
                "name": "value",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "light_set_param",
            "description": "Sets the specified light parameter. See [enum LightParam] for options. Equivalent to [method Light.set_param]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "texture",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "light_set_projector",
            "description": "Not implemented in Godot 3.x."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "light_set_reverse_cull_face_mode",
            "description": "If [code]true[/code], reverses the backface culling of the mesh. This can be useful when you have a flat mesh that has a light behind it. If you need to cast a shadow on both sides of the mesh, set the mesh to use double sided shadows with [method instance_geometry_set_cast_shadows_setting]. Equivalent to [member Light.shadow_reverse_cull_face]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "light_set_shadow",
            "description": "If [code]true[/code], light will cast shadows. Equivalent to [member Light.shadow_enabled]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "light_set_shadow_color",
            "description": "Sets the color of the shadow cast by the light. Equivalent to [member Light.shadow_color]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "light",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "light_set_use_gi",
            "description": "Sets whether GI probes capture light information from this light. [i]Deprecated method.[/i] Use [method light_set_bake_mode] instead. This method is only kept for compatibility reasons and calls [method light_set_bake_mode] internally, setting the bake mode to [constant LIGHT_BAKE_DISABLED] or [constant LIGHT_BAKE_INDIRECT] depending on the given parameter."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "lightmap_capture_create",
            "description": "Creates a lightmap capture and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all [code]lightmap_capture_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method.\n\t\t\t\tTo place in a scene, attach this lightmap capture to an instance using [method instance_set_base] using the returned RID."
          },
          {
            "return": {
              "type": "AABB"
            },
            "argument": {
              "name": "capture",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "lightmap_capture_get_bounds",
            "description": "Returns the size of the lightmap capture area."
          },
          {
            "return": {
              "type": "float"
            },
            "argument": {
              "name": "capture",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "lightmap_capture_get_energy",
            "description": "Returns the energy multiplier used by the lightmap capture."
          },
          {
            "return": {
              "type": "PoolByteArray"
            },
            "argument": {
              "name": "capture",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "lightmap_capture_get_octree",
            "description": "Returns the octree used by the lightmap capture."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "capture",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "lightmap_capture_get_octree_cell_subdiv",
            "description": "Returns the cell subdivision amount used by this lightmap capture's octree."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": {
              "name": "capture",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "lightmap_capture_get_octree_cell_transform",
            "description": "Returns the cell transform for this lightmap capture's octree."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "capture",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "lightmap_capture_is_interior",
            "description": "Returns [code]true[/code] if capture is in \"interior\" mode."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "capture",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "bounds",
                "type": "AABB",
                "index": "1"
              }
            ],
            "name": "lightmap_capture_set_bounds",
            "description": "Sets the size of the area covered by the lightmap capture. Equivalent to [member BakedLightmapData.bounds]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "capture",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "energy",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "lightmap_capture_set_energy",
            "description": "Sets the energy multiplier for this lightmap capture. Equivalent to [member BakedLightmapData.energy]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "capture",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "interior",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "lightmap_capture_set_interior",
            "description": "Sets the \"interior\" mode for this lightmap capture. Equivalent to [member BakedLightmapData.interior]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "capture",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "octree",
                "type": "PoolByteArray",
                "index": "1"
              }
            ],
            "name": "lightmap_capture_set_octree",
            "description": "Sets the octree to be used by this lightmap capture. This function is normally used by the [BakedLightmap] node. Equivalent to [member BakedLightmapData.octree]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "capture",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "subdiv",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "lightmap_capture_set_octree_cell_subdiv",
            "description": "Sets the subdivision level of this lightmap capture's octree. Equivalent to [member BakedLightmapData.cell_subdiv]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "capture",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "xform",
                "type": "Transform",
                "index": "1"
              }
            ],
            "name": "lightmap_capture_set_octree_cell_transform",
            "description": "Sets the octree cell transform for this lightmap capture's octree. Equivalent to [member BakedLightmapData.cell_space_transform]."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": [
              {
                "name": "latitudes",
                "type": "int",
                "index": "0"
              },
              {
                "name": "longitudes",
                "type": "int",
                "index": "1"
              },
              {
                "name": "radius",
                "type": "float",
                "index": "2"
              }
            ],
            "name": "make_sphere_mesh",
            "description": "Returns a mesh of a sphere with the given amount of horizontal and vertical subdivisions."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "material_create",
            "description": "Creates an empty material and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all [code]material_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "material",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "parameter",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "material_get_param",
            "description": "Returns the value of a certain material's parameter."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": [
              {
                "name": "material",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "parameter",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "material_get_param_default",
            "description": "Returns the default value for the param if available. Otherwise returns an empty [Variant]."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": {
              "name": "shader_material",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "material_get_shader",
            "description": "Returns the shader of a certain material's shader. Returns an empty RID if the material doesn't have a shader."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "material",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "width",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "material_set_line_width",
            "description": "Sets a material's line width."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "material",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "next_material",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "material_set_next_pass",
            "description": "Sets an object's next material."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "material",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "parameter",
                "type": "String",
                "index": "1"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "2"
              }
            ],
            "name": "material_set_param",
            "description": "Sets a material's parameter."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "material",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "priority",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "material_set_render_priority",
            "description": "Sets a material's render priority."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "shader_material",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "shader",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "material_set_shader",
            "description": "Sets a shader material's shader."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "primitive",
                "type": "int",
                "enum": "VisualServer.PrimitiveType",
                "index": "1"
              },
              {
                "name": "arrays",
                "type": "Array",
                "index": "2"
              },
              {
                "default": "[  ]",
                "name": "blend_shapes",
                "type": "Array",
                "index": "3"
              },
              {
                "default": "97280",
                "name": "compress_format",
                "type": "int",
                "index": "4"
              }
            ],
            "name": "mesh_add_surface_from_arrays",
            "description": "Adds a surface generated from the Arrays to a mesh. See [enum PrimitiveType] constants for types."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "mesh",
              "type": "RID",
              "index": "0"
            },
            "name": "mesh_clear",
            "description": "Removes all surfaces from a mesh."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "mesh_create",
            "description": "Creates a new mesh and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all [code]mesh_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method.\n\t\t\t\tTo place in a scene, attach this mesh to an instance using [method instance_set_base] using the returned RID."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "mesh",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "mesh_get_blend_shape_count",
            "description": "Returns a mesh's blend shape count."
          },
          {
            "return": {
              "type": "int",
              "enum": "VisualServer.BlendShapeMode"
            },
            "argument": {
              "name": "mesh",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "mesh_get_blend_shape_mode",
            "description": "Returns a mesh's blend shape mode."
          },
          {
            "return": {
              "type": "AABB"
            },
            "argument": {
              "name": "mesh",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "mesh_get_custom_aabb",
            "description": "Returns a mesh's custom aabb."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "mesh",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "mesh_get_surface_count",
            "description": "Returns a mesh's number of surfaces."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "index",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "mesh_remove_surface",
            "description": "Removes a mesh's surface."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "amount",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "mesh_set_blend_shape_count",
            "description": "Sets a mesh's blend shape count."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mode",
                "type": "int",
                "enum": "VisualServer.BlendShapeMode",
                "index": "1"
              }
            ],
            "name": "mesh_set_blend_shape_mode",
            "description": "Sets a mesh's blend shape mode."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "aabb",
                "type": "AABB",
                "index": "1"
              }
            ],
            "name": "mesh_set_custom_aabb",
            "description": "Sets a mesh's custom aabb."
          },
          {
            "return": {
              "type": "AABB"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "surface",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "mesh_surface_get_aabb",
            "description": "Returns a mesh's surface's aabb."
          },
          {
            "return": {
              "type": "PoolByteArray"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "surface",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "mesh_surface_get_array",
            "description": "Returns a mesh's surface's vertex buffer."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "surface",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "mesh_surface_get_array_index_len",
            "description": "Returns a mesh's surface's amount of indices."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "surface",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "mesh_surface_get_array_len",
            "description": "Returns a mesh's surface's amount of vertices."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "surface",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "mesh_surface_get_arrays",
            "description": "Returns a mesh's surface's buffer arrays."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "surface",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "mesh_surface_get_blend_shape_arrays",
            "description": "Returns a mesh's surface's arrays for blend shapes."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "surface",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "mesh_surface_get_format",
            "description": "Returns the format of a mesh's surface."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "format",
                "type": "int",
                "index": "0"
              },
              {
                "name": "vertex_len",
                "type": "int",
                "index": "1"
              },
              {
                "name": "index_len",
                "type": "int",
                "index": "2"
              },
              {
                "name": "array_index",
                "type": "int",
                "index": "3"
              }
            ],
            "qualifiers": "const",
            "name": "mesh_surface_get_format_offset",
            "description": "Function is unused in Godot 3.x."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "format",
                "type": "int",
                "index": "0"
              },
              {
                "name": "vertex_len",
                "type": "int",
                "index": "1"
              },
              {
                "name": "index_len",
                "type": "int",
                "index": "2"
              }
            ],
            "qualifiers": "const",
            "name": "mesh_surface_get_format_stride",
            "description": "Function is unused in Godot 3.x."
          },
          {
            "return": {
              "type": "PoolByteArray"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "surface",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "mesh_surface_get_index_array",
            "description": "Returns a mesh's surface's index buffer."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "surface",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "mesh_surface_get_material",
            "description": "Returns a mesh's surface's material."
          },
          {
            "return": {
              "type": "int",
              "enum": "VisualServer.PrimitiveType"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "surface",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "mesh_surface_get_primitive_type",
            "description": "Returns the primitive type of a mesh's surface."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "surface",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "mesh_surface_get_skeleton_aabb",
            "description": "Returns the aabb of a mesh's surface's skeleton."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "surface",
                "type": "int",
                "index": "1"
              },
              {
                "name": "material",
                "type": "RID",
                "index": "2"
              }
            ],
            "name": "mesh_surface_set_material",
            "description": "Sets a mesh's surface's material."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "mesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "surface",
                "type": "int",
                "index": "1"
              },
              {
                "name": "offset",
                "type": "int",
                "index": "2"
              },
              {
                "name": "data",
                "type": "PoolByteArray",
                "index": "3"
              }
            ],
            "name": "mesh_surface_update_region",
            "description": "Updates a specific region of a vertex buffer for the specified surface. Warning: this function alters the vertex buffer directly with no safety mechanisms, you can easily corrupt your mesh."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "multimesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "instances",
                "type": "int",
                "index": "1"
              },
              {
                "name": "transform_format",
                "type": "int",
                "enum": "VisualServer.MultimeshTransformFormat",
                "index": "2"
              },
              {
                "name": "color_format",
                "type": "int",
                "enum": "VisualServer.MultimeshColorFormat",
                "index": "3"
              },
              {
                "default": "0",
                "name": "custom_data_format",
                "type": "int",
                "enum": "VisualServer.MultimeshCustomDataFormat",
                "index": "4"
              }
            ],
            "name": "multimesh_allocate",
            "description": "Allocates space for the multimesh data. Format parameters determine how the data will be stored by OpenGL. See [enum MultimeshTransformFormat], [enum MultimeshColorFormat], and [enum MultimeshCustomDataFormat] for usage. Equivalent to [member MultiMesh.instance_count]."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "multimesh_create",
            "description": "Creates a new multimesh on the VisualServer and returns an [RID] handle. This RID will be used in all [code]multimesh_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method.\n\t\t\t\tTo place in a scene, attach this multimesh to an instance using [method instance_set_base] using the returned RID."
          },
          {
            "return": {
              "type": "AABB"
            },
            "argument": {
              "name": "multimesh",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "multimesh_get_aabb",
            "description": "Calculates and returns the axis-aligned bounding box that encloses all instances within the multimesh."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "multimesh",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "multimesh_get_instance_count",
            "description": "Returns the number of instances allocated for this multimesh."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": {
              "name": "multimesh",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "multimesh_get_mesh",
            "description": "Returns the RID of the mesh that will be used in drawing this multimesh."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "multimesh",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "multimesh_get_visible_instances",
            "description": "Returns the number of visible instances for this multimesh."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": [
              {
                "name": "multimesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "index",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "multimesh_instance_get_color",
            "description": "Returns the color by which the specified instance will be modulated."
          },
          {
            "return": {
              "type": "Color"
            },
            "argument": [
              {
                "name": "multimesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "index",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "multimesh_instance_get_custom_data",
            "description": "Returns the custom data associated with the specified instance."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": [
              {
                "name": "multimesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "index",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "multimesh_instance_get_transform",
            "description": "Returns the [Transform] of the specified instance."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "argument": [
              {
                "name": "multimesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "index",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "multimesh_instance_get_transform_2d",
            "description": "Returns the [Transform2D] of the specified instance. For use when the multimesh is set to use 2D transforms."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "multimesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "index",
                "type": "int",
                "index": "1"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "2"
              }
            ],
            "name": "multimesh_instance_set_color",
            "description": "Sets the color by which this instance will be modulated. Equivalent to [method MultiMesh.set_instance_color]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "multimesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "index",
                "type": "int",
                "index": "1"
              },
              {
                "name": "custom_data",
                "type": "Color",
                "index": "2"
              }
            ],
            "name": "multimesh_instance_set_custom_data",
            "description": "Sets the custom data for this instance. Custom data is passed as a [Color], but is interpreted as a [code]vec4[/code] in the shader. Equivalent to [method MultiMesh.set_instance_custom_data]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "multimesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "index",
                "type": "int",
                "index": "1"
              },
              {
                "name": "transform",
                "type": "Transform",
                "index": "2"
              }
            ],
            "name": "multimesh_instance_set_transform",
            "description": "Sets the [Transform] for this instance. Equivalent to [method MultiMesh.set_instance_transform]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "multimesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "index",
                "type": "int",
                "index": "1"
              },
              {
                "name": "transform",
                "type": "Transform2D",
                "index": "2"
              }
            ],
            "name": "multimesh_instance_set_transform_2d",
            "description": "Sets the [Transform2D] for this instance. For use when multimesh is used in 2D. Equivalent to [method MultiMesh.set_instance_transform_2d]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "multimesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "array",
                "type": "PoolRealArray",
                "index": "1"
              }
            ],
            "name": "multimesh_set_as_bulk_array",
            "description": "Sets all data related to the instances in one go. This is especially useful when loading the data from disk or preparing the data from GDNative.\n\n\t\t\t\tAll data is packed in one large float array. An array may look like this: Transform for instance 1, color data for instance 1, custom data for instance 1, transform for instance 2, color data for instance 2, etc.\n\n\t\t\t\t[Transform] is stored as 12 floats, [Transform2D] is stored as 8 floats, [code]COLOR_8BIT[/code] / [code]CUSTOM_DATA_8BIT[/code] is stored as 1 float (4 bytes as is) and [code]COLOR_FLOAT[/code] / [code]CUSTOM_DATA_FLOAT[/code] is stored as 4 floats."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "multimesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mesh",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "multimesh_set_mesh",
            "description": "Sets the mesh to be drawn by the multimesh. Equivalent to [member MultiMesh.mesh]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "multimesh",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "visible",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "multimesh_set_visible_instances",
            "description": "Sets the number of instances visible at a given time. If -1, all instances that have been allocated are drawn. Equivalent to [member MultiMesh.visible_instance_count]."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "omni_light_create",
            "description": "Creates a new omni light and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID can be used in most [code]light_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method.\n\t\t\t\tTo place in a scene, attach this omni light to an instance using [method instance_set_base] using the returned RID."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "particles_create",
            "description": "Creates a particle system and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all [code]particles_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method.\n\t\t\t\tTo place in a scene, attach these particles to an instance using [method instance_set_base] using the returned RID."
          },
          {
            "return": {
              "type": "AABB"
            },
            "argument": {
              "name": "particles",
              "type": "RID",
              "index": "0"
            },
            "name": "particles_get_current_aabb",
            "description": "Calculates and returns the axis-aligned bounding box that contains all the particles. Equivalent to [method Particles.capture_aabb]."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "particles",
              "type": "RID",
              "index": "0"
            },
            "name": "particles_get_emitting",
            "description": "Returns [code]true[/code] if particles are currently set to emitting."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "particles",
              "type": "RID",
              "index": "0"
            },
            "name": "particles_is_inactive",
            "description": "Returns [code]true[/code] if particles are not emitting and particles are set to inactive."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "particles",
              "type": "RID",
              "index": "0"
            },
            "name": "particles_request_process",
            "description": "Add particle system to list of particle systems that need to be updated. Update will take place on the next frame, or on the next call to [method instances_cull_aabb], [method instances_cull_convex], or [method instances_cull_ray]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "particles",
              "type": "RID",
              "index": "0"
            },
            "name": "particles_restart",
            "description": "Reset the particles on the next update. Equivalent to [method Particles.restart]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "particles",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "amount",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "particles_set_amount",
            "description": "Sets the number of particles to be drawn and allocates the memory for them. Equivalent to [member Particles.amount]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "particles",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "aabb",
                "type": "AABB",
                "index": "1"
              }
            ],
            "name": "particles_set_custom_aabb",
            "description": "Sets a custom axis-aligned bounding box for the particle system. Equivalent to [member Particles.visibility_aabb]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "particles",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "order",
                "type": "int",
                "enum": "VisualServer.ParticlesDrawOrder",
                "index": "1"
              }
            ],
            "name": "particles_set_draw_order",
            "description": "Sets the draw order of the particles to one of the named enums from [enum ParticlesDrawOrder]. See [enum ParticlesDrawOrder] for options. Equivalent to [member Particles.draw_order]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "particles",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "pass",
                "type": "int",
                "index": "1"
              },
              {
                "name": "mesh",
                "type": "RID",
                "index": "2"
              }
            ],
            "name": "particles_set_draw_pass_mesh",
            "description": "Sets the mesh to be used for the specified draw pass. Equivalent to [member Particles.draw_pass_1], [member Particles.draw_pass_2], [member Particles.draw_pass_3], and [member Particles.draw_pass_4]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "particles",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "count",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "particles_set_draw_passes",
            "description": "Sets the number of draw passes to use. Equivalent to [member Particles.draw_passes]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "particles",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "transform",
                "type": "Transform",
                "index": "1"
              }
            ],
            "name": "particles_set_emission_transform",
            "description": "Sets the [Transform] that will be used by the particles when they first emit."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "particles",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "emitting",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "particles_set_emitting",
            "description": "If [code]true[/code], particles will emit over time. Setting to false does not reset the particles, but only stops their emission. Equivalent to [member Particles.emitting]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "particles",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "ratio",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "particles_set_explosiveness_ratio",
            "description": "Sets the explosiveness ratio. Equivalent to [member Particles.explosiveness]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "particles",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "fps",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "particles_set_fixed_fps",
            "description": "Sets the frame rate that the particle system rendering will be fixed to. Equivalent to [member Particles.fixed_fps]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "particles",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "particles_set_fractional_delta",
            "description": "If [code]true[/code], uses fractional delta which smooths the movement of the particles. Equivalent to [member Particles.fract_delta]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "particles",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "lifetime",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "particles_set_lifetime",
            "description": "Sets the lifetime of each particle in the system. Equivalent to [member Particles.lifetime]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "particles",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "one_shot",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "particles_set_one_shot",
            "description": "If [code]true[/code], particles will emit once and then stop. Equivalent to [member Particles.one_shot]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "particles",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "time",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "particles_set_pre_process_time",
            "description": "Sets the preprocess time for the particles' animation. This lets you delay starting an animation until after the particles have begun emitting. Equivalent to [member Particles.preprocess]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "particles",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "material",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "particles_set_process_material",
            "description": "Sets the material for processing the particles. Note: this is not the material used to draw the materials. Equivalent to [member Particles.process_material]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "particles",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "ratio",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "particles_set_randomness_ratio",
            "description": "Sets the emission randomness ratio. This randomizes the emission of particles within their phase. Equivalent to [member Particles.randomness]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "particles",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "scale",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "particles_set_speed_scale",
            "description": "Sets the speed scale of the particle system. Equivalent to [member Particles.speed_scale]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "particles",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "particles_set_use_local_coordinates",
            "description": "If [code]true[/code], particles use local coordinates. If [code]false[/code] they use global coordinates. Equivalent to [member Particles.local_coords]."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "reflection_probe_create",
            "description": "Creates a reflection probe and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all [code]reflection_probe_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method.\n\t\t\t\tTo place in a scene, attach this reflection probe to an instance using [method instance_set_base] using the returned RID."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "reflection_probe_set_as_interior",
            "description": "If [code]true[/code], reflections will ignore sky contribution. Equivalent to [member ReflectionProbe.interior_enable]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "layers",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "reflection_probe_set_cull_mask",
            "description": "Sets the render cull mask for this reflection probe. Only instances with a matching cull mask will be rendered by this probe. Equivalent to [member ReflectionProbe.cull_mask]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "reflection_probe_set_enable_box_projection",
            "description": "If [code]true[/code], uses box projection. This can make reflections look more correct in certain situations. Equivalent to [member ReflectionProbe.box_projection]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enable",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "reflection_probe_set_enable_shadows",
            "description": "If [code]true[/code], computes shadows in the reflection probe. This makes the reflection much slower to compute. Equivalent to [member ReflectionProbe.enable_shadows]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "extents",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "reflection_probe_set_extents",
            "description": "Sets the size of the area that the reflection probe will capture. Equivalent to [member ReflectionProbe.extents]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "intensity",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "reflection_probe_set_intensity",
            "description": "Sets the intensity of the reflection probe. Intensity modulates the strength of the reflection. Equivalent to [member ReflectionProbe.intensity]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              }
            ],
            "name": "reflection_probe_set_interior_ambient",
            "description": "Sets the ambient light color for this reflection probe when set to interior mode. Equivalent to [member ReflectionProbe.interior_ambient_color]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "energy",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "reflection_probe_set_interior_ambient_energy",
            "description": "Sets the energy multiplier for this reflection probes ambient light contribution when set to interior mode. Equivalent to [member ReflectionProbe.interior_ambient_energy]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "contrib",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "reflection_probe_set_interior_ambient_probe_contribution",
            "description": "Sets the contribution value for how much the reflection affects the ambient light for this reflection probe when set to interior mode. Useful so that ambient light matches the color of the room. Equivalent to [member ReflectionProbe.interior_ambient_contrib]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "distance",
                "type": "float",
                "index": "1"
              }
            ],
            "name": "reflection_probe_set_max_distance",
            "description": "Sets the max distance away from the probe an object can be before it is culled. Equivalent to [member ReflectionProbe.max_distance]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "offset",
                "type": "Vector3",
                "index": "1"
              }
            ],
            "name": "reflection_probe_set_origin_offset",
            "description": "Sets the origin offset to be used when this reflection probe is in box project mode. Equivalent to [member ReflectionProbe.origin_offset]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "probe",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "mode",
                "type": "int",
                "enum": "VisualServer.ReflectionProbeUpdateMode",
                "index": "1"
              }
            ],
            "name": "reflection_probe_set_update_mode",
            "description": "Sets how often the reflection probe updates. Can either be once or every frame. See [enum ReflectionProbeUpdateMode] for options."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "where",
                "type": "Object",
                "index": "0"
              },
              {
                "name": "method",
                "type": "String",
                "index": "1"
              },
              {
                "name": "userdata",
                "type": "Variant",
                "index": "2"
              }
            ],
            "name": "request_frame_drawn_callback",
            "description": "Schedules a callback to the corresponding named [code]method[/code] on [code]where[/code] after a frame has been drawn.\n\t\t\t\tThe callback method must use only 1 argument which will be called with [code]userdata[/code]."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "scenario_create",
            "description": "Creates a scenario and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all [code]scenario_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method.\n\t\t\t\tThe scenario is the 3D world that all the visual instances exist in."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "scenario",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "debug_mode",
                "type": "int",
                "enum": "VisualServer.ScenarioDebugMode",
                "index": "1"
              }
            ],
            "name": "scenario_set_debug",
            "description": "Sets the [enum ScenarioDebugMode] for this scenario. See [enum ScenarioDebugMode] for options."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "scenario",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "environment",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "scenario_set_environment",
            "description": "Sets the environment that will be used with this scenario."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "scenario",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "environment",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "scenario_set_fallback_environment",
            "description": "Sets the fallback environment to be used by this scenario. The fallback environment is used if no environment is set. Internally, this is used by the editor to provide a default environment."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "scenario",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "size",
                "type": "int",
                "index": "1"
              },
              {
                "name": "subdiv",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "scenario_set_reflection_atlas_size",
            "description": "Sets the size of the reflection atlas shared by all reflection probes in this scenario."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "image",
                "type": "Image",
                "index": "0"
              },
              {
                "name": "color",
                "type": "Color",
                "index": "1"
              },
              {
                "name": "scale",
                "type": "bool",
                "index": "2"
              },
              {
                "default": "true",
                "name": "use_filter",
                "type": "bool",
                "index": "3"
              }
            ],
            "name": "set_boot_image",
            "description": "Sets a boot image. The color defines the background color. If [code]scale[/code] is [code]true[/code], the image will be scaled to fit the screen size. If [code]use_filter[/code] is [code]true[/code], the image will be scaled with linear interpolation. If [code]use_filter[/code] is [code]false[/code], the image will be scaled with nearest-neighbor interpolation."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "generate",
              "type": "bool",
              "index": "0"
            },
            "name": "set_debug_generate_wireframes",
            "description": "If [code]true[/code], the engine will generate wireframes for use with the wireframe debug mode."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "color",
              "type": "Color",
              "index": "0"
            },
            "name": "set_default_clear_color",
            "description": "Sets the default clear color which is used when a specific clear color has not been selected."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "scale",
              "type": "float",
              "index": "0"
            },
            "name": "set_shader_time_scale",
            "description": "Sets the scale to apply to the passage of time for the shaders' [code]TIME[/code] builtin.\n\t\t\t\tThe default value is [code]1.0[/code], which means [code]TIME[/code] will count the real time as it goes by, without narrowing or stretching it."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "shader_create",
            "description": "Creates an empty shader and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all [code]shader_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "shader",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "shader_get_code",
            "description": "Returns a shader's code."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": [
              {
                "name": "shader",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "name",
                "type": "String",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "shader_get_default_texture_param",
            "description": "Returns a default texture from a shader searched by name."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "shader",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "shader_get_param_list",
            "description": "Returns the parameters of a shader."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "shader",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "code",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "shader_set_code",
            "description": "Sets a shader's code."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "shader",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "name",
                "type": "String",
                "index": "1"
              },
              {
                "name": "texture",
                "type": "RID",
                "index": "2"
              }
            ],
            "name": "shader_set_default_texture_param",
            "description": "Sets a shader's default texture. Overwrites the texture given by name."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "skeleton",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "bones",
                "type": "int",
                "index": "1"
              },
              {
                "default": "false",
                "name": "is_2d_skeleton",
                "type": "bool",
                "index": "2"
              }
            ],
            "name": "skeleton_allocate",
            "description": "Allocates the GPU buffers for this skeleton."
          },
          {
            "return": {
              "type": "Transform"
            },
            "argument": [
              {
                "name": "skeleton",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "bone",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "skeleton_bone_get_transform",
            "description": "Returns the [Transform] set for a specific bone of this skeleton."
          },
          {
            "return": {
              "type": "Transform2D"
            },
            "argument": [
              {
                "name": "skeleton",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "bone",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "skeleton_bone_get_transform_2d",
            "description": "Returns the [Transform2D] set for a specific bone of this skeleton."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "skeleton",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "bone",
                "type": "int",
                "index": "1"
              },
              {
                "name": "transform",
                "type": "Transform",
                "index": "2"
              }
            ],
            "name": "skeleton_bone_set_transform",
            "description": "Sets the [Transform] for a specific bone of this skeleton."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "skeleton",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "bone",
                "type": "int",
                "index": "1"
              },
              {
                "name": "transform",
                "type": "Transform2D",
                "index": "2"
              }
            ],
            "name": "skeleton_bone_set_transform_2d",
            "description": "Sets the [Transform2D] for a specific bone of this skeleton."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "skeleton_create",
            "description": "Creates a skeleton and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all [code]skeleton_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "skeleton",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "skeleton_get_bone_count",
            "description": "Returns the number of bones allocated for this skeleton."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "sky_create",
            "description": "Creates an empty sky and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all [code]sky_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "sky",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "cube_map",
                "type": "RID",
                "index": "1"
              },
              {
                "name": "radiance_size",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "sky_set_texture",
            "description": "Sets a sky's texture."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "spot_light_create",
            "description": "Creates a spot light and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID can be used in most [code]light_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method.\n\t\t\t\tTo place in a scene, attach this spot light to an instance using [method instance_set_base] using the returned RID."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "sync",
            "description": "Not implemented in Godot 3.x."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "texture",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "width",
                "type": "int",
                "index": "1"
              },
              {
                "name": "height",
                "type": "int",
                "index": "2"
              },
              {
                "name": "depth_3d",
                "type": "int",
                "index": "3"
              },
              {
                "name": "format",
                "type": "int",
                "enum": "Image.Format",
                "index": "4"
              },
              {
                "name": "type",
                "type": "int",
                "enum": "VisualServer.TextureType",
                "index": "5"
              },
              {
                "default": "7",
                "name": "flags",
                "type": "int",
                "index": "6"
              }
            ],
            "name": "texture_allocate",
            "description": "Allocates the GPU memory for the texture."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "texture",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "number",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "texture_bind",
            "description": "Binds the texture to a texture slot."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "texture_create",
            "description": "Creates an empty texture and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all [code]texture_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": [
              {
                "name": "image",
                "type": "Image",
                "index": "0"
              },
              {
                "default": "7",
                "name": "flags",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "texture_create_from_image",
            "description": "Creates a texture, allocates the space for an image, and fills in the image."
          },
          {
            "return": {
              "type": "Array"
            },
            "name": "texture_debug_usage",
            "description": "Returns a list of all the textures and their information."
          },
          {
            "return": {
              "type": "Image"
            },
            "argument": [
              {
                "name": "texture",
                "type": "RID",
                "index": "0"
              },
              {
                "default": "0",
                "name": "cube_side",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "texture_get_data",
            "description": "Returns a copy of a texture's image unless it's a CubeMap, in which case it returns the [RID] of the image at one of the cubes sides."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "texture",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "texture_get_depth",
            "description": "Returns the depth of the texture."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "texture",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "texture_get_flags",
            "description": "Returns the flags of a texture."
          },
          {
            "return": {
              "type": "int",
              "enum": "Image.Format"
            },
            "argument": {
              "name": "texture",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "texture_get_format",
            "description": "Returns the format of the texture's image."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "texture",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "texture_get_height",
            "description": "Returns the texture's height."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "texture",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "texture_get_path",
            "description": "Returns the texture's path."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "texture",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "texture_get_texid",
            "description": "Returns the opengl id of the texture's image."
          },
          {
            "return": {
              "type": "int",
              "enum": "VisualServer.TextureType"
            },
            "argument": {
              "name": "texture",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "texture_get_type",
            "description": "Returns the type of the texture, can be any of the [enum TextureType]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "texture",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "texture_get_width",
            "description": "Returns the texture's width."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "texture",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "image",
                "type": "Image",
                "index": "1"
              },
              {
                "default": "0",
                "name": "layer",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "texture_set_data",
            "description": "Sets the texture's image data. If it's a CubeMap, it sets the image data at a cube side."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "texture",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "image",
                "type": "Image",
                "index": "1"
              },
              {
                "name": "src_x",
                "type": "int",
                "index": "2"
              },
              {
                "name": "src_y",
                "type": "int",
                "index": "3"
              },
              {
                "name": "src_w",
                "type": "int",
                "index": "4"
              },
              {
                "name": "src_h",
                "type": "int",
                "index": "5"
              },
              {
                "name": "dst_x",
                "type": "int",
                "index": "6"
              },
              {
                "name": "dst_y",
                "type": "int",
                "index": "7"
              },
              {
                "name": "dst_mip",
                "type": "int",
                "index": "8"
              },
              {
                "default": "0",
                "name": "layer",
                "type": "int",
                "index": "9"
              }
            ],
            "name": "texture_set_data_partial",
            "description": "Sets a part of the data for a texture. Warning: this function calls the underlying graphics API directly and may corrupt your texture if used improperly."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "texture",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "flags",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "texture_set_flags",
            "description": "Sets the texture's flags. See [enum TextureFlags] for options."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "texture",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "path",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "texture_set_path",
            "description": "Sets the texture's path."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "shrink",
              "type": "bool",
              "index": "0"
            },
            "name": "texture_set_shrink_all_x2_on_set_data",
            "description": "If [code]true[/code], sets internal processes to shrink all image data to half the size."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "texture",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "width",
                "type": "int",
                "index": "1"
              },
              {
                "name": "height",
                "type": "int",
                "index": "2"
              },
              {
                "name": "depth",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "texture_set_size_override",
            "description": "Resizes the texture to the specified dimensions."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "enable",
              "type": "bool",
              "index": "0"
            },
            "name": "textures_keep_original",
            "description": "If [code]true[/code], the image will be stored in the texture's images array if overwritten."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "camera",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "viewport_attach_camera",
            "description": "Sets a viewport's camera."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "canvas",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "viewport_attach_canvas",
            "description": "Sets a viewport's canvas."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "default": "Rect2( 0, 0, 0, 0 )",
                "name": "rect",
                "type": "Rect2",
                "index": "1"
              },
              {
                "default": "0",
                "name": "screen",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "viewport_attach_to_screen",
            "description": "Copies viewport to a region of the screen specified by [code]rect[/code]. If [member Viewport.render_direct_to_screen] is [code]true[/code], then viewport does not use a framebuffer and the contents of the viewport are rendered directly to screen. However, note that the root viewport is drawn last, therefore it will draw over the screen. Accordingly, you must set the root viewport to an area that does not cover the area that you have attached this viewport to.\n\t\t\t\tFor example, you can set the root viewport to not render at all with the following code:\n\t\t\t\t[codeblock]\n\t\t\t\tfunc _ready():\n\t\t\t\t    get_viewport().set_attach_to_screen_rect(Rect2())\n\t\t\t\t    $Viewport.set_attach_to_screen_rect(Rect2(0, 0, 600, 600))\n\t\t\t\t[/codeblock]\n\t\t\t\tUsing this can result in significant optimization, especially on lower-end devices. However, it comes at the cost of having to manage your viewports manually. For a further optimization see, [method viewport_set_render_direct_to_screen]."
          },
          {
            "return": {
              "type": "RID"
            },
            "name": "viewport_create",
            "description": "Creates an empty viewport and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all [code]viewport_*[/code] VisualServer functions.\n\t\t\t\tOnce finished with your RID, you will want to free the RID using the VisualServer's [method free_rid] static method."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "viewport",
              "type": "RID",
              "index": "0"
            },
            "name": "viewport_detach",
            "description": "Detaches the viewport from the screen."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "info",
                "type": "int",
                "enum": "VisualServer.ViewportRenderInfo",
                "index": "1"
              }
            ],
            "name": "viewport_get_render_info",
            "description": "Returns a viewport's render information. For options, see the [enum ViewportRenderInfo] constants."
          },
          {
            "return": {
              "type": "RID"
            },
            "argument": {
              "name": "viewport",
              "type": "RID",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "viewport_get_texture",
            "description": "Returns the viewport's last rendered frame."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "canvas",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "viewport_remove_canvas",
            "description": "Detaches a viewport from a canvas and vice versa."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "active",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "viewport_set_active",
            "description": "If [code]true[/code], sets the viewport active, else sets it inactive."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "canvas",
                "type": "RID",
                "index": "1"
              },
              {
                "name": "layer",
                "type": "int",
                "index": "2"
              },
              {
                "name": "sublayer",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "viewport_set_canvas_stacking",
            "description": "Sets the stacking order for a viewport's canvas.\n\t\t\t\t[code]layer[/code] is the actual canvas layer, while [code]sublayer[/code] specifies the stacking order of the canvas among those in the same layer."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "canvas",
                "type": "RID",
                "index": "1"
              },
              {
                "name": "offset",
                "type": "Transform2D",
                "index": "2"
              }
            ],
            "name": "viewport_set_canvas_transform",
            "description": "Sets the transformation of a viewport's canvas."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "clear_mode",
                "type": "int",
                "enum": "VisualServer.ViewportClearMode",
                "index": "1"
              }
            ],
            "name": "viewport_set_clear_mode",
            "description": "Sets the clear mode of a viewport. See [enum ViewportClearMode] for options."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "draw",
                "type": "int",
                "enum": "VisualServer.ViewportDebugDraw",
                "index": "1"
              }
            ],
            "name": "viewport_set_debug_draw",
            "description": "Sets the debug draw mode of a viewport. See [enum ViewportDebugDraw] for options."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "disabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "viewport_set_disable_3d",
            "description": "If [code]true[/code], a viewport's 3D rendering is disabled."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "disabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "viewport_set_disable_environment",
            "description": "If [code]true[/code], rendering of a viewport's environment is disabled."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "transform",
                "type": "Transform2D",
                "index": "1"
              }
            ],
            "name": "viewport_set_global_canvas_transform",
            "description": "Sets the viewport's global transformation matrix."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "viewport_set_hdr",
            "description": "If [code]true[/code], the viewport renders to hdr."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "hidden",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "viewport_set_hide_canvas",
            "description": "If [code]true[/code], the viewport's canvas is not rendered."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "hidden",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "viewport_set_hide_scenario",
            "description": "Currently unimplemented in Godot 3.x."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "msaa",
                "type": "int",
                "enum": "VisualServer.ViewportMSAA",
                "index": "1"
              }
            ],
            "name": "viewport_set_msaa",
            "description": "Sets the anti-aliasing mode. See [enum ViewportMSAA] for options."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "parent_viewport",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "viewport_set_parent_viewport",
            "description": "Sets the viewport's parent to another viewport."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "viewport_set_render_direct_to_screen",
            "description": "If [code]true[/code], render the contents of the viewport directly to screen. This allows a low-level optimization where you can skip drawing a viewport to the root viewport. While this optimization can result in a significant increase in speed (especially on older devices), it comes at a cost of usability. When this is enabled, you cannot read from the viewport or from the [code]SCREEN_TEXTURE[/code]. You also lose the benefit of certain window settings, such as the various stretch modes. Another consequence to be aware of is that in 2D the rendering happens in window coordinates, so if you have a viewport that is double the size of the window, and you set this, then only the portion that fits within the window will be drawn, no automatic scaling is possible, even if your game scene is significantly larger than the window size."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "scenario",
                "type": "RID",
                "index": "1"
              }
            ],
            "name": "viewport_set_scenario",
            "description": "Sets a viewport's scenario.\n\t\t\t\tThe scenario contains information about the [enum ScenarioDebugMode], environment information, reflection atlas etc."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "quadrant",
                "type": "int",
                "index": "1"
              },
              {
                "name": "subdivision",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "viewport_set_shadow_atlas_quadrant_subdivision",
            "description": "Sets the shadow atlas quadrant's subdivision."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "size",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "viewport_set_shadow_atlas_size",
            "description": "Sets the size of the shadow atlas's images (used for omni and spot lights). The value will be rounded up to the nearest power of 2."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "width",
                "type": "int",
                "index": "1"
              },
              {
                "name": "height",
                "type": "int",
                "index": "2"
              }
            ],
            "name": "viewport_set_size",
            "description": "Sets the viewport's width and height."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "viewport_set_transparent_background",
            "description": "If [code]true[/code], the viewport renders its background as transparent."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "update_mode",
                "type": "int",
                "enum": "VisualServer.ViewportUpdateMode",
                "index": "1"
              }
            ],
            "name": "viewport_set_update_mode",
            "description": "Sets when the viewport should be updated. See [enum ViewportUpdateMode] constants for options."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "usage",
                "type": "int",
                "enum": "VisualServer.ViewportUsage",
                "index": "1"
              }
            ],
            "name": "viewport_set_usage",
            "description": "Sets the viewport's 2D/3D mode. See [enum ViewportUsage] constants for options."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "use_arvr",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "viewport_set_use_arvr",
            "description": "If [code]true[/code], the viewport uses augmented or virtual reality technologies. See [ARVRInterface]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "debanding",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "viewport_set_use_debanding",
            "description": "If [code]true[/code], uses a fast post-processing filter to make banding significantly less visible. In some cases, debanding may introduce a slightly noticeable dithering pattern. It's recommended to enable debanding only when actually needed since the dithering pattern will make lossless-compressed screenshots larger.\n\t\t\t\t[b]Note:[/b] Only available on the GLES3 backend. [member Viewport.hdr] must also be [code]true[/code] for debanding to be effective."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "fxaa",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "viewport_set_use_fxaa",
            "description": "Enables fast approximate antialiasing for this viewport. FXAA is a popular screen-space antialiasing method, which is fast but will make the image look blurry, especially at lower resolutions. It can still work relatively well at large resolutions such as 1440p and 4K."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "viewport",
                "type": "RID",
                "index": "0"
              },
              {
                "name": "enabled",
                "type": "bool",
                "index": "1"
              }
            ],
            "name": "viewport_set_vflip",
            "description": "If [code]true[/code], the viewport's rendering is flipped vertically."
          }
        ]
      },
      "name": "VisualServer",
      "version": "3.3",
      "signals": {
        "signal": [
          {
            "name": "frame_post_draw",
            "description": "Emitted at the end of the frame, after the VisualServer has finished updating all the Viewports."
          },
          {
            "name": "frame_pre_draw",
            "description": "Emitted at the beginning of the frame, before the VisualServer updates all the Viewports."
          }
        ]
      },
      "constants": {
        "constant": [
          {
            "value": "-1",
            "name": "NO_INDEX_ARRAY"
          },
          {
            "value": "4",
            "name": "ARRAY_WEIGHTS_SIZE"
          },
          {
            "value": "-4096",
            "name": "CANVAS_ITEM_Z_MIN"
          },
          {
            "value": "4096",
            "name": "CANVAS_ITEM_Z_MAX"
          },
          {
            "value": "7",
            "name": "MAX_GLOW_LEVELS"
          },
          {
            "value": "8",
            "name": "MAX_CURSORS"
          },
          {
            "value": "-128",
            "name": "MATERIAL_RENDER_PRIORITY_MIN"
          },
          {
            "value": "127",
            "name": "MATERIAL_RENDER_PRIORITY_MAX"
          },
          {
            "value": "0",
            "name": "CUBEMAP_LEFT",
            "enum": "CubeMapSide"
          },
          {
            "value": "1",
            "name": "CUBEMAP_RIGHT",
            "enum": "CubeMapSide"
          },
          {
            "value": "2",
            "name": "CUBEMAP_BOTTOM",
            "enum": "CubeMapSide"
          },
          {
            "value": "3",
            "name": "CUBEMAP_TOP",
            "enum": "CubeMapSide"
          },
          {
            "value": "4",
            "name": "CUBEMAP_FRONT",
            "enum": "CubeMapSide"
          },
          {
            "value": "5",
            "name": "CUBEMAP_BACK",
            "enum": "CubeMapSide"
          },
          {
            "value": "0",
            "name": "TEXTURE_TYPE_2D",
            "enum": "TextureType"
          },
          {
            "value": "2",
            "name": "TEXTURE_TYPE_CUBEMAP",
            "enum": "TextureType"
          },
          {
            "value": "3",
            "name": "TEXTURE_TYPE_2D_ARRAY",
            "enum": "TextureType"
          },
          {
            "value": "4",
            "name": "TEXTURE_TYPE_3D",
            "enum": "TextureType"
          },
          {
            "value": "1",
            "name": "TEXTURE_FLAG_MIPMAPS",
            "enum": "TextureFlags"
          },
          {
            "value": "2",
            "name": "TEXTURE_FLAG_REPEAT",
            "enum": "TextureFlags"
          },
          {
            "value": "4",
            "name": "TEXTURE_FLAG_FILTER",
            "enum": "TextureFlags"
          },
          {
            "value": "8",
            "name": "TEXTURE_FLAG_ANISOTROPIC_FILTER",
            "enum": "TextureFlags"
          },
          {
            "value": "16",
            "name": "TEXTURE_FLAG_CONVERT_TO_LINEAR",
            "enum": "TextureFlags"
          },
          {
            "value": "32",
            "name": "TEXTURE_FLAG_MIRRORED_REPEAT",
            "enum": "TextureFlags"
          },
          {
            "value": "2048",
            "name": "TEXTURE_FLAG_USED_FOR_STREAMING",
            "enum": "TextureFlags"
          },
          {
            "value": "7",
            "name": "TEXTURE_FLAGS_DEFAULT",
            "enum": "TextureFlags"
          },
          {
            "value": "0",
            "name": "SHADER_SPATIAL",
            "enum": "ShaderMode"
          },
          {
            "value": "1",
            "name": "SHADER_CANVAS_ITEM",
            "enum": "ShaderMode"
          },
          {
            "value": "2",
            "name": "SHADER_PARTICLES",
            "enum": "ShaderMode"
          },
          {
            "value": "3",
            "name": "SHADER_MAX",
            "enum": "ShaderMode"
          },
          {
            "value": "0",
            "name": "ARRAY_VERTEX",
            "enum": "ArrayType"
          },
          {
            "value": "1",
            "name": "ARRAY_NORMAL",
            "enum": "ArrayType"
          },
          {
            "value": "2",
            "name": "ARRAY_TANGENT",
            "enum": "ArrayType"
          },
          {
            "value": "3",
            "name": "ARRAY_COLOR",
            "enum": "ArrayType"
          },
          {
            "value": "4",
            "name": "ARRAY_TEX_UV",
            "enum": "ArrayType"
          },
          {
            "value": "5",
            "name": "ARRAY_TEX_UV2",
            "enum": "ArrayType"
          },
          {
            "value": "6",
            "name": "ARRAY_BONES",
            "enum": "ArrayType"
          },
          {
            "value": "7",
            "name": "ARRAY_WEIGHTS",
            "enum": "ArrayType"
          },
          {
            "value": "8",
            "name": "ARRAY_INDEX",
            "enum": "ArrayType"
          },
          {
            "value": "9",
            "name": "ARRAY_MAX",
            "enum": "ArrayType"
          },
          {
            "value": "1",
            "name": "ARRAY_FORMAT_VERTEX",
            "enum": "ArrayFormat"
          },
          {
            "value": "2",
            "name": "ARRAY_FORMAT_NORMAL",
            "enum": "ArrayFormat"
          },
          {
            "value": "4",
            "name": "ARRAY_FORMAT_TANGENT",
            "enum": "ArrayFormat"
          },
          {
            "value": "8",
            "name": "ARRAY_FORMAT_COLOR",
            "enum": "ArrayFormat"
          },
          {
            "value": "16",
            "name": "ARRAY_FORMAT_TEX_UV",
            "enum": "ArrayFormat"
          },
          {
            "value": "32",
            "name": "ARRAY_FORMAT_TEX_UV2",
            "enum": "ArrayFormat"
          },
          {
            "value": "64",
            "name": "ARRAY_FORMAT_BONES",
            "enum": "ArrayFormat"
          },
          {
            "value": "128",
            "name": "ARRAY_FORMAT_WEIGHTS",
            "enum": "ArrayFormat"
          },
          {
            "value": "256",
            "name": "ARRAY_FORMAT_INDEX",
            "enum": "ArrayFormat"
          },
          {
            "value": "512",
            "name": "ARRAY_COMPRESS_VERTEX",
            "enum": "ArrayFormat"
          },
          {
            "value": "1024",
            "name": "ARRAY_COMPRESS_NORMAL",
            "enum": "ArrayFormat"
          },
          {
            "value": "2048",
            "name": "ARRAY_COMPRESS_TANGENT",
            "enum": "ArrayFormat"
          },
          {
            "value": "4096",
            "name": "ARRAY_COMPRESS_COLOR",
            "enum": "ArrayFormat"
          },
          {
            "value": "8192",
            "name": "ARRAY_COMPRESS_TEX_UV",
            "enum": "ArrayFormat"
          },
          {
            "value": "16384",
            "name": "ARRAY_COMPRESS_TEX_UV2",
            "enum": "ArrayFormat"
          },
          {
            "value": "32768",
            "name": "ARRAY_COMPRESS_BONES",
            "enum": "ArrayFormat"
          },
          {
            "value": "65536",
            "name": "ARRAY_COMPRESS_WEIGHTS",
            "enum": "ArrayFormat"
          },
          {
            "value": "131072",
            "name": "ARRAY_COMPRESS_INDEX",
            "enum": "ArrayFormat"
          },
          {
            "value": "262144",
            "name": "ARRAY_FLAG_USE_2D_VERTICES",
            "enum": "ArrayFormat"
          },
          {
            "value": "524288",
            "name": "ARRAY_FLAG_USE_16_BIT_BONES",
            "enum": "ArrayFormat"
          },
          {
            "value": "97280",
            "name": "ARRAY_COMPRESS_DEFAULT",
            "enum": "ArrayFormat"
          },
          {
            "value": "0",
            "name": "PRIMITIVE_POINTS",
            "enum": "PrimitiveType"
          },
          {
            "value": "1",
            "name": "PRIMITIVE_LINES",
            "enum": "PrimitiveType"
          },
          {
            "value": "2",
            "name": "PRIMITIVE_LINE_STRIP",
            "enum": "PrimitiveType"
          },
          {
            "value": "3",
            "name": "PRIMITIVE_LINE_LOOP",
            "enum": "PrimitiveType"
          },
          {
            "value": "4",
            "name": "PRIMITIVE_TRIANGLES",
            "enum": "PrimitiveType"
          },
          {
            "value": "5",
            "name": "PRIMITIVE_TRIANGLE_STRIP",
            "enum": "PrimitiveType"
          },
          {
            "value": "6",
            "name": "PRIMITIVE_TRIANGLE_FAN",
            "enum": "PrimitiveType"
          },
          {
            "value": "7",
            "name": "PRIMITIVE_MAX",
            "enum": "PrimitiveType"
          },
          {
            "value": "0",
            "name": "BLEND_SHAPE_MODE_NORMALIZED",
            "enum": "BlendShapeMode"
          },
          {
            "value": "1",
            "name": "BLEND_SHAPE_MODE_RELATIVE",
            "enum": "BlendShapeMode"
          },
          {
            "value": "0",
            "name": "LIGHT_DIRECTIONAL",
            "enum": "LightType"
          },
          {
            "value": "1",
            "name": "LIGHT_OMNI",
            "enum": "LightType"
          },
          {
            "value": "2",
            "name": "LIGHT_SPOT",
            "enum": "LightType"
          },
          {
            "value": "0",
            "name": "LIGHT_PARAM_ENERGY",
            "enum": "LightParam"
          },
          {
            "value": "2",
            "name": "LIGHT_PARAM_SPECULAR",
            "enum": "LightParam"
          },
          {
            "value": "3",
            "name": "LIGHT_PARAM_RANGE",
            "enum": "LightParam"
          },
          {
            "value": "4",
            "name": "LIGHT_PARAM_ATTENUATION",
            "enum": "LightParam"
          },
          {
            "value": "5",
            "name": "LIGHT_PARAM_SPOT_ANGLE",
            "enum": "LightParam"
          },
          {
            "value": "6",
            "name": "LIGHT_PARAM_SPOT_ATTENUATION",
            "enum": "LightParam"
          },
          {
            "value": "7",
            "name": "LIGHT_PARAM_CONTACT_SHADOW_SIZE",
            "enum": "LightParam"
          },
          {
            "value": "8",
            "name": "LIGHT_PARAM_SHADOW_MAX_DISTANCE",
            "enum": "LightParam"
          },
          {
            "value": "9",
            "name": "LIGHT_PARAM_SHADOW_SPLIT_1_OFFSET",
            "enum": "LightParam"
          },
          {
            "value": "10",
            "name": "LIGHT_PARAM_SHADOW_SPLIT_2_OFFSET",
            "enum": "LightParam"
          },
          {
            "value": "11",
            "name": "LIGHT_PARAM_SHADOW_SPLIT_3_OFFSET",
            "enum": "LightParam"
          },
          {
            "value": "12",
            "name": "LIGHT_PARAM_SHADOW_NORMAL_BIAS",
            "enum": "LightParam"
          },
          {
            "value": "13",
            "name": "LIGHT_PARAM_SHADOW_BIAS",
            "enum": "LightParam"
          },
          {
            "value": "14",
            "name": "LIGHT_PARAM_SHADOW_BIAS_SPLIT_SCALE",
            "enum": "LightParam"
          },
          {
            "value": "15",
            "name": "LIGHT_PARAM_MAX",
            "enum": "LightParam"
          },
          {
            "value": "0",
            "name": "LIGHT_BAKE_DISABLED",
            "enum": "LightBakeMode"
          },
          {
            "value": "1",
            "name": "LIGHT_BAKE_INDIRECT",
            "enum": "LightBakeMode"
          },
          {
            "value": "2",
            "name": "LIGHT_BAKE_ALL",
            "enum": "LightBakeMode"
          },
          {
            "value": "0",
            "name": "LIGHT_OMNI_SHADOW_DUAL_PARABOLOID",
            "enum": "LightOmniShadowMode"
          },
          {
            "value": "1",
            "name": "LIGHT_OMNI_SHADOW_CUBE",
            "enum": "LightOmniShadowMode"
          },
          {
            "value": "0",
            "name": "LIGHT_OMNI_SHADOW_DETAIL_VERTICAL",
            "enum": "LightOmniShadowDetail"
          },
          {
            "value": "1",
            "name": "LIGHT_OMNI_SHADOW_DETAIL_HORIZONTAL",
            "enum": "LightOmniShadowDetail"
          },
          {
            "value": "0",
            "name": "LIGHT_DIRECTIONAL_SHADOW_ORTHOGONAL",
            "enum": "LightDirectionalShadowMode"
          },
          {
            "value": "1",
            "name": "LIGHT_DIRECTIONAL_SHADOW_PARALLEL_2_SPLITS",
            "enum": "LightDirectionalShadowMode"
          },
          {
            "value": "2",
            "name": "LIGHT_DIRECTIONAL_SHADOW_PARALLEL_4_SPLITS",
            "enum": "LightDirectionalShadowMode"
          },
          {
            "value": "0",
            "name": "LIGHT_DIRECTIONAL_SHADOW_DEPTH_RANGE_STABLE",
            "enum": "LightDirectionalShadowDepthRangeMode"
          },
          {
            "value": "1",
            "name": "LIGHT_DIRECTIONAL_SHADOW_DEPTH_RANGE_OPTIMIZED",
            "enum": "LightDirectionalShadowDepthRangeMode"
          },
          {
            "value": "0",
            "name": "VIEWPORT_UPDATE_DISABLED",
            "enum": "ViewportUpdateMode"
          },
          {
            "value": "1",
            "name": "VIEWPORT_UPDATE_ONCE",
            "enum": "ViewportUpdateMode"
          },
          {
            "value": "2",
            "name": "VIEWPORT_UPDATE_WHEN_VISIBLE",
            "enum": "ViewportUpdateMode"
          },
          {
            "value": "3",
            "name": "VIEWPORT_UPDATE_ALWAYS",
            "enum": "ViewportUpdateMode"
          },
          {
            "value": "0",
            "name": "VIEWPORT_CLEAR_ALWAYS",
            "enum": "ViewportClearMode"
          },
          {
            "value": "1",
            "name": "VIEWPORT_CLEAR_NEVER",
            "enum": "ViewportClearMode"
          },
          {
            "value": "2",
            "name": "VIEWPORT_CLEAR_ONLY_NEXT_FRAME",
            "enum": "ViewportClearMode"
          },
          {
            "value": "0",
            "name": "VIEWPORT_MSAA_DISABLED",
            "enum": "ViewportMSAA"
          },
          {
            "value": "1",
            "name": "VIEWPORT_MSAA_2X",
            "enum": "ViewportMSAA"
          },
          {
            "value": "2",
            "name": "VIEWPORT_MSAA_4X",
            "enum": "ViewportMSAA"
          },
          {
            "value": "3",
            "name": "VIEWPORT_MSAA_8X",
            "enum": "ViewportMSAA"
          },
          {
            "value": "4",
            "name": "VIEWPORT_MSAA_16X",
            "enum": "ViewportMSAA"
          },
          {
            "value": "5",
            "name": "VIEWPORT_MSAA_EXT_2X",
            "enum": "ViewportMSAA"
          },
          {
            "value": "6",
            "name": "VIEWPORT_MSAA_EXT_4X",
            "enum": "ViewportMSAA"
          },
          {
            "value": "0",
            "name": "VIEWPORT_USAGE_2D",
            "enum": "ViewportUsage"
          },
          {
            "value": "1",
            "name": "VIEWPORT_USAGE_2D_NO_SAMPLING",
            "enum": "ViewportUsage"
          },
          {
            "value": "2",
            "name": "VIEWPORT_USAGE_3D",
            "enum": "ViewportUsage"
          },
          {
            "value": "3",
            "name": "VIEWPORT_USAGE_3D_NO_EFFECTS",
            "enum": "ViewportUsage"
          },
          {
            "value": "0",
            "name": "VIEWPORT_RENDER_INFO_OBJECTS_IN_FRAME",
            "enum": "ViewportRenderInfo"
          },
          {
            "value": "1",
            "name": "VIEWPORT_RENDER_INFO_VERTICES_IN_FRAME",
            "enum": "ViewportRenderInfo"
          },
          {
            "value": "2",
            "name": "VIEWPORT_RENDER_INFO_MATERIAL_CHANGES_IN_FRAME",
            "enum": "ViewportRenderInfo"
          },
          {
            "value": "3",
            "name": "VIEWPORT_RENDER_INFO_SHADER_CHANGES_IN_FRAME",
            "enum": "ViewportRenderInfo"
          },
          {
            "value": "4",
            "name": "VIEWPORT_RENDER_INFO_SURFACE_CHANGES_IN_FRAME",
            "enum": "ViewportRenderInfo"
          },
          {
            "value": "5",
            "name": "VIEWPORT_RENDER_INFO_DRAW_CALLS_IN_FRAME",
            "enum": "ViewportRenderInfo"
          },
          {
            "value": "6",
            "name": "VIEWPORT_RENDER_INFO_2D_ITEMS_IN_FRAME",
            "enum": "ViewportRenderInfo"
          },
          {
            "value": "7",
            "name": "VIEWPORT_RENDER_INFO_2D_DRAW_CALLS_IN_FRAME",
            "enum": "ViewportRenderInfo"
          },
          {
            "value": "8",
            "name": "VIEWPORT_RENDER_INFO_MAX",
            "enum": "ViewportRenderInfo"
          },
          {
            "value": "0",
            "name": "VIEWPORT_DEBUG_DRAW_DISABLED",
            "enum": "ViewportDebugDraw"
          },
          {
            "value": "1",
            "name": "VIEWPORT_DEBUG_DRAW_UNSHADED",
            "enum": "ViewportDebugDraw"
          },
          {
            "value": "2",
            "name": "VIEWPORT_DEBUG_DRAW_OVERDRAW",
            "enum": "ViewportDebugDraw"
          },
          {
            "value": "3",
            "name": "VIEWPORT_DEBUG_DRAW_WIREFRAME",
            "enum": "ViewportDebugDraw"
          },
          {
            "value": "0",
            "name": "SCENARIO_DEBUG_DISABLED",
            "enum": "ScenarioDebugMode"
          },
          {
            "value": "1",
            "name": "SCENARIO_DEBUG_WIREFRAME",
            "enum": "ScenarioDebugMode"
          },
          {
            "value": "2",
            "name": "SCENARIO_DEBUG_OVERDRAW",
            "enum": "ScenarioDebugMode"
          },
          {
            "value": "3",
            "name": "SCENARIO_DEBUG_SHADELESS",
            "enum": "ScenarioDebugMode"
          },
          {
            "value": "0",
            "name": "INSTANCE_NONE",
            "enum": "InstanceType"
          },
          {
            "value": "1",
            "name": "INSTANCE_MESH",
            "enum": "InstanceType"
          },
          {
            "value": "2",
            "name": "INSTANCE_MULTIMESH",
            "enum": "InstanceType"
          },
          {
            "value": "3",
            "name": "INSTANCE_IMMEDIATE",
            "enum": "InstanceType"
          },
          {
            "value": "4",
            "name": "INSTANCE_PARTICLES",
            "enum": "InstanceType"
          },
          {
            "value": "5",
            "name": "INSTANCE_LIGHT",
            "enum": "InstanceType"
          },
          {
            "value": "6",
            "name": "INSTANCE_REFLECTION_PROBE",
            "enum": "InstanceType"
          },
          {
            "value": "7",
            "name": "INSTANCE_GI_PROBE",
            "enum": "InstanceType"
          },
          {
            "value": "8",
            "name": "INSTANCE_LIGHTMAP_CAPTURE",
            "enum": "InstanceType"
          },
          {
            "value": "9",
            "name": "INSTANCE_MAX",
            "enum": "InstanceType"
          },
          {
            "value": "30",
            "name": "INSTANCE_GEOMETRY_MASK",
            "enum": "InstanceType"
          },
          {
            "value": "0",
            "name": "INSTANCE_FLAG_USE_BAKED_LIGHT",
            "enum": "InstanceFlags"
          },
          {
            "value": "1",
            "name": "INSTANCE_FLAG_DRAW_NEXT_FRAME_IF_VISIBLE",
            "enum": "InstanceFlags"
          },
          {
            "value": "2",
            "name": "INSTANCE_FLAG_MAX",
            "enum": "InstanceFlags"
          },
          {
            "value": "0",
            "name": "SHADOW_CASTING_SETTING_OFF",
            "enum": "ShadowCastingSetting"
          },
          {
            "value": "1",
            "name": "SHADOW_CASTING_SETTING_ON",
            "enum": "ShadowCastingSetting"
          },
          {
            "value": "2",
            "name": "SHADOW_CASTING_SETTING_DOUBLE_SIDED",
            "enum": "ShadowCastingSetting"
          },
          {
            "value": "3",
            "name": "SHADOW_CASTING_SETTING_SHADOWS_ONLY",
            "enum": "ShadowCastingSetting"
          },
          {
            "value": "0",
            "name": "NINE_PATCH_STRETCH",
            "enum": "NinePatchAxisMode"
          },
          {
            "value": "1",
            "name": "NINE_PATCH_TILE",
            "enum": "NinePatchAxisMode"
          },
          {
            "value": "2",
            "name": "NINE_PATCH_TILE_FIT",
            "enum": "NinePatchAxisMode"
          },
          {
            "value": "0",
            "name": "CANVAS_LIGHT_MODE_ADD",
            "enum": "CanvasLightMode"
          },
          {
            "value": "1",
            "name": "CANVAS_LIGHT_MODE_SUB",
            "enum": "CanvasLightMode"
          },
          {
            "value": "2",
            "name": "CANVAS_LIGHT_MODE_MIX",
            "enum": "CanvasLightMode"
          },
          {
            "value": "3",
            "name": "CANVAS_LIGHT_MODE_MASK",
            "enum": "CanvasLightMode"
          },
          {
            "value": "0",
            "name": "CANVAS_LIGHT_FILTER_NONE",
            "enum": "CanvasLightShadowFilter"
          },
          {
            "value": "1",
            "name": "CANVAS_LIGHT_FILTER_PCF3",
            "enum": "CanvasLightShadowFilter"
          },
          {
            "value": "2",
            "name": "CANVAS_LIGHT_FILTER_PCF5",
            "enum": "CanvasLightShadowFilter"
          },
          {
            "value": "3",
            "name": "CANVAS_LIGHT_FILTER_PCF7",
            "enum": "CanvasLightShadowFilter"
          },
          {
            "value": "4",
            "name": "CANVAS_LIGHT_FILTER_PCF9",
            "enum": "CanvasLightShadowFilter"
          },
          {
            "value": "5",
            "name": "CANVAS_LIGHT_FILTER_PCF13",
            "enum": "CanvasLightShadowFilter"
          },
          {
            "value": "0",
            "name": "CANVAS_OCCLUDER_POLYGON_CULL_DISABLED",
            "enum": "CanvasOccluderPolygonCullMode"
          },
          {
            "value": "1",
            "name": "CANVAS_OCCLUDER_POLYGON_CULL_CLOCKWISE",
            "enum": "CanvasOccluderPolygonCullMode"
          },
          {
            "value": "2",
            "name": "CANVAS_OCCLUDER_POLYGON_CULL_COUNTER_CLOCKWISE",
            "enum": "CanvasOccluderPolygonCullMode"
          },
          {
            "value": "0",
            "name": "INFO_OBJECTS_IN_FRAME",
            "enum": "RenderInfo"
          },
          {
            "value": "1",
            "name": "INFO_VERTICES_IN_FRAME",
            "enum": "RenderInfo"
          },
          {
            "value": "2",
            "name": "INFO_MATERIAL_CHANGES_IN_FRAME",
            "enum": "RenderInfo"
          },
          {
            "value": "3",
            "name": "INFO_SHADER_CHANGES_IN_FRAME",
            "enum": "RenderInfo"
          },
          {
            "value": "4",
            "name": "INFO_SURFACE_CHANGES_IN_FRAME",
            "enum": "RenderInfo"
          },
          {
            "value": "5",
            "name": "INFO_DRAW_CALLS_IN_FRAME",
            "enum": "RenderInfo"
          },
          {
            "value": "6",
            "name": "INFO_2D_ITEMS_IN_FRAME",
            "enum": "RenderInfo"
          },
          {
            "value": "7",
            "name": "INFO_2D_DRAW_CALLS_IN_FRAME",
            "enum": "RenderInfo"
          },
          {
            "value": "8",
            "name": "INFO_USAGE_VIDEO_MEM_TOTAL",
            "enum": "RenderInfo"
          },
          {
            "value": "9",
            "name": "INFO_VIDEO_MEM_USED",
            "enum": "RenderInfo"
          },
          {
            "value": "10",
            "name": "INFO_TEXTURE_MEM_USED",
            "enum": "RenderInfo"
          },
          {
            "value": "11",
            "name": "INFO_VERTEX_MEM_USED",
            "enum": "RenderInfo"
          },
          {
            "value": "0",
            "name": "FEATURE_SHADERS",
            "enum": "Features"
          },
          {
            "value": "1",
            "name": "FEATURE_MULTITHREADED",
            "enum": "Features"
          },
          {
            "value": "0",
            "name": "MULTIMESH_TRANSFORM_2D",
            "enum": "MultimeshTransformFormat"
          },
          {
            "value": "1",
            "name": "MULTIMESH_TRANSFORM_3D",
            "enum": "MultimeshTransformFormat"
          },
          {
            "value": "0",
            "name": "MULTIMESH_COLOR_NONE",
            "enum": "MultimeshColorFormat"
          },
          {
            "value": "1",
            "name": "MULTIMESH_COLOR_8BIT",
            "enum": "MultimeshColorFormat"
          },
          {
            "value": "2",
            "name": "MULTIMESH_COLOR_FLOAT",
            "enum": "MultimeshColorFormat"
          },
          {
            "value": "0",
            "name": "MULTIMESH_CUSTOM_DATA_NONE",
            "enum": "MultimeshCustomDataFormat"
          },
          {
            "value": "1",
            "name": "MULTIMESH_CUSTOM_DATA_8BIT",
            "enum": "MultimeshCustomDataFormat"
          },
          {
            "value": "2",
            "name": "MULTIMESH_CUSTOM_DATA_FLOAT",
            "enum": "MultimeshCustomDataFormat"
          },
          {
            "value": "0",
            "name": "REFLECTION_PROBE_UPDATE_ONCE",
            "enum": "ReflectionProbeUpdateMode"
          },
          {
            "value": "1",
            "name": "REFLECTION_PROBE_UPDATE_ALWAYS",
            "enum": "ReflectionProbeUpdateMode"
          },
          {
            "value": "0",
            "name": "PARTICLES_DRAW_ORDER_INDEX",
            "enum": "ParticlesDrawOrder"
          },
          {
            "value": "1",
            "name": "PARTICLES_DRAW_ORDER_LIFETIME",
            "enum": "ParticlesDrawOrder"
          },
          {
            "value": "2",
            "name": "PARTICLES_DRAW_ORDER_VIEW_DEPTH",
            "enum": "ParticlesDrawOrder"
          },
          {
            "value": "0",
            "name": "ENV_BG_CLEAR_COLOR",
            "enum": "EnvironmentBG"
          },
          {
            "value": "1",
            "name": "ENV_BG_COLOR",
            "enum": "EnvironmentBG"
          },
          {
            "value": "2",
            "name": "ENV_BG_SKY",
            "enum": "EnvironmentBG"
          },
          {
            "value": "3",
            "name": "ENV_BG_COLOR_SKY",
            "enum": "EnvironmentBG"
          },
          {
            "value": "4",
            "name": "ENV_BG_CANVAS",
            "enum": "EnvironmentBG"
          },
          {
            "value": "5",
            "name": "ENV_BG_KEEP",
            "enum": "EnvironmentBG"
          },
          {
            "value": "7",
            "name": "ENV_BG_MAX",
            "enum": "EnvironmentBG"
          },
          {
            "value": "0",
            "name": "ENV_DOF_BLUR_QUALITY_LOW",
            "enum": "EnvironmentDOFBlurQuality"
          },
          {
            "value": "1",
            "name": "ENV_DOF_BLUR_QUALITY_MEDIUM",
            "enum": "EnvironmentDOFBlurQuality"
          },
          {
            "value": "2",
            "name": "ENV_DOF_BLUR_QUALITY_HIGH",
            "enum": "EnvironmentDOFBlurQuality"
          },
          {
            "value": "0",
            "name": "GLOW_BLEND_MODE_ADDITIVE",
            "enum": "EnvironmentGlowBlendMode"
          },
          {
            "value": "1",
            "name": "GLOW_BLEND_MODE_SCREEN",
            "enum": "EnvironmentGlowBlendMode"
          },
          {
            "value": "2",
            "name": "GLOW_BLEND_MODE_SOFTLIGHT",
            "enum": "EnvironmentGlowBlendMode"
          },
          {
            "value": "3",
            "name": "GLOW_BLEND_MODE_REPLACE",
            "enum": "EnvironmentGlowBlendMode"
          },
          {
            "value": "0",
            "name": "ENV_TONE_MAPPER_LINEAR",
            "enum": "EnvironmentToneMapper"
          },
          {
            "value": "1",
            "name": "ENV_TONE_MAPPER_REINHARD",
            "enum": "EnvironmentToneMapper"
          },
          {
            "value": "2",
            "name": "ENV_TONE_MAPPER_FILMIC",
            "enum": "EnvironmentToneMapper"
          },
          {
            "value": "3",
            "name": "ENV_TONE_MAPPER_ACES",
            "enum": "EnvironmentToneMapper"
          },
          {
            "value": "0",
            "name": "ENV_SSAO_QUALITY_LOW",
            "enum": "EnvironmentSSAOQuality"
          },
          {
            "value": "1",
            "name": "ENV_SSAO_QUALITY_MEDIUM",
            "enum": "EnvironmentSSAOQuality"
          },
          {
            "value": "2",
            "name": "ENV_SSAO_QUALITY_HIGH",
            "enum": "EnvironmentSSAOQuality"
          },
          {
            "value": "0",
            "name": "ENV_SSAO_BLUR_DISABLED",
            "enum": "EnvironmentSSAOBlur"
          },
          {
            "value": "1",
            "name": "ENV_SSAO_BLUR_1x1",
            "enum": "EnvironmentSSAOBlur"
          },
          {
            "value": "2",
            "name": "ENV_SSAO_BLUR_2x2",
            "enum": "EnvironmentSSAOBlur"
          },
          {
            "value": "3",
            "name": "ENV_SSAO_BLUR_3x3",
            "enum": "EnvironmentSSAOBlur"
          }
        ]
      },
      "brief_description": "Server for anything visible.",
      "description": "Server for anything visible. The visual server is the API backend for everything visible. The whole scene system mounts on it to display.\n\t\tThe visual server is completely opaque, the internals are entirely implementation specific and cannot be accessed.\n\t\tThe visual server can be used to bypass the scene system entirely.\n\t\tResources are created using the [code]*_create[/code] functions.\n\t\tAll objects are drawn to a viewport. You can use the [Viewport] attached to the [SceneTree] or you can create one yourself with [method viewport_create]. When using a custom scenario or canvas, the scenario or canvas needs to be attached to the viewport using [method viewport_set_scenario] or [method viewport_attach_canvas].\n\t\tIn 3D, all visual objects must be associated with a scenario. The scenario is a visual representation of the world. If accessing the visual server from a running game, the scenario can be accessed from the scene tree from any [Spatial] node with [method Spatial.get_world]. Otherwise, a scenario can be created with [method scenario_create].\n\t\tSimilarly, in 2D, a canvas is needed to draw all canvas items.\n\t\tIn 3D, all visible objects are comprised of a resource and an instance. A resource can be a mesh, a particle system, a light, or any other 3D object. In order to be visible resources must be attached to an instance using [method instance_set_base]. The instance must also be attached to the scenario using [method instance_set_scenario] in order to be visible.\n\t\tIn 2D, all visible objects are some form of canvas item. In order to be visible, a canvas item needs to be the child of a canvas attached to a viewport, or it needs to be the child of another canvas item that is eventually attached to the canvas."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "false",
          "value": "A boolean constant which represents a state of this node.",
          "setter": "set_constant",
          "name": "constant",
          "getter": "get_constant",
          "type": "bool"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeBooleanConstant",
      "version": "3.3",
      "constants": {},
      "brief_description": "A boolean constant to be used within the visual shader graph.",
      "description": "Has only one output port and no inputs.\n\t\tTranslated to [code]bool[/code] in the shader language."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNodeUniform",
      "methods": {},
      "name": "VisualShaderNodeBooleanUniform",
      "version": "3.3",
      "constants": {},
      "brief_description": "A boolean uniform to be used within the visual shader graph.",
      "description": "Translated to [code]uniform bool[/code] in the shader language."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "Color( 1, 1, 1, 1 )",
          "value": "A [Color] constant which represents a state of this node.",
          "setter": "set_constant",
          "name": "constant",
          "getter": "get_constant",
          "type": "Color"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeColorConstant",
      "version": "3.3",
      "constants": {},
      "brief_description": "A [Color] constant to be used within the visual shader graph.",
      "description": "Has two output ports representing RGB and alpha channels of [Color].\n\t\tTranslated to [code]vec3 rgb[/code] and [code]float alpha[/code] in the shader language."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "0",
          "value": "A function to be applied to the input color. See [enum Function] for options.",
          "setter": "set_function",
          "name": "function",
          "getter": "get_function",
          "type": "int",
          "enum": "VisualShaderNodeColorFunc.Function"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeColorFunc",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "FUNC_GRAYSCALE",
            "enum": "Function"
          },
          {
            "value": "1",
            "name": "FUNC_SEPIA",
            "enum": "Function"
          }
        ]
      },
      "brief_description": "A [Color] function to be used within the visual shader graph.",
      "description": "Accept a [Color] to the input port and transform it according to [member function]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "0",
          "value": "An operator to be applied to the inputs. See [enum Operator] for options.",
          "setter": "set_operator",
          "name": "operator",
          "getter": "get_operator",
          "type": "int",
          "enum": "VisualShaderNodeColorOp.Operator"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeColorOp",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "OP_SCREEN",
            "enum": "Operator"
          },
          {
            "value": "1",
            "name": "OP_DIFFERENCE",
            "enum": "Operator"
          },
          {
            "value": "2",
            "name": "OP_DARKEN",
            "enum": "Operator"
          },
          {
            "value": "3",
            "name": "OP_LIGHTEN",
            "enum": "Operator"
          },
          {
            "value": "4",
            "name": "OP_OVERLAY",
            "enum": "Operator"
          },
          {
            "value": "5",
            "name": "OP_DODGE",
            "enum": "Operator"
          },
          {
            "value": "6",
            "name": "OP_BURN",
            "enum": "Operator"
          },
          {
            "value": "7",
            "name": "OP_SOFT_LIGHT",
            "enum": "Operator"
          },
          {
            "value": "8",
            "name": "OP_HARD_LIGHT",
            "enum": "Operator"
          }
        ]
      },
      "brief_description": "A [Color] operator to be used within the visual shader graph.",
      "description": "Applies [member operator] to two color inputs."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNodeUniform",
      "methods": {},
      "name": "VisualShaderNodeColorUniform",
      "version": "3.3",
      "constants": {},
      "brief_description": "A [Color] uniform to be used within the visual shader graph.",
      "description": "Translated to [code]uniform vec4[/code] in the shader language."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0",
            "value": "Extra condition which is applied if [member type] is set to [constant CTYPE_VECTOR].",
            "setter": "set_condition",
            "name": "condition",
            "getter": "get_condition",
            "type": "int",
            "enum": "VisualShaderNodeCompare.Condition"
          },
          {
            "default": "0",
            "value": "A comparison function. See [enum Function] for options.",
            "setter": "set_function",
            "name": "function",
            "getter": "get_function",
            "type": "int",
            "enum": "VisualShaderNodeCompare.Function"
          },
          {
            "default": "0",
            "value": "The type to be used in the comparison. See [enum ComparisonType] for options.",
            "setter": "set_comparison_type",
            "name": "type",
            "getter": "get_comparison_type",
            "type": "int",
            "enum": "VisualShaderNodeCompare.ComparisonType"
          }
        ]
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeCompare",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "CTYPE_SCALAR",
            "enum": "ComparisonType"
          },
          {
            "value": "1",
            "name": "CTYPE_VECTOR",
            "enum": "ComparisonType"
          },
          {
            "value": "2",
            "name": "CTYPE_BOOLEAN",
            "enum": "ComparisonType"
          },
          {
            "value": "3",
            "name": "CTYPE_TRANSFORM",
            "enum": "ComparisonType"
          },
          {
            "value": "0",
            "name": "FUNC_EQUAL",
            "enum": "Function"
          },
          {
            "value": "1",
            "name": "FUNC_NOT_EQUAL",
            "enum": "Function"
          },
          {
            "value": "2",
            "name": "FUNC_GREATER_THAN",
            "enum": "Function"
          },
          {
            "value": "3",
            "name": "FUNC_GREATER_THAN_EQUAL",
            "enum": "Function"
          },
          {
            "value": "4",
            "name": "FUNC_LESS_THAN",
            "enum": "Function"
          },
          {
            "value": "5",
            "name": "FUNC_LESS_THAN_EQUAL",
            "enum": "Function"
          },
          {
            "value": "0",
            "name": "COND_ALL",
            "enum": "Condition"
          },
          {
            "value": "1",
            "name": "COND_ANY",
            "enum": "Condition"
          }
        ]
      },
      "brief_description": "A comparison function for common types within the visual shader graph.",
      "description": "Compares [code]a[/code] and [code]b[/code] of [member type] by [member function]. Returns a boolean scalar. Translates to [code]if[/code] instruction in shader code."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNodeTextureUniform",
      "methods": {},
      "name": "VisualShaderNodeCubeMapUniform",
      "version": "3.3",
      "constants": {},
      "brief_description": "A [CubeMap] uniform node to be used within the visual shader graph.",
      "description": "Translated to [code]uniform samplerCube[/code] in the shader language. The output value can be used as port for [VisualShaderNodeCubeMap]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "value": "The [CubeMap] texture to sample when using [constant SOURCE_TEXTURE] as [member source].",
            "setter": "set_cube_map",
            "name": "cube_map",
            "getter": "get_cube_map",
            "type": "CubeMap"
          },
          {
            "default": "0",
            "value": "Defines which source should be used for the sampling. See [enum Source] for options.",
            "setter": "set_source",
            "name": "source",
            "getter": "get_source",
            "type": "int",
            "enum": "VisualShaderNodeCubeMap.Source"
          },
          {
            "default": "0",
            "value": "Defines the type of data provided by the source texture. See [enum TextureType] for options.",
            "setter": "set_texture_type",
            "name": "texture_type",
            "getter": "get_texture_type",
            "type": "int",
            "enum": "VisualShaderNodeCubeMap.TextureType"
          }
        ]
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeCubeMap",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "SOURCE_TEXTURE",
            "enum": "Source"
          },
          {
            "value": "1",
            "name": "SOURCE_PORT",
            "enum": "Source"
          },
          {
            "value": "0",
            "name": "TYPE_DATA",
            "enum": "TextureType"
          },
          {
            "value": "1",
            "name": "TYPE_COLOR",
            "enum": "TextureType"
          },
          {
            "value": "2",
            "name": "TYPE_NORMALMAP",
            "enum": "TextureType"
          }
        ]
      },
      "brief_description": "A [CubeMap] sampling node to be used within the visual shader graph.",
      "description": "Translated to [code]texture(cubemap, vec3)[/code] in the shader language. Returns a color vector and alpha channel as scalar."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/plugins/editor/visual_shader_plugins.html"
      },
      "inherits": "VisualShaderNode",
      "methods": {
        "method": [
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "virtual",
            "name": "_get_category",
            "description": "Override this method to define the category of the associated custom node in the Visual Shader Editor's members dialog. The path may look like [code]\"MyGame/MyFunctions/Noise\"[/code].\n\t\t\t\tDefining this method is [b]optional[/b]. If not overridden, the node will be filed under the \"Custom\" category."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": [
              {
                "name": "input_vars",
                "type": "Array",
                "index": "0"
              },
              {
                "name": "output_vars",
                "type": "Array",
                "index": "1"
              },
              {
                "name": "mode",
                "type": "int",
                "index": "2"
              },
              {
                "name": "type",
                "type": "int",
                "index": "3"
              }
            ],
            "qualifiers": "virtual",
            "name": "_get_code",
            "description": "Override this method to define the actual shader code of the associated custom node. The shader code should be returned as a string, which can have multiple lines (the [code]\"\"\"[/code] multiline string construct can be used for convenience).\n\t\t\t\tThe [code]input_vars[/code] and [code]output_vars[/code] arrays contain the string names of the various input and output variables, as defined by [code]_get_input_*[/code] and [code]_get_output_*[/code] virtual methods in this class.\n\t\t\t\tThe output ports can be assigned values in the shader code. For example, [code]return output_vars[0] + \" = \" + input_vars[0] + \";\"[/code].\n\t\t\t\tYou can customize the generated code based on the shader [code]mode[/code] (see [enum Shader.Mode]) and/or [code]type[/code] (see [enum VisualShader.Type]).\n\t\t\t\tDefining this method is [b]required[/b]."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "virtual",
            "name": "_get_description",
            "description": "Override this method to define the description of the associated custom node in the Visual Shader Editor's members dialog.\n\t\t\t\tDefining this method is [b]optional[/b]."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "mode",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_get_global_code",
            "description": "Override this method to add shader code on top of the global shader, to define your own standard library of reusable methods, varyings, constants, uniforms, etc. The shader code should be returned as a string, which can have multiple lines (the [code]\"\"\"[/code] multiline string construct can be used for convenience).\n\t\t\t\tBe careful with this functionality as it can cause name conflicts with other custom nodes, so be sure to give the defined entities unique names.\n\t\t\t\tYou can customize the generated code based on the shader [code]mode[/code] (see [enum Shader.Mode]).\n\t\t\t\tDefining this method is [b]optional[/b]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "virtual",
            "name": "_get_input_port_count",
            "description": "Override this method to define the amount of input ports of the associated custom node.\n\t\t\t\tDefining this method is [b]required[/b]. If not overridden, the node has no input ports."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "port",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_get_input_port_name",
            "description": "Override this method to define the names of input ports of the associated custom node. The names are used both for the input slots in the editor and as identifiers in the shader code, and are passed in the [code]input_vars[/code] array in [method _get_code].\n\t\t\t\tDefining this method is [b]optional[/b], but recommended. If not overridden, input ports are named as [code]\"in\" + str(port)[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "port",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_get_input_port_type",
            "description": "Override this method to define the returned type of each input port of the associated custom node (see [enum VisualShaderNode.PortType] for possible types).\n\t\t\t\tDefining this method is [b]optional[/b], but recommended. If not overridden, input ports will return the [constant VisualShaderNode.PORT_TYPE_SCALAR] type."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "virtual",
            "name": "_get_name",
            "description": "Override this method to define the name of the associated custom node in the Visual Shader Editor's members dialog and graph.\n\t\t\t\tDefining this method is [b]optional[/b], but recommended. If not overridden, the node will be named as \"Unnamed\"."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "virtual",
            "name": "_get_output_port_count",
            "description": "Override this method to define the amount of output ports of the associated custom node.\n\t\t\t\tDefining this method is [b]required[/b]. If not overridden, the node has no output ports."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "port",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_get_output_port_name",
            "description": "Override this method to define the names of output ports of the associated custom node. The names are used both for the output slots in the editor and as identifiers in the shader code, and are passed in the [code]output_vars[/code] array in [method _get_code].\n\t\t\t\tDefining this method is [b]optional[/b], but recommended. If not overridden, output ports are named as [code]\"out\" + str(port)[/code]."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "port",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "virtual",
            "name": "_get_output_port_type",
            "description": "Override this method to define the returned type of each output port of the associated custom node (see [enum VisualShaderNode.PortType] for possible types).\n\t\t\t\tDefining this method is [b]optional[/b], but recommended. If not overridden, output ports will return the [constant VisualShaderNode.PORT_TYPE_SCALAR] type."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "virtual",
            "name": "_get_return_icon_type",
            "description": "Override this method to define the return icon of the associated custom node in the Visual Shader Editor's members dialog.\n\t\t\t\tDefining this method is [b]optional[/b]. If not overridden, no return icon is shown."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "virtual",
            "name": "_get_subcategory",
            "description": "Override this method to define the subcategory of the associated custom node in the Visual Shader Editor's members dialog.\n\t\t\t\tDefining this method is [b]optional[/b]. If not overridden, the node will be filed under the root of the main category (see [method _get_category])."
          }
        ]
      },
      "name": "VisualShaderNodeCustom",
      "version": "3.3",
      "constants": {},
      "brief_description": "Virtual class to define custom [VisualShaderNode]s for use in the Visual Shader Editor.",
      "description": "By inheriting this class you can create a custom [VisualShader] script addon which will be automatically added to the Visual Shader Editor. The [VisualShaderNode]'s behavior is defined by overriding the provided virtual methods.\n\t\tIn order for the node to be registered as an editor addon, you must use the [code]tool[/code] keyword and provide a [code]class_name[/code] for your custom script. For example:\n\t\t[codeblock]\n\t\ttool\n\t\textends VisualShaderNodeCustom\n\t\tclass_name VisualShaderNodeNoise\n\t\t[/codeblock]"
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeDeterminant",
      "version": "3.3",
      "constants": {},
      "brief_description": "Calculates the determinant of a [Transform] within the visual shader graph.",
      "description": "Translates to [code]determinant(x)[/code] in the shader language."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeDotProduct",
      "version": "3.3",
      "constants": {},
      "brief_description": "Calculates a dot product of two vectors within the visual shader graph.",
      "description": "Translates to [code]dot(a, b)[/code] in the shader language."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "\"\"",
          "value": "An expression in Godot Shading Language, which will be injected at the start of the graph's matching shader function ([code]vertex[/code], [code]fragment[/code], or [code]light[/code]), and thus cannot be used to declare functions, varyings, uniforms, or global constants.",
          "setter": "set_expression",
          "name": "expression",
          "getter": "get_expression",
          "type": "String"
        }
      },
      "inherits": "VisualShaderNodeGroupBase",
      "methods": {},
      "name": "VisualShaderNodeExpression",
      "version": "3.3",
      "constants": {},
      "brief_description": "A custom visual shader graph expression written in Godot Shading Language.",
      "description": "Custom Godot Shading Language expression, with a custom amount of input and output ports.\n\t\tThe provided code is directly injected into the graph's matching shader function ([code]vertex[/code], [code]fragment[/code], or [code]light[/code]), so it cannot be used to declare functions, varyings, uniforms, or global constants. See [VisualShaderNodeGlobalExpression] for such global definitions."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeFaceForward",
      "version": "3.3",
      "constants": {},
      "brief_description": "Returns the vector that points in the same direction as a reference vector within the visual shader graph.",
      "description": "Translates to [code]faceforward(N, I, Nref)[/code] in the shader language. The function has three vector parameters: [code]N[/code], the vector to orient, [code]I[/code], the incident vector, and [code]Nref[/code], the reference vector. If the dot product of [code]I[/code] and [code]Nref[/code] is smaller than zero the return value is [code]N[/code]. Otherwise, [code]-N[/code] is returned."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeFresnel",
      "version": "3.3",
      "constants": {},
      "brief_description": "A Fresnel effect to be used within the visual shader graph.",
      "description": "Returns falloff based on the dot product of surface normal and view direction of camera (pass associated inputs to it)."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNodeExpression",
      "methods": {},
      "name": "VisualShaderNodeGlobalExpression",
      "version": "3.3",
      "constants": {},
      "brief_description": "A custom global visual shader graph expression written in Godot Shading Language.",
      "description": "Custom Godot Shader Language expression, which is placed on top of the generated shader. You can place various function definitions inside to call later in [VisualShaderNodeExpression]s (which are injected in the main shader functions). You can also declare varyings, uniforms and global constants."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "Vector2( 0, 0 )",
          "value": "The size of the node in the visual shader graph.",
          "setter": "set_size",
          "name": "size",
          "getter": "get_size",
          "type": "Vector2"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "type",
                "type": "int",
                "index": "1"
              },
              {
                "name": "name",
                "type": "String",
                "index": "2"
              }
            ],
            "name": "add_input_port",
            "description": "Adds an input port with the specified [code]type[/code] (see [enum VisualShaderNode.PortType]) and [code]name[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "type",
                "type": "int",
                "index": "1"
              },
              {
                "name": "name",
                "type": "String",
                "index": "2"
              }
            ],
            "name": "add_output_port",
            "description": "Adds an output port with the specified [code]type[/code] (see [enum VisualShaderNode.PortType]) and [code]name[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_input_ports",
            "description": "Removes all previously specified input ports."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "clear_output_ports",
            "description": "Removes all previously specified output ports."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_free_input_port_id",
            "description": "Returns a free input port ID which can be used in [method add_input_port]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_free_output_port_id",
            "description": "Returns a free output port ID which can be used in [method add_output_port]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_input_port_count",
            "description": "Returns the number of input ports in use. Alternative for [method get_free_input_port_id]."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_inputs",
            "description": "Returns a [String] description of the input ports as a colon-separated list using the format [code]id,type,name;[/code] (see [method add_input_port])."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_output_port_count",
            "description": "Returns the number of output ports in use. Alternative for [method get_free_output_port_id]."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_outputs",
            "description": "Returns a [String] description of the output ports as a colon-separated list using the format [code]id,type,name;[/code] (see [method add_output_port])."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_input_port",
            "description": "Returns [code]true[/code] if the specified input port exists."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_output_port",
            "description": "Returns [code]true[/code] if the specified output port exists."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "is_valid_port_name",
            "description": "Returns [code]true[/code] if the specified port name does not override an existed port name and is valid within the shader."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "remove_input_port",
            "description": "Removes the specified input port."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "id",
              "type": "int",
              "index": "0"
            },
            "name": "remove_output_port",
            "description": "Removes the specified output port."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "name",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set_input_port_name",
            "description": "Renames the specified input port."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "type",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set_input_port_type",
            "description": "Sets the specified input port's type (see [enum VisualShaderNode.PortType])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "inputs",
              "type": "String",
              "index": "0"
            },
            "name": "set_inputs",
            "description": "Defines all input ports using a [String] formatted as a colon-separated list: [code]id,type,name;[/code] (see [method add_input_port])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "name",
                "type": "String",
                "index": "1"
              }
            ],
            "name": "set_output_port_name",
            "description": "Renames the specified output port."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "id",
                "type": "int",
                "index": "0"
              },
              {
                "name": "type",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "set_output_port_type",
            "description": "Sets the specified output port's type (see [enum VisualShaderNode.PortType])."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "outputs",
              "type": "String",
              "index": "0"
            },
            "name": "set_outputs",
            "description": "Defines all output ports using a [String] formatted as a colon-separated list: [code]id,type,name;[/code] (see [method add_output_port])."
          }
        ]
      },
      "name": "VisualShaderNodeGroupBase",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base class for a family of nodes with variable amount of input and output ports within the visual shader graph.",
      "description": "Currently, has no direct usage, use the derived classes instead."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeIf",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/shading/shading_reference/index.html"
      },
      "members": {
        "member": {
          "default": "\"[None]\"",
          "value": "One of the several input constants in lower-case style like: \"vertex\"([code]VERTEX[/code]) or \"point_size\"([code]POINT_SIZE[/code]).",
          "setter": "set_input_name",
          "name": "input_name",
          "getter": "get_input_name",
          "type": "String"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {
        "method": {
          "return": {
            "type": "String"
          },
          "qualifiers": "const",
          "name": "get_input_real_name",
          "description": {}
        }
      },
      "name": "VisualShaderNodeInput",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "input_type_changed",
          "description": {}
        }
      },
      "constants": {},
      "brief_description": {},
      "description": "Gives access to input variables (built-ins) available for the shader. See the shading reference for the list of available built-ins for each shader type (check [code]Tutorials[/code] section for link)."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "0",
          "value": "The comparison function. See [enum Function] for options.",
          "setter": "set_function",
          "name": "function",
          "getter": "get_function",
          "type": "int",
          "enum": "VisualShaderNodeIs.Function"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeIs",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "FUNC_IS_INF",
            "enum": "Function"
          },
          {
            "value": "1",
            "name": "FUNC_IS_NAN",
            "enum": "Function"
          }
        ]
      },
      "brief_description": "A boolean comparison operator to be used within the visual shader graph.",
      "description": "Returns the boolean result of the comparison between [code]INF[/code] or [code]NaN[/code] and a scalar parameter."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeOuterProduct",
      "version": "3.3",
      "constants": {},
      "brief_description": "Calculates an outer product of two vectors within the visual shader graph.",
      "description": "[code]OuterProduct[/code] treats the first parameter [code]c[/code] as a column vector (matrix with one column) and the second parameter [code]r[/code] as a row vector (matrix with one row) and does a linear algebraic matrix multiply [code]c * r[/code], yielding a matrix whose number of rows is the number of components in [code]c[/code] and whose number of columns is the number of components in [code]r[/code]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeOutput",
      "version": "3.3",
      "constants": {},
      "brief_description": "Represents the output shader parameters within the visual shader graph.",
      "description": "This visual shader node is present in all shader graphs in form of \"Output\" block with multiple output value ports."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeScalarClamp",
      "version": "3.3",
      "constants": {},
      "brief_description": "Clamps a scalar value within the visual shader graph.",
      "description": "Constrains a value to lie between [code]min[/code] and [code]max[/code] values."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "0.0",
          "setter": "set_constant",
          "name": "constant",
          "getter": "get_constant",
          "type": "float"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeScalarConstant",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "0",
          "value": "The derivative type. See [enum Function] for options.",
          "setter": "set_function",
          "name": "function",
          "getter": "get_function",
          "type": "int",
          "enum": "VisualShaderNodeScalarDerivativeFunc.Function"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeScalarDerivativeFunc",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "FUNC_SUM",
            "enum": "Function"
          },
          {
            "value": "1",
            "name": "FUNC_X",
            "enum": "Function"
          },
          {
            "value": "2",
            "name": "FUNC_Y",
            "enum": "Function"
          }
        ]
      },
      "brief_description": "Calculates a scalar derivative within the visual shader graph.",
      "description": "This node is only available in [code]Fragment[/code] and [code]Light[/code] visual shaders."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "13",
          "setter": "set_function",
          "name": "function",
          "getter": "get_function",
          "type": "int",
          "enum": "VisualShaderNodeScalarFunc.Function"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeScalarFunc",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "FUNC_SIN",
            "enum": "Function"
          },
          {
            "value": "1",
            "name": "FUNC_COS",
            "enum": "Function"
          },
          {
            "value": "2",
            "name": "FUNC_TAN",
            "enum": "Function"
          },
          {
            "value": "3",
            "name": "FUNC_ASIN",
            "enum": "Function"
          },
          {
            "value": "4",
            "name": "FUNC_ACOS",
            "enum": "Function"
          },
          {
            "value": "5",
            "name": "FUNC_ATAN",
            "enum": "Function"
          },
          {
            "value": "6",
            "name": "FUNC_SINH",
            "enum": "Function"
          },
          {
            "value": "7",
            "name": "FUNC_COSH",
            "enum": "Function"
          },
          {
            "value": "8",
            "name": "FUNC_TANH",
            "enum": "Function"
          },
          {
            "value": "9",
            "name": "FUNC_LOG",
            "enum": "Function"
          },
          {
            "value": "10",
            "name": "FUNC_EXP",
            "enum": "Function"
          },
          {
            "value": "11",
            "name": "FUNC_SQRT",
            "enum": "Function"
          },
          {
            "value": "12",
            "name": "FUNC_ABS",
            "enum": "Function"
          },
          {
            "value": "13",
            "name": "FUNC_SIGN",
            "enum": "Function"
          },
          {
            "value": "14",
            "name": "FUNC_FLOOR",
            "enum": "Function"
          },
          {
            "value": "15",
            "name": "FUNC_ROUND",
            "enum": "Function"
          },
          {
            "value": "16",
            "name": "FUNC_CEIL",
            "enum": "Function"
          },
          {
            "value": "17",
            "name": "FUNC_FRAC",
            "enum": "Function"
          },
          {
            "value": "18",
            "name": "FUNC_SATURATE",
            "enum": "Function"
          },
          {
            "value": "19",
            "name": "FUNC_NEGATE",
            "enum": "Function"
          },
          {
            "value": "20",
            "name": "FUNC_ACOSH",
            "enum": "Function"
          },
          {
            "value": "21",
            "name": "FUNC_ASINH",
            "enum": "Function"
          },
          {
            "value": "22",
            "name": "FUNC_ATANH",
            "enum": "Function"
          },
          {
            "value": "23",
            "name": "FUNC_DEGREES",
            "enum": "Function"
          },
          {
            "value": "24",
            "name": "FUNC_EXP2",
            "enum": "Function"
          },
          {
            "value": "25",
            "name": "FUNC_INVERSE_SQRT",
            "enum": "Function"
          },
          {
            "value": "26",
            "name": "FUNC_LOG2",
            "enum": "Function"
          },
          {
            "value": "27",
            "name": "FUNC_RADIANS",
            "enum": "Function"
          },
          {
            "value": "28",
            "name": "FUNC_RECIPROCAL",
            "enum": "Function"
          },
          {
            "value": "29",
            "name": "FUNC_ROUNDEVEN",
            "enum": "Function"
          },
          {
            "value": "30",
            "name": "FUNC_TRUNC",
            "enum": "Function"
          },
          {
            "value": "31",
            "name": "FUNC_ONEMINUS",
            "enum": "Function"
          }
        ]
      },
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeScalarInterp",
      "version": "3.3",
      "constants": {},
      "brief_description": "Linearly interpolates between two scalars within the visual shader graph.",
      "description": "Translates to [code]mix(a, b, weight)[/code] in the shader language."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "0",
          "setter": "set_operator",
          "name": "operator",
          "getter": "get_operator",
          "type": "int",
          "enum": "VisualShaderNodeScalarOp.Operator"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeScalarOp",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "OP_ADD",
            "enum": "Operator"
          },
          {
            "value": "1",
            "name": "OP_SUB",
            "enum": "Operator"
          },
          {
            "value": "2",
            "name": "OP_MUL",
            "enum": "Operator"
          },
          {
            "value": "3",
            "name": "OP_DIV",
            "enum": "Operator"
          },
          {
            "value": "4",
            "name": "OP_MOD",
            "enum": "Operator"
          },
          {
            "value": "5",
            "name": "OP_POW",
            "enum": "Operator"
          },
          {
            "value": "6",
            "name": "OP_MAX",
            "enum": "Operator"
          },
          {
            "value": "7",
            "name": "OP_MIN",
            "enum": "Operator"
          },
          {
            "value": "8",
            "name": "OP_ATAN2",
            "enum": "Operator"
          },
          {
            "value": "9",
            "name": "OP_STEP",
            "enum": "Operator"
          }
        ]
      },
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeScalarSmoothStep",
      "version": "3.3",
      "constants": {},
      "brief_description": "Calculates a scalar SmoothStep function within the visual shader graph.",
      "description": "Translates to [code]smoothstep(edge0, edge1, x)[/code] in the shader language.\n\t\tReturns [code]0.0[/code] if [code]x[/code] is smaller than [code]edge0[/code] and [code]1.0[/code] if [code]x[/code] is larger than [code]edge1[/code]. Otherwise the return value is interpolated between [code]0.0[/code] and [code]1.0[/code] using Hermite polynomials."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNodeSwitch",
      "methods": {},
      "name": "VisualShaderNodeScalarSwitch",
      "version": "3.3",
      "constants": {},
      "brief_description": "A boolean/scalar function for use within the visual shader graph.",
      "description": "Returns an associated scalar if the provided boolean value is [code]true[/code] or [code]false[/code]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNodeUniform",
      "methods": {},
      "name": "VisualShaderNodeScalarUniform",
      "version": "3.3",
      "constants": {},
      "brief_description": {},
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeSwitch",
      "version": "3.3",
      "constants": {},
      "brief_description": "A boolean/vector function for use within the visual shader graph.",
      "description": "Returns an associated vector if the provided boolean value is [code]true[/code] or [code]false[/code]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNodeTextureUniform",
      "methods": {},
      "name": "VisualShaderNodeTextureUniformTriplanar",
      "version": "3.3",
      "constants": {},
      "brief_description": "Performs a uniform texture lookup with triplanar within the visual shader graph.",
      "description": "Performs a lookup operation on the texture provided as a uniform for the shader, with support for triplanar mapping."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0",
            "value": "Sets the default color if no texture is assigned to the uniform.",
            "setter": "set_color_default",
            "name": "color_default",
            "getter": "get_color_default",
            "type": "int",
            "enum": "VisualShaderNodeTextureUniform.ColorDefault"
          },
          {
            "default": "0",
            "value": "Defines the type of data provided by the source texture. See [enum TextureType] for options.",
            "setter": "set_texture_type",
            "name": "texture_type",
            "getter": "get_texture_type",
            "type": "int",
            "enum": "VisualShaderNodeTextureUniform.TextureType"
          }
        ]
      },
      "inherits": "VisualShaderNodeUniform",
      "methods": {},
      "name": "VisualShaderNodeTextureUniform",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "TYPE_DATA",
            "enum": "TextureType"
          },
          {
            "value": "1",
            "name": "TYPE_COLOR",
            "enum": "TextureType"
          },
          {
            "value": "2",
            "name": "TYPE_NORMALMAP",
            "enum": "TextureType"
          },
          {
            "value": "3",
            "name": "TYPE_ANISO",
            "enum": "TextureType"
          },
          {
            "value": "0",
            "name": "COLOR_DEFAULT_WHITE",
            "enum": "ColorDefault"
          },
          {
            "value": "1",
            "name": "COLOR_DEFAULT_BLACK",
            "enum": "ColorDefault"
          }
        ]
      },
      "brief_description": "Performs a uniform texture lookup within the visual shader graph.",
      "description": "Performs a lookup operation on the texture provided as a uniform for the shader."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": [
          {
            "default": "0",
            "value": "Determines the source for the lookup. See [enum Source] for options.",
            "setter": "set_source",
            "name": "source",
            "getter": "get_source",
            "type": "int",
            "enum": "VisualShaderNodeTexture.Source"
          },
          {
            "value": "The source texture, if needed for the selected [member source].",
            "setter": "set_texture",
            "name": "texture",
            "getter": "get_texture",
            "type": "Texture"
          },
          {
            "default": "0",
            "value": "Specifies the type of the texture if [member source] is set to [constant SOURCE_TEXTURE]. See [enum TextureType] for options.",
            "setter": "set_texture_type",
            "name": "texture_type",
            "getter": "get_texture_type",
            "type": "int",
            "enum": "VisualShaderNodeTexture.TextureType"
          }
        ]
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeTexture",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "SOURCE_TEXTURE",
            "enum": "Source"
          },
          {
            "value": "1",
            "name": "SOURCE_SCREEN",
            "enum": "Source"
          },
          {
            "value": "2",
            "name": "SOURCE_2D_TEXTURE",
            "enum": "Source"
          },
          {
            "value": "3",
            "name": "SOURCE_2D_NORMAL",
            "enum": "Source"
          },
          {
            "value": "4",
            "name": "SOURCE_DEPTH",
            "enum": "Source"
          },
          {
            "value": "5",
            "name": "SOURCE_PORT",
            "enum": "Source"
          },
          {
            "value": "0",
            "name": "TYPE_DATA",
            "enum": "TextureType"
          },
          {
            "value": "1",
            "name": "TYPE_COLOR",
            "enum": "TextureType"
          },
          {
            "value": "2",
            "name": "TYPE_NORMALMAP",
            "enum": "TextureType"
          }
        ]
      },
      "brief_description": "Performs a texture lookup within the visual shader graph.",
      "description": "Performs a lookup operation on the provided texture, with support for multiple texture sources to choose from."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeTransformCompose",
      "version": "3.3",
      "constants": {},
      "brief_description": "Composes a [Transform] from four [Vector3]s within the visual shader graph.",
      "description": "Creates a 4x4 transform matrix using four vectors of type [code]vec3[/code]. Each vector is one row in the matrix and the last column is a [code]vec4(0, 0, 0, 1)[/code]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )",
          "value": "A [Transform] constant which represents the state of this node.",
          "setter": "set_constant",
          "name": "constant",
          "getter": "get_constant",
          "type": "Transform"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeTransformConstant",
      "version": "3.3",
      "constants": {},
      "brief_description": "A [Transform] constant for use within the visual shader graph.",
      "description": "A constant [Transform], which can be used as an input node."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeTransformDecompose",
      "version": "3.3",
      "constants": {},
      "brief_description": "Decomposes a [Transform] into four [Vector3]s within the visual shader graph.",
      "description": "Takes a 4x4 transform matrix and decomposes it into four [code]vec3[/code] values, one from each row of the matrix."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "0",
          "value": "The function to be computed. See [enum Function] for options.",
          "setter": "set_function",
          "name": "function",
          "getter": "get_function",
          "type": "int",
          "enum": "VisualShaderNodeTransformFunc.Function"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeTransformFunc",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "FUNC_INVERSE",
            "enum": "Function"
          },
          {
            "value": "1",
            "name": "FUNC_TRANSPOSE",
            "enum": "Function"
          }
        ]
      },
      "brief_description": "Computes a [Transform] function within the visual shader graph.",
      "description": "Computes an inverse or transpose function on the provided [Transform]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "0",
          "value": "The multiplication type to be performed on the transforms. See [enum Operator] for options.",
          "setter": "set_operator",
          "name": "operator",
          "getter": "get_operator",
          "type": "int",
          "enum": "VisualShaderNodeTransformMult.Operator"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeTransformMult",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "OP_AxB",
            "enum": "Operator"
          },
          {
            "value": "1",
            "name": "OP_BxA",
            "enum": "Operator"
          },
          {
            "value": "2",
            "name": "OP_AxB_COMP",
            "enum": "Operator"
          },
          {
            "value": "3",
            "name": "OP_BxA_COMP",
            "enum": "Operator"
          }
        ]
      },
      "brief_description": "Multiplies [Transform] by [Transform] within the visual shader graph.",
      "description": "A multiplication operation on two transforms (4x4 matrices), with support for different multiplication operators."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNodeUniform",
      "methods": {},
      "name": "VisualShaderNodeTransformUniform",
      "version": "3.3",
      "constants": {},
      "brief_description": "A [Transform] uniform for use within the visual shader graph.",
      "description": "Translated to [code]uniform mat4[/code] in the shader language."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "0",
          "value": "The multiplication type to be performed. See [enum Operator] for options.",
          "setter": "set_operator",
          "name": "operator",
          "getter": "get_operator",
          "type": "int",
          "enum": "VisualShaderNodeTransformVecMult.Operator"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeTransformVecMult",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "OP_AxB",
            "enum": "Operator"
          },
          {
            "value": "1",
            "name": "OP_BxA",
            "enum": "Operator"
          },
          {
            "value": "2",
            "name": "OP_3x3_AxB",
            "enum": "Operator"
          },
          {
            "value": "3",
            "name": "OP_3x3_BxA",
            "enum": "Operator"
          }
        ]
      },
      "brief_description": "Multiplies a [Transform] and a [Vector3] within the visual shader graph.",
      "description": "A multiplication operation on a transform (4x4 matrix) and a vector, with support for different multiplication operators."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "\"[None]\"",
          "value": "The name of the uniform which this reference points to.",
          "setter": "set_uniform_name",
          "name": "uniform_name",
          "getter": "get_uniform_name",
          "type": "String"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeUniformRef",
      "version": "3.3",
      "constants": {},
      "brief_description": "A reference to an existing [VisualShaderNodeUniform].",
      "description": "Creating a reference to a [VisualShaderNodeUniform] allows you to reuse this uniform in different shaders or shader stages easily."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "\"\"",
          "value": "Name of the uniform, by which it can be accessed through the [ShaderMaterial] properties.",
          "setter": "set_uniform_name",
          "name": "uniform_name",
          "getter": "get_uniform_name",
          "type": "String"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeUniform",
      "version": "3.3",
      "constants": {},
      "brief_description": "A base type for the uniforms within the visual shader graph.",
      "description": "A uniform represents a variable in the shader which is set externally, i.e. from the [ShaderMaterial]. Uniforms are exposed as properties in the [ShaderMaterial] and can be assigned from the inspector or from a script."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "Vector3( 0, 0, 0 )",
          "value": "A [Vector3] constant which represents the state of this node.",
          "setter": "set_constant",
          "name": "constant",
          "getter": "get_constant",
          "type": "Vector3"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeVec3Constant",
      "version": "3.3",
      "constants": {},
      "brief_description": "A [Vector3] constant to be used within the visual shader graph.",
      "description": "A constant [Vector3], which can be used as an input node."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNodeUniform",
      "methods": {},
      "name": "VisualShaderNodeVec3Uniform",
      "version": "3.3",
      "constants": {},
      "brief_description": "A [Vector3] uniform to be used within the visual shader graph.",
      "description": "Translated to [code]uniform vec3[/code] in the shader language."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeVectorClamp",
      "version": "3.3",
      "constants": {},
      "brief_description": "Clamps a vector value within the visual shader graph.",
      "description": "Constrains a value to lie between [code]min[/code] and [code]max[/code] values. The operation is performed on each component of the vector individually."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeVectorCompose",
      "version": "3.3",
      "constants": {},
      "brief_description": "Composes a [Vector3] from three scalars within the visual shader graph.",
      "description": "Creates a [code]vec3[/code] using three scalar values that can be provided from separate inputs."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeVectorDecompose",
      "version": "3.3",
      "constants": {},
      "brief_description": "Decomposes a [Vector3] into three scalars within the visual shader graph.",
      "description": "Takes a [code]vec3[/code] and decomposes it into three scalar values that can be used as separate inputs."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "0",
          "value": "A derivative type. See [enum Function] for options.",
          "setter": "set_function",
          "name": "function",
          "getter": "get_function",
          "type": "int",
          "enum": "VisualShaderNodeVectorDerivativeFunc.Function"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeVectorDerivativeFunc",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "FUNC_SUM",
            "enum": "Function"
          },
          {
            "value": "1",
            "name": "FUNC_X",
            "enum": "Function"
          },
          {
            "value": "2",
            "name": "FUNC_Y",
            "enum": "Function"
          }
        ]
      },
      "brief_description": "Calculates a vector derivative within the visual shader graph.",
      "description": "This node is only available in [code]Fragment[/code] and [code]Light[/code] visual shaders."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeVectorDistance",
      "version": "3.3",
      "constants": {},
      "brief_description": "Returns the distance between two points. To be used within the visual shader graph.",
      "description": "Calculates distance from point represented by vector [code]p0[/code] to vector [code]p1[/code].\n\t\tTranslated to [code]distance(p0, p1)[/code] in the shader language."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "0",
          "value": "The function to be performed. See [enum Function] for options.",
          "setter": "set_function",
          "name": "function",
          "getter": "get_function",
          "type": "int",
          "enum": "VisualShaderNodeVectorFunc.Function"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeVectorFunc",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "FUNC_NORMALIZE",
            "enum": "Function"
          },
          {
            "value": "1",
            "name": "FUNC_SATURATE",
            "enum": "Function"
          },
          {
            "value": "2",
            "name": "FUNC_NEGATE",
            "enum": "Function"
          },
          {
            "value": "3",
            "name": "FUNC_RECIPROCAL",
            "enum": "Function"
          },
          {
            "value": "4",
            "name": "FUNC_RGB2HSV",
            "enum": "Function"
          },
          {
            "value": "5",
            "name": "FUNC_HSV2RGB",
            "enum": "Function"
          },
          {
            "value": "6",
            "name": "FUNC_ABS",
            "enum": "Function"
          },
          {
            "value": "7",
            "name": "FUNC_ACOS",
            "enum": "Function"
          },
          {
            "value": "8",
            "name": "FUNC_ACOSH",
            "enum": "Function"
          },
          {
            "value": "9",
            "name": "FUNC_ASIN",
            "enum": "Function"
          },
          {
            "value": "10",
            "name": "FUNC_ASINH",
            "enum": "Function"
          },
          {
            "value": "11",
            "name": "FUNC_ATAN",
            "enum": "Function"
          },
          {
            "value": "12",
            "name": "FUNC_ATANH",
            "enum": "Function"
          },
          {
            "value": "13",
            "name": "FUNC_CEIL",
            "enum": "Function"
          },
          {
            "value": "14",
            "name": "FUNC_COS",
            "enum": "Function"
          },
          {
            "value": "15",
            "name": "FUNC_COSH",
            "enum": "Function"
          },
          {
            "value": "16",
            "name": "FUNC_DEGREES",
            "enum": "Function"
          },
          {
            "value": "17",
            "name": "FUNC_EXP",
            "enum": "Function"
          },
          {
            "value": "18",
            "name": "FUNC_EXP2",
            "enum": "Function"
          },
          {
            "value": "19",
            "name": "FUNC_FLOOR",
            "enum": "Function"
          },
          {
            "value": "20",
            "name": "FUNC_FRAC",
            "enum": "Function"
          },
          {
            "value": "21",
            "name": "FUNC_INVERSE_SQRT",
            "enum": "Function"
          },
          {
            "value": "22",
            "name": "FUNC_LOG",
            "enum": "Function"
          },
          {
            "value": "23",
            "name": "FUNC_LOG2",
            "enum": "Function"
          },
          {
            "value": "24",
            "name": "FUNC_RADIANS",
            "enum": "Function"
          },
          {
            "value": "25",
            "name": "FUNC_ROUND",
            "enum": "Function"
          },
          {
            "value": "26",
            "name": "FUNC_ROUNDEVEN",
            "enum": "Function"
          },
          {
            "value": "27",
            "name": "FUNC_SIGN",
            "enum": "Function"
          },
          {
            "value": "28",
            "name": "FUNC_SIN",
            "enum": "Function"
          },
          {
            "value": "29",
            "name": "FUNC_SINH",
            "enum": "Function"
          },
          {
            "value": "30",
            "name": "FUNC_SQRT",
            "enum": "Function"
          },
          {
            "value": "31",
            "name": "FUNC_TAN",
            "enum": "Function"
          },
          {
            "value": "32",
            "name": "FUNC_TANH",
            "enum": "Function"
          },
          {
            "value": "33",
            "name": "FUNC_TRUNC",
            "enum": "Function"
          },
          {
            "value": "34",
            "name": "FUNC_ONEMINUS",
            "enum": "Function"
          }
        ]
      },
      "brief_description": "A vector function to be used within the visual shader graph.",
      "description": "A visual shader node able to perform different functions using vectors."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeVectorInterp",
      "version": "3.3",
      "constants": {},
      "brief_description": "Linearly interpolates between two vectors within the visual shader graph.",
      "description": "Translates to [code]mix(a, b, weight)[/code] in the shader language, where [code]weight[/code] is a [Vector3] with weights for each component."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeVectorLen",
      "version": "3.3",
      "constants": {},
      "brief_description": "Returns the length of a [Vector3] within the visual shader graph.",
      "description": "Translated to [code]length(p0)[/code] in the shader language."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "0",
          "value": "The operator to be used. See [enum Operator] for options.",
          "setter": "set_operator",
          "name": "operator",
          "getter": "get_operator",
          "type": "int",
          "enum": "VisualShaderNodeVectorOp.Operator"
        }
      },
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeVectorOp",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "OP_ADD",
            "enum": "Operator"
          },
          {
            "value": "1",
            "name": "OP_SUB",
            "enum": "Operator"
          },
          {
            "value": "2",
            "name": "OP_MUL",
            "enum": "Operator"
          },
          {
            "value": "3",
            "name": "OP_DIV",
            "enum": "Operator"
          },
          {
            "value": "4",
            "name": "OP_MOD",
            "enum": "Operator"
          },
          {
            "value": "5",
            "name": "OP_POW",
            "enum": "Operator"
          },
          {
            "value": "6",
            "name": "OP_MAX",
            "enum": "Operator"
          },
          {
            "value": "7",
            "name": "OP_MIN",
            "enum": "Operator"
          },
          {
            "value": "8",
            "name": "OP_CROSS",
            "enum": "Operator"
          },
          {
            "value": "9",
            "name": "OP_ATAN2",
            "enum": "Operator"
          },
          {
            "value": "10",
            "name": "OP_REFLECT",
            "enum": "Operator"
          },
          {
            "value": "11",
            "name": "OP_STEP",
            "enum": "Operator"
          }
        ]
      },
      "brief_description": "A vector operator to be used within the visual shader graph.",
      "description": "A visual shader node for use of vector operators. Operates on vector [code]a[/code] and vector [code]b[/code]."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeVectorRefract",
      "version": "3.3",
      "constants": {},
      "brief_description": "Returns the [Vector3] that points in the direction of refraction. For use within the visual shader graph.",
      "description": "Translated to [code]refract(I, N, eta)[/code] in the shader language, where [code]I[/code] is the incident vector, [code]N[/code] is the normal vector and [code]eta[/code] is the ratio of the indices of the refraction."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeVectorScalarMix",
      "version": "3.3",
      "constants": {},
      "brief_description": "Linearly interpolates between two vectors using a scalar. For use within the visual shader graph.",
      "description": "Translates to [code]mix(a, b, weight)[/code] in the shader language, where [code]a[/code] and [code]b[/code] are vectors and [code]weight[/code] is a scalar."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeVectorScalarSmoothStep",
      "version": "3.3",
      "constants": {},
      "brief_description": "Calculates a vector SmoothStep function using scalar within the visual shader graph.",
      "description": "Translates to [code]smoothstep(edge0, edge1, x)[/code] in the shader language, where [code]x[/code] is a scalar.\n\t\tReturns [code]0.0[/code] if [code]x[/code] is smaller than [code]edge0[/code] and [code]1.0[/code] if [code]x[/code] is larger than [code]edge1[/code]. Otherwise the return value is interpolated between [code]0.0[/code] and [code]1.0[/code] using Hermite polynomials."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeVectorScalarStep",
      "version": "3.3",
      "constants": {},
      "brief_description": "Calculates a vector Step function within the visual shader graph.",
      "description": "Translates to [code]step(edge, x)[/code] in the shader language.\n\t\tReturns [code]0.0[/code] if [code]x[/code] is smaller than [code]edge[/code] and [code]1.0[/code] otherwise."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "VisualShaderNode",
      "methods": {},
      "name": "VisualShaderNodeVectorSmoothStep",
      "version": "3.3",
      "constants": {},
      "brief_description": "Calculates a vector SmoothStep function within the visual shader graph.",
      "description": "Translates to [code]smoothstep(edge0, edge1, x)[/code] in the shader language, where [code]x[/code] is a vector.\n\t\tReturns [code]0.0[/code] if [code]x[/code] is smaller than [code]edge0[/code] and [code]1.0[/code] if [code]x[/code] is larger than [code]edge1[/code]. Otherwise the return value is interpolated between [code]0.0[/code] and [code]1.0[/code] using Hermite polynomials."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/shading/visual_shaders.html"
      },
      "members": {
        "member": {
          "default": "-1",
          "value": "Sets the output port index which will be showed for preview. If set to [code]-1[/code] no port will be open for preview.",
          "setter": "set_output_port_for_preview",
          "name": "output_port_for_preview",
          "getter": "get_output_port_for_preview",
          "type": "int"
        }
      },
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "Array"
            },
            "qualifiers": "const",
            "name": "get_default_input_values",
            "description": "Returns an [Array] containing default values for all of the input ports of the node in the form [code][index0, value0, index1, value1, ...][/code]."
          },
          {
            "return": {
              "type": "Variant"
            },
            "argument": {
              "name": "port",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_input_port_default_value",
            "description": "Returns the default value of the input [code]port[/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "values",
              "type": "Array",
              "index": "0"
            },
            "name": "set_default_input_values",
            "description": "Sets the default input ports values using an [Array] of the form [code][index0, value0, index1, value1, ...][/code]. For example: [code][0, Vector3(0, 0, 0), 1, Vector3(0, 0, 0)][/code]."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "port",
                "type": "int",
                "index": "0"
              },
              {
                "name": "value",
                "type": "Variant",
                "index": "1"
              }
            ],
            "name": "set_input_port_default_value",
            "description": "Sets the default value for the selected input [code]port[/code]."
          }
        ]
      },
      "name": "VisualShaderNode",
      "version": "3.3",
      "signals": {
        "signal": {
          "name": "editor_refresh_request",
          "description": "Emitted when the node requests an editor refresh. Currently called only in setter of [member VisualShaderNodeTexture.source], [VisualShaderNodeTexture], and [VisualShaderNodeCubeMap] (and their derivatives)."
        }
      },
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "PORT_TYPE_SCALAR",
            "enum": "PortType"
          },
          {
            "value": "1",
            "name": "PORT_TYPE_VECTOR",
            "enum": "PortType"
          },
          {
            "value": "2",
            "name": "PORT_TYPE_BOOLEAN",
            "enum": "PortType"
          },
          {
            "value": "3",
            "name": "PORT_TYPE_TRANSFORM",
            "enum": "PortType"
          },
          {
            "value": "4",
            "name": "PORT_TYPE_SAMPLER",
            "enum": "PortType"
          },
          {
            "value": "5",
            "name": "PORT_TYPE_MAX",
            "enum": "PortType"
          }
        ]
      },
      "brief_description": "Base class for nodes in a visual shader graph.",
      "description": {}
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "Vector2( 0, 0 )",
          "value": "The offset vector of the whole graph.",
          "setter": "set_graph_offset",
          "name": "graph_offset",
          "getter": "get_graph_offset",
          "type": "Vector2"
        }
      },
      "inherits": "Shader",
      "methods": {
        "method": [
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "type",
                "type": "int",
                "enum": "VisualShader.Type",
                "index": "0"
              },
              {
                "name": "node",
                "type": "VisualShaderNode",
                "index": "1"
              },
              {
                "name": "position",
                "type": "Vector2",
                "index": "2"
              },
              {
                "name": "id",
                "type": "int",
                "index": "3"
              }
            ],
            "name": "add_node",
            "description": "Adds the specified node to the shader."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "type",
                "type": "int",
                "enum": "VisualShader.Type",
                "index": "0"
              },
              {
                "name": "from_node",
                "type": "int",
                "index": "1"
              },
              {
                "name": "from_port",
                "type": "int",
                "index": "2"
              },
              {
                "name": "to_node",
                "type": "int",
                "index": "3"
              },
              {
                "name": "to_port",
                "type": "int",
                "index": "4"
              }
            ],
            "qualifiers": "const",
            "name": "can_connect_nodes",
            "description": "Returns [code]true[/code] if the specified nodes and ports can be connected together."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": [
              {
                "name": "type",
                "type": "int",
                "enum": "VisualShader.Type",
                "index": "0"
              },
              {
                "name": "from_node",
                "type": "int",
                "index": "1"
              },
              {
                "name": "from_port",
                "type": "int",
                "index": "2"
              },
              {
                "name": "to_node",
                "type": "int",
                "index": "3"
              },
              {
                "name": "to_port",
                "type": "int",
                "index": "4"
              }
            ],
            "name": "connect_nodes",
            "description": "Connects the specified nodes and ports."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "type",
                "type": "int",
                "enum": "VisualShader.Type",
                "index": "0"
              },
              {
                "name": "from_node",
                "type": "int",
                "index": "1"
              },
              {
                "name": "from_port",
                "type": "int",
                "index": "2"
              },
              {
                "name": "to_node",
                "type": "int",
                "index": "3"
              },
              {
                "name": "to_port",
                "type": "int",
                "index": "4"
              }
            ],
            "name": "connect_nodes_forced",
            "description": "Connects the specified nodes and ports, even if they can't be connected. Such connection is invalid and will not function properly."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "type",
                "type": "int",
                "enum": "VisualShader.Type",
                "index": "0"
              },
              {
                "name": "from_node",
                "type": "int",
                "index": "1"
              },
              {
                "name": "from_port",
                "type": "int",
                "index": "2"
              },
              {
                "name": "to_node",
                "type": "int",
                "index": "3"
              },
              {
                "name": "to_port",
                "type": "int",
                "index": "4"
              }
            ],
            "name": "disconnect_nodes",
            "description": "Connects the specified nodes and ports."
          },
          {
            "return": {
              "type": "VisualShaderNode"
            },
            "argument": [
              {
                "name": "type",
                "type": "int",
                "enum": "VisualShader.Type",
                "index": "0"
              },
              {
                "name": "id",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_node",
            "description": "Returns the shader node instance with specified [code]type[/code] and [code]id[/code]."
          },
          {
            "return": {
              "type": "Array"
            },
            "argument": {
              "name": "type",
              "type": "int",
              "enum": "VisualShader.Type",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_node_connections",
            "description": "Returns the list of connected nodes with the specified type."
          },
          {
            "return": {
              "type": "PoolIntArray"
            },
            "argument": {
              "name": "type",
              "type": "int",
              "enum": "VisualShader.Type",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_node_list",
            "description": "Returns the list of all nodes in the shader with the specified type."
          },
          {
            "return": {
              "type": "Vector2"
            },
            "argument": [
              {
                "name": "type",
                "type": "int",
                "enum": "VisualShader.Type",
                "index": "0"
              },
              {
                "name": "id",
                "type": "int",
                "index": "1"
              }
            ],
            "qualifiers": "const",
            "name": "get_node_position",
            "description": "Returns the position of the specified node within the shader graph."
          },
          {
            "return": {
              "type": "int"
            },
            "argument": {
              "name": "type",
              "type": "int",
              "enum": "VisualShader.Type",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_valid_node_id",
            "description": {}
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": [
              {
                "name": "type",
                "type": "int",
                "enum": "VisualShader.Type",
                "index": "0"
              },
              {
                "name": "from_node",
                "type": "int",
                "index": "1"
              },
              {
                "name": "from_port",
                "type": "int",
                "index": "2"
              },
              {
                "name": "to_node",
                "type": "int",
                "index": "3"
              },
              {
                "name": "to_port",
                "type": "int",
                "index": "4"
              }
            ],
            "qualifiers": "const",
            "name": "is_node_connection",
            "description": "Returns [code]true[/code] if the specified node and port connection exist."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "type",
                "type": "int",
                "enum": "VisualShader.Type",
                "index": "0"
              },
              {
                "name": "id",
                "type": "int",
                "index": "1"
              }
            ],
            "name": "remove_node",
            "description": "Removes the specified node from the shader."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": {
              "name": "mode",
              "type": "int",
              "enum": "Shader.Mode",
              "index": "0"
            },
            "name": "set_mode",
            "description": "Sets the mode of this shader."
          },
          {
            "return": {
              "type": "void"
            },
            "argument": [
              {
                "name": "type",
                "type": "int",
                "enum": "VisualShader.Type",
                "index": "0"
              },
              {
                "name": "id",
                "type": "int",
                "index": "1"
              },
              {
                "name": "position",
                "type": "Vector2",
                "index": "2"
              }
            ],
            "name": "set_node_position",
            "description": "Sets the position of the specified node."
          }
        ]
      },
      "name": "VisualShader",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "TYPE_VERTEX",
            "enum": "Type"
          },
          {
            "value": "1",
            "name": "TYPE_FRAGMENT",
            "enum": "Type"
          },
          {
            "value": "2",
            "name": "TYPE_LIGHT",
            "enum": "Type"
          },
          {
            "value": "3",
            "name": "TYPE_MAX",
            "enum": "Type"
          },
          {
            "value": "-1",
            "name": "NODE_ID_INVALID"
          },
          {
            "value": "0",
            "name": "NODE_ID_OUTPUT"
          }
        ]
      },
      "brief_description": "A custom shader program with a visual editor.",
      "description": "This class allows you to define a custom shader program that can be used for various materials to render objects.\n\t\tThe visual shader editor creates the shader."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "value": "Icon used as a button to scroll the [ScrollBar] up. Supports custom step using the [member ScrollBar.custom_step] property.",
            "name": "decrement",
            "type": "Texture"
          },
          {
            "value": "Displayed when the mouse cursor hovers over the decrement button.",
            "name": "decrement_highlight",
            "type": "Texture"
          },
          {
            "value": "Used as texture for the grabber, the draggable element representing current scroll.",
            "name": "grabber",
            "type": "StyleBox"
          },
          {
            "value": "Used when the mouse hovers over the grabber.",
            "name": "grabber_highlight",
            "type": "StyleBox"
          },
          {
            "value": "Used when the grabber is being dragged.",
            "name": "grabber_pressed",
            "type": "StyleBox"
          },
          {
            "value": "Icon used as a button to scroll the [ScrollBar] down. Supports custom step using the [member ScrollBar.custom_step] property.",
            "name": "increment",
            "type": "Texture"
          },
          {
            "value": "Displayed when the mouse cursor hovers over the increment button.",
            "name": "increment_highlight",
            "type": "Texture"
          },
          {
            "value": "Used as background of this [ScrollBar].",
            "name": "scroll",
            "type": "StyleBox"
          },
          {
            "value": "Used as background when the [ScrollBar] has the GUI focus.",
            "name": "scroll_focus",
            "type": "StyleBox"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "0",
            "setter": "set_h_size_flags",
            "override": "true",
            "name": "size_flags_horizontal",
            "getter": "get_h_size_flags",
            "type": "int"
          },
          {
            "default": "1",
            "setter": "set_v_size_flags",
            "override": "true",
            "name": "size_flags_vertical",
            "getter": "get_v_size_flags",
            "type": "int"
          }
        ]
      },
      "inherits": "ScrollBar",
      "methods": {},
      "name": "VScrollBar",
      "version": "3.3",
      "constants": {},
      "brief_description": "Vertical scroll bar.",
      "description": "Vertical version of [ScrollBar], which goes from top (min) to bottom (max)."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "default": "4",
            "value": "The width of the area covered by the separator. Effectively works like a minimum width.",
            "name": "separation",
            "type": "int"
          },
          {
            "value": "The style for the separator line. Works best with [StyleBoxLine] (remember to enable [member StyleBoxLine.vertical]).",
            "name": "separator",
            "type": "StyleBox"
          }
        ]
      },
      "inherits": "Separator",
      "methods": {},
      "name": "VSeparator",
      "version": "3.3",
      "constants": {},
      "brief_description": "Vertical version of [Separator].",
      "description": "Vertical version of [Separator]. Even though it looks vertical, it is used to separate objects horizontally."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "value": "The texture for the grabber (the draggable element).",
            "name": "grabber",
            "type": "Texture"
          },
          {
            "value": "The background of the area below the grabber.",
            "name": "grabber_area",
            "type": "StyleBox"
          },
          {
            "name": "grabber_area_highlight",
            "type": "StyleBox"
          },
          {
            "value": "The texture for the grabber when it's disabled.",
            "name": "grabber_disabled",
            "type": "Texture"
          },
          {
            "value": "The texture for the grabber when it's focused.",
            "name": "grabber_highlight",
            "type": "Texture"
          },
          {
            "value": "The background for the whole slider. Determines the width of the [code]grabber_area[/code].",
            "name": "slider",
            "type": "StyleBox"
          },
          {
            "value": "The texture for the ticks, visible when [member Slider.tick_count] is greater than 0.",
            "name": "tick",
            "type": "Texture"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "0",
            "setter": "set_h_size_flags",
            "override": "true",
            "name": "size_flags_horizontal",
            "getter": "get_h_size_flags",
            "type": "int"
          },
          {
            "default": "1",
            "setter": "set_v_size_flags",
            "override": "true",
            "name": "size_flags_vertical",
            "getter": "get_v_size_flags",
            "type": "int"
          }
        ]
      },
      "inherits": "Slider",
      "methods": {},
      "name": "VSlider",
      "version": "3.3",
      "constants": {},
      "brief_description": "Vertical slider.",
      "description": "Vertical slider. See [Slider]. This one goes from bottom (min) to top (max).\n\t\t[b]Note:[/b] The [signal Range.changed] and [signal Range.value_changed] signals are part of the [Range] class which this class inherits from."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "default": "1",
            "value": "Boolean value. If 1 ([code]true[/code]), the grabber will hide automatically when it isn't under the cursor. If 0 ([code]false[/code]), it's always visible.",
            "name": "autohide",
            "type": "int"
          },
          {
            "name": "bg",
            "type": "StyleBox"
          },
          {
            "value": "The icon used for the grabber drawn in the middle area.",
            "name": "grabber",
            "type": "Texture"
          },
          {
            "default": "12",
            "value": "The space between sides of the container.",
            "name": "separation",
            "type": "int"
          }
        ]
      },
      "inherits": "SplitContainer",
      "methods": {},
      "name": "VSplitContainer",
      "version": "3.3",
      "constants": {},
      "brief_description": "Vertical split container.",
      "description": "Vertical split container. See [SplitContainer]. This goes from top to bottom."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": {
          "return": {
            "type": "Variant"
          },
          "qualifiers": "const",
          "name": "get_ref",
          "description": "Returns the [Object] this weakref is referring to."
        }
      },
      "name": "WeakRef",
      "version": "3.3",
      "constants": {},
      "brief_description": "Holds an [Object], but does not contribute to the reference count if the object is a reference.",
      "description": "A weakref can hold a [Reference], without contributing to the reference counter. A weakref can be created from an [Object] using [method @GDScript.weakref]. If this object is not a reference, weakref still works, however, it does not have any effect on the object. Weakrefs are useful in cases where multiple classes have variables that refer to each other. Without weakrefs, using these classes could lead to memory leaks, since both references keep each other from being released. Making part of the variables a weakref can prevent this cyclic dependency, and allows the references to be released."
    }
  },
  {
    "class": {
      "tutorials": {},
      "theme_items": {
        "theme_item": [
          {
            "value": "The icon for the close button.",
            "name": "close",
            "type": "Texture"
          },
          {
            "default": "18",
            "value": "The horizontal offset of the close button.",
            "name": "close_h_ofs",
            "type": "int"
          },
          {
            "value": "The icon used for the close button when it's hovered with the mouse cursor.",
            "name": "close_highlight",
            "type": "Texture"
          },
          {
            "default": "18",
            "value": "The vertical offset of the close button.",
            "name": "close_v_ofs",
            "type": "int"
          },
          {
            "value": "The style for both the content background of the [WindowDialog] and the title bar. The title bar is created with a top border and an expand margin using the [code]panel[/code] stylebox.",
            "name": "panel",
            "type": "StyleBox"
          },
          {
            "default": "4",
            "value": "The thickness of the border that can be dragged when scaling the window (if [member resizable] is enabled).",
            "name": "scaleborder_size",
            "type": "int"
          },
          {
            "default": "Color( 0, 0, 0, 1 )",
            "value": "The color of the title text.",
            "name": "title_color",
            "type": "Color"
          },
          {
            "value": "The font used to draw the title.",
            "name": "title_font",
            "type": "Font"
          },
          {
            "default": "20",
            "value": "The vertical offset of the title text.",
            "name": "title_height",
            "type": "int"
          }
        ]
      },
      "members": {
        "member": [
          {
            "default": "false",
            "value": "If [code]true[/code], the user can resize the window.",
            "setter": "set_resizable",
            "name": "resizable",
            "getter": "get_resizable",
            "type": "bool"
          },
          {
            "default": "\"\"",
            "value": "The text displayed in the window's title bar.",
            "setter": "set_title",
            "name": "window_title",
            "getter": "get_title",
            "type": "String"
          }
        ]
      },
      "inherits": "Popup",
      "methods": {
        "method": {
          "return": {
            "type": "TextureButton"
          },
          "name": "get_close_button",
          "description": "Returns the close [TextureButton]."
        }
      },
      "name": "WindowDialog",
      "version": "3.3",
      "constants": {},
      "brief_description": "Base class for window dialogs.",
      "description": "Windowdialog is the base class for all window-based dialogs. It's a by-default toplevel [Control] that draws a window decoration and allows motion and resizing."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/physics/ray-casting.html"
      },
      "members": {
        "member": [
          {
            "value": "The [RID] of this world's canvas resource. Used by the [VisualServer] for 2D drawing.",
            "setter": "",
            "name": "canvas",
            "getter": "get_canvas",
            "type": "RID"
          },
          {
            "value": "Direct access to the world's physics 2D space state. Used for querying current and potential collisions. When using multi-threaded physics, access is limited to [code]_physics_process(delta)[/code] in the main thread.",
            "setter": "",
            "name": "direct_space_state",
            "getter": "get_direct_space_state",
            "type": "Physics2DDirectSpaceState"
          },
          {
            "value": "The [RID] of this world's physics space resource. Used by the [Physics2DServer] for 2D physics, treating it as both a space and an area.",
            "setter": "",
            "name": "space",
            "getter": "get_space",
            "type": "RID"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {},
      "name": "World2D",
      "version": "3.3",
      "constants": {},
      "brief_description": "Class that has everything pertaining to a 2D world.",
      "description": "Class that has everything pertaining to a 2D world. A physics space, a visual scenario and a sound space. 2D nodes register their resources into the current 2D world."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": [
          {
            "value": "https://docs.godotengine.org/en/3.3/tutorials/3d/environment_and_post_processing.html",
            "title": "Environment and post-processing"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/123",
            "title": "3D Material Testers Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/110",
            "title": "2D HDR Demo"
          },
          {
            "value": "https://godotengine.org/asset-library/asset/678",
            "title": "Third Person Shooter Demo"
          }
        ]
      },
      "members": {
        "member": {
          "value": "The [Environment] resource used by this [WorldEnvironment], defining the default properties.",
          "setter": "set_environment",
          "name": "environment",
          "getter": "get_environment",
          "type": "Environment"
        }
      },
      "inherits": "Node",
      "methods": {},
      "name": "WorldEnvironment",
      "version": "3.3",
      "constants": {},
      "brief_description": "Default environment properties for the entire scene (post-processing effects, lighting and background settings).",
      "description": "The [WorldEnvironment] node is used to configure the default [Environment] for the scene.\n\t\tThe parameters defined in the [WorldEnvironment] can be overridden by an [Environment] node set on the current [Camera]. Additionally, only one [WorldEnvironment] may be instanced in a given scene at a time.\n\t\tThe [WorldEnvironment] allows the user to specify default lighting parameters (e.g. ambient lighting), various post-processing effects (e.g. SSAO, DOF, Tonemapping), and how to draw the background (e.g. solid color, skybox). Usually, these are added in order to improve the realism/color balance of the scene."
    }
  },
  {
    "class": {
      "tutorials": {
        "link": "https://docs.godotengine.org/en/3.3/tutorials/physics/ray-casting.html"
      },
      "members": {
        "member": [
          {
            "value": "Direct access to the world's physics 3D space state. Used for querying current and potential collisions.",
            "setter": "",
            "name": "direct_space_state",
            "getter": "get_direct_space_state",
            "type": "PhysicsDirectSpaceState"
          },
          {
            "value": "The World's [Environment].",
            "setter": "set_environment",
            "name": "environment",
            "getter": "get_environment",
            "type": "Environment"
          },
          {
            "value": "The World's fallback_environment will be used if the World's [Environment] fails or is missing.",
            "setter": "set_fallback_environment",
            "name": "fallback_environment",
            "getter": "get_fallback_environment",
            "type": "Environment"
          },
          {
            "value": "The World's visual scenario.",
            "setter": "",
            "name": "scenario",
            "getter": "get_scenario",
            "type": "RID"
          },
          {
            "value": "The World's physics space.",
            "setter": "",
            "name": "space",
            "getter": "get_space",
            "type": "RID"
          }
        ]
      },
      "inherits": "Resource",
      "methods": {},
      "name": "World",
      "version": "3.3",
      "constants": {},
      "brief_description": "Class that has everything pertaining to a world.",
      "description": "Class that has everything pertaining to a world. A physics space, a visual scenario and a sound space. Spatial nodes register their resources into the current world."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Resource",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "load",
            "description": "Loads a certificate from [code]path[/code] (\"*.crt\" file)."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "path",
              "type": "String",
              "index": "0"
            },
            "name": "save",
            "description": "Saves a certificate to the given [code]path[/code] (should be a \"*.crt\" file)."
          }
        ]
      },
      "name": "X509Certificate",
      "version": "3.3",
      "constants": {},
      "brief_description": "An X509 certificate (e.g. for SSL).",
      "description": "The X509Certificate class represents an X509 certificate. Certificates can be loaded and saved like any other [Resource].\n\t\tThey can be used as the server certificate in [method StreamPeerSSL.accept_stream] (along with the proper [CryptoKey]), and to specify the only certificate that should be accepted when connecting to an SSL server via [method StreamPeerSSL.connect_to_stream].\n\t\t[b]Note:[/b] Not available in HTML5 exports."
    }
  },
  {
    "class": {
      "tutorials": {},
      "inherits": "Reference",
      "methods": {
        "method": [
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_attribute_count",
            "description": "Gets the amount of attributes in the current element."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_attribute_name",
            "description": "Gets the name of the attribute specified by the index in [code]idx[/code] argument."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "idx",
              "type": "int",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_attribute_value",
            "description": "Gets the value of the attribute specified by the index in [code]idx[/code] argument."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_current_line",
            "description": "Gets the current line in the parsed file (currently not implemented)."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_named_attribute_value",
            "description": "Gets the value of a certain attribute of the current element by name. This will raise an error if the element has no such attribute."
          },
          {
            "return": {
              "type": "String"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "get_named_attribute_value_safe",
            "description": "Gets the value of a certain attribute of the current element by name. This will return an empty [String] if the attribute is not found."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_node_data",
            "description": "Gets the contents of a text node. This will raise an error in any other type of node."
          },
          {
            "return": {
              "type": "String"
            },
            "qualifiers": "const",
            "name": "get_node_name",
            "description": "Gets the name of the current element node. This will raise an error if the current node type is neither [constant NODE_ELEMENT] nor [constant NODE_ELEMENT_END]."
          },
          {
            "return": {
              "type": "int"
            },
            "qualifiers": "const",
            "name": "get_node_offset",
            "description": "Gets the byte offset of the current node since the beginning of the file or buffer."
          },
          {
            "return": {
              "type": "int",
              "enum": "XMLParser.NodeType"
            },
            "name": "get_node_type",
            "description": "Gets the type of the current node. Compare with [enum NodeType] constants."
          },
          {
            "return": {
              "type": "bool"
            },
            "argument": {
              "name": "name",
              "type": "String",
              "index": "0"
            },
            "qualifiers": "const",
            "name": "has_attribute",
            "description": "Check whether the current element has a certain attribute."
          },
          {
            "return": {
              "type": "bool"
            },
            "qualifiers": "const",
            "name": "is_empty",
            "description": "Check whether the current element is empty (this only works for completely empty tags, e.g. [code]<element \\>[/code])."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "file",
              "type": "String",
              "index": "0"
            },
            "name": "open",
            "description": "Opens an XML file for parsing. This returns an error code."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "buffer",
              "type": "PoolByteArray",
              "index": "0"
            },
            "name": "open_buffer",
            "description": "Opens an XML raw buffer for parsing. This returns an error code."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "name": "read",
            "description": "Reads the next node of the file. This returns an error code."
          },
          {
            "return": {
              "type": "int",
              "enum": "Error"
            },
            "argument": {
              "name": "position",
              "type": "int",
              "index": "0"
            },
            "name": "seek",
            "description": "Moves the buffer cursor to a certain offset (since the beginning) and read the next node there. This returns an error code."
          },
          {
            "return": {
              "type": "void"
            },
            "name": "skip_section",
            "description": "Skips the current section. If the node contains other elements, they will be ignored and the cursor will go to the closing of the current element."
          }
        ]
      },
      "name": "XMLParser",
      "version": "3.3",
      "constants": {
        "constant": [
          {
            "value": "0",
            "name": "NODE_NONE",
            "enum": "NodeType"
          },
          {
            "value": "1",
            "name": "NODE_ELEMENT",
            "enum": "NodeType"
          },
          {
            "value": "2",
            "name": "NODE_ELEMENT_END",
            "enum": "NodeType"
          },
          {
            "value": "3",
            "name": "NODE_TEXT",
            "enum": "NodeType"
          },
          {
            "value": "4",
            "name": "NODE_COMMENT",
            "enum": "NodeType"
          },
          {
            "value": "5",
            "name": "NODE_CDATA",
            "enum": "NodeType"
          },
          {
            "value": "6",
            "name": "NODE_UNKNOWN",
            "enum": "NodeType"
          }
        ]
      },
      "brief_description": "Low-level class for creating parsers for [url=https://en.wikipedia.org/wiki/XML]XML[/url] files.",
      "description": "This class can serve as base to make custom XML parsers. Since XML is a very flexible standard, this interface is low-level so it can be applied to any possible schema."
    }
  },
  {
    "class": {
      "tutorials": {},
      "members": {
        "member": {
          "default": "true",
          "value": "If [code]true[/code], child nodes are sorted, otherwise sorting is disabled.",
          "setter": "set_sort_enabled",
          "name": "sort_enabled",
          "getter": "is_sort_enabled",
          "type": "bool"
        }
      },
      "inherits": "Node2D",
      "methods": {},
      "name": "YSort",
      "version": "3.3",
      "constants": {},
      "brief_description": "Sort all child nodes based on their Y positions.",
      "description": "Sort all child nodes based on their Y positions. The child node must inherit from [CanvasItem] for it to be sorted. Nodes that have a higher Y position will be drawn later, so they will appear on top of nodes that have a lower Y position.\n\t\tNesting of YSort nodes is possible. Children YSort nodes will be sorted in the same space as the parent YSort, allowing to better organize a scene or divide it in multiple ones, yet keep the unique sorting."
    }
  }
]
